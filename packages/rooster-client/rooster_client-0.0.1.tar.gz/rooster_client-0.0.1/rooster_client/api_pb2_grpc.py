# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

#import api_pb2 as api__pb2
from rooster_client import api_pb2

class DynInvStub(object):
    """tag::DynInv[]
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Inventory = channel.unary_stream(
                '/rooster.DynInv/Inventory',
                request_serializer=api__pb2.InventoryQuery.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.InventoryJson = channel.unary_stream(
                '/rooster.DynInv/InventoryJson',
                request_serializer=api__pb2.InventoryQuery.SerializeToString,
                response_deserializer=api__pb2.Raw.FromString,
                )
        self.CreateHost = channel.unary_unary(
                '/rooster.DynInv/CreateHost',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Host.FromString,
                )
        self.GetHosts = channel.unary_stream(
                '/rooster.DynInv/GetHosts',
                request_serializer=api__pb2.InventoryQuery.SerializeToString,
                response_deserializer=api__pb2.Host.FromString,
                )
        self.GetHost = channel.unary_unary(
                '/rooster.DynInv/GetHost',
                request_serializer=api__pb2.Host.SerializeToString,
                response_deserializer=api__pb2.Host.FromString,
                )
        self.ModifyHost = channel.unary_unary(
                '/rooster.DynInv/ModifyHost',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Host.FromString,
                )
        self.DeleteHost = channel.unary_unary(
                '/rooster.DynInv/DeleteHost',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Host.FromString,
                )
        self.RecoverHost = channel.unary_unary(
                '/rooster.DynInv/RecoverHost',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Host.FromString,
                )
        self.CreateGroup = channel.unary_unary(
                '/rooster.DynInv/CreateGroup',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.GetGroups = channel.unary_stream(
                '/rooster.DynInv/GetGroups',
                request_serializer=api__pb2.InventoryQuery.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/rooster.DynInv/GetGroup',
                request_serializer=api__pb2.Group.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.ModifyGroup = channel.unary_unary(
                '/rooster.DynInv/ModifyGroup',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/rooster.DynInv/DeleteGroup',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.RecoverGroup = channel.unary_unary(
                '/rooster.DynInv/RecoverGroup',
                request_serializer=api__pb2.Modify.SerializeToString,
                response_deserializer=api__pb2.Group.FromString,
                )
        self.CreateLabel = channel.unary_unary(
                '/rooster.DynInv/CreateLabel',
                request_serializer=api__pb2.Label.SerializeToString,
                response_deserializer=api__pb2.Label.FromString,
                )
        self.ModifyLabel = channel.unary_unary(
                '/rooster.DynInv/ModifyLabel',
                request_serializer=api__pb2.Label.SerializeToString,
                response_deserializer=api__pb2.Label.FromString,
                )
        self.GetLabel = channel.unary_unary(
                '/rooster.DynInv/GetLabel',
                request_serializer=api__pb2.Label.SerializeToString,
                response_deserializer=api__pb2.Label.FromString,
                )
        self.DeleteLabel = channel.unary_unary(
                '/rooster.DynInv/DeleteLabel',
                request_serializer=api__pb2.Label.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )
        self.GetLabels = channel.unary_stream(
                '/rooster.DynInv/GetLabels',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.Label.FromString,
                )
        self.Ping = channel.unary_unary(
                '/rooster.DynInv/Ping',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )


class DynInvServicer(object):
    """tag::DynInv[]
    """

    def Inventory(self, request, context):
        """tag::Inventory[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InventoryJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateHost(self, request, context):
        """tag::CreateHost[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHosts(self, request, context):
        """tag::GetHosts[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHost(self, request, context):
        """tag::GetHost[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyHost(self, request, context):
        """tag::ModifyHost[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteHost(self, request, context):
        """tag::DeleteHost[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverHost(self, request, context):
        """tag::RecoverHost[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """tag::CreateGroup[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroups(self, request, context):
        """tag::GetGroups[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """tag::GetGroup[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyGroup(self, request, context):
        """tag::ModifyGroup[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """tag::DeleteGroup[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverGroup(self, request, context):
        """tag::RecoverGroup[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """tag::Ping[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DynInvServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Inventory': grpc.unary_stream_rpc_method_handler(
                    servicer.Inventory,
                    request_deserializer=api__pb2.InventoryQuery.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'InventoryJson': grpc.unary_stream_rpc_method_handler(
                    servicer.InventoryJson,
                    request_deserializer=api__pb2.InventoryQuery.FromString,
                    response_serializer=api__pb2.Raw.SerializeToString,
            ),
            'CreateHost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHost,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Host.SerializeToString,
            ),
            'GetHosts': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHosts,
                    request_deserializer=api__pb2.InventoryQuery.FromString,
                    response_serializer=api__pb2.Host.SerializeToString,
            ),
            'GetHost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHost,
                    request_deserializer=api__pb2.Host.FromString,
                    response_serializer=api__pb2.Host.SerializeToString,
            ),
            'ModifyHost': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyHost,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Host.SerializeToString,
            ),
            'DeleteHost': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteHost,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Host.SerializeToString,
            ),
            'RecoverHost': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverHost,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Host.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'GetGroups': grpc.unary_stream_rpc_method_handler(
                    servicer.GetGroups,
                    request_deserializer=api__pb2.InventoryQuery.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=api__pb2.Group.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'ModifyGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyGroup,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'RecoverGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverGroup,
                    request_deserializer=api__pb2.Modify.FromString,
                    response_serializer=api__pb2.Group.SerializeToString,
            ),
            'CreateLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLabel,
                    request_deserializer=api__pb2.Label.FromString,
                    response_serializer=api__pb2.Label.SerializeToString,
            ),
            'ModifyLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyLabel,
                    request_deserializer=api__pb2.Label.FromString,
                    response_serializer=api__pb2.Label.SerializeToString,
            ),
            'GetLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabel,
                    request_deserializer=api__pb2.Label.FromString,
                    response_serializer=api__pb2.Label.SerializeToString,
            ),
            'DeleteLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLabel,
                    request_deserializer=api__pb2.Label.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'GetLabels': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLabels,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.Label.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rooster.DynInv', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DynInv(object):
    """tag::DynInv[]
    """

    @staticmethod
    def Inventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rooster.DynInv/Inventory',
            api__pb2.InventoryQuery.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InventoryJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rooster.DynInv/InventoryJson',
            api__pb2.InventoryQuery.SerializeToString,
            api__pb2.Raw.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/CreateHost',
            api__pb2.Modify.SerializeToString,
            api__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rooster.DynInv/GetHosts',
            api__pb2.InventoryQuery.SerializeToString,
            api__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/GetHost',
            api__pb2.Host.SerializeToString,
            api__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/ModifyHost',
            api__pb2.Modify.SerializeToString,
            api__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/DeleteHost',
            api__pb2.Modify.SerializeToString,
            api__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/RecoverHost',
            api__pb2.Modify.SerializeToString,
            api__pb2.Host.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/CreateGroup',
            api__pb2.Modify.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rooster.DynInv/GetGroups',
            api__pb2.InventoryQuery.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/GetGroup',
            api__pb2.Group.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/ModifyGroup',
            api__pb2.Modify.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/DeleteGroup',
            api__pb2.Modify.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/RecoverGroup',
            api__pb2.Modify.SerializeToString,
            api__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/CreateLabel',
            api__pb2.Label.SerializeToString,
            api__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/ModifyLabel',
            api__pb2.Label.SerializeToString,
            api__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/GetLabel',
            api__pb2.Label.SerializeToString,
            api__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/DeleteLabel',
            api__pb2.Label.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rooster.DynInv/GetLabels',
            api__pb2.Empty.SerializeToString,
            api__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rooster.DynInv/Ping',
            api__pb2.Empty.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
