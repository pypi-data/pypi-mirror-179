# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Parameters of the runCalculationPipeline function
class Misc_RunCalculationPipelineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMisc_RunCalculationPipelineData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_RunCalculationPipelineData()
        x.Init(buf, n + offset)
        return x

    # Misc_RunCalculationPipelineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_RunCalculationPipelineData
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_RunCalculationPipelineData
    def PipelineName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_RunCalculationPipelineData
    def CmdMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Misc_RunCalculationPipelineData
    def MasterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_RunCalculationPipelineData
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Misc_RunCalculationPipelineData
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # Misc_RunCalculationPipelineData
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Misc_RunCalculationPipelineData
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def Misc_RunCalculationPipelineDataStart(builder): builder.StartObject(5)
def Misc_RunCalculationPipelineDataAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def Misc_RunCalculationPipelineDataAddPipelineName(builder, pipelineName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pipelineName), 0)
def Misc_RunCalculationPipelineDataAddCmdMode(builder, cmdMode): builder.PrependInt8Slot(2, cmdMode, 0)
def Misc_RunCalculationPipelineDataAddMasterName(builder, masterName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(masterName), 0)
def Misc_RunCalculationPipelineDataAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def Misc_RunCalculationPipelineDataStartInputsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def Misc_RunCalculationPipelineDataEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class Misc_RunCalculationPipelineDataT(object):

    # Misc_RunCalculationPipelineDataT
    def __init__(self):
        self.axsName = None  # type: str
        self.pipelineName = None  # type: str
        self.cmdMode = 0  # type: int
        self.masterName = None  # type: str
        self.inputs = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscRunCalculationPipelineData = Misc_RunCalculationPipelineData()
        miscRunCalculationPipelineData.Init(buf, pos)
        return cls.InitFromObj(miscRunCalculationPipelineData)

    @classmethod
    def InitFromObj(cls, miscRunCalculationPipelineData):
        x = Misc_RunCalculationPipelineDataT()
        x._UnPack(miscRunCalculationPipelineData)
        return x

    # Misc_RunCalculationPipelineDataT
    def _UnPack(self, miscRunCalculationPipelineData):
        if miscRunCalculationPipelineData is None:
            return
        self.axsName = miscRunCalculationPipelineData.AxsName()
        self.pipelineName = miscRunCalculationPipelineData.PipelineName()
        self.cmdMode = miscRunCalculationPipelineData.CmdMode()
        self.masterName = miscRunCalculationPipelineData.MasterName()
        if not miscRunCalculationPipelineData.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(miscRunCalculationPipelineData.InputsLength()):
                    self.inputs.append(miscRunCalculationPipelineData.Inputs(i))
            else:
                self.inputs = miscRunCalculationPipelineData.InputsAsNumpy()

    # Misc_RunCalculationPipelineDataT
    def Pack(self, builder):
        if self.axsName is not None:
            axsName = builder.CreateString(self.axsName)
        if self.pipelineName is not None:
            pipelineName = builder.CreateString(self.pipelineName)
        if self.masterName is not None:
            masterName = builder.CreateString(self.masterName)
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                Misc_RunCalculationPipelineDataStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependFloat64(self.inputs[i])
                inputs = builder.EndVector(len(self.inputs))
        Misc_RunCalculationPipelineDataStart(builder)
        if self.axsName is not None:
            Misc_RunCalculationPipelineDataAddAxsName(builder, axsName)
        if self.pipelineName is not None:
            Misc_RunCalculationPipelineDataAddPipelineName(builder, pipelineName)
        Misc_RunCalculationPipelineDataAddCmdMode(builder, self.cmdMode)
        if self.masterName is not None:
            Misc_RunCalculationPipelineDataAddMasterName(builder, masterName)
        if self.inputs is not None:
            Misc_RunCalculationPipelineDataAddInputs(builder, inputs)
        miscRunCalculationPipelineData = Misc_RunCalculationPipelineDataEnd(builder)
        return miscRunCalculationPipelineData
