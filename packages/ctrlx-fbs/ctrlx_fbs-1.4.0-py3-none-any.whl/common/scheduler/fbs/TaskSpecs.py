# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TaskSpecs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskSpecs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskSpecs()
        x.Init(buf, n + offset)
        return x

    # TaskSpecs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # task name to link callables together within a task, e.g. "ctrlXAutomation" or "gppServices"
    # TaskSpecs
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # task priority as well defined digit or range, e.g. "40" or "mid" to runs with medium priority
    # TaskSpecs
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # describes required task properties, e.g. "cyclic/ms/10" to runs cyclic every 10 millisecons
    # TaskSpecs
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TaskSpecsStart(builder): builder.StartObject(3)
def TaskSpecsAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def TaskSpecsAddPriority(builder, priority): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)
def TaskSpecsAddType(builder, type): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def TaskSpecsEnd(builder): return builder.EndObject()


class TaskSpecsT(object):

    # TaskSpecsT
    def __init__(self):
        self.name = None  # type: str
        self.priority = None  # type: str
        self.type = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        taskSpecs = TaskSpecs()
        taskSpecs.Init(buf, pos)
        return cls.InitFromObj(taskSpecs)

    @classmethod
    def InitFromObj(cls, taskSpecs):
        x = TaskSpecsT()
        x._UnPack(taskSpecs)
        return x

    # TaskSpecsT
    def _UnPack(self, taskSpecs):
        if taskSpecs is None:
            return
        self.name = taskSpecs.Name()
        self.priority = taskSpecs.Priority()
        self.type = taskSpecs.Type()

    # TaskSpecsT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.priority is not None:
            priority = builder.CreateString(self.priority)
        if self.type is not None:
            type = builder.CreateString(self.type)
        TaskSpecsStart(builder)
        if self.name is not None:
            TaskSpecsAddName(builder, name)
        if self.priority is not None:
            TaskSpecsAddPriority(builder, priority)
        if self.type is not None:
            TaskSpecsAddType(builder, type)
        taskSpecs = TaskSpecsEnd(builder)
        return taskSpecs
