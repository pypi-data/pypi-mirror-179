# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Duration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDuration(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Duration()
        x.Init(buf, n + offset)
        return x

    # Duration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Duration
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Duration
    def ErrorCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Duration
    def Reset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Duration
    def ErrorReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.watchdog.fbs.ErrorReaction import ErrorReaction
            obj = ErrorReaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DurationStart(builder): builder.StartObject(4)
def DurationAddTime(builder, time): builder.PrependUint32Slot(0, time, 0)
def DurationAddErrorCount(builder, errorCount): builder.PrependUint32Slot(1, errorCount, 0)
def DurationAddReset(builder, reset): builder.PrependBoolSlot(2, reset, 0)
def DurationAddErrorReaction(builder, errorReaction): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(errorReaction), 0)
def DurationEnd(builder): return builder.EndObject()

import common.scheduler.watchdog.fbs.ErrorReaction
try:
    from typing import Optional
except:
    pass

class DurationT(object):

    # DurationT
    def __init__(self):
        self.time = 0  # type: int
        self.errorCount = 0  # type: int
        self.reset = False  # type: bool
        self.errorReaction = None  # type: Optional[common.scheduler.watchdog.fbs.ErrorReaction.ErrorReactionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        duration = Duration()
        duration.Init(buf, pos)
        return cls.InitFromObj(duration)

    @classmethod
    def InitFromObj(cls, duration):
        x = DurationT()
        x._UnPack(duration)
        return x

    # DurationT
    def _UnPack(self, duration):
        if duration is None:
            return
        self.time = duration.Time()
        self.errorCount = duration.ErrorCount()
        self.reset = duration.Reset()
        if duration.ErrorReaction() is not None:
            self.errorReaction = common.scheduler.watchdog.fbs.ErrorReaction.ErrorReactionT.InitFromObj(duration.ErrorReaction())

    # DurationT
    def Pack(self, builder):
        if self.errorReaction is not None:
            errorReaction = self.errorReaction.Pack(builder)
        DurationStart(builder)
        DurationAddTime(builder, self.time)
        DurationAddErrorCount(builder, self.errorCount)
        DurationAddReset(builder, self.reset)
        if self.errorReaction is not None:
            DurationAddErrorReaction(builder, errorReaction)
        duration = DurationEnd(builder)
        return duration
