# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/00_tests/utils/tst.test_exporter.ipynb.

# %% auto 0
__all__ = ['nb_fn', 'tests', 'outputs_fn', 'outputs', 'nb_fn2', 'outputs2', 'to_output', 'test_to_output', 'test_test_exporter',
           'test_test_merger', 'test_test_merger_diff', 'test_write_test_nb', 'test_export_nb_tests',
           'test_export_nb_tests2', 'test_get_ipynb_paths', 'test_build_test_nb', 'test_extract_outputs',
           'test_extract_and_write_outputs', 'test_extract_and_write_outputs2', 'test_freeze', 'test_write_frozen_nb',
           'test_un_freeze', 'test_write_unfrozen_nb', 'test_store_frozen', 'test_freeze_all', 'test_store_unfrozen',
           'test_unfreeze_all']

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 2
from dsblocks.utils.test_exporter import *

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 3
from execnb.nbio import read_nb, write_nb, new_nb, mk_cell
from nbdev.config import *
from nbdev.maker import *
from nbdev.imports import *
from nbdev.process import *
from nbdev.processors import *
from nbdev.processors import _default_exp

import pprint
import shutil
from pathlib import Path
import shutil

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 4
def to_output (nb_fn):
    nb_fn_output = Path(str(nb_fn).replace ('/input/', '/output/'))
    nb_fn_output.parent.mkdir (parents=True, exist_ok=True)
    shutil.copy (nb_fn, nb_fn_output)
    return str(nb_fn_output)

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 5
nb_fn = 'data/test_data/input/nbs/core/export_tests.ipynb'
tests = TestExporter()
apply_nb_processor (nb_fn, tests, rm_directives=True, nb_out=False)

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 6
shutil.rmtree ('data/test_data/output_to_build_test', ignore_errors=True)
shutil.copytree ('data/test_data/input', 'data/test_data/output_to_build_test')

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 7
nb_fn = Path (to_output ('data/test_data/input/nbs/core/export_tests.ipynb'))
outputs_fn = Path ('data/test_data/output/.nb_output/core/export_tests_outputs.json')
outputs_fn.parent.mkdir (parents=True, exist_ok=True)
if outputs_fn.exists(): outputs_fn.unlink()

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 8
outputs = extract_and_write_outputs (nb_fn, outputs_fn)

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 9
outputs = extract_and_write_outputs (nb_fn, outputs_fn)

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 10
nb_fn2 = Path(to_output ('data/test_data/input/nbs/core/export_tests_added.ipynb'))
outputs2 = extract_and_write_outputs (nb_fn2, outputs_fn)

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 11
shutil.rmtree ('data/test_data/output_to_freeze', ignore_errors=True)
shutil.copytree ('data/test_data/input', 'data/test_data/output_to_freeze')

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 12
shutil.rmtree ('data/test_data/output_to_unfreeze', ignore_errors=True)
shutil.copytree ('data/test_data/frozen_input', 'data/test_data/output_to_unfreeze')

# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 13
def test_to_output ():
    to_output ('data/test_data/input/nbs/core/export_tests.ipynb')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 14
def test_test_exporter ():
    nb_fn = 'data/test_data/input/nbs/core/export_tests.ipynb'
    tests = TestExporter()
    apply_nb_processor (nb_fn, tests, rm_directives=True, nb_out=False)
    
    print ('Tests function built:')
    print (tests.tests['add_x_y'])
    
    print ('Imports needed by test code:')
    print (tests.imports)


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 15
def test_test_merger ():
    test_fn = 'data/test_data/input/nbs/00_tests/core/tst.export_tests_same.ipynb'
    test_merger = TestMerger(tests)
    apply_nb_processor (test_fn, test_merger, rm_directives=True, nb_out=False)
    
    assert test_merger.merge_status == 'found add_x_y'


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 16
def test_test_merger_diff ():
    test_fn = 'data/test_data/input/nbs/00_tests/core/tst.export_tests_diff.ipynb'
    test_merger = TestMerger(tests)
    apply_nb_processor (test_fn, test_merger, rm_directives=True, nb_out=False)
    assert test_merger.merge_status == 'overwrite with new add_x_y'


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 17
def test_write_test_nb ():
    nb_fn = to_output ('data/test_data/input/nbs/core/export_tests.ipynb')
    nb = read_nb (nb_fn)
    default_exp = _default_exp (nb)
    nb2 = write_test_nb (tests, default_exp, nb_fn, 'mylib',
                        get_config()['nbs_path'], meta=nb['metadata'])
    nb2


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 18
def test_export_nb_tests ():
    nb_fn = to_output ('data/test_data/input/nbs/core/export_tests.ipynb')
    export_nb_tests (nb_fn, lib_path='mylib')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 19
def test_export_nb_tests2 ():
    nb_fn = to_output ('data/test_data/input/nbs/core/export_tests2.ipynb')
    export_nb_tests (nb_fn, lib_path='mylib')
    nb_fn = to_output ('data/test_data/input/nbs/core/export_tests_with_header.ipynb')
    export_nb_tests (nb_fn, lib_path='mylib')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 20
def test_get_ipynb_paths ():
    get_ipynb_paths ()


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 21
def test_build_test_nb ():
    build_test_nb (nbs_path='data/test_data/output_to_build_test/nbs')
    shutil.rmtree ('data/test_data/output_to_build_test')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 22
def test_extract_outputs ():
    nb_fn = to_output ('data/test_data/input/nbs/core/export_tests.ipynb')
    outputs = extract_outputs (nb_fn)
    pprint.pprint (outputs)


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 23
def test_extract_and_write_outputs ():
    outputs = extract_and_write_outputs (nb_fn, outputs_fn)
    assert outputs_fn.exists()
    pprint.pprint (outputs)
    outputs_fn.unlink ()


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 24
def test_extract_and_write_outputs2 ():
    # We simulate the case where more tests have been written
    nb_fn2 = Path(to_output ('data/test_data/input/nbs/core/export_tests_added.ipynb'))
    
    # We merge
    outputs2 = extract_and_write_outputs (nb_fn2, outputs_fn)
    
    # We see that the output is good
    assert outputs2['add_x_y'][0] == outputs['add_x_y'][0] 
    assert outputs2['add_x_y'][2] != outputs['add_x_y'][0] 
    assert 'multiply_x_y' in outputs2
    pprint.pprint (outputs2)
    outputs_fn.unlink()


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 25
def test_freeze ():
    freeze = Freeze (outputs)
    nb = apply_nb_processor (nb_fn, freeze)
    write_nb (nb, 'data/test_data/output/nbs/core/nb_frozen.ipynb')
    freeze = Freeze (outputs, type_freeze='markdown')
    nb = apply_nb_processor (nb_fn, freeze)
    write_nb (nb, 'data/test_data/output/nbs/core/nb_frozen_markdown.ipynb')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 26
def test_write_frozen_nb ():
    frozen_fn = 'data/test_data/output/nbs/core/nb_frozen2.ipynb'
    write_frozen_nb (nb_fn, frozen_fn)
    nb_header_fn = 'data/test_data/input/nbs/core/export_tests_with_header.ipynb'
    frozen_fn = 'data/test_data/output/nbs/core/export_tests_with_header_frozen.ipynb'
    write_frozen_nb (nb_header_fn, frozen_fn)


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 27
def test_un_freeze ():
    un_freeze = UnFreeze (outputs2)
    nb = apply_nb_processor (nb_fn2, un_freeze)
    write_nb (nb, 'data/test_data/output/nbs/core/nb_unfrozen.ipynb')
    un_freeze = UnFreeze (outputs)
    nb_fn_frozen = 'data/test_data/frozen_input_without_extracted_output/nbs/core/nb_frozen_markdown.ipynb'
    nb = apply_nb_processor (nb_fn_frozen, un_freeze)
    write_nb (nb, 'data/test_data/output/nbs/core/nb_frozen_markdown_unfrozen.ipynb')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 28
def test_write_unfrozen_nb ():
    outputs_fn='data/test_data/output/.nb_outputs/core/export_tests_added.json'
    outputs = extract_and_write_outputs (nb_fn2, outputs_fn)
    frozen_fn2 = 'data/test_data/output/nbs/core/nb_frozen2.ipynb'
    write_frozen_nb (nb_fn2, frozen_fn2)
    write_unfrozen_nb (frozen_fn2, 'data/test_data/output/nbs/core/nb_unfrozen2c.ipynb', outputs_fn=outputs_fn)


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 29
def test_store_frozen ():
    store_frozen (nb_fn2)


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 30
def test_freeze_all ():
    freeze_all (nbs_path='data/test_data/output_to_freeze/nbs')
    shutil.rmtree ('data/test_data/output_to_freeze')


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 31
def test_store_unfrozen ():
    store_unfrozen (nb_fn2)


# %% ../../../nbs/00_tests/utils/tst.test_exporter.ipynb 32
def test_unfreeze_all ():
    unfreeze_all (nbs_path='data/test_data/output_to_unfreeze/nbs')
    shutil.rmtree ('data/test_data/output_to_unfreeze')

