# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/00_tests/core/tst.utils.ipynb.

# %% auto 0
__all__ = ['dummy_component', 'X', 'DummyComponent', 'f', 'MyTransformComparator', 'test_data_io_folder',
           'test_data_io_full_path', 'test_data_io_chaining', 'test_memory_io', 'test_memory_io_wrapper',
           'test_data_io_factory', 'test_profiler', 'test_comparator', 'test_compare', 'test_comparator2',
           'test_get_component_hierarchy', 'test_get_tree_defaults', 'test_ds_experiment_manager']

# %% ../../../nbs/00_tests/core/tst.utils.ipynb 2
from dsblocks.core.utils import *

# %% ../../../nbs/00_tests/core/tst.utils.ipynb 3
import pytest 
import os
import joblib
from IPython.display import display
import pandas as pd
import numpy as np
import time
from pathlib import Path

from dsblocks.core.utils import *
from dsblocks.utils.utils import remove_previous_results
import dsblocks.config.bt_defaults as dflt
from dsblocks.core.components import Component
from dsblocks.core.compose import MultiComponent
from dsblocks.core.components import Component
from dsblocks.utils.utils import check_last_part 
import os
from dsblocks.core.compose import Sequential
import inspect
from hpsearch.utils.experiment_utils import read_df


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 4
class DummyComponent:
    def __init__ (self, **kwargs):
        self.name = 'my_component'
    def obtain_config_params (self, **kwargs):
        return kwargs

dummy_component = DummyComponent ()

# %% ../../../nbs/00_tests/core/tst.utils.ipynb 5
def f (x): return x+1
X = np.array([1,2,3])

# %% ../../../nbs/00_tests/core/tst.utils.ipynb 6
class MyTransformComparator ():
    def __init__ (self, noise=1e-10, different = False, **kwargs):
        self.noise = noise
        self.different = different
        self.name = 'mine'
        self.logger = None
        self.data_io = None

    def _generate_noise (self):
        while True:
            noise = np.random.rand() * self.noise
            if noise > self.noise/10:
                break
        return noise

    def __call__ (self):
        df = pd.DataFrame ([[1.0,2.0],[3.0,4.0]], columns=['a','b']) + self._generate_noise ()
        if self.different:
            df = df+10
        x = np.array([[10.0,20.0],[30.0,40.0]]) + self._generate_noise ()
        result = dict(sequence=[[1.0,2.0], x+1, dict(vector=x, data=df)],
                      array=x+10)
        return result

# %% ../../../nbs/00_tests/core/tst.utils.ipynb 7
def test_data_io_folder ():
    d = DataIO (component=dummy_component)
    assert d.folder==''
    
    assert d.get_path_result_file () is None 
    assert d.get_path_model_file () is None 
    
    d = DataIO (component=dummy_component, 
            path_results ='/path/to/results',
            path_models='/other_path/example')
    assert d.get_path_result_file () == Path('/path/to/results/whole/my_component_result.pk')
    
    assert d.get_path_model_file () == Path('/other_path/example/models/my_component_estimator.pk')
    
    d.folder = 'my_folder'
    assert d.get_path_result_file () == Path('/path/to/results/my_folder/whole/my_component_result.pk')
    assert d.get_path_model_file () == Path('/other_path/example/my_folder/models/my_component_estimator.pk')
    
    d.models_folder = ''
    assert d.get_path_model_file () == Path('/other_path/example/my_folder/my_component_estimator.pk')
    
    d.folder = ''
    assert d.get_path_model_file () == Path('/other_path/example/my_component_estimator.pk')
    assert d.get_path_result_file () == Path('/path/to/results/whole/my_component_result.pk')
    
    d.split=''
    assert d.get_path_result_file () == Path('/path/to/results/my_component_result.pk')
    
    d.path_results = d.path_results / 'another_folder'
    assert d.get_path_result_file () == Path('/path/to/results/another_folder/my_component_result.pk')
    assert d.get_path_model_file () == Path('/other_path/example/my_component_estimator.pk')


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 8
def test_data_io_full_path ():
    d = DataIO (component=dummy_component)
    d.set_full_path_results ('/path/to/results/myfile.pk')
    assert d.get_path_result_file () == Path('/path/to/results/myfile.pk')
    assert d.component.path_results == Path('/path/to/results')
    assert d.result_file_name == 'myfile.pk'
    
    d.set_full_path_models ('/other_path/to/models/mymodel.h5')
    assert d.get_path_model_file () == Path('/other_path/to/models/mymodel.h5')
    assert d.component.path_models == Path('/other_path/to/models')
    assert d.get_path_result_file () == Path('/path/to/results/myfile.pk')
    assert d.fitting_file_name=='mymodel.h5'


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 9
def test_data_io_chaining ():
    d = DataIO (component=dummy_component)
    d.chain_folders ('first')
    assert d.folder=='first'
    d.chain_folders ('second')
    assert d.folder=='second/first'
    d.chain_folders ('third')
    assert d.folder=='third/second/first'
    
    d.folder
    
    d.chain_folders ('')
    assert d.folder=='third/second/first'
    
    d = DataIO (component=dummy_component)
    d.chain_folders ('')
    assert d.folder==''
    
    d = DataIO (component=dummy_component, folder='new')
    d.chain_folders ('')
    assert d.folder=='new'
    d.chain_folders ('other')
    assert d.folder=='other/new'
    
    d = DataIO (component=dummy_component, folder='new',
                path_results ='/path/to/results',
                path_models='/other_path/example')
    d.chain_folders ('other')
    
    assert d.get_path_result_file () == Path('/path/to/results/other/new/whole/my_component_result.pk')
    
    assert d.get_path_model_file () == Path('/other_path/example/other/new/models/my_component_estimator.pk')
    
    d = DataIO (component=dummy_component, folder='__class__',
                path_results ='/path/to/results',
                path_models='/other_path/example')
    d.chain_folders ('other')
    assert d.folder == 'other/my_component'


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 10
def test_memory_io ():
    c = Component (f, data_io=MemoryIO, path_results='memory')
    
    r=c.apply (X)
    assert r.tolist()==[2,3,4]
    
    # check that result has been saved
    path=list(c.data_io.storage.keys())[0]
    check_last_part (path, 'memory/whole/f_result.pk')
    
    # check that result is loaded
    c.error_if_result_not_loaded=True
    r2=c.apply (X)
    assert r2.tolist()==[2,3,4]
    
    assert 'memory' not in os.listdir ('.')


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 11
def test_memory_io_wrapper ():
    c = Component (f, path_results='memory_io_no_wrapper')
    r=c.apply (X)
    
    # check that result is saved, but not in memory, if memory parameter not set to True
    assert c.data_io.memory_io is None
    assert os.path.exists ('memory_io_no_wrapper/whole/f_result.pk')
    remove_previous_results ('memory_io_no_wrapper')
    c = Component (f, path_results='memory_io_wrapper', memory=True)
    r=c.apply (X)
    
    # check that result is saved both in memory and disk
    path=list(c.data_io.memory_io.storage.keys())[0]
    check_last_part (path, 'memory_io_wrapper/whole/f_result.pk')
    assert os.path.exists ('memory_io_wrapper/whole/f_result.pk')
    # check that result is loaded
    c.error_if_result_not_loaded=True
    r2=c.apply (X)
    assert r2.tolist()==[2,3,4]
    # check that we first load result from memory, if exists
    c.data_io.memory_io.save_result (np.array([20,30,40]))
    r2=c.apply (X)
    assert r2.tolist()==[20,30,40]
    # check that we load result although no longer found in disk
    os.rename ('memory_io_wrapper', 'other_name_memory_io_wrapper')
    r2=c.apply (X)
    assert r2.tolist()==[20,30,40]
    # check that we load result although no longer in memory (but back in disk)
    c.data_io.memory_io.storage={}
    os.rename ('other_name_memory_io_wrapper', 'memory_io_wrapper')
    r2=c.apply (X)
    assert r2.tolist()==[2,3,4]
    # check that we cannot load result if not in memory or disk
    remove_previous_results ('memory_io_wrapper')
    with pytest.raises (RuntimeError):
        r2=c.apply (X)


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 12
def test_data_io_factory ():
    data_io = data_io_factory ('NoSaverIO', force_save=False, save=True)
    assert type(data_io) is NoSaverIO
    assert data_io.save_flag is False
    
    data_io = data_io_factory ('NoSaverIO', force_save=True, save=True)
    assert type(data_io) is NoSaverIO
    assert data_io.save_flag is True


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 13
def test_profiler ():
    class A():
        def __init__ (self, name='comp_a', time=1, hierarchy_level=0, **kwargs):
            self.name = name
            self.time = time
            self.hierarchy_level = hierarchy_level
            self.profiler = Profiler (self, **kwargs)
        def apply (self, split='test', method='apply'):
            self.profiler.start_timer ()
            self.profiler.start_no_overhead_timer ()
            time.sleep(self.time)
            self.profiler.finish_no_overhead_timer (method, split)
            time.sleep(self.time/10)
            self.profiler.finish_timer (method, split)
        def fit (self, split='training', method='fit'):
            self.profiler.start_timer ()
            self.profiler.start_no_overhead_timer ()
            time.sleep(self.time*2)
            self.profiler.finish_no_overhead_timer (method, split)
            time.sleep(self.time/10)
            self.profiler.finish_timer (method, split)
    
    a = A(name='comp_a', time=0.25)
    a.fit ()
    a.apply ()
    display(a.profiler.times['sum'])
    
    #assert np.floor(a.profiler.times.sum.loc['fit','training']*10)==5 and np.floor(a.profiler.times.sum.loc['apply','test']*100)==28
    assert a.profiler.times.number.loc['fit','training']==1.0 and a.profiler.times.number.loc['apply','test']==1.0
    
    a.apply ()
    
    #assert np.floor(a.profiler.times.sum.loc['fit','training']*10)==5 and np.floor(a.profiler.times.sum.loc['apply','test']*100)==55
    assert a.profiler.times.number.loc['fit','training']==1.0 and a.profiler.times.number.loc['apply','test']==2.0
    assert np.isnan(a.profiler.times.number.loc['fit','test']) and np.isnan(a.profiler.times.number.loc['apply','training'])
    
    df = a.profiler.retrieve_times(is_leaf=True)
    
    #assert float(np.floor(df.avg.loc[:,('test','apply')]*100))==27
    
    #assert float(np.floor(df.sum.loc[:,('test','apply')]*100))==55
    
    assert ((df.max >= df.min) | df.max.isna()).all().all()
    
    assert (df.max.loc[:,('test','apply')] > df.min.loc[:,('test','apply')]).all()
    
    b = A(name='comp_b', time=0.30)
    b.apply (split='validation', method='fit_apply')
    b.fit ()
    
    df = a.profiler.retrieve_times(is_leaf=True)
    df2 = b.profiler.retrieve_times(is_leaf=True)
    dfd = b.profiler.combine_times ([df, df2])
    display(dfd.avg)
    
    assert dfd.avg.shape==(2,8)
    assert (dfd.avg.index.get_level_values(0)==[0,0]).all()
    assert (dfd.avg.index.get_level_values(1)==['comp_a', 'comp_b']).all()


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 14
def test_comparator ():
    tr = MyTransformComparator ()
    tr2= MyTransformComparator ()
    comp = Comparator (tr)
    result = comp.compare (tr(), tr2())
    assert len(result)==0
    
    tr2= MyTransformComparator (different=True)
    result = comp.compare (tr(), tr2())
    print (result)
    assert len(result)>0
    
    tr2= MyTransformComparator (noise=1e-10)
    result = comp.compare (tr(), tr2())
    assert len(result)==0
    
    tr2= MyTransformComparator (noise=1e-1)
    result = comp.compare (tr(), tr2())
    print(result)
    assert len(result)>0


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 15
def test_compare ():
    tr = MyTransformComparator ()
    tr2= MyTransformComparator ()
    result = compare (tr(), tr2())
    assert len(result)==0


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 16
def test_comparator2 ():
    comp = Comparator ()
    X = np.array([1,2,3])
    Y = np.array([1,2,3])
    comp.assert_equal (X, Y)
    
    #os.makedirs ('test_comparator2')
    #joblib.dump (X, 'test_comparator2/res1.pk')
    #joblib.dump (Y, 'test_comparator2/res1.pk')
    comp.assert_equal (X, Y, data_io='PickleIO', name='res')


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 17
def test_get_component_hierarchy ():
    internal_classes, external_classes = get_component_hierarchy (Sequential ())
    internal_classes
    assert external_classes == set()
    assert set(y.__name__ for y in internal_classes)=={'Component', 'MultiComponent', 'Pipeline', 'SamplingComponent'}


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 18
def test_get_tree_defaults ():
    class C1 (Component):
        def __init__ (self, c1a=1, c1b=2, **kwargs):
            super ().__init__ (**kwargs)
        def _fit (self, X, y=None, c1fit='yes'):
            pass
        def _apply (self, X, c1apply='no'):
            return X
    
    class C2 (Component):
        def __init__ (self, c2a=10, c2b=20, c2c=30, **kwargs):
            super ().__init__ (**kwargs)
        def _fit (self, X, y=None, c2fit='c2fit'):
            pass
        def _apply (self, X, c2apply='c2apply'):
            return X
    
    class MC (MultiComponent):
        def __init__ (self, mca=100, mcb=200, mcc=300, **kwargs):
            super().__init__ (C1, C2, **kwargs)
            pass
        def _fit (self, X, y=None, mcfit=1.1):
            pass
        def _apply (self, X, mcapply=1.2):
            return X
    
    c = MC (3)
    defaults = get_tree_defaults (c)
    
    assert defaults=={'mca': 100,
         'mcb': 200,
         'mcc': 300,
         'y': None,
         'mcfit': 1.1,
         'mcapply': 1.2,
         'c1a': 1,
         'c1b': 2,
         'c1fit': 'yes',
         'c1apply': 'no',
         'c2a': 10,
         'c2b': 20,
         'c2c': 30,
         'c2fit': 'c2fit',
         'c2apply': 'c2apply'}


# %% ../../../nbs/00_tests/core/tst.utils.ipynb 19
def test_ds_experiment_manager ():
    class Dummy ():
        def __init__ (self, path_results, name, **kwargs):
            self.path_results = path_results
            self.name = name
            self.x = kwargs.get('x',0)
            self.__stored_args__ = {}
            self.tracker = get_ds_experiment_manager (self, include={'x','a'}, **kwargs)
        def apply (self, *X, a=0, **kwargs):
            return dict (y=self.x+a)
        def set_path_results (self, path_results):
            self.path_results = path_results
            self.path_models = path_results
        def set_path_models (self, path_results):
            self.path_models = path_results
            self.path_results = path_results
    
    os.makedirs ('test_ds_em', exist_ok=True)
    # by passing x=2 to the constructor, we track x as parameter of the experiments
    dummy = Dummy (Path('test_ds_em'), 'dummy_ds_em', x=2)
    dummy.tracker.apply ()
    
    # check contents of stored experiment data 
    df = read_df ('test_ds_em/dummy_ds_em')
    df
    # check parameters 
    assert ('parameters','x','') in df.columns
    assert ('parameters','a','') not in df.columns
    # We can add new parameters both from constructing 
    dummy.tracker.apply (a=3)
    df = read_df ('test_ds_em/dummy_ds_em')
    df
    # Now `a` is a tracked parameter
    assert ('parameters','x','') in df.columns
    assert ('parameters','a','') in df.columns
    assert all(df[('scores','y',0)].values==[2,5])
    dummy.tracker.apply (a=3)
    df = read_df ('test_ds_em/dummy_ds_em')
    assert df.shape==(2,6)
    dummy.tracker.apply (a=3, run_number=None)
    df = read_df ('test_ds_em/dummy_ds_em')
    df
    assert df.shape==(2,10)
    dummy = Dummy (Path('test_ds_em'), 'dummy_ds_em', x=4)
    dummy.tracker.apply (a=3)
    df = read_df ('test_ds_em/dummy_ds_em')
    df
    assert all(df[('scores','y',0)].values==[2,5,7])
    remove_previous_results ('test_ds_em')

