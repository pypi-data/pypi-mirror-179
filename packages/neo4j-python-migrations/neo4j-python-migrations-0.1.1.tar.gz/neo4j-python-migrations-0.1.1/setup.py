# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['neo4j_python_migrations']

package_data = \
{'': ['*']}

install_requires = \
['attr>=0.3.2,<0.4.0',
 'neo4j>=5.1.0,<6.0.0',
 'typer>=0.6.1,<0.7.0',
 'yarl>=1.8.1,<2.0.0']

setup_kwargs = {
    'name': 'neo4j-python-migrations',
    'version': '0.1.1',
    'description': 'A database migration tool for Neo4j that allows to apply Cypher-based and arbitrary Python-based migrations.',
    'long_description': '![python version](https://img.shields.io/pypi/pyversions/neo4j-python-migrations?style=for-the-badge) \n[![version](https://img.shields.io/pypi/v/neo4j-python-migrations?style=for-the-badge)](https://pypi.org/project/neo4j-python-migrations/)\n![Codecov](https://img.shields.io/codecov/c/github/booqoffsky/neo4j-python-migrations?style=for-the-badge&token=CP9ZKK430Z)\n\n# neo4j-python-migrations\n\n> It is a database migration tool for [Neo4j](http://neo4j.com) written in Python\n> that allows to apply not only Cypher migrations, but also arbitrary Python-based migrations.\n> \n> This tool is inspired by [Michael Simons tool for Java](https://github.com/michael-simons/neo4j-migrations)\n> and works directly on [neo4j-python-driver](https://github.com/neo4j/neo4j-python-driver).\n\n# Features\n- Python migration support makes it possible to do any things in your migration that Python allows you to do.\n- Cypher-based migrations support.\n- It can be used either via the command line or directly in your code.\n- Multi-database support for Neo4j Enterprise Edition users.\n- The ability to separate logically independent migration chains within a single database (see the `project` option).\nMay be useful for Neo4j Community Edition users.\n\n# Installation\nFrom PyPi:\n\n`pip3 install neo4j-python-migrations`\n\nIf you want to install it from sources, try this:\n\n```\npython3 -m pip install poetry\npython3 -m pip install .\npython3 -m neo4j_python_migrations \n```\n\n# Usage\n## Creating migrations\n### Naming Convention\nEach migration will be a Cypher or Python file following the format `V<sem_ver>__<migration_name>.ext`.\n\nMake sure to follow the naming convention as stated in \n[Michael\'s tool documentation](https://michael-simons.github.io/neo4j-migrations/current/#concepts_naming-conventions)\n(except that .py files are allowed).\n\n### Cypher\nJust create a Cypher file with your custom script, for example `./migrations/V0001__initial.cypher`:\n```\nCREATE CONSTRAINT UniqueAuthor IF NOT EXISTS ON (a:AUTHOR) ASSERT a.uuid IS UNIQUE;\nCREATE INDEX author_uuid_index IF NOT EXISTS FOR (a:AUTHOR) ON (a.uuid);\n```\nThis script will be executed within a single transaction.\nTherefore, if you need both DDL and DML commands, split them into different files.\n\n### Python\nPython-based migrations should have a special format, for example `./migrations/V0002__drop_index.py`:\n```\nfrom neo4j import Session\n\n\n# This function must be present\ndef up(session: Session):\n    with session.begin_transaction() as tx:\n        tx.run("DROP INDEX author_uuid_index")\n```\n\n## Applying migrations\n### CLI\nYou can apply migrations or verify the status of migrations using the command line interface:\n```\nUsage: python -m neo4j_python_migrations [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --username TEXT                 The login of the user connecting to the\n                                  database.  [env var: NEO4J_MIGRATIONS_USER;\n                                  default: neo4j]\n  --password TEXT                 The password of the user connecting to the\n                                  database.  [env var: NEO4J_MIGRATIONS_PASS;\n                                  required]\n  --path PATH                     The path to the directory for scanning\n                                  migration files.  [env var:\n                                  NEO4J_MIGRATIONS_PATH; required]\n  --port INTEGER                  Port for connecting to the database  [env\n                                  var: NEO4J_MIGRATIONS_PORT; default: 7687]\n  --host TEXT                     Host for connecting to the database  [env\n                                  var: NEO4J_MIGRATIONS_HOST; default:\n                                  127.0.0.1]\n  --scheme TEXT                   Scheme for connecting to the database\n                                  [default: neo4j]\n  --project TEXT                  The name of the project for separating\n                                  logically independent migration chains\n                                  within a single database.  [env var:\n                                  NEO4J_MIGRATIONS_PROJECT]\n  --schema-database TEXT          The database that should be used for storing\n                                  information about migrations (Neo4j EE). If\n                                  not specified, then the database that should\n                                  be migrated is used.  [env var:\n                                  NEO4J_MIGRATIONS_SCHEMA_DATABASE]\n  --database TEXT                 The database that should be migrated (Neo4j\n                                  EE)  [env var: NEO4J_MIGRATIONS_DATABASE]\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n\nCommands:\n  analyze  Analyze migrations, find pending and missed.\n  migrate  Retrieves all pending migrations, verify and applies them.\n```\n\nSo, to apply migrations, just run the command:\n\n`python3 -m neo4j_python_migrations --username neo4j --password test --path ./migrations migrate`\n\n_Note: it is more secure to store the password in the environment variable NEO4J_MIGRATIONS_PASS._\n\n### Python Code\nYou can apply migrations directly into your application:\n\n```\nfrom pathlib import Path\n\nfrom neo4j import GraphDatabase\n\nfrom neo4j_python_migrations.executor import Executor\n\nwith GraphDatabase.driver("neo4j://localhost:7687", auth=("neo4j", "test")) as driver:\n    executor = Executor(driver, migrations_path=Path("./migrations"))\n    executor.migrate()\n```\nAvailable methods: `migrate`, `analyze`. \n\n# How migrations are tracked\nInformation about the applied migrations is stored in the database using the schema\ndescribed in [Michael\'s README](https://michael-simons.github.io/neo4j-migrations/current/#concepts_chain).\n\nSupported migration types: Ð¡YPHER, PYTHON. Other types of migrations, such as JAVA, are not supported.\n\nNote: the `project` option are incompatible with this schema. \nWhen using the option, each migration nodes will have an additional property named `project`.\n\n\n',
    'author': 'Grigory Bukovsky',
    'author_email': 'booqoffsky@yandex.ru',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/booqoffsky/neo4j-python-migrations',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
