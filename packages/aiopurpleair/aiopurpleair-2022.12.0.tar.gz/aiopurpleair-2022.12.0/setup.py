# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aiopurpleair',
 'aiopurpleair.backports',
 'aiopurpleair.endpoints',
 'aiopurpleair.helpers',
 'aiopurpleair.helpers.validators',
 'aiopurpleair.models',
 'aiopurpleair.util']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.8.0', 'pydantic>=1.10.2,<2.0.0']

setup_kwargs = {
    'name': 'aiopurpleair',
    'version': '2022.12.0',
    'description': 'A Python 3, asyncio-based library to interact with the PurpleAir API',
    'long_description': '# ðŸŸ£ aiopurpleair: A Python3, asyncio-based library to interact with the PurpleAir API\n\n[![CI](https://github.com/bachya/aiopurpleair/workflows/CI/badge.svg)](https://github.com/bachya/aiopurpleair/actions)\n[![PyPi](https://img.shields.io/pypi/v/aiopurpleair.svg)](https://pypi.python.org/pypi/aiopurpleair)\n[![Version](https://img.shields.io/pypi/pyversions/aiopurpleair.svg)](https://pypi.python.org/pypi/aiopurpleair)\n[![License](https://img.shields.io/pypi/l/aiopurpleair.svg)](https://github.com/bachya/aiopurpleair/blob/main/LICENSE)\n[![Code Coverage](https://codecov.io/gh/bachya/aiopurpleair/branch/dev/graph/badge.svg)](https://codecov.io/gh/bachya/aiopurpleair)\n[![Maintainability](https://api.codeclimate.com/v1/badges/40e0f45570a0eb9aab24/maintainability)](https://codeclimate.com/github/bachya/aiopurpleair/maintainability)\n[![Say Thanks](https://img.shields.io/badge/SayThanks-!-1EAEDB.svg)](https://saythanks.io/to/bachya)\n\n<a href="https://www.buymeacoffee.com/bachya1208P" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" height="41" width="174"></a>\n\n`aiopurpleair` is a Python3, asyncio-based library to interact with the\n[PurpleAir](https://www2.purpleair.com/) API.\n\n- [Installation](#installation)\n- [Python Versions](#python-versions)\n- [Usage](#usage)\n  - [Checking an API Key](#checking-an-api-key)\n  - [Getting Sensors](#getting-sensors)\n  - [Getting a Single Sensor](#getting-a-single-sensor)\n  - [Getting Nearby Sensors](#getting-nearby-sensors)\n  - [Connection Pooling](#connection-pooling)\n- [Contributing](#contributing)\n\n# Installation\n\n```bash\npip install aiopurpleair\n```\n\n# Python Versions\n\n`aiopurpleair` is currently supported on:\n\n- Python 3.9\n- Python 3.10\n- Python 3.11\n\n# Usage\n\nIn-depth documentation on the API can be found here:\nhttps://api.purpleair.com/#api-welcome. Unless otherwise noted, `aiopurpleair` endeavors\nto follow the API as closely as possible.\n\n## Checking an API Key\n\nTo check whether an API key is valid and what properties it has:\n\n```python\nimport asyncio\n\nfrom aiopurpleair import API\n\n\nasync def main() -> None:\n    """Run."""\n    api = API("<API KEY>")\n    response = await api.async_check_api_key()\n    # >>> response.api_key_type == ApiKeyType.READ\n    # >>> response.api_version == "V1.0.11-0.0.41"\n    # >>> response.timestamp_utc == datetime(2022, 10, 27, 18, 25, 41)\n\n\nasyncio.run(main())\n```\n\n## Getting Sensors\n\n```python\nimport asyncio\n\nfrom aiopurpleair import API\n\n\nasync def main() -> None:\n    """Run."""\n    api = API("<API_KEY>")\n    response = await api.sensors.async_get_sensors(["name"])\n    # >>> response.api_version == "V1.0.11-0.0.41"\n    # >>> response.data == {\n    # >>>     131075: SensorModel(sensor_index=131075, name=Mariners Bluff),\n    # >>>     131079: SensorModel(sensor_index=131079, name=BRSKBV-outside),\n    # >>> }\n    # >>> response.data_timestamp_utc == datetime(2022, 11, 3, 19, 25, 31)\n    # >>> response.fields == ["sensor_index", "name"]\n    # >>> response.firmware_default_version == "7.02"\n    # >>> response.max_age == 604800\n    # >>> response.timestamp_utc == datetime(2022, 11, 3, 19, 26, 29)\n\n\nasyncio.run(main())\n```\n\n### Method Parameters\n\n- `fields` (required): The sensor data fields to include\n- `location_type` (optional): An LocationType to filter by\n- `max_age` (optional): Filter results modified within these seconds\n- `modified_since` (optional): Filter results modified since a UTC datetime\n- `read_keys` (optional): Read keys for private sensors\n- `sensor_indices` (optional): Filter results by sensor index\n\n## Getting a Single Sensor\n\n```python\nimport asyncio\n\nfrom aiopurpleair import API\n\n\nasync def main() -> None:\n    """Run."""\n    api = API("<API_KEY>")\n    response = await api.sensors.async_get_sensor(131075)\n    # >>> response.api_version == "V1.0.11-0.0.41"\n    # >>> response.data_timestamp_utc == datetime(2022, 11, 5, 16, 36, 21)\n    # >>> response.sensor == SensorModel(sensor_index=131075, ...),\n    # >>> response.timestamp_utc == datetime(2022, 11, 5, 16, 37, 3)\n\n\nasyncio.run(main())\n```\n\n### Method Parameters\n\n- `sensor_index` (required): The sensor index of the sensor to retrieve.\n- `fields` (optional): The sensor data fields to include.\n- `read_key` (optional): A read key for a private sensor.\n\n## Getting Nearby Sensors\n\nThis method returns a list of `NearbySensorResult` objects that are within a bounding box\naround a given latitude/longitude pair. The list is sorted from nearest to furthest\n(i.e., the first index in the list is the closest to the latitude/longitude).\n\n`NearbySensorResult` objects have two properties:\n\n- `sensor`: the corresponding `SensorModel` object\n- `distance`: the calculated distance (in kilometers) between this sensor and the provided\n  latitude/longitude\n\n```python\nimport asyncio\n\nfrom aiopurpleair import API\n\n\nasync def main() -> None:\n    """Run."""\n    api = API("<API_KEY>")\n    sensors = await api.sensors.async_get_nearby_sensors(\n        ["name"], 51.5285582, -0.2416796, 10\n    )\n    # >>> [NearbySensorResult(...), NearbySensorResult(...)]\n\n\nasyncio.run(main())\n```\n\n### Method Parameters\n\n- `fields` (required): The sensor data fields to include\n- `latitude` (required): The latitude of the point to measure distance from\n- `longitude` (required): The longitude of the point to measure distance from\n- `distance` (required): The distance from the measured point to search (in kilometers)\n- `limit` (optional): Limit the results\n\n## Connection Pooling\n\nBy default, the library creates a new connection to the PurpleAir API with each\ncoroutine. If you are calling a large number of coroutines (or merely want to squeeze\nout every second of runtime savings possible), an\n[`aiohttp`](https://github.com/aio-libs/aiohttp) `ClientSession` can be used for connection\npooling:\n\n```python\nimport asyncio\n\nfrom aiohttp import ClientSession\n\nfrom aiopurpleair import API\n\n\nasync def main() -> None:\n    """Run."""\n    async with ClientSession() as session:\n        api = await API("<API KEY>")\n\n        # Get to work...\n\n\nasyncio.run(main())\n```\n\n# Contributing\n\n1. [Check for open features/bugs](https://github.com/bachya/aiopurpleair/issues)\n   or [initiate a discussion on one](https://github.com/bachya/aiopurpleair/issues/new).\n2. [Fork the repository](https://github.com/bachya/aiopurpleair/fork).\n3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`\n4. (_optional, but highly recommended_) Enter the virtual environment: `source ./.venv/bin/activate`\n5. Install the dev environment: `script/setup`\n6. Code your new feature or bug fix.\n7. Write tests that cover your new functionality.\n8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aiopurpleair tests`\n9. Update `README.md` with any new documentation.\n10. Add yourself to `AUTHORS.md`.\n11. Submit a pull request!\n',
    'author': 'Aaron Bach',
    'author_email': 'bachya1208@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/bachya/aiopurpleair',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9.0,<4.0.0',
}


setup(**setup_kwargs)
