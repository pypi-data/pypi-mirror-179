{"version":3,"file":"changeform.c744a2d9a78e75d0888b.js","mappings":"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","sources":["webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_management-form.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_formset.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_inline-formset.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/scroll-top-button/scroll-top-button.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changeform.js"],"sourcesContent":["const TOTAL_FORMS_SELECTOR = 'input[name$=\"-TOTAL_FORMS\"]';\nconst INITIAL_FORMS_SELECTOR = 'input[name$=\"-INITIAL_FORMS\"]';\nconst MIN_NUM_FORMS_SELECTOR = 'input[name$=\"-MIN_NUM_FORMS\"]';\nconst MAX_NUM_FORMS_SELECTOR = 'input[name$=\"-MAX_NUM_FORMS\"]';\n\nclass ManagementForm {\n    constructor(root) {\n        this.root = root;\n    }\n\n    get totalForms() {\n        const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n        return parseInt(input.value.toString());\n    }\n\n    set totalForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get initialForms() {\n        const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n        return parseInt(input.value.toString());\n    }\n\n    set initialForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get minForms() {\n        const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n        if (input) {\n            return parseInt(input.value.toString());\n        } else {\n            return 0;\n        }\n    }\n\n    set minForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get maxForms() {\n        const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n        if (input) {\n            return parseInt(input.value.toString());\n        } else {\n            return Infinity;\n        }\n    }\n\n    set maxForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n}\n\nexport default ManagementForm;\n","import ManagementForm from \"./_management-form.js\";\n\n/**\n * Базовый класс для Django-формсетов.\n *\n * Основные приципы работы:\n * 1) Желательно задать корневому элементу формсета уникальный ID, чтобы иметь\n *    возможность указать зависимым элементам, с каким именно формсетом они будут работать.\n *\n * 2) Префикс формсета задается через атрибут \"data-formset-prefix\".\n *\n * 3) Контейнер для форм задается атрибутом \"data-formset-form-container\".\n *\n * 4) Селектор форм формсета задается атрибутом \"data-formset-form-selector\".\n *\n * 5) Шаблонный элемент для новых форм задается через атрибут \"data-formset-form-template\".\n *\n *      <div id=\"example-formset\"\n *           data-formset-prefix=\"example\"\n *           data-formset-form-container=\".example-forms\"\n *           data-formset-form-selector=\".example-form\"\n *           data-formset-form-template=\"example-form-template\">\n *        <div class=\"example-forms\">\n *          ...\n *        </div>\n *      </div>\n *\n *      <template id=\"example-form-template\">\n *        <div class=\"example-form\">\n *          ...\n *        </div>\n *      </template>\n *\n * 6) Кнопки добавления формы должна иметь атрибут data-formset-toggle=\"add\".\n *    Если кнопка находится за пределами корневого элемента формсета, необходимо\n *    добавить атрибут \"data-formset\" с ID формсета.\n *\n *      <button data-formset-toggle=\"add\" data-formset=\"example-formset\">\n *        Add form\n *      </button>\n *\n * 7) Кнопка удаления ещё не сохраненной формы должна иметь атрибут\n *    data-formset-toggle=\"delete\" и располагаться в пределах формы.\n *\n *      <button data-formset-toggle=\"delete\">\n *        Delete this form\n *      </button>\n *\n * 8) Кнопки сортировки форм должны иметь атрибут \"data-formset-toggle\" со\n *    значениями \"up\" либо \"down\" и располагаться в пределах формы.\n *\n */\nclass Formset {\n    constructor(root) {\n        this.root = root;\n        this.management_form = new ManagementForm(root);\n\n        this._initAddFormButtons();\n        this._initDeleteFormButtons();\n        this._initSortFormButtons();\n\n        // Обновление начальных индексов, т.к. формы могут быть изначально перемешаны\n        // при первоначальном отображении страницы из-за ошибки валидации.\n        this.updateFormIndexes();\n    }\n\n    /**\n     * @return {string}\n     */\n    get prefix() {\n        const prefix = this.root.dataset.formsetPrefix;\n        if (!prefix) {\n            throw new Error(\"formset prefix required\");\n        }\n\n        return prefix;\n    }\n\n    /**\n     * @return {HTMLElement}\n     */\n    get formContainer() {\n        const selector = this.root.dataset.formsetFormContainer;\n        if (!selector) {\n            throw new Error(\"container selector required\");\n        }\n\n        const container = this.root.querySelector(selector);\n        if (!container) {\n            throw new Error(\"container not found\");\n        }\n\n        return container;\n    }\n\n    /**\n     * @return {string}\n     */\n    get formSelector() {\n        const formSelector = this.root.dataset.formsetFormSelector;\n        if (!formSelector) {\n            throw new Error(\"form selector required\");\n        }\n\n        return formSelector;\n    }\n\n    /**\n     * @return {string}\n     */\n    get templateId() {\n        const templateId = this.root.dataset.formsetFormTemplate;\n        if (!templateId) {\n            throw new Error(\"form template ID required\");\n        }\n\n        return templateId;\n    }\n\n    /**\n     * @return {HTMLElement}\n     */\n    get formTemplate() {\n        const templateElement = document.getElementById(this.templateId);\n        if (!templateElement) {\n            throw new Error(\"form template element not found\");\n        }\n\n        return templateElement;\n    }\n\n    /**\n     * Возвращает текущие формы формсета.\n     * @returns {NodeListOf<HTMLElement>}\n     */\n    getForms() {\n        return this.formContainer.querySelectorAll(this.formSelector);\n    }\n\n    /**\n     * Возвращает порядковый номер формы в формсете.\n     * !! Внимание !! Это не тот же индекс, что передается в setFormIndex !!\n     * @param {HTMLElement} form\n     * @returns {number}\n     */\n    getFormIndex(form) {\n        return Array.from(this.getForms()).indexOf(form);\n    }\n\n    /**\n     * Возвращает массив кнопок добавления формы в формсет.\n     * @returns {HTMLElement[]}\n     */\n    getAddFormButtons() {\n        const buttons = [];\n\n        document.querySelectorAll('[data-formset-toggle=\"add\"]').forEach(button => {\n            if (this.root.id && button.dataset.formset === this.root.id) {\n                buttons.push(button);\n            } else if (this.root.contains(button) && !button.dataset.formset) {\n                buttons.push(button);\n            }\n        });\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает массив кнопок удаления форм.\n     * @returns {HTMLElement[]}\n     */\n    getDeleteFormButtons() {\n        let buttons = [];\n\n        this.getForms().forEach(form => {\n            const deleteFormButtons = form.querySelectorAll('[data-formset-toggle=\"delete\"]');\n            if (deleteFormButtons.length) {\n                buttons = buttons.concat(Array.from(deleteFormButtons));\n            }\n        });\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает массив кнопок сортировки форм.\n     * @returns {HTMLElement[]}\n     */\n    getSortFormButtons() {\n        let buttons = [];\n\n        this.getForms().forEach(form => {\n            const moveUpButtons = form.querySelectorAll('[data-formset-toggle=\"up\"]');\n            if (moveUpButtons.length) {\n                buttons = buttons.concat(Array.from(moveUpButtons));\n            }\n\n            const moveDownButtons = form.querySelectorAll('[data-formset-toggle=\"down\"]');\n            if (moveDownButtons.length) {\n                buttons = buttons.concat(Array.from(moveDownButtons));\n            }\n        });\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает True, если с формой связан существующий экземпляр модели.\n     * @param {HTMLElement} form\n     * @returns {boolean}\n     */\n    hasOriginal(form) {\n        return form.classList.contains(\"has_original\");\n    }\n\n    /**\n     * Включение/выключение кнопки добавления формы.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setAddFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    /**\n     * Включение/выключение кнопки удаления формы.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setDeleteFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    /**\n     * Включение/выключение кнопки сортировки форм.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setSortFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    _initAddFormButtons() {\n        document.addEventListener(\"click\", event => {\n            const button = event.target.closest('[data-formset-toggle=\"add\"]');\n            if (button) {\n                if (this.root.id && button.dataset.formset === this.root.id) {\n                    this.addForm();\n                } else if (this.root.contains(button) && !button.dataset.formset) {\n                    this.addForm();\n                }\n            }\n        });\n    }\n\n    _initDeleteFormButtons() {\n        document.addEventListener(\"click\", event => {\n            const button = event.target.closest('[data-formset-toggle=\"delete\"]');\n            if (button && this.root.contains(button)) {\n                const form = button.closest(this.formSelector);\n                if (form) {\n                    this.deleteForm(form);\n                }\n            }\n        });\n    }\n\n    _initSortFormButtons() {\n        document.addEventListener(\"click\", event => {\n            const moveUpButton = event.target.closest('[data-formset-toggle=\"up\"]');\n            const moveDownButton = event.target.closest('[data-formset-toggle=\"down\"]');\n\n            if (moveUpButton && this.root.contains(moveUpButton)) {\n                const form = moveUpButton.closest(this.formSelector);\n                if (form) {\n                    this.moveFormUp(form);\n                }\n            } else if (moveDownButton && this.root.contains(moveDownButton)) {\n                const form = moveDownButton.closest(this.formSelector);\n                if (form) {\n                    this.moveFormDown(form);\n                }\n            }\n        });\n    }\n\n    /**\n     * Добавление новой формы из шаблона.\n     * @return {HTMLElement}\n     */\n    addForm() {\n        if (this.management_form.totalForms >= this.management_form.maxForms) {\n            throw new Error(\"Maximum number of forms is reached\");\n        }\n\n        const formFragment = this.formTemplate.content.cloneNode(true);\n        const form = formFragment.children[0];\n\n        this.formContainer.appendChild(formFragment);\n\n        this.management_form.totalForms++;\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n\n        return form;\n    }\n\n    /**\n     * Удаление формы из формсета.\n     * @param {HTMLElement} form\n     */\n    deleteForm(form) {\n        if (this.management_form.totalForms <= this.management_form.minForms) {\n            throw new Error(\"Minimum number of forms is reached\");\n        }\n\n        this.management_form.totalForms--;\n\n        form.remove();\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    /**\n     * Перемещение формы на одну позицию выше в списке форм.\n     * @param {HTMLElement} form\n     */\n    moveFormUp(form) {\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === 0) {\n            throw new Error(\"form is already first\");\n        }\n\n        const previousForm = this.getForms()[formIndex - 1];\n        form.after(previousForm);\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    /**\n     * Перемещение формы на одну позицию ниже в списке форм.\n     * @param {HTMLElement} form\n     */\n    moveFormDown(form) {\n        const formCount = this.getForms().length;\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === formCount - 1) {\n            throw new Error(\"form is already last\");\n        }\n\n        const nextForm = this.getForms()[formIndex + 1];\n        form.before(nextForm);\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    /**\n     * Установка Django-индекса для всех форм с учётом наличия связи с экземпляром\n     * модели и порядком в DOM.\n     * Можно указать форму, которую следует пропустить при обходе. Это позволит\n     * указать корректные Django-индексы при удалении, не дожидаясь физического\n     * удаления формы из DOM.\n     * @param {HTMLElement} skip\n     */\n    updateFormIndexes(skip = null) {\n        let index = 0;\n\n        // Формы, связанные с экземплярами, индексируем в первую очередь,\n        // чтобы на бэкенде всё работало корректно.\n        this.getForms().forEach(form => {\n            if (form !== skip && this.hasOriginal(form)) {\n                this.setFormIndex(form, index++);\n            }\n        });\n\n        this.getForms().forEach(form => {\n            if (form !== skip && !this.hasOriginal(form)) {\n                this.setFormIndex(form, index++);\n            }\n        });\n    }\n\n    /**\n     * Установка Django-индекса формы для всех элементов в пределах формы.\n     * @param {HTMLElement} form\n     * @param {Number} index\n     */\n    setFormIndex(form, index) {\n        this._setElementIndex(form, index);\n        form.querySelectorAll(\"*\").forEach(element => {\n            this._setElementIndex(element, index);\n        });\n    }\n\n    /**\n     * Установка Django-индекса формы в атрибутах указанного элемента.\n     * @param {HTMLElement} element\n     * @param {Number} index\n     * @private\n     */\n    _setElementIndex(element, index) {\n        const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n        const replacement = this.prefix + \"-\" + index;\n\n        if (element.htmlFor) {\n            element.htmlFor = element.htmlFor.replace(regex, replacement);\n        }\n\n        if (element.id) {\n            element.id = element.id.replace(regex, replacement);\n        }\n\n        if (element.name) {\n            element.name = element.name.replace(regex, replacement);\n        }\n    }\n\n    /**\n     * Установка поля сортировки для всех форм в соответствии с их порядком в DOM.\n     * Можно указать форму, которую следует пропустить при обходе. Это позволит\n     * указать корректную сортировку при удалении, не дожидаясь физического\n     * удаления формы из DOM.\n     * @param {HTMLElement} skip\n     */\n    updateFormOrder(skip = null) {\n        let index = 0;\n        this.getForms().forEach(form => {\n            if (form !== skip) {\n                this.setFormOrder(form, index++);\n            }\n        });\n    }\n\n    /**\n     * Установка значения в поле сортровки формы.\n     * @param {HTMLElement} form\n     * @param {Number} value\n     */\n    setFormOrder(form, value) {}\n\n    /**\n     * Обновление стостояния всех кнопок формсета.\n     */\n    updateButtonsState() {\n        const disableAdd = this.management_form.totalForms >= this.management_form.maxForms;\n        this.getAddFormButtons().forEach(button => {\n            this.setAddFormButtonState(button, !disableAdd);\n        });\n\n        const disableDelete = this.management_form.totalForms <= this.management_form.minForms;\n        this.getDeleteFormButtons().forEach(button => {\n            this.setDeleteFormButtonState(button, !disableDelete);\n        });\n\n        const formCount = this.getForms().length;\n        this.getSortFormButtons().forEach(button => {\n            const form = button.closest(this.formSelector);\n            const formIndex = this.getFormIndex(form);\n            const direction = button.dataset.formsetToggle;\n            let state = true;\n\n            if (formIndex === 0 && direction === \"up\") {\n                state = false;\n            }\n\n            if (formIndex === formCount - 1 && direction === \"down\") {\n                state = false;\n            }\n\n            this.setSortFormButtonState(button, state);\n        });\n    }\n}\n\nexport default Formset;\n","import emitters from \"js/utilities/emitters.js\";\nimport { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\nimport Formset from \"./_formset.js\";\n\ngsap.registerPlugin(ScrollToPlugin);\n\nclass InlineFormset extends Formset {\n    constructor(root) {\n        super(root);\n        this._isTransitioning = false;\n    }\n\n    get isTabular() {\n        return this.root.classList.contains(\"paper-formset--tabular\");\n    }\n\n    setAddFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        const finalState = !this._isTransitioning && state;\n        super.setAddFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    setDeleteFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        const finalState = !this._isTransitioning && state;\n        super.setDeleteFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    setSortFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        const finalState = !this._isTransitioning && state;\n        super.setSortFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    addForm() {\n        this._isTransitioning = true;\n        const form = super.addForm();\n\n        // Events\n        emitters.inlines.trigger(\"add\", [form, this.prefix]);\n\n        // Animation\n        const onAddCallback = () => {\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            // Events\n            emitters.inlines.trigger(\"added\", [form, this.prefix]);\n\n            // Django compatible\n            $(document).trigger(\"formset:added\", [$(form), this.prefix]);\n        };\n\n        const animationOptions = {\n            onComplete: onAddCallback\n        };\n\n        if (this.isTabular) {\n            animationOptions.duration = 0.2;\n            animationOptions.opacity = 0;\n            animationOptions.clearProps = \"opacity\";\n        } else {\n            animationOptions.duration = 0.3;\n            animationOptions.height = 0;\n            animationOptions.clearProps = \"height\";\n        }\n\n        gsap.from(form, animationOptions);\n\n        return form;\n    }\n\n    deleteForm(form) {\n        if (this.management_form.totalForms <= this.management_form.minForms) {\n            throw new Error(\"Minimum number of forms is reached\");\n        }\n\n        this.management_form.totalForms--;\n\n        // Устанавливаем корректные индексы форм, не дожидаясь анимаций.\n        this.setFormIndex(form, this.management_form.totalForms);\n        this.updateFormIndexes(form);\n\n        // Устанавливаем коректную сортировку форм, не дожидаясь анимаций.\n        this.updateFormOrder(form);\n\n        // Events\n        emitters.inlines.trigger(\"remove\", [form, this.prefix]);\n\n        // Animation\n        this._isTransitioning = true;\n        this.updateButtonsState();\n\n        const onDeleteCallback = () => {\n            form.remove();\n\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            // Events\n            emitters.inlines.trigger(\"removed\", [form, this.prefix]);\n\n            // Django compatible\n            $(document).trigger(\"formset:removed\", [$(form), this.prefix]);\n        };\n\n        const animationOptions = {\n            onComplete: onDeleteCallback\n        };\n\n        if (this.isTabular) {\n            animationOptions.duration = 0.2;\n            animationOptions.opacity = 0;\n        } else {\n            animationOptions.duration = 0.3;\n            animationOptions.height = 0;\n        }\n\n        gsap.to(form, animationOptions);\n    }\n\n    moveFormUp(form) {\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === 0) {\n            throw new Error(\"the form is first already\");\n        }\n\n        const previousForm = this.getForms()[formIndex - 1];\n        this._swapForms(previousForm, form, \"up\");\n    }\n\n    moveFormDown(form) {\n        const formCount = this.getForms().length;\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === formCount - 1) {\n            throw new Error(\"the form is last already\");\n        }\n\n        const nextForm = this.getForms()[formIndex + 1];\n        this._swapForms(form, nextForm, \"down\");\n    }\n\n    /**\n     * Меняет местами формы form1 и form2.\n     * Порядок указания форм должен совпадать с их порядком в DOM, т.е. form1\n     * должна быть выше form2.\n     * @param {HTMLElement} form1\n     * @param {HTMLElement} form2\n     * @param {string} direction\n     * @private\n     */\n    _swapForms(form1, form2, direction) {\n        const initialRect1 = form1.getBoundingClientRect();\n        const initialRect2 = form2.getBoundingClientRect();\n\n        // TIP: при изменении форм местами может проскроллиться страница\n        // (возможно из-за фокуса). Это внесет ошибку в дальнейшие рассчеты.\n        // Поэтому фиксируем вертикальное расположение окна браузера.\n        const currentPageOffset = window.scrollY;\n        form2.after(form1);\n        window.scrollTo(0, currentPageOffset);\n\n        const swappedRect1 = form1.getBoundingClientRect();\n        const swappedRect2 = form2.getBoundingClientRect();\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n\n        // Имитация начального расположения форм с помощью CSS-трансформаций.\n        this.formContainer.style.transformStyle = \"preserve-3d\";\n        if (direction === \"up\") {\n            form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 0)`;\n            form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 1px)`;\n        } else {\n            form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 1px)`;\n            form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 0)`;\n        }\n\n        // Animation\n        this._isTransitioning = true;\n        this.updateButtonsState();\n\n        const onSwapCallback = () => {\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            this.formContainer.style.transformStyle = \"\";\n        };\n\n        const animationOptions = {\n            y: 0,\n            clearProps: \"transform\"\n        };\n\n        if (this.isTabular) {\n            animationOptions.duration = 0.25;\n        } else {\n            animationOptions.duration = 0.5;\n        }\n\n        const tl = gsap\n            .timeline({\n                onComplete: onSwapCallback\n            })\n            .to(form1, animationOptions)\n            .to(form2, animationOptions, 0);\n\n        // Перемещение окна вместе с формой.\n        let finalPageOffset;\n        let preventScroll;\n        if (direction === \"up\") {\n            finalPageOffset = currentPageOffset + (swappedRect2.top - initialRect2.top);\n            preventScroll = initialRect2.top > 0.5 * window.innerHeight && swappedRect2.top > 0.5 * window.innerHeight;\n        } else {\n            finalPageOffset = currentPageOffset + (swappedRect1.top - initialRect1.top);\n            preventScroll = initialRect1.top < 0.5 * window.innerHeight && swappedRect1.top < 0.5 * window.innerHeight;\n        }\n\n        if (!preventScroll) {\n            tl.to(\n                window,\n                {\n                    duration: animationOptions.duration,\n                    scrollTo: {\n                        y: Math.max(0, finalPageOffset)\n                    }\n                },\n                0\n            );\n        }\n    }\n\n    setFormOrder(form, value) {\n        super.setFormOrder(form, value);\n\n        const input = form.querySelector(\".paper-formset__order\");\n        if (input) {\n            input.value = value;\n        }\n    }\n\n    setFormIndex(form, index) {\n        super.setFormIndex(form, index);\n\n        // Обновление индекса в заголовке stacked-формы.\n        const caption = form.querySelector(\".paper-formset__form-caption\");\n        if (caption) {\n            caption.innerHTML = caption.innerHTML.replace(/#(\\d+|__prefix__)/g, \"#\" + (index + 1));\n        }\n\n        // Обновление кнопки удаления\n        const deleteFormButton = form.querySelector('[data-formset-toggle=\"delete\"]');\n        if (deleteFormButton && deleteFormButton.dataset.formsetForm) {\n            const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n            const replacement = this.prefix + \"-\" + index;\n            const formId = deleteFormButton.dataset.formsetForm.replace(regex, replacement);\n            deleteFormButton.setAttribute(\"data-formset-form\", formId);\n        }\n    }\n}\n\nexport default InlineFormset;\n","import { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\n\nimport \"./scroll-top-button.scss\";\n\ngsap.registerPlugin(ScrollToPlugin);\n\ndocument.addEventListener(\"click\", event => {\n    const button = event.target.closest(\".scroll-top-button\");\n    if (button) {\n        gsap.to(window, {\n            duration: 0.3,\n            scrollTo: {\n                y: 0\n            }\n        });\n    }\n});\n\nwindow.addEventListener(\"scroll\", () => {\n    const button = document.querySelector(\".scroll-top-button\");\n    if (button) {\n        button.classList.toggle(\"show\", window.scrollY >= document.documentElement.clientHeight * 0.75);\n    }\n});\n","/* global gettext */\nimport formUtils from \"js/utilities/form_utils.js\";\nimport { Select2Widget } from \"components/select2\";\nimport { InlineFormset } from \"bem/paper-formset/paper-formset.js\";\nimport \"bem/scroll-top-button/scroll-top-button.js\";\n\n// Select2 для выпадающих списков\nconst select2_changeform = new Select2Widget({\n    width: \"\",\n    allowClear: true\n});\nselect2_changeform.bind(\".select-field select\");\nselect2_changeform.attach();\n\n// Инициализация inline-форм\nlet formsets = [];\ndocument.querySelectorAll(\".paper-formset\").forEach(element => {\n    const formset = new InlineFormset(element);\n    formset.updateButtonsState();\n    formsets.push(formset);\n});\n\n// Предотвращение повторного сохранения\nlet submitted = false;\nconst form = document.querySelector(\".paper-form\");\nform &&\n    form.addEventListener(\"submit\", event => {\n        if (!submitted) {\n            submitted = true;\n            return;\n        }\n\n        event.preventDefault();\n        const answer = window.confirm(\n            gettext(\"You have already submitted this form. Are you sure you want to submit it again?\")\n        );\n        if (!answer) {\n            return;\n        }\n        event.target.submit();\n    });\n\n// Установка значения поля сортировки перед сохранением.\n// Назначить сортировку сразу нельзя из-за того, что extra-формы не должны меняться.\ndocument.addEventListener(\"submit\", () => {\n    formsets.forEach(formset => {\n        let index = 0;\n        formset.getForms().forEach(form => {\n            if (form.classList.contains(\"has_original\") || formUtils.containsChangedField(form)) {\n                formset.setFormOrder(form, index++);\n            }\n        });\n    });\n});\n"],"names":["TOTAL_FORMS_SELECTOR","INITIAL_FORMS_SELECTOR","MIN_NUM_FORMS_SELECTOR","MAX_NUM_FORMS_SELECTOR","constructor","root","this","totalForms","input","querySelector","parseInt","value","toString","intValue","isNaN","Error","initialForms","minForms","maxForms","Infinity","management_form","ManagementForm","_initAddFormButtons","_initDeleteFormButtons","_initSortFormButtons","updateFormIndexes","prefix","dataset","formsetPrefix","formContainer","selector","formsetFormContainer","container","formSelector","formsetFormSelector","templateId","formsetFormTemplate","formTemplate","templateElement","document","getElementById","getForms","querySelectorAll","getFormIndex","form","Array","from","indexOf","getAddFormButtons","buttons","forEach","button","id","formset","contains","push","getDeleteFormButtons","deleteFormButtons","length","concat","getSortFormButtons","moveUpButtons","moveDownButtons","hasOriginal","classList","setAddFormButtonState","state","disabled","setDeleteFormButtonState","setSortFormButtonState","addEventListener","event","target","closest","addForm","deleteForm","moveUpButton","moveDownButton","moveFormUp","moveFormDown","formFragment","content","cloneNode","children","appendChild","updateFormOrder","updateButtonsState","remove","formIndex","previousForm","after","formCount","nextForm","before","skip","index","setFormIndex","_setElementIndex","element","regex","RegExp","replacement","htmlFor","replace","name","setFormOrder","disableAdd","disableDelete","direction","formsetToggle","gsap","ScrollToPlugin","Formset","super","_isTransitioning","isTabular","finalState","toggle","emitters","animationOptions","onComplete","$","trigger","duration","opacity","clearProps","height","_swapForms","form1","form2","initialRect1","getBoundingClientRect","initialRect2","currentPageOffset","window","scrollY","scrollTo","swappedRect1","swappedRect2","style","transformStyle","transform","top","y","tl","to","finalPageOffset","preventScroll","innerHeight","Math","max","caption","innerHTML","deleteFormButton","formsetForm","formId","setAttribute","documentElement","clientHeight","select2_changeform","Select2Widget","width","allowClear","bind","attach","formsets","InlineFormset","submitted","preventDefault","confirm","gettext","submit","formUtils"],"sourceRoot":""}