{"version":3,"file":"npm.array.prototype.map.559a67f17b0104d033b0.js","mappings":"gHAEA,IAAIA,EAAqB,EAAQ,MAC7BC,EAAO,EAAQ,MACfC,EAA4B,EAAQ,IACpCC,EAAM,EAAQ,MACdC,EAAc,EAAQ,KACtBC,EAAa,EAAQ,MACrBC,EAAW,EAAQ,MACnBC,EAAW,EAAQ,MACnBC,EAAW,EAAQ,KAEnBC,EAAY,EAAQ,MAEpBC,EAAW,EAAQ,MAGnBC,EAAcC,OAAO,KACrBC,EAAiC,MAAnBF,EAAY,MAAgB,KAAKA,GAE/CG,EAAWL,EAAU,0BAEzBM,EAAOC,QAAU,SAAaC,GAC7B,IASIC,EATAC,EAAIZ,EAASa,MACbC,EAAOR,GAAeH,EAASS,GAAKL,EAASK,EAAG,IAAMA,EACtDG,EAAMhB,EAASe,EAAKE,QAGxB,IAAKlB,EAAWY,GACf,MAAM,IAAIO,UAAU,mDAIjBC,UAAUF,OAAS,IACtBL,EAAIO,UAAU,IAKf,IAFA,IAAIC,EAAI1B,EAAmBmB,EAAGG,GAC1BK,EAAI,EACDA,EAAIL,GAAK,CACf,IAAIM,EAAKpB,EAASmB,GACdE,EAAWzB,EAAYe,EAAGS,GAC9B,GAAIC,EAAU,CACb,IAAIC,EAAS3B,EAAIgB,EAAGS,GAChBG,EAAc9B,EAAKgB,EAAYC,EAAG,CAACY,EAAQH,EAAGR,IAClDjB,EAA0BwB,EAAGE,EAAIG,EAClC,CACAJ,GAAK,CACN,CAEA,OAAOD,CACR,C,uBCjDA,IAAIM,EAAS,EAAQ,MACjBC,EAAyB,EAAQ,MACjCxB,EAAY,EAAQ,MAEpByB,EAAiB,EAAQ,MACzBC,EAAc,EAAQ,MACtBC,EAAWD,IACXE,EAAO,EAAQ,MAEfC,EAAS7B,EAAU,yBAGnB8B,EAAe,SAAaC,EAAOvB,GAEtC,OADAgB,EAAuBO,GAChBJ,EAASK,MAAMD,EAAOF,EAAOb,UAAW,GAChD,EACAO,EAAOO,EAAc,CACpBJ,YAAaA,EACbD,eAAgBA,EAChBG,KAAMA,IAGPtB,EAAOC,QAAUuB,C,uBCtBjB,IAAIG,EAA2B,EAAQ,MAEnCR,EAAiB,EAAQ,MAE7BnB,EAAOC,QAAU,WAChB,IAAI2B,EAASC,MAAMC,UAAUC,IAC7B,OAAOJ,EAAyBC,GAAUA,EAAST,CACpD,C,uBCPA,IAAIF,EAAS,EAAQ,MACjBG,EAAc,EAAQ,MAE1BpB,EAAOC,QAAU,WAChB,IAAIoB,EAAWD,IAMf,OALAH,EACCY,MAAMC,UACN,CAAEC,IAAKV,GACP,CAAEU,IAAK,WAAc,OAAOF,MAAMC,UAAUC,MAAQV,CAAU,IAExDA,CACR,C","sources":["webpack://paper-admin/./node_modules/array.prototype.map/implementation.js","webpack://paper-admin/./node_modules/array.prototype.map/index.js","webpack://paper-admin/./node_modules/array.prototype.map/polyfill.js","webpack://paper-admin/./node_modules/array.prototype.map/shim.js"],"sourcesContent":["'use strict';\n\nvar ArraySpeciesCreate = require('es-abstract/2022/ArraySpeciesCreate');\nvar Call = require('es-abstract/2022/Call');\nvar CreateDataPropertyOrThrow = require('es-abstract/2022/CreateDataPropertyOrThrow');\nvar Get = require('es-abstract/2022/Get');\nvar HasProperty = require('es-abstract/2022/HasProperty');\nvar IsCallable = require('es-abstract/2022/IsCallable');\nvar ToUint32 = require('es-abstract/2022/ToUint32');\nvar ToObject = require('es-abstract/2022/ToObject');\nvar ToString = require('es-abstract/2022/ToString');\n\nvar callBound = require('call-bind/callBound');\n\nvar isString = require('is-string');\n\n// Check failure of by-index access of string characters (IE < 9) and failure of `0 in boxedString` (Rhino)\nvar boxedString = Object('a');\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);\n\nvar strSplit = callBound('String.prototype.split');\n\nmodule.exports = function map(callbackfn) {\n\tvar O = ToObject(this);\n\tvar self = splitString && isString(O) ? strSplit(O, '') : O;\n\tvar len = ToUint32(self.length);\n\n\t// If no callback function or if callback is not a callable function\n\tif (!IsCallable(callbackfn)) {\n\t\tthrow new TypeError('Array.prototype.map callback must be a function');\n\t}\n\n\tvar T;\n\tif (arguments.length > 1) {\n\t\tT = arguments[1];\n\t}\n\n\tvar A = ArraySpeciesCreate(O, len);\n\tvar k = 0;\n\twhile (k < len) {\n\t\tvar Pk = ToString(k);\n\t\tvar kPresent = HasProperty(O, Pk);\n\t\tif (kPresent) {\n\t\t\tvar kValue = Get(O, Pk);\n\t\t\tvar mappedValue = Call(callbackfn, T, [kValue, k, O]);\n\t\t\tCreateDataPropertyOrThrow(A, Pk, mappedValue);\n\t\t}\n\t\tk += 1;\n\t}\n\n\treturn A;\n};\n","'use strict';\n\nvar define = require('define-properties');\nvar RequireObjectCoercible = require('es-abstract/2022/RequireObjectCoercible');\nvar callBound = require('call-bind/callBound');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar polyfill = getPolyfill();\nvar shim = require('./shim');\n\nvar $slice = callBound('Array.prototype.slice');\n\n// eslint-disable-next-line no-unused-vars\nvar boundMapShim = function map(array, callbackfn) {\n\tRequireObjectCoercible(array);\n\treturn polyfill.apply(array, $slice(arguments, 1));\n};\ndefine(boundMapShim, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = boundMapShim;\n","'use strict';\n\nvar arrayMethodBoxesProperly = require('es-array-method-boxes-properly');\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\tvar method = Array.prototype.map;\n\treturn arrayMethodBoxesProperly(method) ? method : implementation;\n};\n","'use strict';\n\nvar define = require('define-properties');\nvar getPolyfill = require('./polyfill');\n\nmodule.exports = function shimArrayPrototypeMap() {\n\tvar polyfill = getPolyfill();\n\tdefine(\n\t\tArray.prototype,\n\t\t{ map: polyfill },\n\t\t{ map: function () { return Array.prototype.map !== polyfill; } }\n\t);\n\treturn polyfill;\n};\n"],"names":["ArraySpeciesCreate","Call","CreateDataPropertyOrThrow","Get","HasProperty","IsCallable","ToUint32","ToObject","ToString","callBound","isString","boxedString","Object","splitString","strSplit","module","exports","callbackfn","T","O","this","self","len","length","TypeError","arguments","A","k","Pk","kPresent","kValue","mappedValue","define","RequireObjectCoercible","implementation","getPolyfill","polyfill","shim","$slice","boundMapShim","array","apply","arrayMethodBoxesProperly","method","Array","prototype","map"],"sourceRoot":""}