{"version":3,"file":"changelist.9bbb7bc880daf61c5d94.js","mappings":"8FACAA,OAAOC,iBAAiB,WAAWC,IAC/B,IAAIA,EAAMC,kBAIND,EAAME,QAAS,CACf,MAAMC,EAAaC,SAASC,cAAc,qBAC1C,IAAKF,EACD,OAGJ,OAAQH,EAAMM,KACV,IAAK,OACL,IAAK,YACDH,EAAWE,cAAc,qCAAqCE,QAC9D,MACJ,IAAK,QACL,IAAK,aACDJ,EAAWE,cAAc,iCAAiCE,QAC1D,MACJ,QAEI,OAIRP,EAAMQ,gBACV,I,wDCXW,MAAMC,EAIjBC,YAAYC,GACRC,KAAKC,WAAWF,EACpB,CAQAG,YAAYC,GACR,MAAMC,EAAUD,EAAMC,QACtB,MAAO,CACHC,GAAIC,SAASF,EAAQG,IACrBC,OAAQF,SAASF,EAAQI,QACzBC,QAASN,EACTO,OAAQ,GAEhB,CAOAC,SAASC,GACDA,GAA2B,iBAAZA,EAAKP,KACpBL,KAAKa,OAAOD,EAAKP,IAAMO,EACnBE,MAAMF,EAAKJ,SACXR,KAAKe,OAAOC,KAAKJ,GAG7B,CAOAX,WAAWF,GACP,MAAMkB,EAAQ,GAEdjB,KAAKa,OAAS,CAAC,EACfb,KAAKe,OAAS,GACdhB,EAASmB,SAAQC,IACb,MAAMP,EAAOZ,KAAKE,YAAYiB,GAG9B,IAFAnB,KAAKW,SAASC,GAEPK,EAAMG,QAAQ,CACjB,MAAMC,EAAYJ,EAAM,GACxB,GAAIL,EAAKJ,SAAWa,EAAUhB,GAG1B,OAFAgB,EAAUX,OAAOM,KAAKJ,EAAKP,SAC3BY,EAAMK,QAAQV,GAGlBK,EAAMM,OACV,CAEAN,EAAMK,QAAQV,EAAK,GAE3B,CAOAY,QAAQnB,GACJ,KAAMA,KAAML,KAAKa,QACb,MAAM,IAAIY,MAAO,QAAOpB,eAG5B,OAAOL,KAAKa,OAAOR,EACvB,CAMAqB,WACI,OAAO1B,KAAKe,OAAOY,KAAIC,GACZA,EAASnB,SAExB,CAOAoB,eAAexB,GAEX,OADaL,KAAKwB,QAAQnB,GACdK,OAAOoB,QAAO,CAACC,EAAQC,KAC/B,MAAMC,EAAYjC,KAAKwB,QAAQQ,GAK/B,OAJIC,IACAF,EAAOf,KAAKiB,EAAUxB,SACtBsB,EAASA,EAAOG,OAAOlC,KAAK6B,eAAeG,KAExCD,CAAM,GACd,GACP,ECvGW,MAAMI,EAKjBrC,YAAYsC,EAAOC,GAiBf,GAfArC,KAAKsC,KAAOC,OAAOC,OACf,CACIC,IAAK,KACLC,MAAM,EACNC,QAAS,WACTC,cAAe,YAEnBP,GAIJrC,KAAKoC,MAAQA,EAGbpC,KAAK6C,MAAQT,EAAM3C,cAAc,UAC5BO,KAAK6C,MACN,MAAM,IAAIpB,MAAM,wBAIpBzB,KAAK0C,KAAO,KAEZ1C,KAAK8C,iBACT,CAOAA,kBACI,OAAOC,EAAAA,GAAAA,OAAgB/C,KAAK6C,MAAO,CAC/BG,UAAW,EACXC,UAAW,KACXC,OAAQlD,KAAKsC,KAAKK,QAClBQ,OAAQ,CAAC/D,EAAOgE,EAAKC,KACjB,GAAID,EAAIE,UAAUC,SAASvD,KAAKsC,KAAKM,eACjC,OAAO,EAGX,MAAMD,EAAUS,EAAI3D,cAAcO,KAAKsC,KAAKK,SAC5C,SAAIA,IAAWA,EAAQW,UAAUC,SAASvD,KAAKsC,KAAKM,sBAApD,CAEA,EAEJY,WAAY,iBACZC,QAASzD,KAAK0D,SAASC,KAAK3D,MAC5B4D,OAAQ5D,KAAK6D,QAAQF,KAAK3D,MAC1B8D,MAAO9D,KAAK+D,OAAOJ,KAAK3D,OAEhC,CAOA0D,SAASM,GACL,MAAMC,EAAOjE,KAAK6C,MAAMqB,iBAAiB,MAEzC,GAAIlE,KAAKsC,KAAKI,KAAM,CAChB1C,KAAK0C,KAAO,IAAI7C,EAASoE,GAGzB,MAAME,EAAkB7D,SAAS0D,EAAII,KAAKhE,QAAQI,QAC7CM,MAAMqD,IACPF,EAAK/C,SAAQkC,IACT,MAAMiB,EAAW/D,SAAS8C,EAAIhD,QAAQI,QACjCM,MAAMuD,IAAaA,IAAaF,GACjCf,EAAIE,UAAUgB,IAAItE,KAAKsC,KAAKM,cAChC,GAGZ,CACJ,CAQAiB,QAAQG,GACJ,OAAQA,EAAIO,QAAQjB,UAAUC,SAASvD,KAAKsC,KAAKM,cACrD,CAOAmB,OAAOC,GAEUhE,KAAK6C,MAAMqB,iBAAiB,MACpChD,SAAQkC,IACTA,EAAIE,UAAUkB,OAAOxE,KAAKsC,KAAKM,cAAc,IAGjD,MAAM6B,EAAQzE,KAAK0E,cAAcV,GACjC,IAAKS,EAAMrD,QAA2B,IAAjBqD,EAAMrD,OACvB,OAGJpB,KAAK2E,gBAAgBX,EAAKS,GAE1B,MAAM9C,EAAM3B,KAAK4E,gBAAgBZ,EAAKS,GAGhCI,EAAW7E,KAAK6C,MAAMqB,iBAAiBlE,KAAKsC,KAAKK,SACvDkC,EAAS3D,SAAQyB,IACbA,EAAQW,UAAUgB,IAAItE,KAAKsC,KAAKM,cAAc,IAIlD5C,KAAK8E,aAAanD,GAAKoD,MAAK,KAExBF,EAAS3D,SAAQyB,IACbA,EAAQW,UAAUkB,OAAOxE,KAAKsC,KAAKM,cAAc,GACnD,GAEV,CAQA8B,cAAcV,GACV,MAAMgB,EAAaC,KAAKC,IAAIlB,EAAImB,SAAUnB,EAAIoB,UACxCC,EAAWJ,KAAKK,IAAItB,EAAImB,SAAUnB,EAAIoB,UACtCnB,EAAOjE,KAAK6C,MAAMqB,iBAAiB,MACzC,IAAIqB,EAAQC,MAAMC,UAAUF,MAAMG,KAAKzB,EAAMe,EAAYK,EAAW,GACpE,GAAIrF,KAAK0C,KAAM,CAEX,MAAMrC,EAAKC,SAAS0D,EAAII,KAAKhE,QAAQG,IAC/BK,EAAOZ,KAAK0C,KAAKlB,QAAQnB,GAC/BkF,EAAQA,EAAMpC,QAAOC,GACV9C,SAAS8C,EAAIhD,QAAQI,UAAYI,EAAKJ,QAErD,CACA,OAAO+E,CACX,CASAX,gBAAgBZ,EAAKC,GACjB,MAAM0B,EAAU,GACVC,EAAa,GAGnB3B,EAAK/C,SAAQkC,IACMA,EAAI3D,cAAcO,KAAKsC,KAAKK,WAEvCgD,EAAQ3E,KAAKV,SAAS8C,EAAIhD,QAAQG,KAClCqF,EAAW5E,KAAKV,SAAS8C,EAAIhD,QAAQyF,aACzC,IAWJ,OAPkB7B,EAAImB,SAAWnB,EAAIoB,SAEjCQ,EAAWtE,QAAQsE,EAAWE,OAE9BF,EAAW5E,KAAK4E,EAAWrE,SAGxBoE,EAAQ7D,QAAO,CAACC,EAAQ1B,EAAI0F,KAC/BhE,EAAO1B,GAAMuF,EAAWG,GAMxB,OAHY/F,KAAK6C,MAAMpD,cAAe,eAAcY,OAChD2F,aAAa,mBAAoBJ,EAAWG,IAEzChE,CAAM,GACd,CAAC,EACR,CAWA4C,gBAAgBX,EAAKS,GACjB,IAAKzE,KAAK0C,KACN,OAGJ,MAAMrC,EAAKC,SAAS0D,EAAII,KAAKhE,QAAQG,IAC/BK,EAAOZ,KAAK0C,KAAKlB,QAAQnB,GACzB4F,EAAOjC,EAAII,KAAK8B,uBAChBC,EAAOnC,EAAII,KAAKgC,mBAChBC,EAAU5B,EAAMc,QACtB,GAAIU,GAAQE,EAAM,CAGd,MAAMG,EAAgBhG,SAAS2F,EAAK7F,QAAQI,UAAYI,EAAKJ,OACvD+F,EAAcjG,SAAS6F,EAAK/F,QAAQI,UAAYF,SAAS2F,EAAK7F,QAAQG,IACxE+F,GAAiBC,IAAgBF,EAAQG,SAASP,IAClDI,EAAQ/E,QAAQ2E,EAExB,CAGAI,EAAQnF,SAAQV,IACZ,MAAMH,EAAKC,SAASE,EAAOJ,QAAQG,IAC7BG,EAASV,KAAK0C,KAAKb,eAAexB,GACxCoG,QAAQhB,UAAUiB,MAAMC,MAAMnG,EAAQE,EAAO,GAErD,CAQAoE,aAAa8B,GACT,OAAOC,MAAM7G,KAAKsC,KAAKG,IAAK,CACxBqE,OAAQ,OACRC,YAAa,cACbC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUP,KACtB7B,MAAKqC,IACJ,IAAKA,EAASC,GAAI,CACd,MAAMC,EAAQ,IAAI7F,MAAO,GAAE2F,EAASG,UAAUH,EAASI,cAEvD,MADAF,EAAMF,SAAWA,EACXE,CACV,IAER,E,cCtQJ,MAAMG,EAAgB,gBAGhBC,EAAgB,yBAChBC,EAAiB,0BACjBC,EAAY,qBACZC,EAAc,uBA2KpB,SAASC,EAAW7D,EAAM8D,GACtB9D,EAAK/C,SAAQkC,IACLA,GAAuB,OAAhBA,EAAI4E,SACX5E,EAAI6E,cACA,IAAIC,YAAY,SAAU,CACtBC,SAAS,EACTC,YAAY,EACZC,OAAQ,CACJC,MAAOP,KAIvB,GAER,CAEA,SAASQ,EAAcC,GACnB,MAAMC,EAAWD,EAAO1G,QAAO,CAAC4G,EAAKC,IAAUD,GAAOC,EAAMZ,QAAU,EAAI,IAAI,GAC7DvI,SAAS0E,iBAAkB,IAAGwD,KACtCxG,SAAQ0H,IACbA,EAAQC,UAAYC,YAChBC,SAAS,8BAA+B,8BAA+BN,GACvE,CACIO,IAAKP,EACLQ,IAAKL,EAAQxI,QAAQ8I,cAEzB,EACH,IAGDT,IAAaD,EAAOpH,OAWN5B,SAAS0E,iBAAkB,IAAGyD,KACtCzG,SAAQiI,IACdA,EAASC,QAAS,CAAK,IAVvBC,EAAYb,EAEpB,CAgBA,SAASc,EAAeC,GACA/J,SAAS0E,iBA9NZ,qDA+NLhD,SAAQyH,IAChBA,EAAMY,MAAQC,OAAOD,EAAM,GAEnC,CA0BA,SAASF,EAAYb,GACjBc,GAAe,GAEE9J,SAAS0E,iBAAkB,IAAGwD,KACtCxG,SAAQ0H,IACbA,EAAQQ,QAAS,CAAK,IAGJ5J,SAAS0E,iBAAkB,IAAG0D,KACtC1G,SAAQuI,IAClBA,EAAUL,QAAS,CAAI,IAG3B,MAAMX,EAAWD,EAAO1G,QAAO,CAAC4G,EAAKC,IAAUD,GAAOC,EAAMZ,QAAU,EAAI,IAAI,GAC5DvI,SAAS0E,iBAAkB,IAAGyD,KACtCzG,SAAQiI,IACdA,EAASC,OAASX,IAAaD,EAAOpH,MAAM,IAG1B5B,SAAS0E,iBAAkB,IAAG2D,KACtC3G,SAAQwI,IAClBA,EAAaN,QAAS,CAAI,GAElC,CAEA,MAAMO,EAAanK,SAAS0E,iBAAkB,kBAC1CyF,EAAWvI,QApRf,SAAqBoH,GACjB,IAAIoB,EAAc,KAClB,MAAMxH,EAAQ5C,SAASqK,eAAe,eAChCC,EAAiBtK,SAASqK,eAAepC,GAG/CqC,EAAe3K,iBAAiB,UAAU,KACtC,MAAM8E,EAAOuE,EAAO7G,KAAIgH,GAASA,EAAMoB,QAAQ,QAC/CjC,EAAW7D,EAAM6F,EAAe/B,SAChCQ,EAAcC,EAAO,IAIzBpG,EAAMjD,iBAAiB,UAAUC,IAC7B,MAAM4K,EAAS5K,EAAM4K,OACrB,GAAuB,OAAnBA,EAAOhC,SAAoBgC,EAAOD,QAAQ,WAAa3H,EACvD,OAGJ,MAAMkG,EAAQ2B,QAAQ7K,EAAMiJ,OAAOC,OAClB0B,EAAOvK,cAAe,kBAC9BsI,QAAUO,EACnB0B,EAAO1G,UAAU4G,OAAO,WAAY5B,GAGpCwB,EAAe/B,QAAkD,MAAxCS,EAAO2B,MAAKxB,IAAUA,EAAMZ,SAAgB,IAGzE3F,EAAMjD,iBAAiB,SAASC,IAC5B,MAAM4K,EAAS5K,EAAM4K,OAGf5G,EAAM4G,EAAOD,QAAQ,MAC3B,IAAK3G,EACD,OAGJ,MAAMgH,EAAmBJ,EAAOD,QA5CR,oCA6ClBM,EAAWjH,EAAI3D,cAAe,kBAEpC,GAAIL,EAAMkL,UAAYV,EAAa,CAE/B,MAAMW,EAAY/B,EAAOgC,QAAQZ,GAC3Ba,EAAcjC,EAAOgC,QAAQH,GAC7BK,EAAazF,KAAKC,IAAIqF,EAAWE,GACjCE,EAAW1F,KAAKK,IAAIiF,EAAWE,GAE/BxG,EADcuE,EAAOjD,MAAMmF,EAAYC,EAAW,GAC/BhJ,KAAIgH,GAASA,EAAMoB,QAAQ,QACpDjC,EAAW7D,EAAM2F,EAAY7B,QACjC,MAAWqC,GAAqBhL,EAAME,UAAYF,EAAMkL,YAEpDV,EAAcS,EACdvC,EAAW,CAAC1E,IAAOiH,EAAStC,UAGhCQ,EAAcC,EAAO,IAIzBpG,EAAMjD,iBAAiB,aAAaC,IAChC,MAAM4K,EAAS5K,EAAM4K,QACjB5K,EAAMkL,UAAgC,OAAnBN,EAAOhC,SAAuC,OAAnBgC,EAAOhC,SACrD5I,EAAMQ,gBACV,IAIJJ,SAASL,iBAAiB,SAASC,IAC/B,MAAM4K,EAAS5K,EAAM4K,OACE,MAAnBA,EAAOhC,SAAmBgC,EAAOD,QAAS,IAAGpC,OAC7CvI,EAAMQ,iBA6Jd0J,GAAe,GAEE9J,SAAS0E,iBAAkB,IAAGwD,KACtCxG,SAAQ0H,IACbA,EAAQQ,QAAS,CAAI,IAGH5J,SAAS0E,iBAAkB,IAAG0D,KACtC1G,SAAQuI,IAClBA,EAAUL,QAAS,CAAK,IAGV5J,SAAS0E,iBAAkB,IAAGyD,KACtCzG,SAAQiI,IACdA,EAASC,QAAS,CAAI,IAGJ5J,SAAS0E,iBAAkB,IAAG2D,KACtC3G,SAAQwI,IAClBA,EAAaN,QAAS,CAAK,IA9K3B,IAIJ5J,SAASL,iBAAiB,SAASC,IAC/B,MAAM4K,EAAS5K,EAAM4K,OACrB,GAAuB,MAAnBA,EAAOhC,SAAmBgC,EAAOD,QAAS,IAAGlC,KAAgB,CAC7DzI,EAAMQ,iBACNkK,EAAe/B,SAAU,EACzB,MAAM9D,EAAOuE,EAAO7G,KAAIgH,GAASA,EAAMoB,QAAQ,QAC/CjC,EAAW7D,GAAM,GACjBoF,EAAYb,GACZD,EAAcC,EAClB,KASR,WACI,IAAIoC,GAAwB,EACfpL,SAASqK,eAAe,mBAEhC1K,iBAAiB,UAAUC,IAC5B,MAAM4K,EAAS5K,EAAM4K,OACE,UAAnBA,EAAOhC,QACHgC,EAAOD,QAAS,mBAAwBC,EAAOzJ,KAAOkH,IAGtDmD,GAAwB,GAEF,WAAnBZ,EAAOhC,SACVgC,EAAOD,QAAQ,oBAMnBa,GAAwB,EAC5B,IAGJpL,SAASL,iBAAiB,SAASC,IAChBA,EAAM4K,OACQD,QAAQ,mBAChBa,IACHC,QACVC,QACI,sHAIJ1L,EAAMQ,iBAEd,IAGJJ,SAASL,iBAAiB,SAASC,IAC/B,MACM2L,EADS3L,EAAM4K,OACMD,QAAQ,kBAE7BiB,EAAiBxL,SAAS0E,iBAAiB,kCAC3C+G,GAAkBzF,MAAMC,UAAUyF,MAAMxF,KAAKsF,GAAgBG,IACvDA,EAAO5B,QAGnB,GAAIwB,GAAeE,EAAgB,CAC/B,IAAItE,EAEAA,EADAiE,EACQC,QACJC,QACI,yJAIAD,QACJC,QACI,+JAIPnE,GACDvH,EAAMQ,gBAEd,IAER,CAzEIwL,EACJ,CA4LIC,CAAY7F,MAAM8F,KAAK3B,I,QC/R3B,MAAM4B,EAAO/L,SAASC,cAAc,sBAC9BkJ,EAAQ4C,GAAQA,EAAK9L,cAAc,iBACzCkJ,GACIA,EAAMxJ,iBAAiB,SAAS,KAC5BwJ,EAAMwC,QAAQ,I,kCCHtB,MAAMK,UAAwBC,EAAAA,EAC1B3L,YAAYuC,GACRqJ,QAEA1L,KAAKsC,KAAOC,OAAOC,OACf,CACImJ,UAAU,EACVC,OAAQ5L,KAAK6L,aACbC,WAAY9L,KAAK+L,kBAErB1J,EAER,CAEA2J,MAAMvL,GACF,MAAMwL,EAAYxL,EAAQhB,cAAc,sBAClCyM,EAAkB3J,OAAOC,OAAO,CAAC,EAAGxC,KAAKsC,OAC/C6J,EAAAA,EAAAA,IAAUF,EAAWC,GAErB,MAAME,EAAU3L,EAAQhB,cAAc,oBAChC4M,EAAgB9J,OAAOC,OAAO,CAAC,EAAGxC,KAAKsC,OAC7C6J,EAAAA,EAAAA,IAAUC,EAASC,GAEnB5L,EAAQtB,iBAAiB,SAASC,IAC9B,MAAMkN,EAASlN,EAAM4K,OAAOD,QAAQ,gBACpC,GAAIuC,EAAQ,CACR,MAAMC,EAAaD,EAAOvC,QAAQ,gBAC5BpB,EAAQ4D,GAAcA,EAAW9M,cAAc,SACjDkJ,GAASA,EAAM6D,YACf7D,EAAM6D,WAAWC,QAAQ,QAEjC,IAER,CAEAC,SAASjM,GACL,MAAMwL,EAAYxL,EAAQhB,cAAc,sBACpCwM,EAAUO,YACVP,EAAUO,WAAWG,UAGzB,MAAMP,EAAU3L,EAAQhB,cAAc,oBAClC2M,EAAQI,YACRJ,EAAQI,WAAWG,SAE3B,CAEAd,aACI,IAAK,MAAMD,KAAUgB,EAAAA,EAAAA,KACjB,GAAIT,EAAAA,GAAAA,MAAgBP,GAChB,OAAOA,EAGf,MAAO,SACX,CAEAG,iBACI,IAAK,MAAMH,KAAUgB,EAAAA,EAAAA,KACjB,GAAIC,EAAAA,GAAYjB,GACZ,OAAOiB,EAAAA,GAAYjB,GAG3B,MAAO,OACX,EAGJ,MAAMkB,EAAS,IAAItB,EACnBsB,EAAOnJ,KAAK,4BACZmJ,EAAOC,SCtEP,MAAMD,EAAS,IAAIE,EAAAA,EAAc,CAC7BC,MAAO,OACPC,YAAY,EACZC,kBAAmB,6BAEvBL,EAAOnJ,KAAK,gCACZmJ,EAAOC,SCWP,MAAMK,EAAqB,IAAIJ,EAAAA,EAAc,CACzCC,MAAO,GACPC,YAAY,EACZC,kBAAmB,6BAEvBC,EAAmBzJ,KAAK,qCACxByJ,EAAmBL,SAEnB,MAAMM,EAAiB,IAAIL,EAAAA,EAAc,CACrCE,YAAY,EACZC,kBAAmB,2BACnBG,wBAAyBC,MAE7BF,EAAe1J,KAAK,iCACpB0J,EAAeN,SAGf,MAAM3K,EAAQ5C,SAASqK,eAAe,eAClCzH,GAASA,EAAMkB,UAAUC,SAAS,0BAClC,IAAIpB,EAAcC,EAAO,CACrBK,IAAKL,EAAMhC,QAAQoN,SACnB9K,KAAMN,EAAMkB,UAAUC,SAAS,qBAC/BZ,QAAS,8B","sources":["webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-pagination/paper-pagination.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/ListTree.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/SortableTable.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-actions/paper-actions.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-search-form/paper-search-form.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/filters/date-range-filter/date-range-filter.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/filters/select2-filter/select2-filter.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changelist.js"],"sourcesContent":["// Ctrl + Arrows navigation\nwindow.addEventListener(\"keydown\", event => {\n    if (event.defaultPrevented) {\n        return; // Do nothing if the event was already processed\n    }\n\n    if (event.ctrlKey) {\n        const pagination = document.querySelector(\".paper-pagination\");\n        if (!pagination) {\n            return;\n        }\n\n        switch (event.key) {\n            case \"Left\":\n            case \"ArrowLeft\":\n                pagination.querySelector('.page-link[aria-label=\"Previous\"]').click();\n                break;\n            case \"Right\":\n            case \"ArrowRight\":\n                pagination.querySelector('.page-link[aria-label=\"Next\"]').click();\n                break;\n            default:\n                // Quit when this doesn't handle the key event.\n                return;\n        }\n\n        // Cancel the default action to avoid it being handled twice\n        event.preventDefault();\n    }\n});\n","/**\n * @module ListTree\n */\n\n/**\n * @typedef {Object} module:ListTree.ListTreeNode\n * @property {Number}       pk\n * @property {Number}       parent\n * @property {HTMLElement}  element\n * @property {Number[]}     childs\n */\n\n/**\n * Представление списка DOM-элементов в виде дерева.\n * Каждый DOM-элемент должен иметь data-атрибуты \"id\" и \"parent\".\n * Каждый дочерний узел должен идти после родителя.\n */\nexport default class ListTree {\n    /**\n     * @param {NodeList|Element[]} elements\n     */\n    constructor(elements) {\n        this._buildTree(elements);\n    }\n\n    /**\n     * Создание структуры узла дерева.\n     * @param {HTMLElement} child\n     * @returns {module:ListTree.ListTreeNode}\n     * @private\n     */\n    _createNode(child) {\n        const dataset = child.dataset;\n        return {\n            pk: parseInt(dataset.id),\n            parent: parseInt(dataset.parent),\n            element: child,\n            childs: []\n        };\n    }\n\n    /**\n     * Добавление узла дерева в карту, для быстрого поиска по ID.\n     * @param {module:ListTree.ListTreeNode} node\n     * @private\n     */\n    _addNode(node) {\n        if (node && typeof node.pk === \"number\") {\n            this._nodes[node.pk] = node;\n            if (isNaN(node.parent)) {\n                this._roots.push(node);\n            }\n        }\n    }\n\n    /**\n     * Построение дерева из DOM-элементов.\n     * @param {NodeList|Element[]} elements\n     * @private\n     */\n    _buildTree(elements) {\n        const stack = [];\n\n        this._nodes = {};\n        this._roots = [];\n        elements.forEach(elem => {\n            const node = this._createNode(elem);\n            this._addNode(node);\n\n            while (stack.length) {\n                const stackNode = stack[0];\n                if (node.parent === stackNode.pk) {\n                    stackNode.childs.push(node.pk);\n                    stack.unshift(node);\n                    return;\n                }\n                stack.shift();\n            }\n\n            stack.unshift(node);\n        });\n    }\n\n    /**\n     * Получение узла по ID.\n     * @param {Number} pk\n     * @returns {module:ListTree.ListTreeNode}\n     */\n    getNode(pk) {\n        if (!(pk in this._nodes)) {\n            throw new Error(`node ${pk} not found`);\n        }\n\n        return this._nodes[pk];\n    }\n\n    /**\n     * Получение корневых элементов.\n     * @returns {Element[]}\n     */\n    getRoots() {\n        return this._roots.map(rootNode => {\n            return rootNode.element;\n        });\n    }\n\n    /**\n     * Получение всех потомков узла.\n     * @param {Number} pk\n     * @returns {Element[]}\n     */\n    getDescendants(pk) {\n        const node = this.getNode(pk);\n        return node.childs.reduce((result, childId) => {\n            const childNode = this.getNode(childId);\n            if (childNode) {\n                result.push(childNode.element);\n                result = result.concat(this.getDescendants(childId));\n            }\n            return result;\n        }, []);\n    }\n}\n","/**\n * Таблица с возможностью сортировки строк.\n * Каждая строка должна иметь атрибуты data-id и data-order-value.\n * В случае, если строки представляют дерево, то еще необходим атрибут data-parent.\n * @module SortableTable\n */\n\n/**\n * @typedef {Object} module:SortableTable.SortableTableOptions\n * @property {String}  url\n * @property {Boolean} [tree]\n * @property {String}  [handler]\n * @property {String}  [disabledClass]\n */\n\nimport Sortable from \"sortablejs\";\nimport ListTree from \"js/components/sortable_table/ListTree.js\";\n\nexport default class SortableTable {\n    /**\n     * @param {Element} table\n     * @param {module:SortableTable.SortableTableOptions} [options]\n     */\n    constructor(table, options) {\n        /** @type {module:SortableTable.SortableTableOptions} */\n        this.opts = Object.assign(\n            {\n                url: null,\n                tree: false,\n                handler: \".handler\",\n                disabledClass: \"disabled\"\n            },\n            options\n        );\n\n        /** @type {Element} */\n        this.table = table;\n\n        /** @type {Element} */\n        this.tbody = table.querySelector(\"tbody\");\n        if (!this.tbody) {\n            throw new Error(\"table body not found\");\n        }\n\n        /** @type {?ListTree} */\n        this.tree = null;\n\n        this._createSortable();\n    }\n\n    /**\n     * Инициализация плагина сортировки.\n     * @returns {Sortable}\n     * @private\n     */\n    _createSortable() {\n        return Sortable.create(this.tbody, {\n            animation: 0,\n            draggable: \"tr\",\n            handle: this.opts.handler,\n            filter: (event, row, instance) => {\n                if (row.classList.contains(this.opts.disabledClass)) {\n                    return true;\n                }\n\n                const handler = row.querySelector(this.opts.handler);\n                if (handler && handler.classList.contains(this.opts.disabledClass)) {\n                    return true;\n                }\n            },\n            ghostClass: \"sortable-ghost\",\n            onStart: this._onStart.bind(this),\n            onMove: this._onMove.bind(this),\n            onEnd: this._onEnd.bind(this)\n        });\n    }\n\n    /**\n     * Обработчик события начала перетаскивания.\n     * @param evt\n     * @private\n     */\n    _onStart(evt) {\n        const rows = this.tbody.querySelectorAll(\"tr\");\n\n        if (this.opts.tree) {\n            this.tree = new ListTree(rows);\n\n            // Блокируем все узлы, кроме соседних.\n            const currentParentId = parseInt(evt.item.dataset.parent);\n            if (!isNaN(currentParentId)) {\n                rows.forEach(row => {\n                    const parentId = parseInt(row.dataset.parent);\n                    if (!isNaN(parentId) && parentId !== currentParentId) {\n                        row.classList.add(this.opts.disabledClass);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Обработчик события перетаскивания.\n     * @param evt\n     * @returns {boolean}\n     * @private\n     */\n    _onMove(evt) {\n        return !evt.related.classList.contains(this.opts.disabledClass);\n    }\n\n    /**\n     * Обработчик события завершения перетаскивания.\n     * @param evt\n     * @private\n     */\n    _onEnd(evt) {\n        // Снимаем блокировку со всех узлов.\n        const rows = this.tbody.querySelectorAll(\"tr\");\n        rows.forEach(row => {\n            row.classList.remove(this.opts.disabledClass);\n        });\n\n        const moved = this._getMovedRows(evt);\n        if (!moved.length || moved.length === 1) {\n            return;\n        }\n\n        this._normalizeTable(evt, moved);\n\n        const map = this._createOrderMap(evt, moved);\n\n        // блокировка областей сортировки на время выполнения запроса\n        const handlers = this.tbody.querySelectorAll(this.opts.handler);\n        handlers.forEach(handler => {\n            handler.classList.add(this.opts.disabledClass);\n        });\n\n        // отправка запроса на сервер\n        this._sendRequest(map).then(() => {\n            // снятие блокировки\n            handlers.forEach(handler => {\n                handler.classList.remove(this.opts.disabledClass);\n            });\n        });\n    }\n\n    /**\n     * Получение строк, чей порядок изменился после перетаскивания.\n     * @param evt\n     * @returns {HTMLElement[]}\n     * @private\n     */\n    _getMovedRows(evt) {\n        const sliceStart = Math.min(evt.oldIndex, evt.newIndex);\n        const sliceEnd = Math.max(evt.oldIndex, evt.newIndex);\n        const rows = this.tbody.querySelectorAll(\"tr\");\n        let slice = Array.prototype.slice.call(rows, sliceStart, sliceEnd + 1);\n        if (this.tree) {\n            // пропускаем узлы, не являющиеся соседними\n            const pk = parseInt(evt.item.dataset.id);\n            const node = this.tree.getNode(pk);\n            slice = slice.filter(row => {\n                return parseInt(row.dataset.parent) === node.parent;\n            });\n        }\n        return slice;\n    }\n\n    /**\n     * Создание карты новых значений сортировки элементов.\n     * @param evt\n     * @param {HTMLElement[]} rows\n     * @returns {Object}\n     * @private\n     */\n    _createOrderMap(evt, rows) {\n        const pkArray = [];\n        const orderArray = [];\n\n        // заполнение массивов ID и сортировки\n        rows.forEach(row => {\n            const handle = row.querySelector(this.opts.handler);\n            if (handle) {\n                pkArray.push(parseInt(row.dataset.id));\n                orderArray.push(parseInt(row.dataset.orderValue));\n            }\n        });\n\n        // циклический сдвиг значений сортировки\n        const movedDown = evt.oldIndex < evt.newIndex;\n        if (movedDown) {\n            orderArray.unshift(orderArray.pop());\n        } else {\n            orderArray.push(orderArray.shift());\n        }\n\n        return pkArray.reduce((result, pk, i) => {\n            result[pk] = orderArray[i];\n\n            // обновляем атрибут data-order-value\n            const row = this.tbody.querySelector(`tr[data-id=\"${pk}\"]`);\n            row.setAttribute(\"data-order-value\", orderArray[i]);\n\n            return result;\n        }, {});\n    }\n\n    /**\n     * Нормализация таблицы.\n     * Все дочерние строки перемещаются под своего родителя.\n     * Без этого метода может случиться ситуация, когда элемент\n     * был перемещен между своим соседом и его детьми.\n     * @param evt\n     * @param {Element[]} moved\n     * @private\n     */\n    _normalizeTable(evt, moved) {\n        if (!this.tree) {\n            return;\n        }\n\n        const pk = parseInt(evt.item.dataset.id);\n        const node = this.tree.getNode(pk);\n        const prev = evt.item.previousElementSibling;\n        const next = evt.item.nextElementSibling;\n        const parents = moved.slice();\n        if (prev && next) {\n            // если предыдущая строка - сосед, а следующая - ребенок соседа,\n            // то сосед должен быть в списке нормализации.\n            const isPrevSibling = parseInt(prev.dataset.parent) === node.parent;\n            const isNextChild = parseInt(next.dataset.parent) === parseInt(prev.dataset.id);\n            if (isPrevSibling && isNextChild && !parents.includes(prev)) {\n                parents.unshift(prev);\n            }\n        }\n\n        // перенос детей под родителя\n        parents.forEach(parent => {\n            const pk = parseInt(parent.dataset.id);\n            const childs = this.tree.getDescendants(pk);\n            Element.prototype.after.apply(parent, childs);\n        });\n    }\n\n    /**\n     * Отправка новых значений сортировки на сервер.\n     * @param {Object} data\n     * @returns {Promise<Response>}\n     * @private\n     */\n    _sendRequest(data) {\n        return fetch(this.opts.url, {\n            method: \"POST\",\n            credentials: \"same-origin\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }).then(response => {\n            if (!response.ok) {\n                const error = new Error(`${response.status} ${response.statusText}`);\n                error.response = response;\n                throw error;\n            }\n        });\n    }\n}\n","/*global gettext, interpolate, ngettext*/\n\nimport \"./paper-actions.scss\";\n\nconst TOGGLE_ALL_ID = \"action-toggle\";\nconst CHECKBOX_CLASS = \"action-select\";\nconst CHECKBOX_LABEL_SELECTOR = \".action-checkbox .custom-control\";\nconst COUNTER_CLASS = \"paper-actions__counter\";\nconst QUESTION_CLASS = \"paper-actions__question\";\nconst ALL_CLASS = \"paper-actions__all\";\nconst CLEAR_CLASS = \"paper-actions__clear\";\nconst ACROSS_INPUT = \".paper-actions__select_across input.select-across\";\n\nfunction initActions(inputs) {\n    let lastChecked = null;\n    const table = document.getElementById(\"result_list\");\n    const allToggleInput = document.getElementById(TOGGLE_ALL_ID);\n\n    // клик на чекбокс \"выбрать все\"\n    allToggleInput.addEventListener(\"change\", () => {\n        const rows = inputs.map(input => input.closest(\"tr\"));\n        toggleRows(rows, allToggleInput.checked);\n        updateCounter(inputs);\n    });\n\n    // пользовательское событие выделения ряда таблицы\n    table.addEventListener(\"select\", event => {\n        const target = event.target;\n        if (target.tagName !== \"TR\" || target.closest(\"table\") !== table) {\n            return;\n        }\n\n        const state = Boolean(event.detail.state);\n        const checkbox = target.querySelector(`.${CHECKBOX_CLASS}`);\n        checkbox.checked = state;\n        target.classList.toggle(\"selected\", state);\n\n        // все ли чекбоксы выделены\n        allToggleInput.checked = inputs.find(input => !input.checked) == null;\n    });\n\n    table.addEventListener(\"click\", event => {\n        const target = event.target;\n\n        // клик вне строк таблицы\n        const row = target.closest(\"tr\");\n        if (!row) {\n            return;\n        }\n\n        const checkbox_clicked = target.closest(CHECKBOX_LABEL_SELECTOR);\n        const checkbox = row.querySelector(`.${CHECKBOX_CLASS}`);\n\n        if (event.shiftKey && lastChecked) {\n            // массовое выделение (через Shift)\n            const lastIndex = inputs.indexOf(lastChecked);\n            const targetIndex = inputs.indexOf(checkbox);\n            const startIndex = Math.min(lastIndex, targetIndex);\n            const endIndex = Math.max(lastIndex, targetIndex);\n            const input_slice = inputs.slice(startIndex, endIndex + 1);\n            const rows = input_slice.map(input => input.closest(\"tr\"));\n            toggleRows(rows, lastChecked.checked);\n        } else if (checkbox_clicked || (event.ctrlKey && !event.shiftKey)) {\n            // клик на чекбокс или на строку через Ctrl\n            lastChecked = checkbox;\n            toggleRows([row], !checkbox.checked);\n        }\n\n        updateCounter(inputs);\n    });\n\n    // отмена выделения текста при клике с удержанным Shift\n    table.addEventListener(\"mousedown\", event => {\n        const target = event.target;\n        if (event.shiftKey && (target.tagName === \"TD\" || target.tagName === \"TH\")) {\n            event.preventDefault();\n        }\n    });\n\n    // выбор всех записей таблицы\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        if (target.tagName === \"A\" && target.closest(`.${QUESTION_CLASS}`)) {\n            event.preventDefault();\n            selectAcross();\n        }\n    });\n\n    // очистка выбора\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        if (target.tagName === \"A\" && target.closest(`.${CLEAR_CLASS}`)) {\n            event.preventDefault();\n            allToggleInput.checked = false;\n            const rows = inputs.map(input => input.closest(\"tr\"));\n            toggleRows(rows, false);\n            clearAcross(inputs);\n            updateCounter(inputs);\n        }\n    });\n\n    protectEditForm();\n}\n\n/**\n * Требование подтверждения выполнения действия, если в форме были изменения.\n */\nfunction protectEditForm() {\n    let list_editable_changed = false;\n    const form = document.getElementById(\"changelist-form\");\n\n    form.addEventListener(\"change\", event => {\n        const target = event.target;\n        if (target.tagName === \"INPUT\") {\n            if (target.closest(`.${CHECKBOX_CLASS}`) || target.id === TOGGLE_ALL_ID) {\n                // nothing\n            } else {\n                list_editable_changed = true;\n            }\n        } else if (target.tagName === \"SELECT\") {\n            if (target.closest(\".action-action\")) {\n                // nothing\n            } else {\n                list_editable_changed = true;\n            }\n        } else {\n            list_editable_changed = true;\n        }\n    });\n\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        const action_button = target.closest('[name=\"index\"]');\n        if (action_button && list_editable_changed) {\n            const agree = confirm(\n                gettext(\n                    \"You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost.\"\n                )\n            );\n            if (!agree) {\n                event.preventDefault();\n            }\n        }\n    });\n\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        const save_button = target.closest('[name=\"_save\"]');\n\n        const action_selects = document.querySelectorAll('.actions select[name=\"action\"]');\n        const action_changed = !Array.prototype.every.call(action_selects, select => {\n            return !select.value;\n        });\n\n        if (save_button && action_changed) {\n            let apply;\n            if (list_editable_changed) {\n                apply = confirm(\n                    gettext(\n                        \"You have selected an action, but you haven't saved your changes to individual fields yet. Please click OK to save. You'll need to re-run the action.\"\n                    )\n                );\n            } else {\n                apply = confirm(\n                    gettext(\n                        \"You have selected an action, and you haven't made any changes on individual fields. You're probably looking for the Go button rather than the Save button.\"\n                    )\n                );\n            }\n            if (!apply) {\n                event.preventDefault();\n            }\n        }\n    });\n}\n\n/**\n * Установка/сброс галочки в чекбоксах.\n * @param {HTMLTableRowElement[]} rows\n * @param {Boolean} checked\n */\nfunction toggleRows(rows, checked) {\n    rows.forEach(row => {\n        if (row && row.tagName === \"TR\") {\n            row.dispatchEvent(\n                new CustomEvent(\"select\", {\n                    bubbles: true,\n                    cancelable: true,\n                    detail: {\n                        state: checked\n                    }\n                })\n            );\n        }\n    });\n}\n\nfunction updateCounter(inputs) {\n    const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.innerHTML = interpolate(\n            ngettext(\"%(sel)s of %(cnt)s selected\", \"%(sel)s of %(cnt)s selected\", selected),\n            {\n                sel: selected,\n                cnt: counter.dataset.actionsIcnt\n            },\n            true\n        );\n    });\n\n    if (selected === inputs.length) {\n        showQuestion();\n    } else {\n        clearAcross(inputs);\n    }\n}\n\n/**\n * Показ ссылки \"выбрать всё\"\n */\nfunction showQuestion() {\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = false;\n    });\n}\n\n/**\n * Установка значения input-элементу для выполнения действия над всеми элементами\n * @param {Boolean} value\n */\nfunction setAcrossInput(value) {\n    const acrossInput = document.querySelectorAll(ACROSS_INPUT);\n    acrossInput.forEach(input => {\n        input.value = Number(value);\n    });\n}\n\nfunction selectAcross() {\n    setAcrossInput(true);\n\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.hidden = true;\n    });\n\n    const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n    allContainers.forEach(container => {\n        container.hidden = false;\n    });\n\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = true;\n    });\n\n    const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n    clear_buttons.forEach(clear_button => {\n        clear_button.hidden = false;\n    });\n}\n\nfunction clearAcross(inputs) {\n    setAcrossInput(false);\n\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.hidden = false;\n    });\n\n    const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n    allContainers.forEach(container => {\n        container.hidden = true;\n    });\n\n    const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = selected !== inputs.length;\n    });\n\n    const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n    clear_buttons.forEach(clear_button => {\n        clear_button.hidden = true;\n    });\n}\n\nconst checkboxes = document.querySelectorAll(`.${CHECKBOX_CLASS}`);\nif (checkboxes.length) {\n    initActions(Array.from(checkboxes));\n}\n","import \"./paper-search-form.scss\";\n\n// Выделение текста в поле поиска при фокусе\nconst form = document.querySelector(\".paper-search-form\");\nconst input = form && form.querySelector(\".form-control\");\ninput &&\n    input.addEventListener(\"focus\", () => {\n        input.select();\n    });\n","import { dateFormats, flatpickr } from \"components/flatpickr\";\nimport getPossibleLocales from \"js/utilities/locale.js\";\nimport Widget from \"js/utilities/widget.js\";\n\nclass DateRangeFilter extends Widget {\n    constructor(options) {\n        super();\n\n        this.opts = Object.assign(\n            {\n                altInput: true,\n                locale: this._getLocale(),\n                dateFormat: this._getDateFormat()\n            },\n            options\n        );\n    }\n\n    _init(element) {\n        const dateStart = element.querySelector(\"[data-range-start]\");\n        const dateStartConfig = Object.assign({}, this.opts);\n        flatpickr(dateStart, dateStartConfig);\n\n        const dateEnd = element.querySelector(\"[data-range-end]\");\n        const dateEndConfig = Object.assign({}, this.opts);\n        flatpickr(dateEnd, dateEndConfig);\n\n        element.addEventListener(\"click\", event => {\n            const button = event.target.closest(\"[data-today]\");\n            if (button) {\n                const inputGroup = button.closest(\".input-group\");\n                const input = inputGroup && inputGroup.querySelector(\"input\");\n                if (input && input._flatpickr) {\n                    input._flatpickr.setDate(\"today\");\n                }\n            }\n        });\n    }\n\n    _destroy(element) {\n        const dateStart = element.querySelector(\"[data-range-start]\");\n        if (dateStart._flatpickr) {\n            dateStart._flatpickr.destroy();\n        }\n\n        const dateEnd = element.querySelector(\"[data-range-end]\");\n        if (dateEnd._flatpickr) {\n            dateEnd._flatpickr.destroy();\n        }\n    }\n\n    _getLocale() {\n        for (const locale of getPossibleLocales()) {\n            if (flatpickr.l10ns[locale]) {\n                return locale;\n            }\n        }\n        return \"default\";\n    }\n\n    _getDateFormat() {\n        for (const locale of getPossibleLocales()) {\n            if (dateFormats[locale]) {\n                return dateFormats[locale];\n            }\n        }\n        return \"Y-m-d\";\n    }\n}\n\nconst widget = new DateRangeFilter();\nwidget.bind(\".paper-date-range-filter\");\nwidget.attach();\n","import { Select2Widget } from \"components/select2\";\n\nconst widget = new Select2Widget({\n    width: \"100%\",\n    allowClear: true,\n    containerCssClass: \"select2-container--small\"\n});\nwidget.bind(\".paper-select2-filter select\");\nwidget.attach();\n","import SortableTable from \"js/components/sortable_table/SortableTable.js\";\nimport { Select2Widget } from \"components/select2\";\nimport \"bem/paper-actions/paper-actions.js\";\nimport \"bem/paper-filter/paper-filter.js\";\nimport \"bem/paper-pagination/paper-pagination.js\";\nimport \"bem/paper-search-form/paper-search-form.js\";\n\n// -----------------\n//  Filters\n// -----------------\nimport \"filters/date-range-filter\";\nimport \"filters/select2-filter\";\n\n// -----------------\n//  CSS\n// -----------------\nimport \"css/changelist.scss\";\n\n// Select2 для выпадающих списков\nconst select2_changelist = new Select2Widget({\n    width: \"\",\n    allowClear: true,\n    containerCssClass: \"select2-container--small\"\n});\nselect2_changelist.bind(\".paper-table .select-field select\");\nselect2_changelist.attach();\n\nconst select2_action = new Select2Widget({\n    allowClear: true,\n    containerCssClass: \"select2-container--small\",\n    minimumResultsForSearch: Infinity\n});\nselect2_action.bind(\".paper-actions__action select\");\nselect2_action.attach();\n\n// Сортируемые таблицы\nconst table = document.getElementById(\"result_list\");\nif (table && table.classList.contains(\"paper-table--sortable\")) {\n    new SortableTable(table, {\n        url: table.dataset.orderUrl,\n        tree: table.classList.contains(\"paper-table--tree\"),\n        handler: \".paper-table__sort-handler\"\n    });\n}\n"],"names":["window","addEventListener","event","defaultPrevented","ctrlKey","pagination","document","querySelector","key","click","preventDefault","ListTree","constructor","elements","this","_buildTree","_createNode","child","dataset","pk","parseInt","id","parent","element","childs","_addNode","node","_nodes","isNaN","_roots","push","stack","forEach","elem","length","stackNode","unshift","shift","getNode","Error","getRoots","map","rootNode","getDescendants","reduce","result","childId","childNode","concat","SortableTable","table","options","opts","Object","assign","url","tree","handler","disabledClass","tbody","_createSortable","Sortable","animation","draggable","handle","filter","row","instance","classList","contains","ghostClass","onStart","_onStart","bind","onMove","_onMove","onEnd","_onEnd","evt","rows","querySelectorAll","currentParentId","item","parentId","add","related","remove","moved","_getMovedRows","_normalizeTable","_createOrderMap","handlers","_sendRequest","then","sliceStart","Math","min","oldIndex","newIndex","sliceEnd","max","slice","Array","prototype","call","pkArray","orderArray","orderValue","pop","i","setAttribute","prev","previousElementSibling","next","nextElementSibling","parents","isPrevSibling","isNextChild","includes","Element","after","apply","data","fetch","method","credentials","headers","body","JSON","stringify","response","ok","error","status","statusText","TOGGLE_ALL_ID","COUNTER_CLASS","QUESTION_CLASS","ALL_CLASS","CLEAR_CLASS","toggleRows","checked","tagName","dispatchEvent","CustomEvent","bubbles","cancelable","detail","state","updateCounter","inputs","selected","sum","input","counter","innerHTML","interpolate","ngettext","sel","cnt","actionsIcnt","question","hidden","clearAcross","setAcrossInput","value","Number","container","clear_button","checkboxes","lastChecked","getElementById","allToggleInput","closest","target","Boolean","toggle","find","checkbox_clicked","checkbox","shiftKey","lastIndex","indexOf","targetIndex","startIndex","endIndex","list_editable_changed","confirm","gettext","save_button","action_selects","action_changed","every","select","protectEditForm","initActions","from","form","DateRangeFilter","Widget","super","altInput","locale","_getLocale","dateFormat","_getDateFormat","_init","dateStart","dateStartConfig","flatpickr","dateEnd","dateEndConfig","button","inputGroup","_flatpickr","setDate","_destroy","destroy","getPossibleLocales","dateFormats","widget","attach","Select2Widget","width","allowClear","containerCssClass","select2_changelist","select2_action","minimumResultsForSearch","Infinity","orderUrl"],"sourceRoot":""}