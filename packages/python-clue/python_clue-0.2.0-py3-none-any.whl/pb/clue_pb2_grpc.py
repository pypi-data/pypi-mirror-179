# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clue_pb2 as clue__pb2


class CLUEStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthLogin = channel.unary_unary(
                '/CLUE/AuthLogin',
                request_serializer=clue__pb2.RequestLogin.SerializeToString,
                response_deserializer=clue__pb2.ResponseLogin.FromString,
                )
        self.GetCohortList = channel.unary_unary(
                '/CLUE/GetCohortList',
                request_serializer=clue__pb2.RequestCohortList.SerializeToString,
                response_deserializer=clue__pb2.ResponseCohortList.FromString,
                )
        self.GetCohortTableList = channel.unary_unary(
                '/CLUE/GetCohortTableList',
                request_serializer=clue__pb2.EmptyMessage.SerializeToString,
                response_deserializer=clue__pb2.ResponseTableList.FromString,
                )
        self.GetCohortTableSchema = channel.unary_unary(
                '/CLUE/GetCohortTableSchema',
                request_serializer=clue__pb2.RequestTableSchema.SerializeToString,
                response_deserializer=clue__pb2.ResponseTableSchema.FromString,
                )
        self.GetCohortTable = channel.stream_stream(
                '/CLUE/GetCohortTable',
                request_serializer=clue__pb2.RequestCohortTable.SerializeToString,
                response_deserializer=clue__pb2.TableData.FromString,
                )
        self.GetCohortPersonTable = channel.stream_stream(
                '/CLUE/GetCohortPersonTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.PersonInfo.FromString,
                )
        self.GetCohortConditionOccurrenceTable = channel.stream_stream(
                '/CLUE/GetCohortConditionOccurrenceTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.ConditionOccurrenceInfo.FromString,
                )
        self.GetCohortDeathTable = channel.stream_stream(
                '/CLUE/GetCohortDeathTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.DeathInfo.FromString,
                )
        self.GetCohortDeviceExposureTable = channel.stream_stream(
                '/CLUE/GetCohortDeviceExposureTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.DeviceExposureInfo.FromString,
                )
        self.GetCohortDrugExposureTable = channel.stream_stream(
                '/CLUE/GetCohortDrugExposureTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.DrugExposureInfo.FromString,
                )
        self.GetCohortMeasurementTable = channel.stream_stream(
                '/CLUE/GetCohortMeasurementTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.MeasurementInfo.FromString,
                )
        self.GetCohortObservationPeriodTable = channel.stream_stream(
                '/CLUE/GetCohortObservationPeriodTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.ObservationPeriodInfo.FromString,
                )
        self.GetCohortObservationTable = channel.stream_stream(
                '/CLUE/GetCohortObservationTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.ObservationInfo.FromString,
                )
        self.GetCohortProcedureOccurrenceTable = channel.stream_stream(
                '/CLUE/GetCohortProcedureOccurrenceTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.ProcedureOccurrenceInfo.FromString,
                )
        self.GetCohortVisitOccurrenceTable = channel.stream_stream(
                '/CLUE/GetCohortVisitOccurrenceTable',
                request_serializer=clue__pb2.RequestCohortStream.SerializeToString,
                response_deserializer=clue__pb2.VisitOccurrenceInfo.FromString,
                )
        self.GetCohortComparison = channel.unary_unary(
                '/CLUE/GetCohortComparison',
                request_serializer=clue__pb2.RequestComparison.SerializeToString,
                response_deserializer=clue__pb2.ResponseComparison.FromString,
                )
        self.GetIncidenceRateResult = channel.unary_unary(
                '/CLUE/GetIncidenceRateResult',
                request_serializer=clue__pb2.RequestIncidenceRate.SerializeToString,
                response_deserializer=clue__pb2.ResponseIncidenceRateResult.FromString,
                )
        self.GetIncidenceRateRaw = channel.stream_stream(
                '/CLUE/GetIncidenceRateRaw',
                request_serializer=clue__pb2.RequestIncidenceRateStream.SerializeToString,
                response_deserializer=clue__pb2.IncidenceRateRawInfo.FromString,
                )


class CLUEServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortTableList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortTableSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortPersonTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortConditionOccurrenceTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortDeathTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortDeviceExposureTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortDrugExposureTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortMeasurementTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortObservationPeriodTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortObservationTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortProcedureOccurrenceTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortVisitOccurrenceTable(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCohortComparison(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIncidenceRateResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIncidenceRateRaw(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CLUEServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthLogin,
                    request_deserializer=clue__pb2.RequestLogin.FromString,
                    response_serializer=clue__pb2.ResponseLogin.SerializeToString,
            ),
            'GetCohortList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCohortList,
                    request_deserializer=clue__pb2.RequestCohortList.FromString,
                    response_serializer=clue__pb2.ResponseCohortList.SerializeToString,
            ),
            'GetCohortTableList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCohortTableList,
                    request_deserializer=clue__pb2.EmptyMessage.FromString,
                    response_serializer=clue__pb2.ResponseTableList.SerializeToString,
            ),
            'GetCohortTableSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCohortTableSchema,
                    request_deserializer=clue__pb2.RequestTableSchema.FromString,
                    response_serializer=clue__pb2.ResponseTableSchema.SerializeToString,
            ),
            'GetCohortTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortTable,
                    request_deserializer=clue__pb2.RequestCohortTable.FromString,
                    response_serializer=clue__pb2.TableData.SerializeToString,
            ),
            'GetCohortPersonTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortPersonTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.PersonInfo.SerializeToString,
            ),
            'GetCohortConditionOccurrenceTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortConditionOccurrenceTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.ConditionOccurrenceInfo.SerializeToString,
            ),
            'GetCohortDeathTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortDeathTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.DeathInfo.SerializeToString,
            ),
            'GetCohortDeviceExposureTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortDeviceExposureTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.DeviceExposureInfo.SerializeToString,
            ),
            'GetCohortDrugExposureTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortDrugExposureTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.DrugExposureInfo.SerializeToString,
            ),
            'GetCohortMeasurementTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortMeasurementTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.MeasurementInfo.SerializeToString,
            ),
            'GetCohortObservationPeriodTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortObservationPeriodTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.ObservationPeriodInfo.SerializeToString,
            ),
            'GetCohortObservationTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortObservationTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.ObservationInfo.SerializeToString,
            ),
            'GetCohortProcedureOccurrenceTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortProcedureOccurrenceTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.ProcedureOccurrenceInfo.SerializeToString,
            ),
            'GetCohortVisitOccurrenceTable': grpc.stream_stream_rpc_method_handler(
                    servicer.GetCohortVisitOccurrenceTable,
                    request_deserializer=clue__pb2.RequestCohortStream.FromString,
                    response_serializer=clue__pb2.VisitOccurrenceInfo.SerializeToString,
            ),
            'GetCohortComparison': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCohortComparison,
                    request_deserializer=clue__pb2.RequestComparison.FromString,
                    response_serializer=clue__pb2.ResponseComparison.SerializeToString,
            ),
            'GetIncidenceRateResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIncidenceRateResult,
                    request_deserializer=clue__pb2.RequestIncidenceRate.FromString,
                    response_serializer=clue__pb2.ResponseIncidenceRateResult.SerializeToString,
            ),
            'GetIncidenceRateRaw': grpc.stream_stream_rpc_method_handler(
                    servicer.GetIncidenceRateRaw,
                    request_deserializer=clue__pb2.RequestIncidenceRateStream.FromString,
                    response_serializer=clue__pb2.IncidenceRateRawInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CLUE', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CLUE(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/AuthLogin',
            clue__pb2.RequestLogin.SerializeToString,
            clue__pb2.ResponseLogin.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/GetCohortList',
            clue__pb2.RequestCohortList.SerializeToString,
            clue__pb2.ResponseCohortList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortTableList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/GetCohortTableList',
            clue__pb2.EmptyMessage.SerializeToString,
            clue__pb2.ResponseTableList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortTableSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/GetCohortTableSchema',
            clue__pb2.RequestTableSchema.SerializeToString,
            clue__pb2.ResponseTableSchema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortTable',
            clue__pb2.RequestCohortTable.SerializeToString,
            clue__pb2.TableData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortPersonTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortPersonTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.PersonInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortConditionOccurrenceTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortConditionOccurrenceTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.ConditionOccurrenceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortDeathTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortDeathTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.DeathInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortDeviceExposureTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortDeviceExposureTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.DeviceExposureInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortDrugExposureTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortDrugExposureTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.DrugExposureInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortMeasurementTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortMeasurementTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.MeasurementInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortObservationPeriodTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortObservationPeriodTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.ObservationPeriodInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortObservationTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortObservationTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.ObservationInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortProcedureOccurrenceTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortProcedureOccurrenceTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.ProcedureOccurrenceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortVisitOccurrenceTable(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetCohortVisitOccurrenceTable',
            clue__pb2.RequestCohortStream.SerializeToString,
            clue__pb2.VisitOccurrenceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCohortComparison(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/GetCohortComparison',
            clue__pb2.RequestComparison.SerializeToString,
            clue__pb2.ResponseComparison.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIncidenceRateResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CLUE/GetIncidenceRateResult',
            clue__pb2.RequestIncidenceRate.SerializeToString,
            clue__pb2.ResponseIncidenceRateResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIncidenceRateRaw(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CLUE/GetIncidenceRateRaw',
            clue__pb2.RequestIncidenceRateStream.SerializeToString,
            clue__pb2.IncidenceRateRawInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
