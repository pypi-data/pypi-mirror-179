# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: licensing.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0flicensing.proto\"J\n\x0fGetEnclaveReply\x12\x0b\n\x03jwt\x18\x01 \x01(\t\x12\x13\n\x0b\x65nclave_url\x18\x02 \x01(\t\x12\x15\n\rprivate_cloud\x18\x03 \x01(\x08\"$\n\x11GetEnclaveRequest\x12\x0f\n\x07\x61pi_key\x18\x01 \x01(\t2H\n\x10LicensingService\x12\x34\n\nGetEnclave\x12\x12.GetEnclaveRequest\x1a\x10.GetEnclaveReply\"\x00\x62\x06proto3')



_GETENCLAVEREPLY = DESCRIPTOR.message_types_by_name['GetEnclaveReply']
_GETENCLAVEREQUEST = DESCRIPTOR.message_types_by_name['GetEnclaveRequest']
GetEnclaveReply = _reflection.GeneratedProtocolMessageType('GetEnclaveReply', (_message.Message,), {
  'DESCRIPTOR' : _GETENCLAVEREPLY,
  '__module__' : 'licensing_pb2'
  # @@protoc_insertion_point(class_scope:GetEnclaveReply)
  })
_sym_db.RegisterMessage(GetEnclaveReply)

GetEnclaveRequest = _reflection.GeneratedProtocolMessageType('GetEnclaveRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETENCLAVEREQUEST,
  '__module__' : 'licensing_pb2'
  # @@protoc_insertion_point(class_scope:GetEnclaveRequest)
  })
_sym_db.RegisterMessage(GetEnclaveRequest)

_LICENSINGSERVICE = DESCRIPTOR.services_by_name['LicensingService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _GETENCLAVEREPLY._serialized_start=19
  _GETENCLAVEREPLY._serialized_end=93
  _GETENCLAVEREQUEST._serialized_start=95
  _GETENCLAVEREQUEST._serialized_end=131
  _LICENSINGSERVICE._serialized_start=133
  _LICENSINGSERVICE._serialized_end=205
# @@protoc_insertion_point(module_scope)
