# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class LogData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def LogDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x66\x31\x34\x34", size_prefixed=size_prefixed
        )

    # LogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LogData
    def SourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LogData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LogData
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # LogData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table

            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None


def LogDataStart(builder):
    builder.StartObject(4)


def Start(builder):
    return LogDataStart(builder)


def LogDataAddSourceName(builder, sourceName):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AddSourceName(builder, sourceName):
    return LogDataAddSourceName(builder, sourceName)


def LogDataAddTimestamp(builder, timestamp):
    builder.PrependInt64Slot(1, timestamp, 0)


def AddTimestamp(builder, timestamp):
    return LogDataAddTimestamp(builder, timestamp)


def LogDataAddValueType(builder, valueType):
    builder.PrependUint8Slot(2, valueType, 0)


def AddValueType(builder, valueType):
    return LogDataAddValueType(builder, valueType)


def LogDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0
    )


def AddValue(builder, value):
    return LogDataAddValue(builder, value)


def LogDataEnd(builder):
    return builder.EndObject()


def End(builder):
    return LogDataEnd(builder)
