# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class SampleEnvironmentData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SampleEnvironmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSampleEnvironmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def SampleEnvironmentDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x73\x65\x30\x30", size_prefixed=size_prefixed
        )

    # SampleEnvironmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SampleEnvironmentData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SampleEnvironmentData
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SampleEnvironmentData
    def PacketTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SampleEnvironmentData
    def TimeDelta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # SampleEnvironmentData
    def TimestampLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SampleEnvironmentData
    def ValuesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SampleEnvironmentData
    def Values(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            from flatbuffers.table import Table

            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # SampleEnvironmentData
    def Timestamps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # SampleEnvironmentData
    def TimestampsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # SampleEnvironmentData
    def TimestampsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SampleEnvironmentData
    def TimestampsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # SampleEnvironmentData
    def MessageCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0


def SampleEnvironmentDataStart(builder):
    builder.StartObject(9)


def Start(builder):
    return SampleEnvironmentDataStart(builder)


def SampleEnvironmentDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0
    )


def AddName(builder, name):
    return SampleEnvironmentDataAddName(builder, name)


def SampleEnvironmentDataAddChannel(builder, channel):
    builder.PrependInt32Slot(1, channel, 0)


def AddChannel(builder, channel):
    return SampleEnvironmentDataAddChannel(builder, channel)


def SampleEnvironmentDataAddPacketTimestamp(builder, packetTimestamp):
    builder.PrependInt64Slot(2, packetTimestamp, 0)


def AddPacketTimestamp(builder, packetTimestamp):
    return SampleEnvironmentDataAddPacketTimestamp(builder, packetTimestamp)


def SampleEnvironmentDataAddTimeDelta(builder, timeDelta):
    builder.PrependFloat64Slot(3, timeDelta, 0.0)


def AddTimeDelta(builder, timeDelta):
    return SampleEnvironmentDataAddTimeDelta(builder, timeDelta)


def SampleEnvironmentDataAddTimestampLocation(builder, timestampLocation):
    builder.PrependInt8Slot(4, timestampLocation, 0)


def AddTimestampLocation(builder, timestampLocation):
    return SampleEnvironmentDataAddTimestampLocation(builder, timestampLocation)


def SampleEnvironmentDataAddValuesType(builder, valuesType):
    builder.PrependUint8Slot(5, valuesType, 0)


def AddValuesType(builder, valuesType):
    return SampleEnvironmentDataAddValuesType(builder, valuesType)


def SampleEnvironmentDataAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0
    )


def AddValues(builder, values):
    return SampleEnvironmentDataAddValues(builder, values)


def SampleEnvironmentDataAddTimestamps(builder, timestamps):
    builder.PrependUOffsetTRelativeSlot(
        7, flatbuffers.number_types.UOffsetTFlags.py_type(timestamps), 0
    )


def AddTimestamps(builder, timestamps):
    return SampleEnvironmentDataAddTimestamps(builder, timestamps)


def SampleEnvironmentDataStartTimestampsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartTimestampsVector(builder, numElems):
    return SampleEnvironmentDataStartTimestampsVector(builder, numElems)


def SampleEnvironmentDataAddMessageCounter(builder, messageCounter):
    builder.PrependInt64Slot(8, messageCounter, 0)


def AddMessageCounter(builder, messageCounter):
    return SampleEnvironmentDataAddMessageCounter(builder, messageCounter)


def SampleEnvironmentDataEnd(builder):
    return builder.EndObject()


def End(builder):
    return SampleEnvironmentDataEnd(builder)
