# coding: utf-8

"""
    Sedaro Satellite API

     Allows for consumption of Sedaro Satellite services. Read more about Sedaro Satellite at [satellite.sedaro.com](https://satellite.sedaro.com).   # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sedaro_base_client import schemas  # noqa: F401


class JobGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "currentTime",
            "bedRef",
            "startTime",
            "stopTime",
            "dataRef",
            "jobType",
            "branch",
            "status",
        }
        
        class properties:
            
            
            class jobType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SIMULATION": "SIMULATION",
                    }
                
                @schemas.classproperty
                def SIMULATION(cls):
                    return cls("SIMULATION")
        
            @staticmethod
            def status() -> typing.Type['Statuses']:
                return Statuses
            branch = schemas.StrSchema
            
            
            class bedRef(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 40
            
            
            class dataRef(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 40
            startTime = schemas.NumberSchema
            currentTime = schemas.NumberSchema
            stopTime = schemas.NumberSchema
            __annotations__ = {
                "jobType": jobType,
                "status": status,
                "branch": branch,
                "bedRef": bedRef,
                "dataRef": dataRef,
                "startTime": startTime,
                "currentTime": currentTime,
                "stopTime": stopTime,
            }
    
    currentTime: MetaOapg.properties.currentTime
    bedRef: MetaOapg.properties.bedRef
    startTime: MetaOapg.properties.startTime
    stopTime: MetaOapg.properties.stopTime
    dataRef: MetaOapg.properties.dataRef
    jobType: MetaOapg.properties.jobType
    branch: MetaOapg.properties.branch
    status: 'Statuses'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> MetaOapg.properties.jobType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Statuses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bedRef"]) -> MetaOapg.properties.bedRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataRef"]) -> MetaOapg.properties.dataRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentTime"]) -> MetaOapg.properties.currentTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopTime"]) -> MetaOapg.properties.stopTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobType", "status", "branch", "bedRef", "dataRef", "startTime", "currentTime", "stopTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> MetaOapg.properties.jobType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'Statuses': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bedRef"]) -> MetaOapg.properties.bedRef: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataRef"]) -> MetaOapg.properties.dataRef: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentTime"]) -> MetaOapg.properties.currentTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopTime"]) -> MetaOapg.properties.stopTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobType", "status", "branch", "bedRef", "dataRef", "startTime", "currentTime", "stopTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        currentTime: typing.Union[MetaOapg.properties.currentTime, decimal.Decimal, int, float, ],
        bedRef: typing.Union[MetaOapg.properties.bedRef, str, ],
        startTime: typing.Union[MetaOapg.properties.startTime, decimal.Decimal, int, float, ],
        stopTime: typing.Union[MetaOapg.properties.stopTime, decimal.Decimal, int, float, ],
        dataRef: typing.Union[MetaOapg.properties.dataRef, str, ],
        jobType: typing.Union[MetaOapg.properties.jobType, str, ],
        branch: typing.Union[MetaOapg.properties.branch, str, ],
        status: 'Statuses',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobGet':
        return super().__new__(
            cls,
            *args,
            currentTime=currentTime,
            bedRef=bedRef,
            startTime=startTime,
            stopTime=stopTime,
            dataRef=dataRef,
            jobType=jobType,
            branch=branch,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from sedaro_base_client.model.statuses import Statuses
