# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _VkFFTBackendPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVkHalfHermitianToRealInverseFFTImageFilterPython
else:
    import _itkVkHalfHermitianToRealInverseFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkHalfHermitianToRealInverseFFTImageFilterPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkVkHalfHermitianToRealInverseFFTImageFilterICD2_New():
    return itkVkHalfHermitianToRealInverseFFTImageFilterICD2.New()

class itkVkHalfHermitianToRealInverseFFTImageFilterICD2(itk.itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICD2ID2):
    r"""Proxy of C++ itkVkHalfHermitianToRealInverseFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_Clone)
    SetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_SetUseVkGlobalConfiguration)
    GetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_GetUseVkGlobalConfiguration)
    SetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_SetDeviceID)
    GetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_GetDeviceID)
    __swig_destroy__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.delete_itkVkHalfHermitianToRealInverseFFTImageFilterICD2
    cast = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkVkHalfHermitianToRealInverseFFTImageFilterICD2

        Create a new object of the class itkVkHalfHermitianToRealInverseFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkHalfHermitianToRealInverseFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkHalfHermitianToRealInverseFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkHalfHermitianToRealInverseFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkHalfHermitianToRealInverseFFTImageFilterICD2 in _itkVkHalfHermitianToRealInverseFFTImageFilterPython:
_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_swigregister(itkVkHalfHermitianToRealInverseFFTImageFilterICD2)
itkVkHalfHermitianToRealInverseFFTImageFilterICD2___New_orig__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2___New_orig__
itkVkHalfHermitianToRealInverseFFTImageFilterICD2_cast = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD2_cast


def itkVkHalfHermitianToRealInverseFFTImageFilterICD3_New():
    return itkVkHalfHermitianToRealInverseFFTImageFilterICD3.New()

class itkVkHalfHermitianToRealInverseFFTImageFilterICD3(itk.itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICD3ID3):
    r"""Proxy of C++ itkVkHalfHermitianToRealInverseFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_Clone)
    SetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_SetUseVkGlobalConfiguration)
    GetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_GetUseVkGlobalConfiguration)
    SetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_SetDeviceID)
    GetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_GetDeviceID)
    __swig_destroy__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.delete_itkVkHalfHermitianToRealInverseFFTImageFilterICD3
    cast = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkVkHalfHermitianToRealInverseFFTImageFilterICD3

        Create a new object of the class itkVkHalfHermitianToRealInverseFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkHalfHermitianToRealInverseFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkHalfHermitianToRealInverseFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkHalfHermitianToRealInverseFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkHalfHermitianToRealInverseFFTImageFilterICD3 in _itkVkHalfHermitianToRealInverseFFTImageFilterPython:
_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_swigregister(itkVkHalfHermitianToRealInverseFFTImageFilterICD3)
itkVkHalfHermitianToRealInverseFFTImageFilterICD3___New_orig__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3___New_orig__
itkVkHalfHermitianToRealInverseFFTImageFilterICD3_cast = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICD3_cast


def itkVkHalfHermitianToRealInverseFFTImageFilterICF2_New():
    return itkVkHalfHermitianToRealInverseFFTImageFilterICF2.New()

class itkVkHalfHermitianToRealInverseFFTImageFilterICF2(itk.itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2):
    r"""Proxy of C++ itkVkHalfHermitianToRealInverseFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_Clone)
    SetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_SetUseVkGlobalConfiguration)
    GetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_GetUseVkGlobalConfiguration)
    SetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_SetDeviceID)
    GetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_GetDeviceID)
    __swig_destroy__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.delete_itkVkHalfHermitianToRealInverseFFTImageFilterICF2
    cast = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkVkHalfHermitianToRealInverseFFTImageFilterICF2

        Create a new object of the class itkVkHalfHermitianToRealInverseFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkHalfHermitianToRealInverseFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkHalfHermitianToRealInverseFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkHalfHermitianToRealInverseFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkHalfHermitianToRealInverseFFTImageFilterICF2 in _itkVkHalfHermitianToRealInverseFFTImageFilterPython:
_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_swigregister(itkVkHalfHermitianToRealInverseFFTImageFilterICF2)
itkVkHalfHermitianToRealInverseFFTImageFilterICF2___New_orig__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2___New_orig__
itkVkHalfHermitianToRealInverseFFTImageFilterICF2_cast = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF2_cast


def itkVkHalfHermitianToRealInverseFFTImageFilterICF3_New():
    return itkVkHalfHermitianToRealInverseFFTImageFilterICF3.New()

class itkVkHalfHermitianToRealInverseFFTImageFilterICF3(itk.itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3):
    r"""Proxy of C++ itkVkHalfHermitianToRealInverseFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_Clone)
    SetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_SetUseVkGlobalConfiguration)
    GetUseVkGlobalConfiguration = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_GetUseVkGlobalConfiguration)
    SetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_SetDeviceID)
    GetDeviceID = _swig_new_instance_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_GetDeviceID)
    __swig_destroy__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.delete_itkVkHalfHermitianToRealInverseFFTImageFilterICF3
    cast = _swig_new_static_method(_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkVkHalfHermitianToRealInverseFFTImageFilterICF3

        Create a new object of the class itkVkHalfHermitianToRealInverseFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkHalfHermitianToRealInverseFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkHalfHermitianToRealInverseFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkHalfHermitianToRealInverseFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkHalfHermitianToRealInverseFFTImageFilterICF3 in _itkVkHalfHermitianToRealInverseFFTImageFilterPython:
_itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_swigregister(itkVkHalfHermitianToRealInverseFFTImageFilterICF3)
itkVkHalfHermitianToRealInverseFFTImageFilterICF3___New_orig__ = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3___New_orig__
itkVkHalfHermitianToRealInverseFFTImageFilterICF3_cast = _itkVkHalfHermitianToRealInverseFFTImageFilterPython.itkVkHalfHermitianToRealInverseFFTImageFilterICF3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def vk_half_hermitian_to_real_inverse_fft_image_filter(*args: itkt.ImageLike,  use_vk_global_configuration: bool=..., device_id: int=..., actual_x_dimension_is_odd_input=..., actual_x_dimension_is_odd: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VkHalfHermitianToRealInverseFFTImageFilter"""
    import itk

    kwarg_typehints = { 'use_vk_global_configuration':use_vk_global_configuration,'device_id':device_id,'actual_x_dimension_is_odd_input':actual_x_dimension_is_odd_input,'actual_x_dimension_is_odd':actual_x_dimension_is_odd }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.VkHalfHermitianToRealInverseFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vk_half_hermitian_to_real_inverse_fft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.VkFFTBackend.VkHalfHermitianToRealInverseFFTImageFilter
    vk_half_hermitian_to_real_inverse_fft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vk_half_hermitian_to_real_inverse_fft_image_filter.__doc__ = filter_object.__doc__




