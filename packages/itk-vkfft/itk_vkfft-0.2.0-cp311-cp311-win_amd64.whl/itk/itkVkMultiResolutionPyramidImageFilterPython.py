# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _VkFFTBackendPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVkMultiResolutionPyramidImageFilterPython
else:
    import _itkVkMultiResolutionPyramidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVkMultiResolutionPyramidImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVkMultiResolutionPyramidImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkMultiResolutionPyramidImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkArray2DPython

def itkVkMultiResolutionPyramidImageFilterID2ID2_New():
    return itkVkMultiResolutionPyramidImageFilterID2ID2.New()

class itkVkMultiResolutionPyramidImageFilterID2ID2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterID2ID2
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterID2ID2

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterID2ID2 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_swigregister(itkVkMultiResolutionPyramidImageFilterID2ID2)
itkVkMultiResolutionPyramidImageFilterID2ID2___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2___New_orig__
itkVkMultiResolutionPyramidImageFilterID2ID2_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID2ID2_cast


def itkVkMultiResolutionPyramidImageFilterID3ID3_New():
    return itkVkMultiResolutionPyramidImageFilterID3ID3.New()

class itkVkMultiResolutionPyramidImageFilterID3ID3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterID3ID3
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterID3ID3

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterID3ID3 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_swigregister(itkVkMultiResolutionPyramidImageFilterID3ID3)
itkVkMultiResolutionPyramidImageFilterID3ID3___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3___New_orig__
itkVkMultiResolutionPyramidImageFilterID3ID3_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID3ID3_cast


def itkVkMultiResolutionPyramidImageFilterID4ID4_New():
    return itkVkMultiResolutionPyramidImageFilterID4ID4.New()

class itkVkMultiResolutionPyramidImageFilterID4ID4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterID4ID4
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterID4ID4

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterID4ID4 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_swigregister(itkVkMultiResolutionPyramidImageFilterID4ID4)
itkVkMultiResolutionPyramidImageFilterID4ID4___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4___New_orig__
itkVkMultiResolutionPyramidImageFilterID4ID4_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterID4ID4_cast


def itkVkMultiResolutionPyramidImageFilterIF2IF2_New():
    return itkVkMultiResolutionPyramidImageFilterIF2IF2.New()

class itkVkMultiResolutionPyramidImageFilterIF2IF2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIF2IF2
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIF2IF2

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIF2IF2 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_swigregister(itkVkMultiResolutionPyramidImageFilterIF2IF2)
itkVkMultiResolutionPyramidImageFilterIF2IF2___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2___New_orig__
itkVkMultiResolutionPyramidImageFilterIF2IF2_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF2IF2_cast


def itkVkMultiResolutionPyramidImageFilterIF3IF3_New():
    return itkVkMultiResolutionPyramidImageFilterIF3IF3.New()

class itkVkMultiResolutionPyramidImageFilterIF3IF3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIF3IF3
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIF3IF3

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIF3IF3 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_swigregister(itkVkMultiResolutionPyramidImageFilterIF3IF3)
itkVkMultiResolutionPyramidImageFilterIF3IF3___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3___New_orig__
itkVkMultiResolutionPyramidImageFilterIF3IF3_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF3IF3_cast


def itkVkMultiResolutionPyramidImageFilterIF4IF4_New():
    return itkVkMultiResolutionPyramidImageFilterIF4IF4.New()

class itkVkMultiResolutionPyramidImageFilterIF4IF4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIF4IF4
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIF4IF4

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIF4IF4 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_swigregister(itkVkMultiResolutionPyramidImageFilterIF4IF4)
itkVkMultiResolutionPyramidImageFilterIF4IF4___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4___New_orig__
itkVkMultiResolutionPyramidImageFilterIF4IF4_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIF4IF4_cast


def itkVkMultiResolutionPyramidImageFilterISS2ISS2_New():
    return itkVkMultiResolutionPyramidImageFilterISS2ISS2.New()

class itkVkMultiResolutionPyramidImageFilterISS2ISS2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterISS2ISS2

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterISS2ISS2 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_swigregister(itkVkMultiResolutionPyramidImageFilterISS2ISS2)
itkVkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__
itkVkMultiResolutionPyramidImageFilterISS2ISS2_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS2ISS2_cast


def itkVkMultiResolutionPyramidImageFilterISS3ISS3_New():
    return itkVkMultiResolutionPyramidImageFilterISS3ISS3.New()

class itkVkMultiResolutionPyramidImageFilterISS3ISS3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterISS3ISS3

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterISS3ISS3 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_swigregister(itkVkMultiResolutionPyramidImageFilterISS3ISS3)
itkVkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__
itkVkMultiResolutionPyramidImageFilterISS3ISS3_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS3ISS3_cast


def itkVkMultiResolutionPyramidImageFilterISS4ISS4_New():
    return itkVkMultiResolutionPyramidImageFilterISS4ISS4.New()

class itkVkMultiResolutionPyramidImageFilterISS4ISS4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterISS4ISS4

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterISS4ISS4 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_swigregister(itkVkMultiResolutionPyramidImageFilterISS4ISS4)
itkVkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__
itkVkMultiResolutionPyramidImageFilterISS4ISS4_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterISS4ISS4_cast


def itkVkMultiResolutionPyramidImageFilterIUC2IUC2_New():
    return itkVkMultiResolutionPyramidImageFilterIUC2IUC2.New()

class itkVkMultiResolutionPyramidImageFilterIUC2IUC2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIUC2IUC2

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIUC2IUC2 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_swigregister(itkVkMultiResolutionPyramidImageFilterIUC2IUC2)
itkVkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__
itkVkMultiResolutionPyramidImageFilterIUC2IUC2_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC2IUC2_cast


def itkVkMultiResolutionPyramidImageFilterIUC3IUC3_New():
    return itkVkMultiResolutionPyramidImageFilterIUC3IUC3.New()

class itkVkMultiResolutionPyramidImageFilterIUC3IUC3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIUC3IUC3

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIUC3IUC3 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_swigregister(itkVkMultiResolutionPyramidImageFilterIUC3IUC3)
itkVkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__
itkVkMultiResolutionPyramidImageFilterIUC3IUC3_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC3IUC3_cast


def itkVkMultiResolutionPyramidImageFilterIUC4IUC4_New():
    return itkVkMultiResolutionPyramidImageFilterIUC4IUC4.New()

class itkVkMultiResolutionPyramidImageFilterIUC4IUC4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIUC4IUC4

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIUC4IUC4 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_swigregister(itkVkMultiResolutionPyramidImageFilterIUC4IUC4)
itkVkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__
itkVkMultiResolutionPyramidImageFilterIUC4IUC4_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUC4IUC4_cast


def itkVkMultiResolutionPyramidImageFilterIUS2IUS2_New():
    return itkVkMultiResolutionPyramidImageFilterIUS2IUS2.New()

class itkVkMultiResolutionPyramidImageFilterIUS2IUS2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIUS2IUS2

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIUS2IUS2 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_swigregister(itkVkMultiResolutionPyramidImageFilterIUS2IUS2)
itkVkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__
itkVkMultiResolutionPyramidImageFilterIUS2IUS2_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS2IUS2_cast


def itkVkMultiResolutionPyramidImageFilterIUS3IUS3_New():
    return itkVkMultiResolutionPyramidImageFilterIUS3IUS3.New()

class itkVkMultiResolutionPyramidImageFilterIUS3IUS3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIUS3IUS3

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIUS3IUS3 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_swigregister(itkVkMultiResolutionPyramidImageFilterIUS3IUS3)
itkVkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__
itkVkMultiResolutionPyramidImageFilterIUS3IUS3_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS3IUS3_cast


def itkVkMultiResolutionPyramidImageFilterIUS4IUS4_New():
    return itkVkMultiResolutionPyramidImageFilterIUS4IUS4.New()

class itkVkMultiResolutionPyramidImageFilterIUS4IUS4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4):
    r"""Proxy of C++ itkVkMultiResolutionPyramidImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_Clone)
    GetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_GetMetricThreshold)
    SetMetricThreshold = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_SetMetricThreshold)
    ComputeMetricValue = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_ComputeMetricValue)
    GetKernelRadius = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_GetKernelRadius)
    GetVariance = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_GetVariance)
    GetUseFFT = _swig_new_instance_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_GetUseFFT)
    __swig_destroy__ = _itkVkMultiResolutionPyramidImageFilterPython.delete_itkVkMultiResolutionPyramidImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVkMultiResolutionPyramidImageFilterIUS4IUS4

        Create a new object of the class itkVkMultiResolutionPyramidImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVkMultiResolutionPyramidImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVkMultiResolutionPyramidImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVkMultiResolutionPyramidImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVkMultiResolutionPyramidImageFilterIUS4IUS4 in _itkVkMultiResolutionPyramidImageFilterPython:
_itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_swigregister(itkVkMultiResolutionPyramidImageFilterIUS4IUS4)
itkVkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__ = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__
itkVkMultiResolutionPyramidImageFilterIUS4IUS4_cast = _itkVkMultiResolutionPyramidImageFilterPython.itkVkMultiResolutionPyramidImageFilterIUS4IUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def vk_multi_resolution_pyramid_image_filter(*args: itkt.ImageLike,  metric_threshold: Union[Sequence[int], float]=..., number_of_levels: int=..., schedule=..., starting_shrink_factors: int=..., maximum_error: float=..., use_shrink_image_filter: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VkMultiResolutionPyramidImageFilter"""
    import itk

    kwarg_typehints = { 'metric_threshold':metric_threshold,'number_of_levels':number_of_levels,'schedule':schedule,'starting_shrink_factors':starting_shrink_factors,'maximum_error':maximum_error,'use_shrink_image_filter':use_shrink_image_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.VkMultiResolutionPyramidImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vk_multi_resolution_pyramid_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.VkFFTBackend.VkMultiResolutionPyramidImageFilter
    vk_multi_resolution_pyramid_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vk_multi_resolution_pyramid_image_filter.__doc__ = filter_object.__doc__




