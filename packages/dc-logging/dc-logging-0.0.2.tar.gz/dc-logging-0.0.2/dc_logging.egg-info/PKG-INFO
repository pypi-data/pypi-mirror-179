Metadata-Version: 2.1
Name: dc-logging
Version: 0.0.2
Summary: Easy logging setup for small projects.
Author-email: Daniel Caballero <danielcaballero88@gmail.com>
License: MIT License
        
        Copyright (c) [year] [fullname]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/danielcaballero88/dc-logging
Keywords: logging
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# dc-logging

This is a tiny library to quickly and easily set up loggers in many projects.

Isn't it easy and simple enough already just to use the `logging` built-in?  
Well, yes and no.

It's quite simple to use indeed but I have a number of predefined defaults that
I always like to use and it makes no sense for me to repeat those in several
different projects. Instead, this library always assumes those defaults and I 
can still customize by passing different configurations when getting a logger or
by using the methods of the built-in `logging` library after getting a logger.

The usage is quite evident from reading the code, and small enough so to prevent
me from wanting to duplicate that here (for now).
