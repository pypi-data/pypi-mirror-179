'''
# `aws_medialive_channel`

Refer to the Terraform Registory for docs: [`aws_medialive_channel`](https://www.terraform.io/docs/providers/aws/r/medialive_channel).
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from .._jsii import *

import cdktf
import constructs


class MedialiveChannel(
    cdktf.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannel",
):
    '''Represents a {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel aws_medialive_channel}.'''

    def __init__(
        self,
        scope: constructs.Construct,
        id_: builtins.str,
        *,
        channel_class: builtins.str,
        destinations: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinations", typing.Dict[str, typing.Any]]]],
        encoder_settings: typing.Union["MedialiveChannelEncoderSettings", typing.Dict[str, typing.Any]],
        input_attachments: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachments", typing.Dict[str, typing.Any]]]],
        input_specification: typing.Union["MedialiveChannelInputSpecification", typing.Dict[str, typing.Any]],
        name: builtins.str,
        cdi_input_specification: typing.Optional[typing.Union["MedialiveChannelCdiInputSpecification", typing.Dict[str, typing.Any]]] = None,
        id: typing.Optional[builtins.str] = None,
        log_level: typing.Optional[builtins.str] = None,
        maintenance: typing.Optional[typing.Union["MedialiveChannelMaintenance", typing.Dict[str, typing.Any]]] = None,
        role_arn: typing.Optional[builtins.str] = None,
        start_channel: typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]] = None,
        tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        timeouts: typing.Optional[typing.Union["MedialiveChannelTimeouts", typing.Dict[str, typing.Any]]] = None,
        vpc: typing.Optional[typing.Union["MedialiveChannelVpc", typing.Dict[str, typing.Any]]] = None,
        connection: typing.Optional[typing.Union[typing.Union[cdktf.SSHProvisionerConnection, typing.Dict[str, typing.Any]], typing.Union[cdktf.WinrmProvisionerConnection, typing.Dict[str, typing.Any]]]] = None,
        count: typing.Optional[jsii.Number] = None,
        depends_on: typing.Optional[typing.Sequence[cdktf.ITerraformDependable]] = None,
        for_each: typing.Optional[cdktf.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[cdktf.TerraformResourceLifecycle, typing.Dict[str, typing.Any]]] = None,
        provider: typing.Optional[cdktf.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[cdktf.FileProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.LocalExecProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.RemoteExecProvisioner, typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel aws_medialive_channel} Resource.

        :param scope: The scope in which to define this construct.
        :param id_: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param channel_class: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_class MedialiveChannel#channel_class}.
        :param destinations: destinations block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destinations MedialiveChannel#destinations}
        :param encoder_settings: encoder_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#encoder_settings MedialiveChannel#encoder_settings}
        :param input_attachments: input_attachments block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_attachments MedialiveChannel#input_attachments}
        :param input_specification: input_specification block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_specification MedialiveChannel#input_specification}
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        :param cdi_input_specification: cdi_input_specification block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cdi_input_specification MedialiveChannel#cdi_input_specification}
        :param id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#id MedialiveChannel#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param log_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#log_level MedialiveChannel#log_level}.
        :param maintenance: maintenance block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance MedialiveChannel#maintenance}
        :param role_arn: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#role_arn MedialiveChannel#role_arn}.
        :param start_channel: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#start_channel MedialiveChannel#start_channel}.
        :param tags: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#tags MedialiveChannel#tags}.
        :param tags_all: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#tags_all MedialiveChannel#tags_all}.
        :param timeouts: timeouts block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timeouts MedialiveChannel#timeouts}
        :param vpc: vpc block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#vpc MedialiveChannel#vpc}
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            def stub(
                scope: constructs.Construct,
                id_: builtins.str,
                *,
                channel_class: builtins.str,
                destinations: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinations, typing.Dict[str, typing.Any]]]],
                encoder_settings: typing.Union[MedialiveChannelEncoderSettings, typing.Dict[str, typing.Any]],
                input_attachments: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachments, typing.Dict[str, typing.Any]]]],
                input_specification: typing.Union[MedialiveChannelInputSpecification, typing.Dict[str, typing.Any]],
                name: builtins.str,
                cdi_input_specification: typing.Optional[typing.Union[MedialiveChannelCdiInputSpecification, typing.Dict[str, typing.Any]]] = None,
                id: typing.Optional[builtins.str] = None,
                log_level: typing.Optional[builtins.str] = None,
                maintenance: typing.Optional[typing.Union[MedialiveChannelMaintenance, typing.Dict[str, typing.Any]]] = None,
                role_arn: typing.Optional[builtins.str] = None,
                start_channel: typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]] = None,
                tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
                tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
                timeouts: typing.Optional[typing.Union[MedialiveChannelTimeouts, typing.Dict[str, typing.Any]]] = None,
                vpc: typing.Optional[typing.Union[MedialiveChannelVpc, typing.Dict[str, typing.Any]]] = None,
                connection: typing.Optional[typing.Union[typing.Union[cdktf.SSHProvisionerConnection, typing.Dict[str, typing.Any]], typing.Union[cdktf.WinrmProvisionerConnection, typing.Dict[str, typing.Any]]]] = None,
                count: typing.Optional[jsii.Number] = None,
                depends_on: typing.Optional[typing.Sequence[cdktf.ITerraformDependable]] = None,
                for_each: typing.Optional[cdktf.ITerraformIterator] = None,
                lifecycle: typing.Optional[typing.Union[cdktf.TerraformResourceLifecycle, typing.Dict[str, typing.Any]]] = None,
                provider: typing.Optional[cdktf.TerraformProvider] = None,
                provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[cdktf.FileProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.LocalExecProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.RemoteExecProvisioner, typing.Dict[str, typing.Any]]]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id_", value=id_, expected_type=type_hints["id_"])
        config = MedialiveChannelConfig(
            channel_class=channel_class,
            destinations=destinations,
            encoder_settings=encoder_settings,
            input_attachments=input_attachments,
            input_specification=input_specification,
            name=name,
            cdi_input_specification=cdi_input_specification,
            id=id,
            log_level=log_level,
            maintenance=maintenance,
            role_arn=role_arn,
            start_channel=start_channel,
            tags=tags,
            tags_all=tags_all,
            timeouts=timeouts,
            vpc=vpc,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id_, config])

    @jsii.member(jsii_name="putCdiInputSpecification")
    def put_cdi_input_specification(self, *, resolution: builtins.str) -> None:
        '''
        :param resolution: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#resolution MedialiveChannel#resolution}.
        '''
        value = MedialiveChannelCdiInputSpecification(resolution=resolution)

        return typing.cast(None, jsii.invoke(self, "putCdiInputSpecification", [value]))

    @jsii.member(jsii_name="putDestinations")
    def put_destinations(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinations", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinations, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDestinations", [value]))

    @jsii.member(jsii_name="putEncoderSettings")
    def put_encoder_settings(
        self,
        *,
        output_groups: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroups", typing.Dict[str, typing.Any]]]],
        timecode_config: typing.Union["MedialiveChannelEncoderSettingsTimecodeConfig", typing.Dict[str, typing.Any]],
        audio_descriptions: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptions", typing.Dict[str, typing.Any]]]]] = None,
        avail_blanking: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAvailBlanking", typing.Dict[str, typing.Any]]] = None,
        video_descriptions: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptions", typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param output_groups: output_groups block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_groups MedialiveChannel#output_groups}
        :param timecode_config: timecode_config block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timecode_config MedialiveChannel#timecode_config}
        :param audio_descriptions: audio_descriptions block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_descriptions MedialiveChannel#audio_descriptions}
        :param avail_blanking: avail_blanking block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#avail_blanking MedialiveChannel#avail_blanking}
        :param video_descriptions: video_descriptions block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_descriptions MedialiveChannel#video_descriptions}
        '''
        value = MedialiveChannelEncoderSettings(
            output_groups=output_groups,
            timecode_config=timecode_config,
            audio_descriptions=audio_descriptions,
            avail_blanking=avail_blanking,
            video_descriptions=video_descriptions,
        )

        return typing.cast(None, jsii.invoke(self, "putEncoderSettings", [value]))

    @jsii.member(jsii_name="putInputAttachments")
    def put_input_attachments(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachments", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachments, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInputAttachments", [value]))

    @jsii.member(jsii_name="putInputSpecification")
    def put_input_specification(
        self,
        *,
        codec: builtins.str,
        input_resolution: builtins.str,
        maximum_bitrate: builtins.str,
    ) -> None:
        '''
        :param codec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec MedialiveChannel#codec}.
        :param input_resolution: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_resolution MedialiveChannel#input_resolution}.
        :param maximum_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maximum_bitrate MedialiveChannel#maximum_bitrate}.
        '''
        value = MedialiveChannelInputSpecification(
            codec=codec,
            input_resolution=input_resolution,
            maximum_bitrate=maximum_bitrate,
        )

        return typing.cast(None, jsii.invoke(self, "putInputSpecification", [value]))

    @jsii.member(jsii_name="putMaintenance")
    def put_maintenance(
        self,
        *,
        maintenance_day: builtins.str,
        maintenance_start_time: builtins.str,
    ) -> None:
        '''
        :param maintenance_day: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance_day MedialiveChannel#maintenance_day}.
        :param maintenance_start_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance_start_time MedialiveChannel#maintenance_start_time}.
        '''
        value = MedialiveChannelMaintenance(
            maintenance_day=maintenance_day,
            maintenance_start_time=maintenance_start_time,
        )

        return typing.cast(None, jsii.invoke(self, "putMaintenance", [value]))

    @jsii.member(jsii_name="putTimeouts")
    def put_timeouts(
        self,
        *,
        create: typing.Optional[builtins.str] = None,
        delete: typing.Optional[builtins.str] = None,
        update: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param create: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#create MedialiveChannel#create}.
        :param delete: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#delete MedialiveChannel#delete}.
        :param update: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#update MedialiveChannel#update}.
        '''
        value = MedialiveChannelTimeouts(create=create, delete=delete, update=update)

        return typing.cast(None, jsii.invoke(self, "putTimeouts", [value]))

    @jsii.member(jsii_name="putVpc")
    def put_vpc(
        self,
        *,
        public_address_allocation_ids: typing.Sequence[builtins.str],
        subnet_ids: typing.Sequence[builtins.str],
        security_group_ids: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param public_address_allocation_ids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#public_address_allocation_ids MedialiveChannel#public_address_allocation_ids}.
        :param subnet_ids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#subnet_ids MedialiveChannel#subnet_ids}.
        :param security_group_ids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#security_group_ids MedialiveChannel#security_group_ids}.
        '''
        value = MedialiveChannelVpc(
            public_address_allocation_ids=public_address_allocation_ids,
            subnet_ids=subnet_ids,
            security_group_ids=security_group_ids,
        )

        return typing.cast(None, jsii.invoke(self, "putVpc", [value]))

    @jsii.member(jsii_name="resetCdiInputSpecification")
    def reset_cdi_input_specification(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCdiInputSpecification", []))

    @jsii.member(jsii_name="resetId")
    def reset_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetId", []))

    @jsii.member(jsii_name="resetLogLevel")
    def reset_log_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLogLevel", []))

    @jsii.member(jsii_name="resetMaintenance")
    def reset_maintenance(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaintenance", []))

    @jsii.member(jsii_name="resetRoleArn")
    def reset_role_arn(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRoleArn", []))

    @jsii.member(jsii_name="resetStartChannel")
    def reset_start_channel(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartChannel", []))

    @jsii.member(jsii_name="resetTags")
    def reset_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTags", []))

    @jsii.member(jsii_name="resetTagsAll")
    def reset_tags_all(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTagsAll", []))

    @jsii.member(jsii_name="resetTimeouts")
    def reset_timeouts(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimeouts", []))

    @jsii.member(jsii_name="resetVpc")
    def reset_vpc(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVpc", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="arn")
    def arn(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arn"))

    @builtins.property
    @jsii.member(jsii_name="cdiInputSpecification")
    def cdi_input_specification(
        self,
    ) -> "MedialiveChannelCdiInputSpecificationOutputReference":
        return typing.cast("MedialiveChannelCdiInputSpecificationOutputReference", jsii.get(self, "cdiInputSpecification"))

    @builtins.property
    @jsii.member(jsii_name="channelId")
    def channel_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "channelId"))

    @builtins.property
    @jsii.member(jsii_name="destinations")
    def destinations(self) -> "MedialiveChannelDestinationsList":
        return typing.cast("MedialiveChannelDestinationsList", jsii.get(self, "destinations"))

    @builtins.property
    @jsii.member(jsii_name="encoderSettings")
    def encoder_settings(self) -> "MedialiveChannelEncoderSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputReference", jsii.get(self, "encoderSettings"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachments")
    def input_attachments(self) -> "MedialiveChannelInputAttachmentsList":
        return typing.cast("MedialiveChannelInputAttachmentsList", jsii.get(self, "inputAttachments"))

    @builtins.property
    @jsii.member(jsii_name="inputSpecification")
    def input_specification(
        self,
    ) -> "MedialiveChannelInputSpecificationOutputReference":
        return typing.cast("MedialiveChannelInputSpecificationOutputReference", jsii.get(self, "inputSpecification"))

    @builtins.property
    @jsii.member(jsii_name="maintenance")
    def maintenance(self) -> "MedialiveChannelMaintenanceOutputReference":
        return typing.cast("MedialiveChannelMaintenanceOutputReference", jsii.get(self, "maintenance"))

    @builtins.property
    @jsii.member(jsii_name="timeouts")
    def timeouts(self) -> "MedialiveChannelTimeoutsOutputReference":
        return typing.cast("MedialiveChannelTimeoutsOutputReference", jsii.get(self, "timeouts"))

    @builtins.property
    @jsii.member(jsii_name="vpc")
    def vpc(self) -> "MedialiveChannelVpcOutputReference":
        return typing.cast("MedialiveChannelVpcOutputReference", jsii.get(self, "vpc"))

    @builtins.property
    @jsii.member(jsii_name="cdiInputSpecificationInput")
    def cdi_input_specification_input(
        self,
    ) -> typing.Optional["MedialiveChannelCdiInputSpecification"]:
        return typing.cast(typing.Optional["MedialiveChannelCdiInputSpecification"], jsii.get(self, "cdiInputSpecificationInput"))

    @builtins.property
    @jsii.member(jsii_name="channelClassInput")
    def channel_class_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "channelClassInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationsInput")
    def destinations_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinations"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinations"]]], jsii.get(self, "destinationsInput"))

    @builtins.property
    @jsii.member(jsii_name="encoderSettingsInput")
    def encoder_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettings"], jsii.get(self, "encoderSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachmentsInput")
    def input_attachments_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachments"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachments"]]], jsii.get(self, "inputAttachmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputSpecificationInput")
    def input_specification_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputSpecification"]:
        return typing.cast(typing.Optional["MedialiveChannelInputSpecification"], jsii.get(self, "inputSpecificationInput"))

    @builtins.property
    @jsii.member(jsii_name="logLevelInput")
    def log_level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "logLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="maintenanceInput")
    def maintenance_input(self) -> typing.Optional["MedialiveChannelMaintenance"]:
        return typing.cast(typing.Optional["MedialiveChannelMaintenance"], jsii.get(self, "maintenanceInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="roleArnInput")
    def role_arn_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "roleArnInput"))

    @builtins.property
    @jsii.member(jsii_name="startChannelInput")
    def start_channel_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]], jsii.get(self, "startChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="tagsAllInput")
    def tags_all_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "tagsAllInput"))

    @builtins.property
    @jsii.member(jsii_name="tagsInput")
    def tags_input(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "tagsInput"))

    @builtins.property
    @jsii.member(jsii_name="timeoutsInput")
    def timeouts_input(
        self,
    ) -> typing.Optional[typing.Union["MedialiveChannelTimeouts", cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union["MedialiveChannelTimeouts", cdktf.IResolvable]], jsii.get(self, "timeoutsInput"))

    @builtins.property
    @jsii.member(jsii_name="vpcInput")
    def vpc_input(self) -> typing.Optional["MedialiveChannelVpc"]:
        return typing.cast(typing.Optional["MedialiveChannelVpc"], jsii.get(self, "vpcInput"))

    @builtins.property
    @jsii.member(jsii_name="channelClass")
    def channel_class(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "channelClass"))

    @channel_class.setter
    def channel_class(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelClass", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="logLevel")
    def log_level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "logLevel"))

    @log_level.setter
    def log_level(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "logLevel", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="roleArn")
    def role_arn(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "roleArn"))

    @role_arn.setter
    def role_arn(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "roleArn", value)

    @builtins.property
    @jsii.member(jsii_name="startChannel")
    def start_channel(self) -> typing.Union[builtins.bool, cdktf.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, cdktf.IResolvable], jsii.get(self, "startChannel"))

    @start_channel.setter
    def start_channel(
        self,
        value: typing.Union[builtins.bool, cdktf.IResolvable],
    ) -> None:
        if __debug__:
            def stub(value: typing.Union[builtins.bool, cdktf.IResolvable]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startChannel", value)

    @builtins.property
    @jsii.member(jsii_name="tags")
    def tags(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "tags"))

    @tags.setter
    def tags(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.Mapping[builtins.str, builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tags", value)

    @builtins.property
    @jsii.member(jsii_name="tagsAll")
    def tags_all(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "tagsAll"))

    @tags_all.setter
    def tags_all(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.Mapping[builtins.str, builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tagsAll", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelCdiInputSpecification",
    jsii_struct_bases=[],
    name_mapping={"resolution": "resolution"},
)
class MedialiveChannelCdiInputSpecification:
    def __init__(self, *, resolution: builtins.str) -> None:
        '''
        :param resolution: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#resolution MedialiveChannel#resolution}.
        '''
        if __debug__:
            def stub(*, resolution: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument resolution", value=resolution, expected_type=type_hints["resolution"])
        self._values: typing.Dict[str, typing.Any] = {
            "resolution": resolution,
        }

    @builtins.property
    def resolution(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#resolution MedialiveChannel#resolution}.'''
        result = self._values.get("resolution")
        assert result is not None, "Required property 'resolution' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelCdiInputSpecification(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelCdiInputSpecificationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelCdiInputSpecificationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="resolutionInput")
    def resolution_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "resolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="resolution")
    def resolution(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "resolution"))

    @resolution.setter
    def resolution(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "resolution", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelCdiInputSpecification]:
        return typing.cast(typing.Optional[MedialiveChannelCdiInputSpecification], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelCdiInputSpecification],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelCdiInputSpecification],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelConfig",
    jsii_struct_bases=[cdktf.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "channel_class": "channelClass",
        "destinations": "destinations",
        "encoder_settings": "encoderSettings",
        "input_attachments": "inputAttachments",
        "input_specification": "inputSpecification",
        "name": "name",
        "cdi_input_specification": "cdiInputSpecification",
        "id": "id",
        "log_level": "logLevel",
        "maintenance": "maintenance",
        "role_arn": "roleArn",
        "start_channel": "startChannel",
        "tags": "tags",
        "tags_all": "tagsAll",
        "timeouts": "timeouts",
        "vpc": "vpc",
    },
)
class MedialiveChannelConfig(cdktf.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[cdktf.SSHProvisionerConnection, typing.Dict[str, typing.Any]], typing.Union[cdktf.WinrmProvisionerConnection, typing.Dict[str, typing.Any]]]] = None,
        count: typing.Optional[jsii.Number] = None,
        depends_on: typing.Optional[typing.Sequence[cdktf.ITerraformDependable]] = None,
        for_each: typing.Optional[cdktf.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[cdktf.TerraformResourceLifecycle, typing.Dict[str, typing.Any]]] = None,
        provider: typing.Optional[cdktf.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[cdktf.FileProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.LocalExecProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.RemoteExecProvisioner, typing.Dict[str, typing.Any]]]]] = None,
        channel_class: builtins.str,
        destinations: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinations", typing.Dict[str, typing.Any]]]],
        encoder_settings: typing.Union["MedialiveChannelEncoderSettings", typing.Dict[str, typing.Any]],
        input_attachments: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachments", typing.Dict[str, typing.Any]]]],
        input_specification: typing.Union["MedialiveChannelInputSpecification", typing.Dict[str, typing.Any]],
        name: builtins.str,
        cdi_input_specification: typing.Optional[typing.Union[MedialiveChannelCdiInputSpecification, typing.Dict[str, typing.Any]]] = None,
        id: typing.Optional[builtins.str] = None,
        log_level: typing.Optional[builtins.str] = None,
        maintenance: typing.Optional[typing.Union["MedialiveChannelMaintenance", typing.Dict[str, typing.Any]]] = None,
        role_arn: typing.Optional[builtins.str] = None,
        start_channel: typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]] = None,
        tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        timeouts: typing.Optional[typing.Union["MedialiveChannelTimeouts", typing.Dict[str, typing.Any]]] = None,
        vpc: typing.Optional[typing.Union["MedialiveChannelVpc", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param channel_class: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_class MedialiveChannel#channel_class}.
        :param destinations: destinations block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destinations MedialiveChannel#destinations}
        :param encoder_settings: encoder_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#encoder_settings MedialiveChannel#encoder_settings}
        :param input_attachments: input_attachments block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_attachments MedialiveChannel#input_attachments}
        :param input_specification: input_specification block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_specification MedialiveChannel#input_specification}
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        :param cdi_input_specification: cdi_input_specification block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cdi_input_specification MedialiveChannel#cdi_input_specification}
        :param id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#id MedialiveChannel#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param log_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#log_level MedialiveChannel#log_level}.
        :param maintenance: maintenance block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance MedialiveChannel#maintenance}
        :param role_arn: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#role_arn MedialiveChannel#role_arn}.
        :param start_channel: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#start_channel MedialiveChannel#start_channel}.
        :param tags: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#tags MedialiveChannel#tags}.
        :param tags_all: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#tags_all MedialiveChannel#tags_all}.
        :param timeouts: timeouts block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timeouts MedialiveChannel#timeouts}
        :param vpc: vpc block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#vpc MedialiveChannel#vpc}
        '''
        if isinstance(lifecycle, dict):
            lifecycle = cdktf.TerraformResourceLifecycle(**lifecycle)
        if isinstance(encoder_settings, dict):
            encoder_settings = MedialiveChannelEncoderSettings(**encoder_settings)
        if isinstance(input_specification, dict):
            input_specification = MedialiveChannelInputSpecification(**input_specification)
        if isinstance(cdi_input_specification, dict):
            cdi_input_specification = MedialiveChannelCdiInputSpecification(**cdi_input_specification)
        if isinstance(maintenance, dict):
            maintenance = MedialiveChannelMaintenance(**maintenance)
        if isinstance(timeouts, dict):
            timeouts = MedialiveChannelTimeouts(**timeouts)
        if isinstance(vpc, dict):
            vpc = MedialiveChannelVpc(**vpc)
        if __debug__:
            def stub(
                *,
                connection: typing.Optional[typing.Union[typing.Union[cdktf.SSHProvisionerConnection, typing.Dict[str, typing.Any]], typing.Union[cdktf.WinrmProvisionerConnection, typing.Dict[str, typing.Any]]]] = None,
                count: typing.Optional[jsii.Number] = None,
                depends_on: typing.Optional[typing.Sequence[cdktf.ITerraformDependable]] = None,
                for_each: typing.Optional[cdktf.ITerraformIterator] = None,
                lifecycle: typing.Optional[typing.Union[cdktf.TerraformResourceLifecycle, typing.Dict[str, typing.Any]]] = None,
                provider: typing.Optional[cdktf.TerraformProvider] = None,
                provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[cdktf.FileProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.LocalExecProvisioner, typing.Dict[str, typing.Any]], typing.Union[cdktf.RemoteExecProvisioner, typing.Dict[str, typing.Any]]]]] = None,
                channel_class: builtins.str,
                destinations: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinations, typing.Dict[str, typing.Any]]]],
                encoder_settings: typing.Union[MedialiveChannelEncoderSettings, typing.Dict[str, typing.Any]],
                input_attachments: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachments, typing.Dict[str, typing.Any]]]],
                input_specification: typing.Union[MedialiveChannelInputSpecification, typing.Dict[str, typing.Any]],
                name: builtins.str,
                cdi_input_specification: typing.Optional[typing.Union[MedialiveChannelCdiInputSpecification, typing.Dict[str, typing.Any]]] = None,
                id: typing.Optional[builtins.str] = None,
                log_level: typing.Optional[builtins.str] = None,
                maintenance: typing.Optional[typing.Union[MedialiveChannelMaintenance, typing.Dict[str, typing.Any]]] = None,
                role_arn: typing.Optional[builtins.str] = None,
                start_channel: typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]] = None,
                tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
                tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
                timeouts: typing.Optional[typing.Union[MedialiveChannelTimeouts, typing.Dict[str, typing.Any]]] = None,
                vpc: typing.Optional[typing.Union[MedialiveChannelVpc, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument channel_class", value=channel_class, expected_type=type_hints["channel_class"])
            check_type(argname="argument destinations", value=destinations, expected_type=type_hints["destinations"])
            check_type(argname="argument encoder_settings", value=encoder_settings, expected_type=type_hints["encoder_settings"])
            check_type(argname="argument input_attachments", value=input_attachments, expected_type=type_hints["input_attachments"])
            check_type(argname="argument input_specification", value=input_specification, expected_type=type_hints["input_specification"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument cdi_input_specification", value=cdi_input_specification, expected_type=type_hints["cdi_input_specification"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument log_level", value=log_level, expected_type=type_hints["log_level"])
            check_type(argname="argument maintenance", value=maintenance, expected_type=type_hints["maintenance"])
            check_type(argname="argument role_arn", value=role_arn, expected_type=type_hints["role_arn"])
            check_type(argname="argument start_channel", value=start_channel, expected_type=type_hints["start_channel"])
            check_type(argname="argument tags", value=tags, expected_type=type_hints["tags"])
            check_type(argname="argument tags_all", value=tags_all, expected_type=type_hints["tags_all"])
            check_type(argname="argument timeouts", value=timeouts, expected_type=type_hints["timeouts"])
            check_type(argname="argument vpc", value=vpc, expected_type=type_hints["vpc"])
        self._values: typing.Dict[str, typing.Any] = {
            "channel_class": channel_class,
            "destinations": destinations,
            "encoder_settings": encoder_settings,
            "input_attachments": input_attachments,
            "input_specification": input_specification,
            "name": name,
        }
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if cdi_input_specification is not None:
            self._values["cdi_input_specification"] = cdi_input_specification
        if id is not None:
            self._values["id"] = id
        if log_level is not None:
            self._values["log_level"] = log_level
        if maintenance is not None:
            self._values["maintenance"] = maintenance
        if role_arn is not None:
            self._values["role_arn"] = role_arn
        if start_channel is not None:
            self._values["start_channel"] = start_channel
        if tags is not None:
            self._values["tags"] = tags
        if tags_all is not None:
            self._values["tags_all"] = tags_all
        if timeouts is not None:
            self._values["timeouts"] = timeouts
        if vpc is not None:
            self._values["vpc"] = vpc

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[cdktf.SSHProvisionerConnection, cdktf.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[cdktf.SSHProvisionerConnection, cdktf.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def depends_on(self) -> typing.Optional[typing.List[cdktf.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[cdktf.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[cdktf.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[cdktf.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[cdktf.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[cdktf.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[cdktf.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[cdktf.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[cdktf.FileProvisioner, cdktf.LocalExecProvisioner, cdktf.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[cdktf.FileProvisioner, cdktf.LocalExecProvisioner, cdktf.RemoteExecProvisioner]]], result)

    @builtins.property
    def channel_class(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_class MedialiveChannel#channel_class}.'''
        result = self._values.get("channel_class")
        assert result is not None, "Required property 'channel_class' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def destinations(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinations"]]:
        '''destinations block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destinations MedialiveChannel#destinations}
        '''
        result = self._values.get("destinations")
        assert result is not None, "Required property 'destinations' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinations"]], result)

    @builtins.property
    def encoder_settings(self) -> "MedialiveChannelEncoderSettings":
        '''encoder_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#encoder_settings MedialiveChannel#encoder_settings}
        '''
        result = self._values.get("encoder_settings")
        assert result is not None, "Required property 'encoder_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettings", result)

    @builtins.property
    def input_attachments(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachments"]]:
        '''input_attachments block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_attachments MedialiveChannel#input_attachments}
        '''
        result = self._values.get("input_attachments")
        assert result is not None, "Required property 'input_attachments' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachments"]], result)

    @builtins.property
    def input_specification(self) -> "MedialiveChannelInputSpecification":
        '''input_specification block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_specification MedialiveChannel#input_specification}
        '''
        result = self._values.get("input_specification")
        assert result is not None, "Required property 'input_specification' is missing"
        return typing.cast("MedialiveChannelInputSpecification", result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def cdi_input_specification(
        self,
    ) -> typing.Optional[MedialiveChannelCdiInputSpecification]:
        '''cdi_input_specification block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cdi_input_specification MedialiveChannel#cdi_input_specification}
        '''
        result = self._values.get("cdi_input_specification")
        return typing.cast(typing.Optional[MedialiveChannelCdiInputSpecification], result)

    @builtins.property
    def id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#id MedialiveChannel#id}.

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def log_level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#log_level MedialiveChannel#log_level}.'''
        result = self._values.get("log_level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def maintenance(self) -> typing.Optional["MedialiveChannelMaintenance"]:
        '''maintenance block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance MedialiveChannel#maintenance}
        '''
        result = self._values.get("maintenance")
        return typing.cast(typing.Optional["MedialiveChannelMaintenance"], result)

    @builtins.property
    def role_arn(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#role_arn MedialiveChannel#role_arn}.'''
        result = self._values.get("role_arn")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_channel(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#start_channel MedialiveChannel#start_channel}.'''
        result = self._values.get("start_channel")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, cdktf.IResolvable]], result)

    @builtins.property
    def tags(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#tags MedialiveChannel#tags}.'''
        result = self._values.get("tags")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def tags_all(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#tags_all MedialiveChannel#tags_all}.'''
        result = self._values.get("tags_all")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def timeouts(self) -> typing.Optional["MedialiveChannelTimeouts"]:
        '''timeouts block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timeouts MedialiveChannel#timeouts}
        '''
        result = self._values.get("timeouts")
        return typing.cast(typing.Optional["MedialiveChannelTimeouts"], result)

    @builtins.property
    def vpc(self) -> typing.Optional["MedialiveChannelVpc"]:
        '''vpc block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#vpc MedialiveChannel#vpc}
        '''
        result = self._values.get("vpc")
        return typing.cast(typing.Optional["MedialiveChannelVpc"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinations",
    jsii_struct_bases=[],
    name_mapping={
        "id": "id",
        "media_package_settings": "mediaPackageSettings",
        "multiplex_settings": "multiplexSettings",
        "settings": "settings",
    },
)
class MedialiveChannelDestinations:
    def __init__(
        self,
        *,
        id: builtins.str,
        media_package_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinationsMediaPackageSettings", typing.Dict[str, typing.Any]]]]] = None,
        multiplex_settings: typing.Optional[typing.Union["MedialiveChannelDestinationsMultiplexSettings", typing.Dict[str, typing.Any]]] = None,
        settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinationsSettings", typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#id MedialiveChannel#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param media_package_settings: media_package_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_settings MedialiveChannel#media_package_settings}
        :param multiplex_settings: multiplex_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_settings MedialiveChannel#multiplex_settings}
        :param settings: settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#settings MedialiveChannel#settings}
        '''
        if isinstance(multiplex_settings, dict):
            multiplex_settings = MedialiveChannelDestinationsMultiplexSettings(**multiplex_settings)
        if __debug__:
            def stub(
                *,
                id: builtins.str,
                media_package_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, typing.Dict[str, typing.Any]]]]] = None,
                multiplex_settings: typing.Optional[typing.Union[MedialiveChannelDestinationsMultiplexSettings, typing.Dict[str, typing.Any]]] = None,
                settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsSettings, typing.Dict[str, typing.Any]]]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument media_package_settings", value=media_package_settings, expected_type=type_hints["media_package_settings"])
            check_type(argname="argument multiplex_settings", value=multiplex_settings, expected_type=type_hints["multiplex_settings"])
            check_type(argname="argument settings", value=settings, expected_type=type_hints["settings"])
        self._values: typing.Dict[str, typing.Any] = {
            "id": id,
        }
        if media_package_settings is not None:
            self._values["media_package_settings"] = media_package_settings
        if multiplex_settings is not None:
            self._values["multiplex_settings"] = multiplex_settings
        if settings is not None:
            self._values["settings"] = settings

    @builtins.property
    def id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#id MedialiveChannel#id}.

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def media_package_settings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinationsMediaPackageSettings"]]]:
        '''media_package_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_settings MedialiveChannel#media_package_settings}
        '''
        result = self._values.get("media_package_settings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinationsMediaPackageSettings"]]], result)

    @builtins.property
    def multiplex_settings(
        self,
    ) -> typing.Optional["MedialiveChannelDestinationsMultiplexSettings"]:
        '''multiplex_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_settings MedialiveChannel#multiplex_settings}
        '''
        result = self._values.get("multiplex_settings")
        return typing.cast(typing.Optional["MedialiveChannelDestinationsMultiplexSettings"], result)

    @builtins.property
    def settings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]]:
        '''settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#settings MedialiveChannel#settings}
        '''
        result = self._values.get("settings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinations(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "MedialiveChannelDestinationsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelDestinationsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinations]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinations]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinations]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinations]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettings",
    jsii_struct_bases=[],
    name_mapping={"channel_id": "channelId"},
)
class MedialiveChannelDestinationsMediaPackageSettings:
    def __init__(self, *, channel_id: builtins.str) -> None:
        '''
        :param channel_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_id MedialiveChannel#channel_id}.
        '''
        if __debug__:
            def stub(*, channel_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument channel_id", value=channel_id, expected_type=type_hints["channel_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "channel_id": channel_id,
        }

    @builtins.property
    def channel_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_id MedialiveChannel#channel_id}.'''
        result = self._values.get("channel_id")
        assert result is not None, "Required property 'channel_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinationsMediaPackageSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsMediaPackageSettingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelDestinationsMediaPackageSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelDestinationsMediaPackageSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelDestinationsMediaPackageSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="channelIdInput")
    def channel_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "channelIdInput"))

    @builtins.property
    @jsii.member(jsii_name="channelId")
    def channel_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "channelId"))

    @channel_id.setter
    def channel_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMultiplexSettings",
    jsii_struct_bases=[],
    name_mapping={"multiplex_id": "multiplexId", "program_name": "programName"},
)
class MedialiveChannelDestinationsMultiplexSettings:
    def __init__(
        self,
        *,
        multiplex_id: builtins.str,
        program_name: builtins.str,
    ) -> None:
        '''
        :param multiplex_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_id MedialiveChannel#multiplex_id}.
        :param program_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_name MedialiveChannel#program_name}.
        '''
        if __debug__:
            def stub(*, multiplex_id: builtins.str, program_name: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument multiplex_id", value=multiplex_id, expected_type=type_hints["multiplex_id"])
            check_type(argname="argument program_name", value=program_name, expected_type=type_hints["program_name"])
        self._values: typing.Dict[str, typing.Any] = {
            "multiplex_id": multiplex_id,
            "program_name": program_name,
        }

    @builtins.property
    def multiplex_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_id MedialiveChannel#multiplex_id}.'''
        result = self._values.get("multiplex_id")
        assert result is not None, "Required property 'multiplex_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def program_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_name MedialiveChannel#program_name}.'''
        result = self._values.get("program_name")
        assert result is not None, "Required property 'program_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinationsMultiplexSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsMultiplexSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMultiplexSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="multiplexIdInput")
    def multiplex_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "multiplexIdInput"))

    @builtins.property
    @jsii.member(jsii_name="programNameInput")
    def program_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programNameInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexId")
    def multiplex_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "multiplexId"))

    @multiplex_id.setter
    def multiplex_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "multiplexId", value)

    @builtins.property
    @jsii.member(jsii_name="programName")
    def program_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programName"))

    @program_name.setter
    def program_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelDestinationsMultiplexSettings]:
        return typing.cast(typing.Optional[MedialiveChannelDestinationsMultiplexSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelDestinationsMultiplexSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelDestinationsMultiplexSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelDestinationsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putMediaPackageSettings")
    def put_media_package_settings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMediaPackageSettings", [value]))

    @jsii.member(jsii_name="putMultiplexSettings")
    def put_multiplex_settings(
        self,
        *,
        multiplex_id: builtins.str,
        program_name: builtins.str,
    ) -> None:
        '''
        :param multiplex_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_id MedialiveChannel#multiplex_id}.
        :param program_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_name MedialiveChannel#program_name}.
        '''
        value = MedialiveChannelDestinationsMultiplexSettings(
            multiplex_id=multiplex_id, program_name=program_name
        )

        return typing.cast(None, jsii.invoke(self, "putMultiplexSettings", [value]))

    @jsii.member(jsii_name="putSettings")
    def put_settings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinationsSettings", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsSettings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSettings", [value]))

    @jsii.member(jsii_name="resetMediaPackageSettings")
    def reset_media_package_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaPackageSettings", []))

    @jsii.member(jsii_name="resetMultiplexSettings")
    def reset_multiplex_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMultiplexSettings", []))

    @jsii.member(jsii_name="resetSettings")
    def reset_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSettings", []))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageSettings")
    def media_package_settings(
        self,
    ) -> MedialiveChannelDestinationsMediaPackageSettingsList:
        return typing.cast(MedialiveChannelDestinationsMediaPackageSettingsList, jsii.get(self, "mediaPackageSettings"))

    @builtins.property
    @jsii.member(jsii_name="multiplexSettings")
    def multiplex_settings(
        self,
    ) -> MedialiveChannelDestinationsMultiplexSettingsOutputReference:
        return typing.cast(MedialiveChannelDestinationsMultiplexSettingsOutputReference, jsii.get(self, "multiplexSettings"))

    @builtins.property
    @jsii.member(jsii_name="settings")
    def settings(self) -> "MedialiveChannelDestinationsSettingsList":
        return typing.cast("MedialiveChannelDestinationsSettingsList", jsii.get(self, "settings"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageSettingsInput")
    def media_package_settings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]], jsii.get(self, "mediaPackageSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexSettingsInput")
    def multiplex_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelDestinationsMultiplexSettings]:
        return typing.cast(typing.Optional[MedialiveChannelDestinationsMultiplexSettings], jsii.get(self, "multiplexSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="settingsInput")
    def settings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]], jsii.get(self, "settingsInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelDestinations, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelDestinations, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelDestinations, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelDestinations, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "password_param": "passwordParam",
        "stream_name": "streamName",
        "url": "url",
        "username": "username",
    },
)
class MedialiveChannelDestinationsSettings:
    def __init__(
        self,
        *,
        password_param: typing.Optional[builtins.str] = None,
        stream_name: typing.Optional[builtins.str] = None,
        url: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param stream_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_name MedialiveChannel#stream_name}.
        :param url: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#url MedialiveChannel#url}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            def stub(
                *,
                password_param: typing.Optional[builtins.str] = None,
                stream_name: typing.Optional[builtins.str] = None,
                url: typing.Optional[builtins.str] = None,
                username: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument stream_name", value=stream_name, expected_type=type_hints["stream_name"])
            check_type(argname="argument url", value=url, expected_type=type_hints["url"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[str, typing.Any] = {}
        if password_param is not None:
            self._values["password_param"] = password_param
        if stream_name is not None:
            self._values["stream_name"] = stream_name
        if url is not None:
            self._values["url"] = url
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def stream_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_name MedialiveChannel#stream_name}.'''
        result = self._values.get("stream_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def url(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#url MedialiveChannel#url}.'''
        result = self._values.get("url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinationsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsSettingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelDestinationsSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelDestinationsSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelDestinationsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetStreamName")
    def reset_stream_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamName", []))

    @jsii.member(jsii_name="resetUrl")
    def reset_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUrl", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="streamNameInput")
    def stream_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamNameInput"))

    @builtins.property
    @jsii.member(jsii_name="urlInput")
    def url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "urlInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value)

    @builtins.property
    @jsii.member(jsii_name="streamName")
    def stream_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamName"))

    @stream_name.setter
    def stream_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamName", value)

    @builtins.property
    @jsii.member(jsii_name="url")
    def url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "url"))

    @url.setter
    def url(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "url", value)

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelDestinationsSettings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelDestinationsSettings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelDestinationsSettings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelDestinationsSettings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettings",
    jsii_struct_bases=[],
    name_mapping={
        "output_groups": "outputGroups",
        "timecode_config": "timecodeConfig",
        "audio_descriptions": "audioDescriptions",
        "avail_blanking": "availBlanking",
        "video_descriptions": "videoDescriptions",
    },
)
class MedialiveChannelEncoderSettings:
    def __init__(
        self,
        *,
        output_groups: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroups", typing.Dict[str, typing.Any]]]],
        timecode_config: typing.Union["MedialiveChannelEncoderSettingsTimecodeConfig", typing.Dict[str, typing.Any]],
        audio_descriptions: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptions", typing.Dict[str, typing.Any]]]]] = None,
        avail_blanking: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAvailBlanking", typing.Dict[str, typing.Any]]] = None,
        video_descriptions: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptions", typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param output_groups: output_groups block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_groups MedialiveChannel#output_groups}
        :param timecode_config: timecode_config block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timecode_config MedialiveChannel#timecode_config}
        :param audio_descriptions: audio_descriptions block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_descriptions MedialiveChannel#audio_descriptions}
        :param avail_blanking: avail_blanking block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#avail_blanking MedialiveChannel#avail_blanking}
        :param video_descriptions: video_descriptions block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_descriptions MedialiveChannel#video_descriptions}
        '''
        if isinstance(timecode_config, dict):
            timecode_config = MedialiveChannelEncoderSettingsTimecodeConfig(**timecode_config)
        if isinstance(avail_blanking, dict):
            avail_blanking = MedialiveChannelEncoderSettingsAvailBlanking(**avail_blanking)
        if __debug__:
            def stub(
                *,
                output_groups: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, typing.Dict[str, typing.Any]]]],
                timecode_config: typing.Union[MedialiveChannelEncoderSettingsTimecodeConfig, typing.Dict[str, typing.Any]],
                audio_descriptions: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, typing.Dict[str, typing.Any]]]]] = None,
                avail_blanking: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAvailBlanking, typing.Dict[str, typing.Any]]] = None,
                video_descriptions: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, typing.Dict[str, typing.Any]]]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument output_groups", value=output_groups, expected_type=type_hints["output_groups"])
            check_type(argname="argument timecode_config", value=timecode_config, expected_type=type_hints["timecode_config"])
            check_type(argname="argument audio_descriptions", value=audio_descriptions, expected_type=type_hints["audio_descriptions"])
            check_type(argname="argument avail_blanking", value=avail_blanking, expected_type=type_hints["avail_blanking"])
            check_type(argname="argument video_descriptions", value=video_descriptions, expected_type=type_hints["video_descriptions"])
        self._values: typing.Dict[str, typing.Any] = {
            "output_groups": output_groups,
            "timecode_config": timecode_config,
        }
        if audio_descriptions is not None:
            self._values["audio_descriptions"] = audio_descriptions
        if avail_blanking is not None:
            self._values["avail_blanking"] = avail_blanking
        if video_descriptions is not None:
            self._values["video_descriptions"] = video_descriptions

    @builtins.property
    def output_groups(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroups"]]:
        '''output_groups block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_groups MedialiveChannel#output_groups}
        '''
        result = self._values.get("output_groups")
        assert result is not None, "Required property 'output_groups' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroups"]], result)

    @builtins.property
    def timecode_config(self) -> "MedialiveChannelEncoderSettingsTimecodeConfig":
        '''timecode_config block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timecode_config MedialiveChannel#timecode_config}
        '''
        result = self._values.get("timecode_config")
        assert result is not None, "Required property 'timecode_config' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsTimecodeConfig", result)

    @builtins.property
    def audio_descriptions(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptions"]]]:
        '''audio_descriptions block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_descriptions MedialiveChannel#audio_descriptions}
        '''
        result = self._values.get("audio_descriptions")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptions"]]], result)

    @builtins.property
    def avail_blanking(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAvailBlanking"]:
        '''avail_blanking block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#avail_blanking MedialiveChannel#avail_blanking}
        '''
        result = self._values.get("avail_blanking")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAvailBlanking"], result)

    @builtins.property
    def video_descriptions(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]]:
        '''video_descriptions block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_descriptions MedialiveChannel#video_descriptions}
        '''
        result = self._values.get("video_descriptions")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptions",
    jsii_struct_bases=[],
    name_mapping={
        "audio_selector_name": "audioSelectorName",
        "name": "name",
        "audio_normalization_settings": "audioNormalizationSettings",
        "audio_type": "audioType",
        "audio_type_control": "audioTypeControl",
        "audio_watermark_settings": "audioWatermarkSettings",
        "codec_settings": "codecSettings",
        "language_code": "languageCode",
        "language_code_control": "languageCodeControl",
        "remix_settings": "remixSettings",
        "stream_name": "streamName",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptions:
    def __init__(
        self,
        *,
        audio_selector_name: builtins.str,
        name: builtins.str,
        audio_normalization_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings", typing.Dict[str, typing.Any]]] = None,
        audio_type: typing.Optional[builtins.str] = None,
        audio_type_control: typing.Optional[builtins.str] = None,
        audio_watermark_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings", typing.Dict[str, typing.Any]]] = None,
        codec_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings", typing.Dict[str, typing.Any]]] = None,
        language_code: typing.Optional[builtins.str] = None,
        language_code_control: typing.Optional[builtins.str] = None,
        remix_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings", typing.Dict[str, typing.Any]]] = None,
        stream_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_selector_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        :param audio_normalization_settings: audio_normalization_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_normalization_settings MedialiveChannel#audio_normalization_settings}
        :param audio_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_type MedialiveChannel#audio_type}.
        :param audio_type_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_type_control MedialiveChannel#audio_type_control}.
        :param audio_watermark_settings: audio_watermark_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_watermark_settings MedialiveChannel#audio_watermark_settings}
        :param codec_settings: codec_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        :param language_code: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_code_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code_control MedialiveChannel#language_code_control}.
        :param remix_settings: remix_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#remix_settings MedialiveChannel#remix_settings}
        :param stream_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_name MedialiveChannel#stream_name}.
        '''
        if isinstance(audio_normalization_settings, dict):
            audio_normalization_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings(**audio_normalization_settings)
        if isinstance(audio_watermark_settings, dict):
            audio_watermark_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings(**audio_watermark_settings)
        if isinstance(codec_settings, dict):
            codec_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings(**codec_settings)
        if isinstance(remix_settings, dict):
            remix_settings = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings(**remix_settings)
        if __debug__:
            def stub(
                *,
                audio_selector_name: builtins.str,
                name: builtins.str,
                audio_normalization_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings, typing.Dict[str, typing.Any]]] = None,
                audio_type: typing.Optional[builtins.str] = None,
                audio_type_control: typing.Optional[builtins.str] = None,
                audio_watermark_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings, typing.Dict[str, typing.Any]]] = None,
                codec_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings, typing.Dict[str, typing.Any]]] = None,
                language_code: typing.Optional[builtins.str] = None,
                language_code_control: typing.Optional[builtins.str] = None,
                remix_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings, typing.Dict[str, typing.Any]]] = None,
                stream_name: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_selector_name", value=audio_selector_name, expected_type=type_hints["audio_selector_name"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument audio_normalization_settings", value=audio_normalization_settings, expected_type=type_hints["audio_normalization_settings"])
            check_type(argname="argument audio_type", value=audio_type, expected_type=type_hints["audio_type"])
            check_type(argname="argument audio_type_control", value=audio_type_control, expected_type=type_hints["audio_type_control"])
            check_type(argname="argument audio_watermark_settings", value=audio_watermark_settings, expected_type=type_hints["audio_watermark_settings"])
            check_type(argname="argument codec_settings", value=codec_settings, expected_type=type_hints["codec_settings"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_code_control", value=language_code_control, expected_type=type_hints["language_code_control"])
            check_type(argname="argument remix_settings", value=remix_settings, expected_type=type_hints["remix_settings"])
            check_type(argname="argument stream_name", value=stream_name, expected_type=type_hints["stream_name"])
        self._values: typing.Dict[str, typing.Any] = {
            "audio_selector_name": audio_selector_name,
            "name": name,
        }
        if audio_normalization_settings is not None:
            self._values["audio_normalization_settings"] = audio_normalization_settings
        if audio_type is not None:
            self._values["audio_type"] = audio_type
        if audio_type_control is not None:
            self._values["audio_type_control"] = audio_type_control
        if audio_watermark_settings is not None:
            self._values["audio_watermark_settings"] = audio_watermark_settings
        if codec_settings is not None:
            self._values["codec_settings"] = codec_settings
        if language_code is not None:
            self._values["language_code"] = language_code
        if language_code_control is not None:
            self._values["language_code_control"] = language_code_control
        if remix_settings is not None:
            self._values["remix_settings"] = remix_settings
        if stream_name is not None:
            self._values["stream_name"] = stream_name

    @builtins.property
    def audio_selector_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.'''
        result = self._values.get("audio_selector_name")
        assert result is not None, "Required property 'audio_selector_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def audio_normalization_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings"]:
        '''audio_normalization_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_normalization_settings MedialiveChannel#audio_normalization_settings}
        '''
        result = self._values.get("audio_normalization_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings"], result)

    @builtins.property
    def audio_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_type MedialiveChannel#audio_type}.'''
        result = self._values.get("audio_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_type_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_type_control MedialiveChannel#audio_type_control}.'''
        result = self._values.get("audio_type_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_watermark_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings"]:
        '''audio_watermark_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_watermark_settings MedialiveChannel#audio_watermark_settings}
        '''
        result = self._values.get("audio_watermark_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings"], result)

    @builtins.property
    def codec_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings"]:
        '''codec_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        '''
        result = self._values.get("codec_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings"], result)

    @builtins.property
    def language_code(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def language_code_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code_control MedialiveChannel#language_code_control}.'''
        result = self._values.get("language_code_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def remix_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"]:
        '''remix_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#remix_settings MedialiveChannel#remix_settings}
        '''
        result = self._values.get("remix_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"], result)

    @builtins.property
    def stream_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_name MedialiveChannel#stream_name}.'''
        result = self._values.get("stream_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings",
    jsii_struct_bases=[],
    name_mapping={
        "algorithm": "algorithm",
        "algorithm_control": "algorithmControl",
        "target_lkfs": "targetLkfs",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings:
    def __init__(
        self,
        *,
        algorithm: typing.Optional[builtins.str] = None,
        algorithm_control: typing.Optional[builtins.str] = None,
        target_lkfs: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param algorithm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#algorithm MedialiveChannel#algorithm}.
        :param algorithm_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#algorithm_control MedialiveChannel#algorithm_control}.
        :param target_lkfs: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#target_lkfs MedialiveChannel#target_lkfs}.
        '''
        if __debug__:
            def stub(
                *,
                algorithm: typing.Optional[builtins.str] = None,
                algorithm_control: typing.Optional[builtins.str] = None,
                target_lkfs: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument algorithm", value=algorithm, expected_type=type_hints["algorithm"])
            check_type(argname="argument algorithm_control", value=algorithm_control, expected_type=type_hints["algorithm_control"])
            check_type(argname="argument target_lkfs", value=target_lkfs, expected_type=type_hints["target_lkfs"])
        self._values: typing.Dict[str, typing.Any] = {}
        if algorithm is not None:
            self._values["algorithm"] = algorithm
        if algorithm_control is not None:
            self._values["algorithm_control"] = algorithm_control
        if target_lkfs is not None:
            self._values["target_lkfs"] = target_lkfs

    @builtins.property
    def algorithm(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#algorithm MedialiveChannel#algorithm}.'''
        result = self._values.get("algorithm")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def algorithm_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#algorithm_control MedialiveChannel#algorithm_control}.'''
        result = self._values.get("algorithm_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_lkfs(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#target_lkfs MedialiveChannel#target_lkfs}.'''
        result = self._values.get("target_lkfs")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAlgorithm")
    def reset_algorithm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlgorithm", []))

    @jsii.member(jsii_name="resetAlgorithmControl")
    def reset_algorithm_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlgorithmControl", []))

    @jsii.member(jsii_name="resetTargetLkfs")
    def reset_target_lkfs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetLkfs", []))

    @builtins.property
    @jsii.member(jsii_name="algorithmControlInput")
    def algorithm_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "algorithmControlInput"))

    @builtins.property
    @jsii.member(jsii_name="algorithmInput")
    def algorithm_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "algorithmInput"))

    @builtins.property
    @jsii.member(jsii_name="targetLkfsInput")
    def target_lkfs_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "targetLkfsInput"))

    @builtins.property
    @jsii.member(jsii_name="algorithm")
    def algorithm(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "algorithm"))

    @algorithm.setter
    def algorithm(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "algorithm", value)

    @builtins.property
    @jsii.member(jsii_name="algorithmControl")
    def algorithm_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "algorithmControl"))

    @algorithm_control.setter
    def algorithm_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "algorithmControl", value)

    @builtins.property
    @jsii.member(jsii_name="targetLkfs")
    def target_lkfs(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "targetLkfs"))

    @target_lkfs.setter
    def target_lkfs(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetLkfs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings",
    jsii_struct_bases=[],
    name_mapping={"nielsen_watermarks_settings": "nielsenWatermarksSettings"},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings:
    def __init__(
        self,
        *,
        nielsen_watermarks_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param nielsen_watermarks_settings: nielsen_watermarks_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_watermarks_settings MedialiveChannel#nielsen_watermarks_settings}
        '''
        if isinstance(nielsen_watermarks_settings, dict):
            nielsen_watermarks_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings(**nielsen_watermarks_settings)
        if __debug__:
            def stub(
                *,
                nielsen_watermarks_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument nielsen_watermarks_settings", value=nielsen_watermarks_settings, expected_type=type_hints["nielsen_watermarks_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if nielsen_watermarks_settings is not None:
            self._values["nielsen_watermarks_settings"] = nielsen_watermarks_settings

    @builtins.property
    def nielsen_watermarks_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings"]:
        '''nielsen_watermarks_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_watermarks_settings MedialiveChannel#nielsen_watermarks_settings}
        '''
        result = self._values.get("nielsen_watermarks_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings",
    jsii_struct_bases=[],
    name_mapping={
        "nielsen_cbet_settings": "nielsenCbetSettings",
        "nielsen_distribution_type": "nielsenDistributionType",
        "nielsen_naes_ii_nw_settings": "nielsenNaesIiNwSettings",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings:
    def __init__(
        self,
        *,
        nielsen_cbet_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings", typing.Dict[str, typing.Any]]] = None,
        nielsen_distribution_type: typing.Optional[builtins.str] = None,
        nielsen_naes_ii_nw_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings", typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param nielsen_cbet_settings: nielsen_cbet_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_cbet_settings MedialiveChannel#nielsen_cbet_settings}
        :param nielsen_distribution_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_distribution_type MedialiveChannel#nielsen_distribution_type}.
        :param nielsen_naes_ii_nw_settings: nielsen_naes_ii_nw_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_naes_ii_nw_settings MedialiveChannel#nielsen_naes_ii_nw_settings}
        '''
        if isinstance(nielsen_cbet_settings, dict):
            nielsen_cbet_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings(**nielsen_cbet_settings)
        if __debug__:
            def stub(
                *,
                nielsen_cbet_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings, typing.Dict[str, typing.Any]]] = None,
                nielsen_distribution_type: typing.Optional[builtins.str] = None,
                nielsen_naes_ii_nw_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[str, typing.Any]]]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument nielsen_cbet_settings", value=nielsen_cbet_settings, expected_type=type_hints["nielsen_cbet_settings"])
            check_type(argname="argument nielsen_distribution_type", value=nielsen_distribution_type, expected_type=type_hints["nielsen_distribution_type"])
            check_type(argname="argument nielsen_naes_ii_nw_settings", value=nielsen_naes_ii_nw_settings, expected_type=type_hints["nielsen_naes_ii_nw_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if nielsen_cbet_settings is not None:
            self._values["nielsen_cbet_settings"] = nielsen_cbet_settings
        if nielsen_distribution_type is not None:
            self._values["nielsen_distribution_type"] = nielsen_distribution_type
        if nielsen_naes_ii_nw_settings is not None:
            self._values["nielsen_naes_ii_nw_settings"] = nielsen_naes_ii_nw_settings

    @builtins.property
    def nielsen_cbet_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings"]:
        '''nielsen_cbet_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_cbet_settings MedialiveChannel#nielsen_cbet_settings}
        '''
        result = self._values.get("nielsen_cbet_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings"], result)

    @builtins.property
    def nielsen_distribution_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_distribution_type MedialiveChannel#nielsen_distribution_type}.'''
        result = self._values.get("nielsen_distribution_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_naes_ii_nw_settings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings"]]]:
        '''nielsen_naes_ii_nw_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_naes_ii_nw_settings MedialiveChannel#nielsen_naes_ii_nw_settings}
        '''
        result = self._values.get("nielsen_naes_ii_nw_settings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings",
    jsii_struct_bases=[],
    name_mapping={
        "cbet_check_digit_string": "cbetCheckDigitString",
        "cbet_stepaside": "cbetStepaside",
        "csid": "csid",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings:
    def __init__(
        self,
        *,
        cbet_check_digit_string: builtins.str,
        cbet_stepaside: builtins.str,
        csid: builtins.str,
    ) -> None:
        '''
        :param cbet_check_digit_string: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cbet_check_digit_string MedialiveChannel#cbet_check_digit_string}.
        :param cbet_stepaside: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cbet_stepaside MedialiveChannel#cbet_stepaside}.
        :param csid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#csid MedialiveChannel#csid}.
        '''
        if __debug__:
            def stub(
                *,
                cbet_check_digit_string: builtins.str,
                cbet_stepaside: builtins.str,
                csid: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument cbet_check_digit_string", value=cbet_check_digit_string, expected_type=type_hints["cbet_check_digit_string"])
            check_type(argname="argument cbet_stepaside", value=cbet_stepaside, expected_type=type_hints["cbet_stepaside"])
            check_type(argname="argument csid", value=csid, expected_type=type_hints["csid"])
        self._values: typing.Dict[str, typing.Any] = {
            "cbet_check_digit_string": cbet_check_digit_string,
            "cbet_stepaside": cbet_stepaside,
            "csid": csid,
        }

    @builtins.property
    def cbet_check_digit_string(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cbet_check_digit_string MedialiveChannel#cbet_check_digit_string}.'''
        result = self._values.get("cbet_check_digit_string")
        assert result is not None, "Required property 'cbet_check_digit_string' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def cbet_stepaside(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cbet_stepaside MedialiveChannel#cbet_stepaside}.'''
        result = self._values.get("cbet_stepaside")
        assert result is not None, "Required property 'cbet_stepaside' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def csid(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#csid MedialiveChannel#csid}.'''
        result = self._values.get("csid")
        assert result is not None, "Required property 'csid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="cbetCheckDigitStringInput")
    def cbet_check_digit_string_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cbetCheckDigitStringInput"))

    @builtins.property
    @jsii.member(jsii_name="cbetStepasideInput")
    def cbet_stepaside_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cbetStepasideInput"))

    @builtins.property
    @jsii.member(jsii_name="csidInput")
    def csid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "csidInput"))

    @builtins.property
    @jsii.member(jsii_name="cbetCheckDigitString")
    def cbet_check_digit_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cbetCheckDigitString"))

    @cbet_check_digit_string.setter
    def cbet_check_digit_string(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cbetCheckDigitString", value)

    @builtins.property
    @jsii.member(jsii_name="cbetStepaside")
    def cbet_stepaside(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cbetStepaside"))

    @cbet_stepaside.setter
    def cbet_stepaside(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cbetStepaside", value)

    @builtins.property
    @jsii.member(jsii_name="csid")
    def csid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "csid"))

    @csid.setter
    def csid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "csid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings",
    jsii_struct_bases=[],
    name_mapping={"check_digit_string": "checkDigitString", "sid": "sid"},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings:
    def __init__(self, *, check_digit_string: builtins.str, sid: jsii.Number) -> None:
        '''
        :param check_digit_string: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#check_digit_string MedialiveChannel#check_digit_string}.
        :param sid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sid MedialiveChannel#sid}.
        '''
        if __debug__:
            def stub(*, check_digit_string: builtins.str, sid: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument check_digit_string", value=check_digit_string, expected_type=type_hints["check_digit_string"])
            check_type(argname="argument sid", value=sid, expected_type=type_hints["sid"])
        self._values: typing.Dict[str, typing.Any] = {
            "check_digit_string": check_digit_string,
            "sid": sid,
        }

    @builtins.property
    def check_digit_string(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#check_digit_string MedialiveChannel#check_digit_string}.'''
        result = self._values.get("check_digit_string")
        assert result is not None, "Required property 'check_digit_string' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def sid(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sid MedialiveChannel#sid}.'''
        result = self._values.get("sid")
        assert result is not None, "Required property 'sid' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="checkDigitStringInput")
    def check_digit_string_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "checkDigitStringInput"))

    @builtins.property
    @jsii.member(jsii_name="sidInput")
    def sid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sidInput"))

    @builtins.property
    @jsii.member(jsii_name="checkDigitString")
    def check_digit_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "checkDigitString"))

    @check_digit_string.setter
    def check_digit_string(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "checkDigitString", value)

    @builtins.property
    @jsii.member(jsii_name="sid")
    def sid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sid"))

    @sid.setter
    def sid(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putNielsenCbetSettings")
    def put_nielsen_cbet_settings(
        self,
        *,
        cbet_check_digit_string: builtins.str,
        cbet_stepaside: builtins.str,
        csid: builtins.str,
    ) -> None:
        '''
        :param cbet_check_digit_string: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cbet_check_digit_string MedialiveChannel#cbet_check_digit_string}.
        :param cbet_stepaside: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cbet_stepaside MedialiveChannel#cbet_stepaside}.
        :param csid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#csid MedialiveChannel#csid}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings(
            cbet_check_digit_string=cbet_check_digit_string,
            cbet_stepaside=cbet_stepaside,
            csid=csid,
        )

        return typing.cast(None, jsii.invoke(self, "putNielsenCbetSettings", [value]))

    @jsii.member(jsii_name="putNielsenNaesIiNwSettings")
    def put_nielsen_naes_ii_nw_settings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNielsenNaesIiNwSettings", [value]))

    @jsii.member(jsii_name="resetNielsenCbetSettings")
    def reset_nielsen_cbet_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenCbetSettings", []))

    @jsii.member(jsii_name="resetNielsenDistributionType")
    def reset_nielsen_distribution_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenDistributionType", []))

    @jsii.member(jsii_name="resetNielsenNaesIiNwSettings")
    def reset_nielsen_naes_ii_nw_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenNaesIiNwSettings", []))

    @builtins.property
    @jsii.member(jsii_name="nielsenCbetSettings")
    def nielsen_cbet_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference, jsii.get(self, "nielsenCbetSettings"))

    @builtins.property
    @jsii.member(jsii_name="nielsenNaesIiNwSettings")
    def nielsen_naes_ii_nw_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList, jsii.get(self, "nielsenNaesIiNwSettings"))

    @builtins.property
    @jsii.member(jsii_name="nielsenCbetSettingsInput")
    def nielsen_cbet_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings], jsii.get(self, "nielsenCbetSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenDistributionTypeInput")
    def nielsen_distribution_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenDistributionTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenNaesIiNwSettingsInput")
    def nielsen_naes_ii_nw_settings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]], jsii.get(self, "nielsenNaesIiNwSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenDistributionType")
    def nielsen_distribution_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenDistributionType"))

    @nielsen_distribution_type.setter
    def nielsen_distribution_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenDistributionType", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putNielsenWatermarksSettings")
    def put_nielsen_watermarks_settings(
        self,
        *,
        nielsen_cbet_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings, typing.Dict[str, typing.Any]]] = None,
        nielsen_distribution_type: typing.Optional[builtins.str] = None,
        nielsen_naes_ii_nw_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param nielsen_cbet_settings: nielsen_cbet_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_cbet_settings MedialiveChannel#nielsen_cbet_settings}
        :param nielsen_distribution_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_distribution_type MedialiveChannel#nielsen_distribution_type}.
        :param nielsen_naes_ii_nw_settings: nielsen_naes_ii_nw_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_naes_ii_nw_settings MedialiveChannel#nielsen_naes_ii_nw_settings}
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings(
            nielsen_cbet_settings=nielsen_cbet_settings,
            nielsen_distribution_type=nielsen_distribution_type,
            nielsen_naes_ii_nw_settings=nielsen_naes_ii_nw_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putNielsenWatermarksSettings", [value]))

    @jsii.member(jsii_name="resetNielsenWatermarksSettings")
    def reset_nielsen_watermarks_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenWatermarksSettings", []))

    @builtins.property
    @jsii.member(jsii_name="nielsenWatermarksSettings")
    def nielsen_watermarks_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference, jsii.get(self, "nielsenWatermarksSettings"))

    @builtins.property
    @jsii.member(jsii_name="nielsenWatermarksSettingsInput")
    def nielsen_watermarks_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings], jsii.get(self, "nielsenWatermarksSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings",
    jsii_struct_bases=[],
    name_mapping={
        "aac_settings": "aacSettings",
        "ac3_settings": "ac3Settings",
        "eac3_atmos_settings": "eac3AtmosSettings",
        "eac3_settings": "eac3Settings",
        "mp2_settings": "mp2Settings",
        "pass_through_settings": "passThroughSettings",
        "wav_settings": "wavSettings",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings:
    def __init__(
        self,
        *,
        aac_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings", typing.Dict[str, typing.Any]]] = None,
        ac3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings", typing.Dict[str, typing.Any]]] = None,
        eac3_atmos_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings", typing.Dict[str, typing.Any]]] = None,
        eac3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings", typing.Dict[str, typing.Any]]] = None,
        mp2_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings", typing.Dict[str, typing.Any]]] = None,
        pass_through_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings", typing.Dict[str, typing.Any]]] = None,
        wav_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param aac_settings: aac_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#aac_settings MedialiveChannel#aac_settings}
        :param ac3_settings: ac3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ac3_settings MedialiveChannel#ac3_settings}
        :param eac3_atmos_settings: eac3_atmos_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#eac3_atmos_settings MedialiveChannel#eac3_atmos_settings}
        :param eac3_settings: eac3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#eac3_settings MedialiveChannel#eac3_settings}
        :param mp2_settings: mp2_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#mp2_settings MedialiveChannel#mp2_settings}
        :param pass_through_settings: pass_through_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pass_through_settings MedialiveChannel#pass_through_settings}
        :param wav_settings: wav_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#wav_settings MedialiveChannel#wav_settings}
        '''
        if isinstance(aac_settings, dict):
            aac_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings(**aac_settings)
        if isinstance(ac3_settings, dict):
            ac3_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings(**ac3_settings)
        if isinstance(eac3_atmos_settings, dict):
            eac3_atmos_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings(**eac3_atmos_settings)
        if isinstance(eac3_settings, dict):
            eac3_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings(**eac3_settings)
        if isinstance(mp2_settings, dict):
            mp2_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings(**mp2_settings)
        if isinstance(pass_through_settings, dict):
            pass_through_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings(**pass_through_settings)
        if isinstance(wav_settings, dict):
            wav_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings(**wav_settings)
        if __debug__:
            def stub(
                *,
                aac_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings, typing.Dict[str, typing.Any]]] = None,
                ac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings, typing.Dict[str, typing.Any]]] = None,
                eac3_atmos_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings, typing.Dict[str, typing.Any]]] = None,
                eac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings, typing.Dict[str, typing.Any]]] = None,
                mp2_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings, typing.Dict[str, typing.Any]]] = None,
                pass_through_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings, typing.Dict[str, typing.Any]]] = None,
                wav_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument aac_settings", value=aac_settings, expected_type=type_hints["aac_settings"])
            check_type(argname="argument ac3_settings", value=ac3_settings, expected_type=type_hints["ac3_settings"])
            check_type(argname="argument eac3_atmos_settings", value=eac3_atmos_settings, expected_type=type_hints["eac3_atmos_settings"])
            check_type(argname="argument eac3_settings", value=eac3_settings, expected_type=type_hints["eac3_settings"])
            check_type(argname="argument mp2_settings", value=mp2_settings, expected_type=type_hints["mp2_settings"])
            check_type(argname="argument pass_through_settings", value=pass_through_settings, expected_type=type_hints["pass_through_settings"])
            check_type(argname="argument wav_settings", value=wav_settings, expected_type=type_hints["wav_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if aac_settings is not None:
            self._values["aac_settings"] = aac_settings
        if ac3_settings is not None:
            self._values["ac3_settings"] = ac3_settings
        if eac3_atmos_settings is not None:
            self._values["eac3_atmos_settings"] = eac3_atmos_settings
        if eac3_settings is not None:
            self._values["eac3_settings"] = eac3_settings
        if mp2_settings is not None:
            self._values["mp2_settings"] = mp2_settings
        if pass_through_settings is not None:
            self._values["pass_through_settings"] = pass_through_settings
        if wav_settings is not None:
            self._values["wav_settings"] = wav_settings

    @builtins.property
    def aac_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings"]:
        '''aac_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#aac_settings MedialiveChannel#aac_settings}
        '''
        result = self._values.get("aac_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings"], result)

    @builtins.property
    def ac3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings"]:
        '''ac3_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ac3_settings MedialiveChannel#ac3_settings}
        '''
        result = self._values.get("ac3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings"], result)

    @builtins.property
    def eac3_atmos_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings"]:
        '''eac3_atmos_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#eac3_atmos_settings MedialiveChannel#eac3_atmos_settings}
        '''
        result = self._values.get("eac3_atmos_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings"], result)

    @builtins.property
    def eac3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings"]:
        '''eac3_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#eac3_settings MedialiveChannel#eac3_settings}
        '''
        result = self._values.get("eac3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings"], result)

    @builtins.property
    def mp2_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings"]:
        '''mp2_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#mp2_settings MedialiveChannel#mp2_settings}
        '''
        result = self._values.get("mp2_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings"], result)

    @builtins.property
    def pass_through_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"]:
        '''pass_through_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pass_through_settings MedialiveChannel#pass_through_settings}
        '''
        result = self._values.get("pass_through_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"], result)

    @builtins.property
    def wav_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"]:
        '''wav_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#wav_settings MedialiveChannel#wav_settings}
        '''
        result = self._values.get("wav_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "coding_mode": "codingMode",
        "input_type": "inputType",
        "profile": "profile",
        "raw_format": "rawFormat",
        "sample_rate": "sampleRate",
        "spec": "spec",
        "vbr_quality": "vbrQuality",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        input_type: typing.Optional[builtins.str] = None,
        profile: typing.Optional[builtins.str] = None,
        raw_format: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
        spec: typing.Optional[builtins.str] = None,
        vbr_quality: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param input_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_type MedialiveChannel#input_type}.
        :param profile: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#profile MedialiveChannel#profile}.
        :param raw_format: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#raw_format MedialiveChannel#raw_format}.
        :param sample_rate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        :param spec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#spec MedialiveChannel#spec}.
        :param vbr_quality: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#vbr_quality MedialiveChannel#vbr_quality}.
        '''
        if __debug__:
            def stub(
                *,
                bitrate: typing.Optional[jsii.Number] = None,
                coding_mode: typing.Optional[builtins.str] = None,
                input_type: typing.Optional[builtins.str] = None,
                profile: typing.Optional[builtins.str] = None,
                raw_format: typing.Optional[builtins.str] = None,
                sample_rate: typing.Optional[jsii.Number] = None,
                spec: typing.Optional[builtins.str] = None,
                vbr_quality: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument input_type", value=input_type, expected_type=type_hints["input_type"])
            check_type(argname="argument profile", value=profile, expected_type=type_hints["profile"])
            check_type(argname="argument raw_format", value=raw_format, expected_type=type_hints["raw_format"])
            check_type(argname="argument sample_rate", value=sample_rate, expected_type=type_hints["sample_rate"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
            check_type(argname="argument vbr_quality", value=vbr_quality, expected_type=type_hints["vbr_quality"])
        self._values: typing.Dict[str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if input_type is not None:
            self._values["input_type"] = input_type
        if profile is not None:
            self._values["profile"] = profile
        if raw_format is not None:
            self._values["raw_format"] = raw_format
        if sample_rate is not None:
            self._values["sample_rate"] = sample_rate
        if spec is not None:
            self._values["spec"] = spec
        if vbr_quality is not None:
            self._values["vbr_quality"] = vbr_quality

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def input_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_type MedialiveChannel#input_type}.'''
        result = self._values.get("input_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#profile MedialiveChannel#profile}.'''
        result = self._values.get("profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def raw_format(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#raw_format MedialiveChannel#raw_format}.'''
        result = self._values.get("raw_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sample_rate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.'''
        result = self._values.get("sample_rate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def spec(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#spec MedialiveChannel#spec}.'''
        result = self._values.get("spec")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def vbr_quality(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#vbr_quality MedialiveChannel#vbr_quality}.'''
        result = self._values.get("vbr_quality")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetInputType")
    def reset_input_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputType", []))

    @jsii.member(jsii_name="resetProfile")
    def reset_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProfile", []))

    @jsii.member(jsii_name="resetRawFormat")
    def reset_raw_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRawFormat", []))

    @jsii.member(jsii_name="resetSampleRate")
    def reset_sample_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSampleRate", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @jsii.member(jsii_name="resetVbrQuality")
    def reset_vbr_quality(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVbrQuality", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="inputTypeInput")
    def input_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="profileInput")
    def profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "profileInput"))

    @builtins.property
    @jsii.member(jsii_name="rawFormatInput")
    def raw_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rawFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="sampleRateInput")
    def sample_rate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sampleRateInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="vbrQualityInput")
    def vbr_quality_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "vbrQualityInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value)

    @builtins.property
    @jsii.member(jsii_name="inputType")
    def input_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputType"))

    @input_type.setter
    def input_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputType", value)

    @builtins.property
    @jsii.member(jsii_name="profile")
    def profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "profile"))

    @profile.setter
    def profile(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "profile", value)

    @builtins.property
    @jsii.member(jsii_name="rawFormat")
    def raw_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rawFormat"))

    @raw_format.setter
    def raw_format(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rawFormat", value)

    @builtins.property
    @jsii.member(jsii_name="sampleRate")
    def sample_rate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sampleRate"))

    @sample_rate.setter
    def sample_rate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sampleRate", value)

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "spec"))

    @spec.setter
    def spec(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "spec", value)

    @builtins.property
    @jsii.member(jsii_name="vbrQuality")
    def vbr_quality(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "vbrQuality"))

    @vbr_quality.setter
    def vbr_quality(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "vbrQuality", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "bitstream_mode": "bitstreamMode",
        "coding_mode": "codingMode",
        "dialnorm": "dialnorm",
        "drc_profile": "drcProfile",
        "lfe_filter": "lfeFilter",
        "metadata_control": "metadataControl",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_profile: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        metadata_control: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_profile: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_profile MedialiveChannel#drc_profile}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param metadata_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        '''
        if __debug__:
            def stub(
                *,
                bitrate: typing.Optional[jsii.Number] = None,
                bitstream_mode: typing.Optional[builtins.str] = None,
                coding_mode: typing.Optional[builtins.str] = None,
                dialnorm: typing.Optional[jsii.Number] = None,
                drc_profile: typing.Optional[builtins.str] = None,
                lfe_filter: typing.Optional[builtins.str] = None,
                metadata_control: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument bitstream_mode", value=bitstream_mode, expected_type=type_hints["bitstream_mode"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument dialnorm", value=dialnorm, expected_type=type_hints["dialnorm"])
            check_type(argname="argument drc_profile", value=drc_profile, expected_type=type_hints["drc_profile"])
            check_type(argname="argument lfe_filter", value=lfe_filter, expected_type=type_hints["lfe_filter"])
            check_type(argname="argument metadata_control", value=metadata_control, expected_type=type_hints["metadata_control"])
        self._values: typing.Dict[str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if bitstream_mode is not None:
            self._values["bitstream_mode"] = bitstream_mode
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if dialnorm is not None:
            self._values["dialnorm"] = dialnorm
        if drc_profile is not None:
            self._values["drc_profile"] = drc_profile
        if lfe_filter is not None:
            self._values["lfe_filter"] = lfe_filter
        if metadata_control is not None:
            self._values["metadata_control"] = metadata_control

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def bitstream_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.'''
        result = self._values.get("bitstream_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dialnorm(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.'''
        result = self._values.get("dialnorm")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def drc_profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_profile MedialiveChannel#drc_profile}.'''
        result = self._values.get("drc_profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lfe_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.'''
        result = self._values.get("lfe_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def metadata_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#metadata_control MedialiveChannel#metadata_control}.'''
        result = self._values.get("metadata_control")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBitstreamMode")
    def reset_bitstream_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitstreamMode", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetDialnorm")
    def reset_dialnorm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDialnorm", []))

    @jsii.member(jsii_name="resetDrcProfile")
    def reset_drc_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcProfile", []))

    @jsii.member(jsii_name="resetLfeFilter")
    def reset_lfe_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLfeFilter", []))

    @jsii.member(jsii_name="resetMetadataControl")
    def reset_metadata_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadataControl", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitstreamModeInput")
    def bitstream_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bitstreamModeInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="dialnormInput")
    def dialnorm_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "dialnormInput"))

    @builtins.property
    @jsii.member(jsii_name="drcProfileInput")
    def drc_profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcProfileInput"))

    @builtins.property
    @jsii.member(jsii_name="lfeFilterInput")
    def lfe_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lfeFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="metadataControlInput")
    def metadata_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "metadataControlInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="bitstreamMode")
    def bitstream_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bitstreamMode"))

    @bitstream_mode.setter
    def bitstream_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitstreamMode", value)

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value)

    @builtins.property
    @jsii.member(jsii_name="dialnorm")
    def dialnorm(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "dialnorm"))

    @dialnorm.setter
    def dialnorm(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dialnorm", value)

    @builtins.property
    @jsii.member(jsii_name="drcProfile")
    def drc_profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcProfile"))

    @drc_profile.setter
    def drc_profile(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcProfile", value)

    @builtins.property
    @jsii.member(jsii_name="lfeFilter")
    def lfe_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lfeFilter"))

    @lfe_filter.setter
    def lfe_filter(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lfeFilter", value)

    @builtins.property
    @jsii.member(jsii_name="metadataControl")
    def metadata_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "metadataControl"))

    @metadata_control.setter
    def metadata_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "metadataControl", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "coding_mode": "codingMode",
        "dialnorm": "dialnorm",
        "drc_line": "drcLine",
        "drc_rf": "drcRf",
        "height_trim": "heightTrim",
        "surround_trim": "surroundTrim",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        height_trim: typing.Optional[jsii.Number] = None,
        surround_trim: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param height_trim: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height_trim MedialiveChannel#height_trim}.
        :param surround_trim: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_trim MedialiveChannel#surround_trim}.
        '''
        if __debug__:
            def stub(
                *,
                bitrate: typing.Optional[jsii.Number] = None,
                coding_mode: typing.Optional[builtins.str] = None,
                dialnorm: typing.Optional[jsii.Number] = None,
                drc_line: typing.Optional[builtins.str] = None,
                drc_rf: typing.Optional[builtins.str] = None,
                height_trim: typing.Optional[jsii.Number] = None,
                surround_trim: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument dialnorm", value=dialnorm, expected_type=type_hints["dialnorm"])
            check_type(argname="argument drc_line", value=drc_line, expected_type=type_hints["drc_line"])
            check_type(argname="argument drc_rf", value=drc_rf, expected_type=type_hints["drc_rf"])
            check_type(argname="argument height_trim", value=height_trim, expected_type=type_hints["height_trim"])
            check_type(argname="argument surround_trim", value=surround_trim, expected_type=type_hints["surround_trim"])
        self._values: typing.Dict[str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if dialnorm is not None:
            self._values["dialnorm"] = dialnorm
        if drc_line is not None:
            self._values["drc_line"] = drc_line
        if drc_rf is not None:
            self._values["drc_rf"] = drc_rf
        if height_trim is not None:
            self._values["height_trim"] = height_trim
        if surround_trim is not None:
            self._values["surround_trim"] = surround_trim

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dialnorm(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.'''
        result = self._values.get("dialnorm")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def drc_line(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_line MedialiveChannel#drc_line}.'''
        result = self._values.get("drc_line")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def drc_rf(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_rf MedialiveChannel#drc_rf}.'''
        result = self._values.get("drc_rf")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def height_trim(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height_trim MedialiveChannel#height_trim}.'''
        result = self._values.get("height_trim")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def surround_trim(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_trim MedialiveChannel#surround_trim}.'''
        result = self._values.get("surround_trim")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetDialnorm")
    def reset_dialnorm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDialnorm", []))

    @jsii.member(jsii_name="resetDrcLine")
    def reset_drc_line(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcLine", []))

    @jsii.member(jsii_name="resetDrcRf")
    def reset_drc_rf(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcRf", []))

    @jsii.member(jsii_name="resetHeightTrim")
    def reset_height_trim(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeightTrim", []))

    @jsii.member(jsii_name="resetSurroundTrim")
    def reset_surround_trim(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSurroundTrim", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="dialnormInput")
    def dialnorm_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "dialnormInput"))

    @builtins.property
    @jsii.member(jsii_name="drcLineInput")
    def drc_line_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcLineInput"))

    @builtins.property
    @jsii.member(jsii_name="drcRfInput")
    def drc_rf_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcRfInput"))

    @builtins.property
    @jsii.member(jsii_name="heightTrimInput")
    def height_trim_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightTrimInput"))

    @builtins.property
    @jsii.member(jsii_name="surroundTrimInput")
    def surround_trim_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "surroundTrimInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value)

    @builtins.property
    @jsii.member(jsii_name="dialnorm")
    def dialnorm(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "dialnorm"))

    @dialnorm.setter
    def dialnorm(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dialnorm", value)

    @builtins.property
    @jsii.member(jsii_name="drcLine")
    def drc_line(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcLine"))

    @drc_line.setter
    def drc_line(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcLine", value)

    @builtins.property
    @jsii.member(jsii_name="drcRf")
    def drc_rf(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcRf"))

    @drc_rf.setter
    def drc_rf(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcRf", value)

    @builtins.property
    @jsii.member(jsii_name="heightTrim")
    def height_trim(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "heightTrim"))

    @height_trim.setter
    def height_trim(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "heightTrim", value)

    @builtins.property
    @jsii.member(jsii_name="surroundTrim")
    def surround_trim(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "surroundTrim"))

    @surround_trim.setter
    def surround_trim(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "surroundTrim", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings",
    jsii_struct_bases=[],
    name_mapping={
        "attenuation_control": "attenuationControl",
        "bitrate": "bitrate",
        "bitstream_mode": "bitstreamMode",
        "coding_mode": "codingMode",
        "dc_filter": "dcFilter",
        "dialnorm": "dialnorm",
        "drc_line": "drcLine",
        "drc_rf": "drcRf",
        "lfe_control": "lfeControl",
        "lfe_filter": "lfeFilter",
        "lo_ro_center_mix_level": "loRoCenterMixLevel",
        "lo_ro_surround_mix_level": "loRoSurroundMixLevel",
        "lt_rt_center_mix_level": "ltRtCenterMixLevel",
        "lt_rt_surround_mix_level": "ltRtSurroundMixLevel",
        "metadata_control": "metadataControl",
        "passthrough_control": "passthroughControl",
        "phase_control": "phaseControl",
        "stereo_downmix": "stereoDownmix",
        "surround_ex_mode": "surroundExMode",
        "surround_mode": "surroundMode",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings:
    def __init__(
        self,
        *,
        attenuation_control: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dc_filter: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        lfe_control: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        lo_ro_center_mix_level: typing.Optional[jsii.Number] = None,
        lo_ro_surround_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_center_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_surround_mix_level: typing.Optional[jsii.Number] = None,
        metadata_control: typing.Optional[builtins.str] = None,
        passthrough_control: typing.Optional[builtins.str] = None,
        phase_control: typing.Optional[builtins.str] = None,
        stereo_downmix: typing.Optional[builtins.str] = None,
        surround_ex_mode: typing.Optional[builtins.str] = None,
        surround_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param attenuation_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#attenuation_control MedialiveChannel#attenuation_control}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dc_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dc_filter MedialiveChannel#dc_filter}.
        :param dialnorm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param lfe_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_control MedialiveChannel#lfe_control}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param lo_ro_center_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lo_ro_center_mix_level MedialiveChannel#lo_ro_center_mix_level}.
        :param lo_ro_surround_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lo_ro_surround_mix_level MedialiveChannel#lo_ro_surround_mix_level}.
        :param lt_rt_center_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lt_rt_center_mix_level MedialiveChannel#lt_rt_center_mix_level}.
        :param lt_rt_surround_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lt_rt_surround_mix_level MedialiveChannel#lt_rt_surround_mix_level}.
        :param metadata_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        :param passthrough_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#passthrough_control MedialiveChannel#passthrough_control}.
        :param phase_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#phase_control MedialiveChannel#phase_control}.
        :param stereo_downmix: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stereo_downmix MedialiveChannel#stereo_downmix}.
        :param surround_ex_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_ex_mode MedialiveChannel#surround_ex_mode}.
        :param surround_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_mode MedialiveChannel#surround_mode}.
        '''
        if __debug__:
            def stub(
                *,
                attenuation_control: typing.Optional[builtins.str] = None,
                bitrate: typing.Optional[jsii.Number] = None,
                bitstream_mode: typing.Optional[builtins.str] = None,
                coding_mode: typing.Optional[builtins.str] = None,
                dc_filter: typing.Optional[builtins.str] = None,
                dialnorm: typing.Optional[jsii.Number] = None,
                drc_line: typing.Optional[builtins.str] = None,
                drc_rf: typing.Optional[builtins.str] = None,
                lfe_control: typing.Optional[builtins.str] = None,
                lfe_filter: typing.Optional[builtins.str] = None,
                lo_ro_center_mix_level: typing.Optional[jsii.Number] = None,
                lo_ro_surround_mix_level: typing.Optional[jsii.Number] = None,
                lt_rt_center_mix_level: typing.Optional[jsii.Number] = None,
                lt_rt_surround_mix_level: typing.Optional[jsii.Number] = None,
                metadata_control: typing.Optional[builtins.str] = None,
                passthrough_control: typing.Optional[builtins.str] = None,
                phase_control: typing.Optional[builtins.str] = None,
                stereo_downmix: typing.Optional[builtins.str] = None,
                surround_ex_mode: typing.Optional[builtins.str] = None,
                surround_mode: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument attenuation_control", value=attenuation_control, expected_type=type_hints["attenuation_control"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument bitstream_mode", value=bitstream_mode, expected_type=type_hints["bitstream_mode"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument dc_filter", value=dc_filter, expected_type=type_hints["dc_filter"])
            check_type(argname="argument dialnorm", value=dialnorm, expected_type=type_hints["dialnorm"])
            check_type(argname="argument drc_line", value=drc_line, expected_type=type_hints["drc_line"])
            check_type(argname="argument drc_rf", value=drc_rf, expected_type=type_hints["drc_rf"])
            check_type(argname="argument lfe_control", value=lfe_control, expected_type=type_hints["lfe_control"])
            check_type(argname="argument lfe_filter", value=lfe_filter, expected_type=type_hints["lfe_filter"])
            check_type(argname="argument lo_ro_center_mix_level", value=lo_ro_center_mix_level, expected_type=type_hints["lo_ro_center_mix_level"])
            check_type(argname="argument lo_ro_surround_mix_level", value=lo_ro_surround_mix_level, expected_type=type_hints["lo_ro_surround_mix_level"])
            check_type(argname="argument lt_rt_center_mix_level", value=lt_rt_center_mix_level, expected_type=type_hints["lt_rt_center_mix_level"])
            check_type(argname="argument lt_rt_surround_mix_level", value=lt_rt_surround_mix_level, expected_type=type_hints["lt_rt_surround_mix_level"])
            check_type(argname="argument metadata_control", value=metadata_control, expected_type=type_hints["metadata_control"])
            check_type(argname="argument passthrough_control", value=passthrough_control, expected_type=type_hints["passthrough_control"])
            check_type(argname="argument phase_control", value=phase_control, expected_type=type_hints["phase_control"])
            check_type(argname="argument stereo_downmix", value=stereo_downmix, expected_type=type_hints["stereo_downmix"])
            check_type(argname="argument surround_ex_mode", value=surround_ex_mode, expected_type=type_hints["surround_ex_mode"])
            check_type(argname="argument surround_mode", value=surround_mode, expected_type=type_hints["surround_mode"])
        self._values: typing.Dict[str, typing.Any] = {}
        if attenuation_control is not None:
            self._values["attenuation_control"] = attenuation_control
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if bitstream_mode is not None:
            self._values["bitstream_mode"] = bitstream_mode
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if dc_filter is not None:
            self._values["dc_filter"] = dc_filter
        if dialnorm is not None:
            self._values["dialnorm"] = dialnorm
        if drc_line is not None:
            self._values["drc_line"] = drc_line
        if drc_rf is not None:
            self._values["drc_rf"] = drc_rf
        if lfe_control is not None:
            self._values["lfe_control"] = lfe_control
        if lfe_filter is not None:
            self._values["lfe_filter"] = lfe_filter
        if lo_ro_center_mix_level is not None:
            self._values["lo_ro_center_mix_level"] = lo_ro_center_mix_level
        if lo_ro_surround_mix_level is not None:
            self._values["lo_ro_surround_mix_level"] = lo_ro_surround_mix_level
        if lt_rt_center_mix_level is not None:
            self._values["lt_rt_center_mix_level"] = lt_rt_center_mix_level
        if lt_rt_surround_mix_level is not None:
            self._values["lt_rt_surround_mix_level"] = lt_rt_surround_mix_level
        if metadata_control is not None:
            self._values["metadata_control"] = metadata_control
        if passthrough_control is not None:
            self._values["passthrough_control"] = passthrough_control
        if phase_control is not None:
            self._values["phase_control"] = phase_control
        if stereo_downmix is not None:
            self._values["stereo_downmix"] = stereo_downmix
        if surround_ex_mode is not None:
            self._values["surround_ex_mode"] = surround_ex_mode
        if surround_mode is not None:
            self._values["surround_mode"] = surround_mode

    @builtins.property
    def attenuation_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#attenuation_control MedialiveChannel#attenuation_control}.'''
        result = self._values.get("attenuation_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def bitstream_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.'''
        result = self._values.get("bitstream_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dc_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dc_filter MedialiveChannel#dc_filter}.'''
        result = self._values.get("dc_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dialnorm(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.'''
        result = self._values.get("dialnorm")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def drc_line(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_line MedialiveChannel#drc_line}.'''
        result = self._values.get("drc_line")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def drc_rf(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_rf MedialiveChannel#drc_rf}.'''
        result = self._values.get("drc_rf")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lfe_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_control MedialiveChannel#lfe_control}.'''
        result = self._values.get("lfe_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lfe_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.'''
        result = self._values.get("lfe_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lo_ro_center_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lo_ro_center_mix_level MedialiveChannel#lo_ro_center_mix_level}.'''
        result = self._values.get("lo_ro_center_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def lo_ro_surround_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lo_ro_surround_mix_level MedialiveChannel#lo_ro_surround_mix_level}.'''
        result = self._values.get("lo_ro_surround_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def lt_rt_center_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lt_rt_center_mix_level MedialiveChannel#lt_rt_center_mix_level}.'''
        result = self._values.get("lt_rt_center_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def lt_rt_surround_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lt_rt_surround_mix_level MedialiveChannel#lt_rt_surround_mix_level}.'''
        result = self._values.get("lt_rt_surround_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def metadata_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#metadata_control MedialiveChannel#metadata_control}.'''
        result = self._values.get("metadata_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def passthrough_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#passthrough_control MedialiveChannel#passthrough_control}.'''
        result = self._values.get("passthrough_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def phase_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#phase_control MedialiveChannel#phase_control}.'''
        result = self._values.get("phase_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def stereo_downmix(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stereo_downmix MedialiveChannel#stereo_downmix}.'''
        result = self._values.get("stereo_downmix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def surround_ex_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_ex_mode MedialiveChannel#surround_ex_mode}.'''
        result = self._values.get("surround_ex_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def surround_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_mode MedialiveChannel#surround_mode}.'''
        result = self._values.get("surround_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAttenuationControl")
    def reset_attenuation_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAttenuationControl", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBitstreamMode")
    def reset_bitstream_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitstreamMode", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetDcFilter")
    def reset_dc_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDcFilter", []))

    @jsii.member(jsii_name="resetDialnorm")
    def reset_dialnorm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDialnorm", []))

    @jsii.member(jsii_name="resetDrcLine")
    def reset_drc_line(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcLine", []))

    @jsii.member(jsii_name="resetDrcRf")
    def reset_drc_rf(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcRf", []))

    @jsii.member(jsii_name="resetLfeControl")
    def reset_lfe_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLfeControl", []))

    @jsii.member(jsii_name="resetLfeFilter")
    def reset_lfe_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLfeFilter", []))

    @jsii.member(jsii_name="resetLoRoCenterMixLevel")
    def reset_lo_ro_center_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoRoCenterMixLevel", []))

    @jsii.member(jsii_name="resetLoRoSurroundMixLevel")
    def reset_lo_ro_surround_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoRoSurroundMixLevel", []))

    @jsii.member(jsii_name="resetLtRtCenterMixLevel")
    def reset_lt_rt_center_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLtRtCenterMixLevel", []))

    @jsii.member(jsii_name="resetLtRtSurroundMixLevel")
    def reset_lt_rt_surround_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLtRtSurroundMixLevel", []))

    @jsii.member(jsii_name="resetMetadataControl")
    def reset_metadata_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadataControl", []))

    @jsii.member(jsii_name="resetPassthroughControl")
    def reset_passthrough_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassthroughControl", []))

    @jsii.member(jsii_name="resetPhaseControl")
    def reset_phase_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPhaseControl", []))

    @jsii.member(jsii_name="resetStereoDownmix")
    def reset_stereo_downmix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStereoDownmix", []))

    @jsii.member(jsii_name="resetSurroundExMode")
    def reset_surround_ex_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSurroundExMode", []))

    @jsii.member(jsii_name="resetSurroundMode")
    def reset_surround_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSurroundMode", []))

    @builtins.property
    @jsii.member(jsii_name="attenuationControlInput")
    def attenuation_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attenuationControlInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitstreamModeInput")
    def bitstream_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bitstreamModeInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="dcFilterInput")
    def dc_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dcFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="dialnormInput")
    def dialnorm_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "dialnormInput"))

    @builtins.property
    @jsii.member(jsii_name="drcLineInput")
    def drc_line_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcLineInput"))

    @builtins.property
    @jsii.member(jsii_name="drcRfInput")
    def drc_rf_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcRfInput"))

    @builtins.property
    @jsii.member(jsii_name="lfeControlInput")
    def lfe_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lfeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="lfeFilterInput")
    def lfe_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lfeFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="loRoCenterMixLevelInput")
    def lo_ro_center_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "loRoCenterMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="loRoSurroundMixLevelInput")
    def lo_ro_surround_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "loRoSurroundMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="ltRtCenterMixLevelInput")
    def lt_rt_center_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ltRtCenterMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="ltRtSurroundMixLevelInput")
    def lt_rt_surround_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ltRtSurroundMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="metadataControlInput")
    def metadata_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "metadataControlInput"))

    @builtins.property
    @jsii.member(jsii_name="passthroughControlInput")
    def passthrough_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passthroughControlInput"))

    @builtins.property
    @jsii.member(jsii_name="phaseControlInput")
    def phase_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "phaseControlInput"))

    @builtins.property
    @jsii.member(jsii_name="stereoDownmixInput")
    def stereo_downmix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "stereoDownmixInput"))

    @builtins.property
    @jsii.member(jsii_name="surroundExModeInput")
    def surround_ex_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "surroundExModeInput"))

    @builtins.property
    @jsii.member(jsii_name="surroundModeInput")
    def surround_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "surroundModeInput"))

    @builtins.property
    @jsii.member(jsii_name="attenuationControl")
    def attenuation_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attenuationControl"))

    @attenuation_control.setter
    def attenuation_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attenuationControl", value)

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="bitstreamMode")
    def bitstream_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bitstreamMode"))

    @bitstream_mode.setter
    def bitstream_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitstreamMode", value)

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value)

    @builtins.property
    @jsii.member(jsii_name="dcFilter")
    def dc_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dcFilter"))

    @dc_filter.setter
    def dc_filter(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dcFilter", value)

    @builtins.property
    @jsii.member(jsii_name="dialnorm")
    def dialnorm(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "dialnorm"))

    @dialnorm.setter
    def dialnorm(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dialnorm", value)

    @builtins.property
    @jsii.member(jsii_name="drcLine")
    def drc_line(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcLine"))

    @drc_line.setter
    def drc_line(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcLine", value)

    @builtins.property
    @jsii.member(jsii_name="drcRf")
    def drc_rf(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcRf"))

    @drc_rf.setter
    def drc_rf(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcRf", value)

    @builtins.property
    @jsii.member(jsii_name="lfeControl")
    def lfe_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lfeControl"))

    @lfe_control.setter
    def lfe_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lfeControl", value)

    @builtins.property
    @jsii.member(jsii_name="lfeFilter")
    def lfe_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lfeFilter"))

    @lfe_filter.setter
    def lfe_filter(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lfeFilter", value)

    @builtins.property
    @jsii.member(jsii_name="loRoCenterMixLevel")
    def lo_ro_center_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "loRoCenterMixLevel"))

    @lo_ro_center_mix_level.setter
    def lo_ro_center_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "loRoCenterMixLevel", value)

    @builtins.property
    @jsii.member(jsii_name="loRoSurroundMixLevel")
    def lo_ro_surround_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "loRoSurroundMixLevel"))

    @lo_ro_surround_mix_level.setter
    def lo_ro_surround_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "loRoSurroundMixLevel", value)

    @builtins.property
    @jsii.member(jsii_name="ltRtCenterMixLevel")
    def lt_rt_center_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ltRtCenterMixLevel"))

    @lt_rt_center_mix_level.setter
    def lt_rt_center_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ltRtCenterMixLevel", value)

    @builtins.property
    @jsii.member(jsii_name="ltRtSurroundMixLevel")
    def lt_rt_surround_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ltRtSurroundMixLevel"))

    @lt_rt_surround_mix_level.setter
    def lt_rt_surround_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ltRtSurroundMixLevel", value)

    @builtins.property
    @jsii.member(jsii_name="metadataControl")
    def metadata_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "metadataControl"))

    @metadata_control.setter
    def metadata_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "metadataControl", value)

    @builtins.property
    @jsii.member(jsii_name="passthroughControl")
    def passthrough_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passthroughControl"))

    @passthrough_control.setter
    def passthrough_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passthroughControl", value)

    @builtins.property
    @jsii.member(jsii_name="phaseControl")
    def phase_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "phaseControl"))

    @phase_control.setter
    def phase_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "phaseControl", value)

    @builtins.property
    @jsii.member(jsii_name="stereoDownmix")
    def stereo_downmix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "stereoDownmix"))

    @stereo_downmix.setter
    def stereo_downmix(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "stereoDownmix", value)

    @builtins.property
    @jsii.member(jsii_name="surroundExMode")
    def surround_ex_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "surroundExMode"))

    @surround_ex_mode.setter
    def surround_ex_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "surroundExMode", value)

    @builtins.property
    @jsii.member(jsii_name="surroundMode")
    def surround_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "surroundMode"))

    @surround_mode.setter
    def surround_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "surroundMode", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "coding_mode": "codingMode",
        "sample_rate": "sampleRate",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        if __debug__:
            def stub(
                *,
                bitrate: typing.Optional[jsii.Number] = None,
                coding_mode: typing.Optional[builtins.str] = None,
                sample_rate: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument sample_rate", value=sample_rate, expected_type=type_hints["sample_rate"])
        self._values: typing.Dict[str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if sample_rate is not None:
            self._values["sample_rate"] = sample_rate

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sample_rate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.'''
        result = self._values.get("sample_rate")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetSampleRate")
    def reset_sample_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSampleRate", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="sampleRateInput")
    def sample_rate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sampleRateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value)

    @builtins.property
    @jsii.member(jsii_name="sampleRate")
    def sample_rate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sampleRate"))

    @sample_rate.setter
    def sample_rate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sampleRate", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAacSettings")
    def put_aac_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        input_type: typing.Optional[builtins.str] = None,
        profile: typing.Optional[builtins.str] = None,
        raw_format: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
        spec: typing.Optional[builtins.str] = None,
        vbr_quality: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param input_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_type MedialiveChannel#input_type}.
        :param profile: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#profile MedialiveChannel#profile}.
        :param raw_format: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#raw_format MedialiveChannel#raw_format}.
        :param sample_rate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        :param spec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#spec MedialiveChannel#spec}.
        :param vbr_quality: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#vbr_quality MedialiveChannel#vbr_quality}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings(
            bitrate=bitrate,
            coding_mode=coding_mode,
            input_type=input_type,
            profile=profile,
            raw_format=raw_format,
            sample_rate=sample_rate,
            spec=spec,
            vbr_quality=vbr_quality,
        )

        return typing.cast(None, jsii.invoke(self, "putAacSettings", [value]))

    @jsii.member(jsii_name="putAc3Settings")
    def put_ac3_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_profile: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        metadata_control: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_profile: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_profile MedialiveChannel#drc_profile}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param metadata_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings(
            bitrate=bitrate,
            bitstream_mode=bitstream_mode,
            coding_mode=coding_mode,
            dialnorm=dialnorm,
            drc_profile=drc_profile,
            lfe_filter=lfe_filter,
            metadata_control=metadata_control,
        )

        return typing.cast(None, jsii.invoke(self, "putAc3Settings", [value]))

    @jsii.member(jsii_name="putEac3AtmosSettings")
    def put_eac3_atmos_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        height_trim: typing.Optional[jsii.Number] = None,
        surround_trim: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param height_trim: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height_trim MedialiveChannel#height_trim}.
        :param surround_trim: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_trim MedialiveChannel#surround_trim}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings(
            bitrate=bitrate,
            coding_mode=coding_mode,
            dialnorm=dialnorm,
            drc_line=drc_line,
            drc_rf=drc_rf,
            height_trim=height_trim,
            surround_trim=surround_trim,
        )

        return typing.cast(None, jsii.invoke(self, "putEac3AtmosSettings", [value]))

    @jsii.member(jsii_name="putEac3Settings")
    def put_eac3_settings(
        self,
        *,
        attenuation_control: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dc_filter: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        lfe_control: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        lo_ro_center_mix_level: typing.Optional[jsii.Number] = None,
        lo_ro_surround_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_center_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_surround_mix_level: typing.Optional[jsii.Number] = None,
        metadata_control: typing.Optional[builtins.str] = None,
        passthrough_control: typing.Optional[builtins.str] = None,
        phase_control: typing.Optional[builtins.str] = None,
        stereo_downmix: typing.Optional[builtins.str] = None,
        surround_ex_mode: typing.Optional[builtins.str] = None,
        surround_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param attenuation_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#attenuation_control MedialiveChannel#attenuation_control}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dc_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dc_filter MedialiveChannel#dc_filter}.
        :param dialnorm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param lfe_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_control MedialiveChannel#lfe_control}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param lo_ro_center_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lo_ro_center_mix_level MedialiveChannel#lo_ro_center_mix_level}.
        :param lo_ro_surround_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lo_ro_surround_mix_level MedialiveChannel#lo_ro_surround_mix_level}.
        :param lt_rt_center_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lt_rt_center_mix_level MedialiveChannel#lt_rt_center_mix_level}.
        :param lt_rt_surround_mix_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#lt_rt_surround_mix_level MedialiveChannel#lt_rt_surround_mix_level}.
        :param metadata_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        :param passthrough_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#passthrough_control MedialiveChannel#passthrough_control}.
        :param phase_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#phase_control MedialiveChannel#phase_control}.
        :param stereo_downmix: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stereo_downmix MedialiveChannel#stereo_downmix}.
        :param surround_ex_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_ex_mode MedialiveChannel#surround_ex_mode}.
        :param surround_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#surround_mode MedialiveChannel#surround_mode}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings(
            attenuation_control=attenuation_control,
            bitrate=bitrate,
            bitstream_mode=bitstream_mode,
            coding_mode=coding_mode,
            dc_filter=dc_filter,
            dialnorm=dialnorm,
            drc_line=drc_line,
            drc_rf=drc_rf,
            lfe_control=lfe_control,
            lfe_filter=lfe_filter,
            lo_ro_center_mix_level=lo_ro_center_mix_level,
            lo_ro_surround_mix_level=lo_ro_surround_mix_level,
            lt_rt_center_mix_level=lt_rt_center_mix_level,
            lt_rt_surround_mix_level=lt_rt_surround_mix_level,
            metadata_control=metadata_control,
            passthrough_control=passthrough_control,
            phase_control=phase_control,
            stereo_downmix=stereo_downmix,
            surround_ex_mode=surround_ex_mode,
            surround_mode=surround_mode,
        )

        return typing.cast(None, jsii.invoke(self, "putEac3Settings", [value]))

    @jsii.member(jsii_name="putMp2Settings")
    def put_mp2_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings(
            bitrate=bitrate, coding_mode=coding_mode, sample_rate=sample_rate
        )

        return typing.cast(None, jsii.invoke(self, "putMp2Settings", [value]))

    @jsii.member(jsii_name="putPassThroughSettings")
    def put_pass_through_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings()

        return typing.cast(None, jsii.invoke(self, "putPassThroughSettings", [value]))

    @jsii.member(jsii_name="putWavSettings")
    def put_wav_settings(
        self,
        *,
        bit_depth: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bit_depth: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bit_depth MedialiveChannel#bit_depth}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings(
            bit_depth=bit_depth, coding_mode=coding_mode, sample_rate=sample_rate
        )

        return typing.cast(None, jsii.invoke(self, "putWavSettings", [value]))

    @jsii.member(jsii_name="resetAacSettings")
    def reset_aac_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAacSettings", []))

    @jsii.member(jsii_name="resetAc3Settings")
    def reset_ac3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAc3Settings", []))

    @jsii.member(jsii_name="resetEac3AtmosSettings")
    def reset_eac3_atmos_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEac3AtmosSettings", []))

    @jsii.member(jsii_name="resetEac3Settings")
    def reset_eac3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEac3Settings", []))

    @jsii.member(jsii_name="resetMp2Settings")
    def reset_mp2_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMp2Settings", []))

    @jsii.member(jsii_name="resetPassThroughSettings")
    def reset_pass_through_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassThroughSettings", []))

    @jsii.member(jsii_name="resetWavSettings")
    def reset_wav_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWavSettings", []))

    @builtins.property
    @jsii.member(jsii_name="aacSettings")
    def aac_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference, jsii.get(self, "aacSettings"))

    @builtins.property
    @jsii.member(jsii_name="ac3Settings")
    def ac3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference, jsii.get(self, "ac3Settings"))

    @builtins.property
    @jsii.member(jsii_name="eac3AtmosSettings")
    def eac3_atmos_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference, jsii.get(self, "eac3AtmosSettings"))

    @builtins.property
    @jsii.member(jsii_name="eac3Settings")
    def eac3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference, jsii.get(self, "eac3Settings"))

    @builtins.property
    @jsii.member(jsii_name="mp2Settings")
    def mp2_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference, jsii.get(self, "mp2Settings"))

    @builtins.property
    @jsii.member(jsii_name="passThroughSettings")
    def pass_through_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference", jsii.get(self, "passThroughSettings"))

    @builtins.property
    @jsii.member(jsii_name="wavSettings")
    def wav_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference", jsii.get(self, "wavSettings"))

    @builtins.property
    @jsii.member(jsii_name="aacSettingsInput")
    def aac_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings], jsii.get(self, "aacSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="ac3SettingsInput")
    def ac3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings], jsii.get(self, "ac3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="eac3AtmosSettingsInput")
    def eac3_atmos_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings], jsii.get(self, "eac3AtmosSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="eac3SettingsInput")
    def eac3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings], jsii.get(self, "eac3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="mp2SettingsInput")
    def mp2_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings], jsii.get(self, "mp2SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="passThroughSettingsInput")
    def pass_through_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"], jsii.get(self, "passThroughSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="wavSettingsInput")
    def wav_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"], jsii.get(self, "wavSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bit_depth": "bitDepth",
        "coding_mode": "codingMode",
        "sample_rate": "sampleRate",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings:
    def __init__(
        self,
        *,
        bit_depth: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bit_depth: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bit_depth MedialiveChannel#bit_depth}.
        :param coding_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        if __debug__:
            def stub(
                *,
                bit_depth: typing.Optional[jsii.Number] = None,
                coding_mode: typing.Optional[builtins.str] = None,
                sample_rate: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument bit_depth", value=bit_depth, expected_type=type_hints["bit_depth"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument sample_rate", value=sample_rate, expected_type=type_hints["sample_rate"])
        self._values: typing.Dict[str, typing.Any] = {}
        if bit_depth is not None:
            self._values["bit_depth"] = bit_depth
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if sample_rate is not None:
            self._values["sample_rate"] = sample_rate

    @builtins.property
    def bit_depth(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bit_depth MedialiveChannel#bit_depth}.'''
        result = self._values.get("bit_depth")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sample_rate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sample_rate MedialiveChannel#sample_rate}.'''
        result = self._values.get("sample_rate")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitDepth")
    def reset_bit_depth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitDepth", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetSampleRate")
    def reset_sample_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSampleRate", []))

    @builtins.property
    @jsii.member(jsii_name="bitDepthInput")
    def bit_depth_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitDepthInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="sampleRateInput")
    def sample_rate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sampleRateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitDepth")
    def bit_depth(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitDepth"))

    @bit_depth.setter
    def bit_depth(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitDepth", value)

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value)

    @builtins.property
    @jsii.member(jsii_name="sampleRate")
    def sample_rate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sampleRate"))

    @sample_rate.setter
    def sample_rate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sampleRate", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAudioNormalizationSettings")
    def put_audio_normalization_settings(
        self,
        *,
        algorithm: typing.Optional[builtins.str] = None,
        algorithm_control: typing.Optional[builtins.str] = None,
        target_lkfs: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param algorithm: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#algorithm MedialiveChannel#algorithm}.
        :param algorithm_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#algorithm_control MedialiveChannel#algorithm_control}.
        :param target_lkfs: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#target_lkfs MedialiveChannel#target_lkfs}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings(
            algorithm=algorithm,
            algorithm_control=algorithm_control,
            target_lkfs=target_lkfs,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioNormalizationSettings", [value]))

    @jsii.member(jsii_name="putAudioWatermarkSettings")
    def put_audio_watermark_settings(
        self,
        *,
        nielsen_watermarks_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param nielsen_watermarks_settings: nielsen_watermarks_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_watermarks_settings MedialiveChannel#nielsen_watermarks_settings}
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings(
            nielsen_watermarks_settings=nielsen_watermarks_settings
        )

        return typing.cast(None, jsii.invoke(self, "putAudioWatermarkSettings", [value]))

    @jsii.member(jsii_name="putCodecSettings")
    def put_codec_settings(
        self,
        *,
        aac_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings, typing.Dict[str, typing.Any]]] = None,
        ac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings, typing.Dict[str, typing.Any]]] = None,
        eac3_atmos_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings, typing.Dict[str, typing.Any]]] = None,
        eac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings, typing.Dict[str, typing.Any]]] = None,
        mp2_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings, typing.Dict[str, typing.Any]]] = None,
        pass_through_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings, typing.Dict[str, typing.Any]]] = None,
        wav_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param aac_settings: aac_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#aac_settings MedialiveChannel#aac_settings}
        :param ac3_settings: ac3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ac3_settings MedialiveChannel#ac3_settings}
        :param eac3_atmos_settings: eac3_atmos_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#eac3_atmos_settings MedialiveChannel#eac3_atmos_settings}
        :param eac3_settings: eac3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#eac3_settings MedialiveChannel#eac3_settings}
        :param mp2_settings: mp2_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#mp2_settings MedialiveChannel#mp2_settings}
        :param pass_through_settings: pass_through_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pass_through_settings MedialiveChannel#pass_through_settings}
        :param wav_settings: wav_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#wav_settings MedialiveChannel#wav_settings}
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings(
            aac_settings=aac_settings,
            ac3_settings=ac3_settings,
            eac3_atmos_settings=eac3_atmos_settings,
            eac3_settings=eac3_settings,
            mp2_settings=mp2_settings,
            pass_through_settings=pass_through_settings,
            wav_settings=wav_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putCodecSettings", [value]))

    @jsii.member(jsii_name="putRemixSettings")
    def put_remix_settings(
        self,
        *,
        channel_mappings: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings", typing.Dict[str, typing.Any]]]],
        channels_in: typing.Optional[jsii.Number] = None,
        channels_out: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param channel_mappings: channel_mappings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_mappings MedialiveChannel#channel_mappings}
        :param channels_in: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channels_in MedialiveChannel#channels_in}.
        :param channels_out: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channels_out MedialiveChannel#channels_out}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings(
            channel_mappings=channel_mappings,
            channels_in=channels_in,
            channels_out=channels_out,
        )

        return typing.cast(None, jsii.invoke(self, "putRemixSettings", [value]))

    @jsii.member(jsii_name="resetAudioNormalizationSettings")
    def reset_audio_normalization_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioNormalizationSettings", []))

    @jsii.member(jsii_name="resetAudioType")
    def reset_audio_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioType", []))

    @jsii.member(jsii_name="resetAudioTypeControl")
    def reset_audio_type_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioTypeControl", []))

    @jsii.member(jsii_name="resetAudioWatermarkSettings")
    def reset_audio_watermark_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioWatermarkSettings", []))

    @jsii.member(jsii_name="resetCodecSettings")
    def reset_codec_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodecSettings", []))

    @jsii.member(jsii_name="resetLanguageCode")
    def reset_language_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCode", []))

    @jsii.member(jsii_name="resetLanguageCodeControl")
    def reset_language_code_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCodeControl", []))

    @jsii.member(jsii_name="resetRemixSettings")
    def reset_remix_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRemixSettings", []))

    @jsii.member(jsii_name="resetStreamName")
    def reset_stream_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamName", []))

    @builtins.property
    @jsii.member(jsii_name="audioNormalizationSettings")
    def audio_normalization_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference, jsii.get(self, "audioNormalizationSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioWatermarkSettings")
    def audio_watermark_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference, jsii.get(self, "audioWatermarkSettings"))

    @builtins.property
    @jsii.member(jsii_name="codecSettings")
    def codec_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference, jsii.get(self, "codecSettings"))

    @builtins.property
    @jsii.member(jsii_name="remixSettings")
    def remix_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference", jsii.get(self, "remixSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioNormalizationSettingsInput")
    def audio_normalization_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings], jsii.get(self, "audioNormalizationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorNameInput")
    def audio_selector_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioSelectorNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTypeControlInput")
    def audio_type_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioTypeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTypeInput")
    def audio_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="audioWatermarkSettingsInput")
    def audio_watermark_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings], jsii.get(self, "audioWatermarkSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="codecSettingsInput")
    def codec_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings], jsii.get(self, "codecSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeControlInput")
    def language_code_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="remixSettingsInput")
    def remix_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"], jsii.get(self, "remixSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="streamNameInput")
    def stream_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorName")
    def audio_selector_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioSelectorName"))

    @audio_selector_name.setter
    def audio_selector_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioSelectorName", value)

    @builtins.property
    @jsii.member(jsii_name="audioType")
    def audio_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioType"))

    @audio_type.setter
    def audio_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioType", value)

    @builtins.property
    @jsii.member(jsii_name="audioTypeControl")
    def audio_type_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioTypeControl"))

    @audio_type_control.setter
    def audio_type_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioTypeControl", value)

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value)

    @builtins.property
    @jsii.member(jsii_name="languageCodeControl")
    def language_code_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCodeControl"))

    @language_code_control.setter
    def language_code_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCodeControl", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="streamName")
    def stream_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamName"))

    @stream_name.setter
    def stream_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings",
    jsii_struct_bases=[],
    name_mapping={
        "channel_mappings": "channelMappings",
        "channels_in": "channelsIn",
        "channels_out": "channelsOut",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings:
    def __init__(
        self,
        *,
        channel_mappings: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings", typing.Dict[str, typing.Any]]]],
        channels_in: typing.Optional[jsii.Number] = None,
        channels_out: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param channel_mappings: channel_mappings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_mappings MedialiveChannel#channel_mappings}
        :param channels_in: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channels_in MedialiveChannel#channels_in}.
        :param channels_out: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channels_out MedialiveChannel#channels_out}.
        '''
        if __debug__:
            def stub(
                *,
                channel_mappings: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, typing.Dict[str, typing.Any]]]],
                channels_in: typing.Optional[jsii.Number] = None,
                channels_out: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument channel_mappings", value=channel_mappings, expected_type=type_hints["channel_mappings"])
            check_type(argname="argument channels_in", value=channels_in, expected_type=type_hints["channels_in"])
            check_type(argname="argument channels_out", value=channels_out, expected_type=type_hints["channels_out"])
        self._values: typing.Dict[str, typing.Any] = {
            "channel_mappings": channel_mappings,
        }
        if channels_in is not None:
            self._values["channels_in"] = channels_in
        if channels_out is not None:
            self._values["channels_out"] = channels_out

    @builtins.property
    def channel_mappings(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings"]]:
        '''channel_mappings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channel_mappings MedialiveChannel#channel_mappings}
        '''
        result = self._values.get("channel_mappings")
        assert result is not None, "Required property 'channel_mappings' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings"]], result)

    @builtins.property
    def channels_in(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channels_in MedialiveChannel#channels_in}.'''
        result = self._values.get("channels_in")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def channels_out(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#channels_out MedialiveChannel#channels_out}.'''
        result = self._values.get("channels_out")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings",
    jsii_struct_bases=[],
    name_mapping={
        "input_channel_levels": "inputChannelLevels",
        "output_channel": "outputChannel",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings:
    def __init__(
        self,
        *,
        input_channel_levels: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels", typing.Dict[str, typing.Any]]]],
        output_channel: jsii.Number,
    ) -> None:
        '''
        :param input_channel_levels: input_channel_levels block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_channel_levels MedialiveChannel#input_channel_levels}
        :param output_channel: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_channel MedialiveChannel#output_channel}.
        '''
        if __debug__:
            def stub(
                *,
                input_channel_levels: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, typing.Dict[str, typing.Any]]]],
                output_channel: jsii.Number,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument input_channel_levels", value=input_channel_levels, expected_type=type_hints["input_channel_levels"])
            check_type(argname="argument output_channel", value=output_channel, expected_type=type_hints["output_channel"])
        self._values: typing.Dict[str, typing.Any] = {
            "input_channel_levels": input_channel_levels,
            "output_channel": output_channel,
        }

    @builtins.property
    def input_channel_levels(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels"]]:
        '''input_channel_levels block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_channel_levels MedialiveChannel#input_channel_levels}
        '''
        result = self._values.get("input_channel_levels")
        assert result is not None, "Required property 'input_channel_levels' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels"]], result)

    @builtins.property
    def output_channel(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_channel MedialiveChannel#output_channel}.'''
        result = self._values.get("output_channel")
        assert result is not None, "Required property 'output_channel' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels",
    jsii_struct_bases=[],
    name_mapping={"gain": "gain", "input_channel": "inputChannel"},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels:
    def __init__(self, *, gain: jsii.Number, input_channel: jsii.Number) -> None:
        '''
        :param gain: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gain MedialiveChannel#gain}.
        :param input_channel: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_channel MedialiveChannel#input_channel}.
        '''
        if __debug__:
            def stub(*, gain: jsii.Number, input_channel: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument gain", value=gain, expected_type=type_hints["gain"])
            check_type(argname="argument input_channel", value=input_channel, expected_type=type_hints["input_channel"])
        self._values: typing.Dict[str, typing.Any] = {
            "gain": gain,
            "input_channel": input_channel,
        }

    @builtins.property
    def gain(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gain MedialiveChannel#gain}.'''
        result = self._values.get("gain")
        assert result is not None, "Required property 'gain' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def input_channel(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_channel MedialiveChannel#input_channel}.'''
        result = self._values.get("input_channel")
        assert result is not None, "Required property 'input_channel' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="gainInput")
    def gain_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gainInput"))

    @builtins.property
    @jsii.member(jsii_name="inputChannelInput")
    def input_channel_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "inputChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="gain")
    def gain(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gain"))

    @gain.setter
    def gain(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gain", value)

    @builtins.property
    @jsii.member(jsii_name="inputChannel")
    def input_channel(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "inputChannel"))

    @input_channel.setter
    def input_channel(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputChannel", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putInputChannelLevels")
    def put_input_channel_levels(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInputChannelLevels", [value]))

    @builtins.property
    @jsii.member(jsii_name="inputChannelLevels")
    def input_channel_levels(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList, jsii.get(self, "inputChannelLevels"))

    @builtins.property
    @jsii.member(jsii_name="inputChannelLevelsInput")
    def input_channel_levels_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]], jsii.get(self, "inputChannelLevelsInput"))

    @builtins.property
    @jsii.member(jsii_name="outputChannelInput")
    def output_channel_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "outputChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="outputChannel")
    def output_channel(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "outputChannel"))

    @output_channel.setter
    def output_channel(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputChannel", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putChannelMappings")
    def put_channel_mappings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putChannelMappings", [value]))

    @jsii.member(jsii_name="resetChannelsIn")
    def reset_channels_in(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChannelsIn", []))

    @jsii.member(jsii_name="resetChannelsOut")
    def reset_channels_out(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChannelsOut", []))

    @builtins.property
    @jsii.member(jsii_name="channelMappings")
    def channel_mappings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList, jsii.get(self, "channelMappings"))

    @builtins.property
    @jsii.member(jsii_name="channelMappingsInput")
    def channel_mappings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]], jsii.get(self, "channelMappingsInput"))

    @builtins.property
    @jsii.member(jsii_name="channelsInInput")
    def channels_in_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "channelsInInput"))

    @builtins.property
    @jsii.member(jsii_name="channelsOutInput")
    def channels_out_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "channelsOutInput"))

    @builtins.property
    @jsii.member(jsii_name="channelsIn")
    def channels_in(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "channelsIn"))

    @channels_in.setter
    def channels_in(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelsIn", value)

    @builtins.property
    @jsii.member(jsii_name="channelsOut")
    def channels_out(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "channelsOut"))

    @channels_out.setter
    def channels_out(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelsOut", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlanking",
    jsii_struct_bases=[],
    name_mapping={"avail_blanking_image": "availBlankingImage", "state": "state"},
)
class MedialiveChannelEncoderSettingsAvailBlanking:
    def __init__(
        self,
        *,
        avail_blanking_image: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage", typing.Dict[str, typing.Any]]] = None,
        state: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param avail_blanking_image: avail_blanking_image block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#avail_blanking_image MedialiveChannel#avail_blanking_image}
        :param state: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#state MedialiveChannel#state}.
        '''
        if isinstance(avail_blanking_image, dict):
            avail_blanking_image = MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage(**avail_blanking_image)
        if __debug__:
            def stub(
                *,
                avail_blanking_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage, typing.Dict[str, typing.Any]]] = None,
                state: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument avail_blanking_image", value=avail_blanking_image, expected_type=type_hints["avail_blanking_image"])
            check_type(argname="argument state", value=state, expected_type=type_hints["state"])
        self._values: typing.Dict[str, typing.Any] = {}
        if avail_blanking_image is not None:
            self._values["avail_blanking_image"] = avail_blanking_image
        if state is not None:
            self._values["state"] = state

    @builtins.property
    def avail_blanking_image(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage"]:
        '''avail_blanking_image block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#avail_blanking_image MedialiveChannel#avail_blanking_image}
        '''
        result = self._values.get("avail_blanking_image")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage"], result)

    @builtins.property
    def state(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#state MedialiveChannel#state}.'''
        result = self._values.get("state")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAvailBlanking(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            def stub(
                *,
                uri: builtins.str,
                password_param: typing.Optional[builtins.str] = None,
                username: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value)

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value)

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsAvailBlankingOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAvailBlankingImage")
    def put_avail_blanking_image(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putAvailBlankingImage", [value]))

    @jsii.member(jsii_name="resetAvailBlankingImage")
    def reset_avail_blanking_image(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAvailBlankingImage", []))

    @jsii.member(jsii_name="resetState")
    def reset_state(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetState", []))

    @builtins.property
    @jsii.member(jsii_name="availBlankingImage")
    def avail_blanking_image(
        self,
    ) -> MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference, jsii.get(self, "availBlankingImage"))

    @builtins.property
    @jsii.member(jsii_name="availBlankingImageInput")
    def avail_blanking_image_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage], jsii.get(self, "availBlankingImageInput"))

    @builtins.property
    @jsii.member(jsii_name="stateInput")
    def state_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "stateInput"))

    @builtins.property
    @jsii.member(jsii_name="state")
    def state(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "state"))

    @state.setter
    def state(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "state", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroups",
    jsii_struct_bases=[],
    name_mapping={
        "output_group_settings": "outputGroupSettings",
        "outputs": "outputs",
        "name": "name",
    },
)
class MedialiveChannelEncoderSettingsOutputGroups:
    def __init__(
        self,
        *,
        output_group_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings", typing.Dict[str, typing.Any]],
        outputs: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputs", typing.Dict[str, typing.Any]]]],
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_group_settings: output_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_group_settings MedialiveChannel#output_group_settings}
        :param outputs: outputs block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#outputs MedialiveChannel#outputs}
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        '''
        if isinstance(output_group_settings, dict):
            output_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings(**output_group_settings)
        if __debug__:
            def stub(
                *,
                output_group_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings, typing.Dict[str, typing.Any]],
                outputs: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, typing.Dict[str, typing.Any]]]],
                name: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument output_group_settings", value=output_group_settings, expected_type=type_hints["output_group_settings"])
            check_type(argname="argument outputs", value=outputs, expected_type=type_hints["outputs"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[str, typing.Any] = {
            "output_group_settings": output_group_settings,
            "outputs": outputs,
        }
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def output_group_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings":
        '''output_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_group_settings MedialiveChannel#output_group_settings}
        '''
        result = self._values.get("output_group_settings")
        assert result is not None, "Required property 'output_group_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings", result)

    @builtins.property
    def outputs(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]]:
        '''outputs block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#outputs MedialiveChannel#outputs}
        '''
        result = self._values.get("outputs")
        assert result is not None, "Required property 'outputs' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroups(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "archive_group_settings": "archiveGroupSettings",
        "frame_capture_group_settings": "frameCaptureGroupSettings",
        "hls_group_settings": "hlsGroupSettings",
        "media_package_group_settings": "mediaPackageGroupSettings",
        "ms_smooth_group_settings": "msSmoothGroupSettings",
        "multiplex_group_settings": "multiplexGroupSettings",
        "rtmp_group_settings": "rtmpGroupSettings",
        "udp_group_settings": "udpGroupSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings:
    def __init__(
        self,
        *,
        archive_group_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings", typing.Dict[str, typing.Any]]]]] = None,
        frame_capture_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings", typing.Dict[str, typing.Any]]] = None,
        hls_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings", typing.Dict[str, typing.Any]]] = None,
        media_package_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings", typing.Dict[str, typing.Any]]] = None,
        ms_smooth_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings", typing.Dict[str, typing.Any]]] = None,
        multiplex_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings", typing.Dict[str, typing.Any]]] = None,
        rtmp_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings", typing.Dict[str, typing.Any]]] = None,
        udp_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_group_settings: archive_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_group_settings MedialiveChannel#archive_group_settings}
        :param frame_capture_group_settings: frame_capture_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_group_settings MedialiveChannel#frame_capture_group_settings}
        :param hls_group_settings: hls_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_group_settings MedialiveChannel#hls_group_settings}
        :param media_package_group_settings: media_package_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_group_settings MedialiveChannel#media_package_group_settings}
        :param ms_smooth_group_settings: ms_smooth_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ms_smooth_group_settings MedialiveChannel#ms_smooth_group_settings}
        :param multiplex_group_settings: multiplex_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_group_settings MedialiveChannel#multiplex_group_settings}
        :param rtmp_group_settings: rtmp_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rtmp_group_settings MedialiveChannel#rtmp_group_settings}
        :param udp_group_settings: udp_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#udp_group_settings MedialiveChannel#udp_group_settings}
        '''
        if isinstance(frame_capture_group_settings, dict):
            frame_capture_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings(**frame_capture_group_settings)
        if isinstance(hls_group_settings, dict):
            hls_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings(**hls_group_settings)
        if isinstance(media_package_group_settings, dict):
            media_package_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings(**media_package_group_settings)
        if isinstance(ms_smooth_group_settings, dict):
            ms_smooth_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings(**ms_smooth_group_settings)
        if isinstance(multiplex_group_settings, dict):
            multiplex_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings(**multiplex_group_settings)
        if isinstance(rtmp_group_settings, dict):
            rtmp_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings(**rtmp_group_settings)
        if isinstance(udp_group_settings, dict):
            udp_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings(**udp_group_settings)
        if __debug__:
            def stub(
                *,
                archive_group_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[str, typing.Any]]]]] = None,
                frame_capture_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings, typing.Dict[str, typing.Any]]] = None,
                hls_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings, typing.Dict[str, typing.Any]]] = None,
                media_package_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings, typing.Dict[str, typing.Any]]] = None,
                ms_smooth_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings, typing.Dict[str, typing.Any]]] = None,
                multiplex_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings, typing.Dict[str, typing.Any]]] = None,
                rtmp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings, typing.Dict[str, typing.Any]]] = None,
                udp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument archive_group_settings", value=archive_group_settings, expected_type=type_hints["archive_group_settings"])
            check_type(argname="argument frame_capture_group_settings", value=frame_capture_group_settings, expected_type=type_hints["frame_capture_group_settings"])
            check_type(argname="argument hls_group_settings", value=hls_group_settings, expected_type=type_hints["hls_group_settings"])
            check_type(argname="argument media_package_group_settings", value=media_package_group_settings, expected_type=type_hints["media_package_group_settings"])
            check_type(argname="argument ms_smooth_group_settings", value=ms_smooth_group_settings, expected_type=type_hints["ms_smooth_group_settings"])
            check_type(argname="argument multiplex_group_settings", value=multiplex_group_settings, expected_type=type_hints["multiplex_group_settings"])
            check_type(argname="argument rtmp_group_settings", value=rtmp_group_settings, expected_type=type_hints["rtmp_group_settings"])
            check_type(argname="argument udp_group_settings", value=udp_group_settings, expected_type=type_hints["udp_group_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if archive_group_settings is not None:
            self._values["archive_group_settings"] = archive_group_settings
        if frame_capture_group_settings is not None:
            self._values["frame_capture_group_settings"] = frame_capture_group_settings
        if hls_group_settings is not None:
            self._values["hls_group_settings"] = hls_group_settings
        if media_package_group_settings is not None:
            self._values["media_package_group_settings"] = media_package_group_settings
        if ms_smooth_group_settings is not None:
            self._values["ms_smooth_group_settings"] = ms_smooth_group_settings
        if multiplex_group_settings is not None:
            self._values["multiplex_group_settings"] = multiplex_group_settings
        if rtmp_group_settings is not None:
            self._values["rtmp_group_settings"] = rtmp_group_settings
        if udp_group_settings is not None:
            self._values["udp_group_settings"] = udp_group_settings

    @builtins.property
    def archive_group_settings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings"]]]:
        '''archive_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_group_settings MedialiveChannel#archive_group_settings}
        '''
        result = self._values.get("archive_group_settings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings"]]], result)

    @builtins.property
    def frame_capture_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings"]:
        '''frame_capture_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_group_settings MedialiveChannel#frame_capture_group_settings}
        '''
        result = self._values.get("frame_capture_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings"], result)

    @builtins.property
    def hls_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings"]:
        '''hls_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_group_settings MedialiveChannel#hls_group_settings}
        '''
        result = self._values.get("hls_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings"], result)

    @builtins.property
    def media_package_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings"]:
        '''media_package_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_group_settings MedialiveChannel#media_package_group_settings}
        '''
        result = self._values.get("media_package_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings"], result)

    @builtins.property
    def ms_smooth_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings"]:
        '''ms_smooth_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ms_smooth_group_settings MedialiveChannel#ms_smooth_group_settings}
        '''
        result = self._values.get("ms_smooth_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings"], result)

    @builtins.property
    def multiplex_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings"]:
        '''multiplex_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_group_settings MedialiveChannel#multiplex_group_settings}
        '''
        result = self._values.get("multiplex_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings"], result)

    @builtins.property
    def rtmp_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"]:
        '''rtmp_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rtmp_group_settings MedialiveChannel#rtmp_group_settings}
        '''
        result = self._values.get("rtmp_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"], result)

    @builtins.property
    def udp_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"]:
        '''udp_group_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#udp_group_settings MedialiveChannel#udp_group_settings}
        '''
        result = self._values.get("udp_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "archive_cdn_settings": "archiveCdnSettings",
        "rollover_interval": "rolloverInterval",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination", typing.Dict[str, typing.Any]],
        archive_cdn_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings", typing.Dict[str, typing.Any]]] = None,
        rollover_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param archive_cdn_settings: archive_cdn_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_cdn_settings MedialiveChannel#archive_cdn_settings}
        :param rollover_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rollover_interval MedialiveChannel#rollover_interval}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination(**destination)
        if isinstance(archive_cdn_settings, dict):
            archive_cdn_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings(**archive_cdn_settings)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination, typing.Dict[str, typing.Any]],
                archive_cdn_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings, typing.Dict[str, typing.Any]]] = None,
                rollover_interval: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument archive_cdn_settings", value=archive_cdn_settings, expected_type=type_hints["archive_cdn_settings"])
            check_type(argname="argument rollover_interval", value=rollover_interval, expected_type=type_hints["rollover_interval"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }
        if archive_cdn_settings is not None:
            self._values["archive_cdn_settings"] = archive_cdn_settings
        if rollover_interval is not None:
            self._values["rollover_interval"] = rollover_interval

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination", result)

    @builtins.property
    def archive_cdn_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings"]:
        '''archive_cdn_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_cdn_settings MedialiveChannel#archive_cdn_settings}
        '''
        result = self._values.get("archive_cdn_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings"], result)

    @builtins.property
    def rollover_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rollover_interval MedialiveChannel#rollover_interval}.'''
        result = self._values.get("rollover_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings",
    jsii_struct_bases=[],
    name_mapping={"archive_s3_settings": "archiveS3Settings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings:
    def __init__(
        self,
        *,
        archive_s3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_s3_settings: archive_s3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_s3_settings MedialiveChannel#archive_s3_settings}
        '''
        if isinstance(archive_s3_settings, dict):
            archive_s3_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings(**archive_s3_settings)
        if __debug__:
            def stub(
                *,
                archive_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument archive_s3_settings", value=archive_s3_settings, expected_type=type_hints["archive_s3_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if archive_s3_settings is not None:
            self._values["archive_s3_settings"] = archive_s3_settings

    @builtins.property
    def archive_s3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings"]:
        '''archive_s3_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_s3_settings MedialiveChannel#archive_s3_settings}
        '''
        result = self._values.get("archive_s3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings",
    jsii_struct_bases=[],
    name_mapping={"canned_acl": "cannedAcl"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings:
    def __init__(self, *, canned_acl: typing.Optional[builtins.str] = None) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        if __debug__:
            def stub(*, canned_acl: typing.Optional[builtins.str] = None) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument canned_acl", value=canned_acl, expected_type=type_hints["canned_acl"])
        self._values: typing.Dict[str, typing.Any] = {}
        if canned_acl is not None:
            self._values["canned_acl"] = canned_acl

    @builtins.property
    def canned_acl(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.'''
        result = self._values.get("canned_acl")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCannedAcl")
    def reset_canned_acl(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCannedAcl", []))

    @builtins.property
    @jsii.member(jsii_name="cannedAclInput")
    def canned_acl_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cannedAclInput"))

    @builtins.property
    @jsii.member(jsii_name="cannedAcl")
    def canned_acl(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cannedAcl"))

    @canned_acl.setter
    def canned_acl(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cannedAcl", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putArchiveS3Settings")
    def put_archive_s3_settings(
        self,
        *,
        canned_acl: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings(
            canned_acl=canned_acl
        )

        return typing.cast(None, jsii.invoke(self, "putArchiveS3Settings", [value]))

    @jsii.member(jsii_name="resetArchiveS3Settings")
    def reset_archive_s3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveS3Settings", []))

    @builtins.property
    @jsii.member(jsii_name="archiveS3Settings")
    def archive_s3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference, jsii.get(self, "archiveS3Settings"))

    @builtins.property
    @jsii.member(jsii_name="archiveS3SettingsInput")
    def archive_s3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings], jsii.get(self, "archiveS3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putArchiveCdnSettings")
    def put_archive_cdn_settings(
        self,
        *,
        archive_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_s3_settings: archive_s3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_s3_settings MedialiveChannel#archive_s3_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings(
            archive_s3_settings=archive_s3_settings
        )

        return typing.cast(None, jsii.invoke(self, "putArchiveCdnSettings", [value]))

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="resetArchiveCdnSettings")
    def reset_archive_cdn_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveCdnSettings", []))

    @jsii.member(jsii_name="resetRolloverInterval")
    def reset_rollover_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRolloverInterval", []))

    @builtins.property
    @jsii.member(jsii_name="archiveCdnSettings")
    def archive_cdn_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference, jsii.get(self, "archiveCdnSettings"))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="archiveCdnSettingsInput")
    def archive_cdn_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings], jsii.get(self, "archiveCdnSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="rolloverIntervalInput")
    def rollover_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rolloverIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="rolloverInterval")
    def rollover_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "rolloverInterval"))

    @rollover_interval.setter
    def rollover_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rolloverInterval", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "frame_capture_cdn_settings": "frameCaptureCdnSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination", typing.Dict[str, typing.Any]],
        frame_capture_cdn_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param frame_capture_cdn_settings: frame_capture_cdn_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_cdn_settings MedialiveChannel#frame_capture_cdn_settings}
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination(**destination)
        if isinstance(frame_capture_cdn_settings, dict):
            frame_capture_cdn_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings(**frame_capture_cdn_settings)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination, typing.Dict[str, typing.Any]],
                frame_capture_cdn_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument frame_capture_cdn_settings", value=frame_capture_cdn_settings, expected_type=type_hints["frame_capture_cdn_settings"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }
        if frame_capture_cdn_settings is not None:
            self._values["frame_capture_cdn_settings"] = frame_capture_cdn_settings

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination", result)

    @builtins.property
    def frame_capture_cdn_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings"]:
        '''frame_capture_cdn_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_cdn_settings MedialiveChannel#frame_capture_cdn_settings}
        '''
        result = self._values.get("frame_capture_cdn_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings",
    jsii_struct_bases=[],
    name_mapping={"frame_capture_s3_settings": "frameCaptureS3Settings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings:
    def __init__(
        self,
        *,
        frame_capture_s3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_s3_settings: frame_capture_s3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_s3_settings MedialiveChannel#frame_capture_s3_settings}
        '''
        if isinstance(frame_capture_s3_settings, dict):
            frame_capture_s3_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings(**frame_capture_s3_settings)
        if __debug__:
            def stub(
                *,
                frame_capture_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument frame_capture_s3_settings", value=frame_capture_s3_settings, expected_type=type_hints["frame_capture_s3_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if frame_capture_s3_settings is not None:
            self._values["frame_capture_s3_settings"] = frame_capture_s3_settings

    @builtins.property
    def frame_capture_s3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings"]:
        '''frame_capture_s3_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_s3_settings MedialiveChannel#frame_capture_s3_settings}
        '''
        result = self._values.get("frame_capture_s3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings",
    jsii_struct_bases=[],
    name_mapping={"canned_acl": "cannedAcl"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings:
    def __init__(self, *, canned_acl: typing.Optional[builtins.str] = None) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        if __debug__:
            def stub(*, canned_acl: typing.Optional[builtins.str] = None) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument canned_acl", value=canned_acl, expected_type=type_hints["canned_acl"])
        self._values: typing.Dict[str, typing.Any] = {}
        if canned_acl is not None:
            self._values["canned_acl"] = canned_acl

    @builtins.property
    def canned_acl(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.'''
        result = self._values.get("canned_acl")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCannedAcl")
    def reset_canned_acl(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCannedAcl", []))

    @builtins.property
    @jsii.member(jsii_name="cannedAclInput")
    def canned_acl_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cannedAclInput"))

    @builtins.property
    @jsii.member(jsii_name="cannedAcl")
    def canned_acl(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cannedAcl"))

    @canned_acl.setter
    def canned_acl(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cannedAcl", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFrameCaptureS3Settings")
    def put_frame_capture_s3_settings(
        self,
        *,
        canned_acl: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings(
            canned_acl=canned_acl
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureS3Settings", [value]))

    @jsii.member(jsii_name="resetFrameCaptureS3Settings")
    def reset_frame_capture_s3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureS3Settings", []))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureS3Settings")
    def frame_capture_s3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference, jsii.get(self, "frameCaptureS3Settings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureS3SettingsInput")
    def frame_capture_s3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings], jsii.get(self, "frameCaptureS3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putFrameCaptureCdnSettings")
    def put_frame_capture_cdn_settings(
        self,
        *,
        frame_capture_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_s3_settings: frame_capture_s3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_s3_settings MedialiveChannel#frame_capture_s3_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings(
            frame_capture_s3_settings=frame_capture_s3_settings
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureCdnSettings", [value]))

    @jsii.member(jsii_name="resetFrameCaptureCdnSettings")
    def reset_frame_capture_cdn_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureCdnSettings", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureCdnSettings")
    def frame_capture_cdn_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference, jsii.get(self, "frameCaptureCdnSettings"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureCdnSettingsInput")
    def frame_capture_cdn_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings], jsii.get(self, "frameCaptureCdnSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ad_markers": "adMarkers",
        "base_url_content": "baseUrlContent",
        "base_url_content1": "baseUrlContent1",
        "base_url_manifest": "baseUrlManifest",
        "base_url_manifest1": "baseUrlManifest1",
        "caption_language_mappings": "captionLanguageMappings",
        "caption_language_setting": "captionLanguageSetting",
        "client_cache": "clientCache",
        "codec_specification": "codecSpecification",
        "constant_iv": "constantIv",
        "directory_structure": "directoryStructure",
        "discontinuity_tags": "discontinuityTags",
        "encryption_type": "encryptionType",
        "hls_cdn_settings": "hlsCdnSettings",
        "hls_id3_segment_tagging": "hlsId3SegmentTagging",
        "iframe_only_playlists": "iframeOnlyPlaylists",
        "incomplete_segment_behavior": "incompleteSegmentBehavior",
        "index_n_segments": "indexNSegments",
        "input_loss_action": "inputLossAction",
        "iv_in_manifest": "ivInManifest",
        "iv_source": "ivSource",
        "keep_segments": "keepSegments",
        "key_format": "keyFormat",
        "key_format_versions": "keyFormatVersions",
        "key_provider_settings": "keyProviderSettings",
        "manifest_compression": "manifestCompression",
        "manifest_duration_format": "manifestDurationFormat",
        "min_segment_length": "minSegmentLength",
        "mode": "mode",
        "output_selection": "outputSelection",
        "program_date_time": "programDateTime",
        "program_date_time_clock": "programDateTimeClock",
        "program_date_time_period": "programDateTimePeriod",
        "redundant_manifest": "redundantManifest",
        "segment_length": "segmentLength",
        "segments_per_subdirectory": "segmentsPerSubdirectory",
        "stream_inf_resolution": "streamInfResolution",
        "timed_metadata_id3_frame": "timedMetadataId3Frame",
        "timed_metadata_id3_period": "timedMetadataId3Period",
        "timestamp_delta_milliseconds": "timestampDeltaMilliseconds",
        "ts_file_mode": "tsFileMode",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination", typing.Dict[str, typing.Any]],
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        base_url_content: typing.Optional[builtins.str] = None,
        base_url_content1: typing.Optional[builtins.str] = None,
        base_url_manifest: typing.Optional[builtins.str] = None,
        base_url_manifest1: typing.Optional[builtins.str] = None,
        caption_language_mappings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings", typing.Dict[str, typing.Any]]]]] = None,
        caption_language_setting: typing.Optional[builtins.str] = None,
        client_cache: typing.Optional[builtins.str] = None,
        codec_specification: typing.Optional[builtins.str] = None,
        constant_iv: typing.Optional[builtins.str] = None,
        directory_structure: typing.Optional[builtins.str] = None,
        discontinuity_tags: typing.Optional[builtins.str] = None,
        encryption_type: typing.Optional[builtins.str] = None,
        hls_cdn_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings", typing.Dict[str, typing.Any]]]]] = None,
        hls_id3_segment_tagging: typing.Optional[builtins.str] = None,
        iframe_only_playlists: typing.Optional[builtins.str] = None,
        incomplete_segment_behavior: typing.Optional[builtins.str] = None,
        index_n_segments: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        iv_in_manifest: typing.Optional[builtins.str] = None,
        iv_source: typing.Optional[builtins.str] = None,
        keep_segments: typing.Optional[jsii.Number] = None,
        key_format: typing.Optional[builtins.str] = None,
        key_format_versions: typing.Optional[builtins.str] = None,
        key_provider_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings", typing.Dict[str, typing.Any]]] = None,
        manifest_compression: typing.Optional[builtins.str] = None,
        manifest_duration_format: typing.Optional[builtins.str] = None,
        min_segment_length: typing.Optional[jsii.Number] = None,
        mode: typing.Optional[builtins.str] = None,
        output_selection: typing.Optional[builtins.str] = None,
        program_date_time: typing.Optional[builtins.str] = None,
        program_date_time_clock: typing.Optional[builtins.str] = None,
        program_date_time_period: typing.Optional[jsii.Number] = None,
        redundant_manifest: typing.Optional[builtins.str] = None,
        segment_length: typing.Optional[jsii.Number] = None,
        segments_per_subdirectory: typing.Optional[jsii.Number] = None,
        stream_inf_resolution: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
        timestamp_delta_milliseconds: typing.Optional[jsii.Number] = None,
        ts_file_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param ad_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param base_url_content: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_content MedialiveChannel#base_url_content}.
        :param base_url_content1: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_content1 MedialiveChannel#base_url_content1}.
        :param base_url_manifest: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_manifest MedialiveChannel#base_url_manifest}.
        :param base_url_manifest1: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_manifest1 MedialiveChannel#base_url_manifest1}.
        :param caption_language_mappings: caption_language_mappings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_language_mappings MedialiveChannel#caption_language_mappings}
        :param caption_language_setting: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_language_setting MedialiveChannel#caption_language_setting}.
        :param client_cache: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#client_cache MedialiveChannel#client_cache}.
        :param codec_specification: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_specification MedialiveChannel#codec_specification}.
        :param constant_iv: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#constant_iv MedialiveChannel#constant_iv}.
        :param directory_structure: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#directory_structure MedialiveChannel#directory_structure}.
        :param discontinuity_tags: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#discontinuity_tags MedialiveChannel#discontinuity_tags}.
        :param encryption_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#encryption_type MedialiveChannel#encryption_type}.
        :param hls_cdn_settings: hls_cdn_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_cdn_settings MedialiveChannel#hls_cdn_settings}
        :param hls_id3_segment_tagging: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_id3_segment_tagging MedialiveChannel#hls_id3_segment_tagging}.
        :param iframe_only_playlists: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iframe_only_playlists MedialiveChannel#iframe_only_playlists}.
        :param incomplete_segment_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#incomplete_segment_behavior MedialiveChannel#incomplete_segment_behavior}.
        :param index_n_segments: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#index_n_segments MedialiveChannel#index_n_segments}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param iv_in_manifest: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iv_in_manifest MedialiveChannel#iv_in_manifest}.
        :param iv_source: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iv_source MedialiveChannel#iv_source}.
        :param keep_segments: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#keep_segments MedialiveChannel#keep_segments}.
        :param key_format: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_format MedialiveChannel#key_format}.
        :param key_format_versions: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_format_versions MedialiveChannel#key_format_versions}.
        :param key_provider_settings: key_provider_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_provider_settings MedialiveChannel#key_provider_settings}
        :param manifest_compression: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#manifest_compression MedialiveChannel#manifest_compression}.
        :param manifest_duration_format: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#manifest_duration_format MedialiveChannel#manifest_duration_format}.
        :param min_segment_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#min_segment_length MedialiveChannel#min_segment_length}.
        :param mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#mode MedialiveChannel#mode}.
        :param output_selection: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_selection MedialiveChannel#output_selection}.
        :param program_date_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time MedialiveChannel#program_date_time}.
        :param program_date_time_clock: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time_clock MedialiveChannel#program_date_time_clock}.
        :param program_date_time_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time_period MedialiveChannel#program_date_time_period}.
        :param redundant_manifest: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#redundant_manifest MedialiveChannel#redundant_manifest}.
        :param segment_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_length MedialiveChannel#segment_length}.
        :param segments_per_subdirectory: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segments_per_subdirectory MedialiveChannel#segments_per_subdirectory}.
        :param stream_inf_resolution: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_inf_resolution MedialiveChannel#stream_inf_resolution}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        :param timestamp_delta_milliseconds: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_delta_milliseconds MedialiveChannel#timestamp_delta_milliseconds}.
        :param ts_file_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ts_file_mode MedialiveChannel#ts_file_mode}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination(**destination)
        if isinstance(key_provider_settings, dict):
            key_provider_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings(**key_provider_settings)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination, typing.Dict[str, typing.Any]],
                ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
                base_url_content: typing.Optional[builtins.str] = None,
                base_url_content1: typing.Optional[builtins.str] = None,
                base_url_manifest: typing.Optional[builtins.str] = None,
                base_url_manifest1: typing.Optional[builtins.str] = None,
                caption_language_mappings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[str, typing.Any]]]]] = None,
                caption_language_setting: typing.Optional[builtins.str] = None,
                client_cache: typing.Optional[builtins.str] = None,
                codec_specification: typing.Optional[builtins.str] = None,
                constant_iv: typing.Optional[builtins.str] = None,
                directory_structure: typing.Optional[builtins.str] = None,
                discontinuity_tags: typing.Optional[builtins.str] = None,
                encryption_type: typing.Optional[builtins.str] = None,
                hls_cdn_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[str, typing.Any]]]]] = None,
                hls_id3_segment_tagging: typing.Optional[builtins.str] = None,
                iframe_only_playlists: typing.Optional[builtins.str] = None,
                incomplete_segment_behavior: typing.Optional[builtins.str] = None,
                index_n_segments: typing.Optional[jsii.Number] = None,
                input_loss_action: typing.Optional[builtins.str] = None,
                iv_in_manifest: typing.Optional[builtins.str] = None,
                iv_source: typing.Optional[builtins.str] = None,
                keep_segments: typing.Optional[jsii.Number] = None,
                key_format: typing.Optional[builtins.str] = None,
                key_format_versions: typing.Optional[builtins.str] = None,
                key_provider_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings, typing.Dict[str, typing.Any]]] = None,
                manifest_compression: typing.Optional[builtins.str] = None,
                manifest_duration_format: typing.Optional[builtins.str] = None,
                min_segment_length: typing.Optional[jsii.Number] = None,
                mode: typing.Optional[builtins.str] = None,
                output_selection: typing.Optional[builtins.str] = None,
                program_date_time: typing.Optional[builtins.str] = None,
                program_date_time_clock: typing.Optional[builtins.str] = None,
                program_date_time_period: typing.Optional[jsii.Number] = None,
                redundant_manifest: typing.Optional[builtins.str] = None,
                segment_length: typing.Optional[jsii.Number] = None,
                segments_per_subdirectory: typing.Optional[jsii.Number] = None,
                stream_inf_resolution: typing.Optional[builtins.str] = None,
                timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
                timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
                timestamp_delta_milliseconds: typing.Optional[jsii.Number] = None,
                ts_file_mode: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ad_markers", value=ad_markers, expected_type=type_hints["ad_markers"])
            check_type(argname="argument base_url_content", value=base_url_content, expected_type=type_hints["base_url_content"])
            check_type(argname="argument base_url_content1", value=base_url_content1, expected_type=type_hints["base_url_content1"])
            check_type(argname="argument base_url_manifest", value=base_url_manifest, expected_type=type_hints["base_url_manifest"])
            check_type(argname="argument base_url_manifest1", value=base_url_manifest1, expected_type=type_hints["base_url_manifest1"])
            check_type(argname="argument caption_language_mappings", value=caption_language_mappings, expected_type=type_hints["caption_language_mappings"])
            check_type(argname="argument caption_language_setting", value=caption_language_setting, expected_type=type_hints["caption_language_setting"])
            check_type(argname="argument client_cache", value=client_cache, expected_type=type_hints["client_cache"])
            check_type(argname="argument codec_specification", value=codec_specification, expected_type=type_hints["codec_specification"])
            check_type(argname="argument constant_iv", value=constant_iv, expected_type=type_hints["constant_iv"])
            check_type(argname="argument directory_structure", value=directory_structure, expected_type=type_hints["directory_structure"])
            check_type(argname="argument discontinuity_tags", value=discontinuity_tags, expected_type=type_hints["discontinuity_tags"])
            check_type(argname="argument encryption_type", value=encryption_type, expected_type=type_hints["encryption_type"])
            check_type(argname="argument hls_cdn_settings", value=hls_cdn_settings, expected_type=type_hints["hls_cdn_settings"])
            check_type(argname="argument hls_id3_segment_tagging", value=hls_id3_segment_tagging, expected_type=type_hints["hls_id3_segment_tagging"])
            check_type(argname="argument iframe_only_playlists", value=iframe_only_playlists, expected_type=type_hints["iframe_only_playlists"])
            check_type(argname="argument incomplete_segment_behavior", value=incomplete_segment_behavior, expected_type=type_hints["incomplete_segment_behavior"])
            check_type(argname="argument index_n_segments", value=index_n_segments, expected_type=type_hints["index_n_segments"])
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument iv_in_manifest", value=iv_in_manifest, expected_type=type_hints["iv_in_manifest"])
            check_type(argname="argument iv_source", value=iv_source, expected_type=type_hints["iv_source"])
            check_type(argname="argument keep_segments", value=keep_segments, expected_type=type_hints["keep_segments"])
            check_type(argname="argument key_format", value=key_format, expected_type=type_hints["key_format"])
            check_type(argname="argument key_format_versions", value=key_format_versions, expected_type=type_hints["key_format_versions"])
            check_type(argname="argument key_provider_settings", value=key_provider_settings, expected_type=type_hints["key_provider_settings"])
            check_type(argname="argument manifest_compression", value=manifest_compression, expected_type=type_hints["manifest_compression"])
            check_type(argname="argument manifest_duration_format", value=manifest_duration_format, expected_type=type_hints["manifest_duration_format"])
            check_type(argname="argument min_segment_length", value=min_segment_length, expected_type=type_hints["min_segment_length"])
            check_type(argname="argument mode", value=mode, expected_type=type_hints["mode"])
            check_type(argname="argument output_selection", value=output_selection, expected_type=type_hints["output_selection"])
            check_type(argname="argument program_date_time", value=program_date_time, expected_type=type_hints["program_date_time"])
            check_type(argname="argument program_date_time_clock", value=program_date_time_clock, expected_type=type_hints["program_date_time_clock"])
            check_type(argname="argument program_date_time_period", value=program_date_time_period, expected_type=type_hints["program_date_time_period"])
            check_type(argname="argument redundant_manifest", value=redundant_manifest, expected_type=type_hints["redundant_manifest"])
            check_type(argname="argument segment_length", value=segment_length, expected_type=type_hints["segment_length"])
            check_type(argname="argument segments_per_subdirectory", value=segments_per_subdirectory, expected_type=type_hints["segments_per_subdirectory"])
            check_type(argname="argument stream_inf_resolution", value=stream_inf_resolution, expected_type=type_hints["stream_inf_resolution"])
            check_type(argname="argument timed_metadata_id3_frame", value=timed_metadata_id3_frame, expected_type=type_hints["timed_metadata_id3_frame"])
            check_type(argname="argument timed_metadata_id3_period", value=timed_metadata_id3_period, expected_type=type_hints["timed_metadata_id3_period"])
            check_type(argname="argument timestamp_delta_milliseconds", value=timestamp_delta_milliseconds, expected_type=type_hints["timestamp_delta_milliseconds"])
            check_type(argname="argument ts_file_mode", value=ts_file_mode, expected_type=type_hints["ts_file_mode"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }
        if ad_markers is not None:
            self._values["ad_markers"] = ad_markers
        if base_url_content is not None:
            self._values["base_url_content"] = base_url_content
        if base_url_content1 is not None:
            self._values["base_url_content1"] = base_url_content1
        if base_url_manifest is not None:
            self._values["base_url_manifest"] = base_url_manifest
        if base_url_manifest1 is not None:
            self._values["base_url_manifest1"] = base_url_manifest1
        if caption_language_mappings is not None:
            self._values["caption_language_mappings"] = caption_language_mappings
        if caption_language_setting is not None:
            self._values["caption_language_setting"] = caption_language_setting
        if client_cache is not None:
            self._values["client_cache"] = client_cache
        if codec_specification is not None:
            self._values["codec_specification"] = codec_specification
        if constant_iv is not None:
            self._values["constant_iv"] = constant_iv
        if directory_structure is not None:
            self._values["directory_structure"] = directory_structure
        if discontinuity_tags is not None:
            self._values["discontinuity_tags"] = discontinuity_tags
        if encryption_type is not None:
            self._values["encryption_type"] = encryption_type
        if hls_cdn_settings is not None:
            self._values["hls_cdn_settings"] = hls_cdn_settings
        if hls_id3_segment_tagging is not None:
            self._values["hls_id3_segment_tagging"] = hls_id3_segment_tagging
        if iframe_only_playlists is not None:
            self._values["iframe_only_playlists"] = iframe_only_playlists
        if incomplete_segment_behavior is not None:
            self._values["incomplete_segment_behavior"] = incomplete_segment_behavior
        if index_n_segments is not None:
            self._values["index_n_segments"] = index_n_segments
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if iv_in_manifest is not None:
            self._values["iv_in_manifest"] = iv_in_manifest
        if iv_source is not None:
            self._values["iv_source"] = iv_source
        if keep_segments is not None:
            self._values["keep_segments"] = keep_segments
        if key_format is not None:
            self._values["key_format"] = key_format
        if key_format_versions is not None:
            self._values["key_format_versions"] = key_format_versions
        if key_provider_settings is not None:
            self._values["key_provider_settings"] = key_provider_settings
        if manifest_compression is not None:
            self._values["manifest_compression"] = manifest_compression
        if manifest_duration_format is not None:
            self._values["manifest_duration_format"] = manifest_duration_format
        if min_segment_length is not None:
            self._values["min_segment_length"] = min_segment_length
        if mode is not None:
            self._values["mode"] = mode
        if output_selection is not None:
            self._values["output_selection"] = output_selection
        if program_date_time is not None:
            self._values["program_date_time"] = program_date_time
        if program_date_time_clock is not None:
            self._values["program_date_time_clock"] = program_date_time_clock
        if program_date_time_period is not None:
            self._values["program_date_time_period"] = program_date_time_period
        if redundant_manifest is not None:
            self._values["redundant_manifest"] = redundant_manifest
        if segment_length is not None:
            self._values["segment_length"] = segment_length
        if segments_per_subdirectory is not None:
            self._values["segments_per_subdirectory"] = segments_per_subdirectory
        if stream_inf_resolution is not None:
            self._values["stream_inf_resolution"] = stream_inf_resolution
        if timed_metadata_id3_frame is not None:
            self._values["timed_metadata_id3_frame"] = timed_metadata_id3_frame
        if timed_metadata_id3_period is not None:
            self._values["timed_metadata_id3_period"] = timed_metadata_id3_period
        if timestamp_delta_milliseconds is not None:
            self._values["timestamp_delta_milliseconds"] = timestamp_delta_milliseconds
        if ts_file_mode is not None:
            self._values["ts_file_mode"] = ts_file_mode

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination", result)

    @builtins.property
    def ad_markers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ad_markers MedialiveChannel#ad_markers}.'''
        result = self._values.get("ad_markers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def base_url_content(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_content MedialiveChannel#base_url_content}.'''
        result = self._values.get("base_url_content")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def base_url_content1(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_content1 MedialiveChannel#base_url_content1}.'''
        result = self._values.get("base_url_content1")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def base_url_manifest(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_manifest MedialiveChannel#base_url_manifest}.'''
        result = self._values.get("base_url_manifest")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def base_url_manifest1(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_manifest1 MedialiveChannel#base_url_manifest1}.'''
        result = self._values.get("base_url_manifest1")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def caption_language_mappings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings"]]]:
        '''caption_language_mappings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_language_mappings MedialiveChannel#caption_language_mappings}
        '''
        result = self._values.get("caption_language_mappings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings"]]], result)

    @builtins.property
    def caption_language_setting(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_language_setting MedialiveChannel#caption_language_setting}.'''
        result = self._values.get("caption_language_setting")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def client_cache(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#client_cache MedialiveChannel#client_cache}.'''
        result = self._values.get("client_cache")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def codec_specification(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_specification MedialiveChannel#codec_specification}.'''
        result = self._values.get("codec_specification")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def constant_iv(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#constant_iv MedialiveChannel#constant_iv}.'''
        result = self._values.get("constant_iv")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory_structure(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#directory_structure MedialiveChannel#directory_structure}.'''
        result = self._values.get("directory_structure")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def discontinuity_tags(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#discontinuity_tags MedialiveChannel#discontinuity_tags}.'''
        result = self._values.get("discontinuity_tags")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def encryption_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#encryption_type MedialiveChannel#encryption_type}.'''
        result = self._values.get("encryption_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def hls_cdn_settings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings"]]]:
        '''hls_cdn_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_cdn_settings MedialiveChannel#hls_cdn_settings}
        '''
        result = self._values.get("hls_cdn_settings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings"]]], result)

    @builtins.property
    def hls_id3_segment_tagging(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_id3_segment_tagging MedialiveChannel#hls_id3_segment_tagging}.'''
        result = self._values.get("hls_id3_segment_tagging")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def iframe_only_playlists(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iframe_only_playlists MedialiveChannel#iframe_only_playlists}.'''
        result = self._values.get("iframe_only_playlists")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def incomplete_segment_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#incomplete_segment_behavior MedialiveChannel#incomplete_segment_behavior}.'''
        result = self._values.get("incomplete_segment_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def index_n_segments(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#index_n_segments MedialiveChannel#index_n_segments}.'''
        result = self._values.get("index_n_segments")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def iv_in_manifest(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iv_in_manifest MedialiveChannel#iv_in_manifest}.'''
        result = self._values.get("iv_in_manifest")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def iv_source(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iv_source MedialiveChannel#iv_source}.'''
        result = self._values.get("iv_source")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def keep_segments(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#keep_segments MedialiveChannel#keep_segments}.'''
        result = self._values.get("keep_segments")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def key_format(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_format MedialiveChannel#key_format}.'''
        result = self._values.get("key_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def key_format_versions(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_format_versions MedialiveChannel#key_format_versions}.'''
        result = self._values.get("key_format_versions")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def key_provider_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings"]:
        '''key_provider_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_provider_settings MedialiveChannel#key_provider_settings}
        '''
        result = self._values.get("key_provider_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings"], result)

    @builtins.property
    def manifest_compression(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#manifest_compression MedialiveChannel#manifest_compression}.'''
        result = self._values.get("manifest_compression")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def manifest_duration_format(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#manifest_duration_format MedialiveChannel#manifest_duration_format}.'''
        result = self._values.get("manifest_duration_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def min_segment_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#min_segment_length MedialiveChannel#min_segment_length}.'''
        result = self._values.get("min_segment_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#mode MedialiveChannel#mode}.'''
        result = self._values.get("mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def output_selection(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_selection MedialiveChannel#output_selection}.'''
        result = self._values.get("output_selection")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_date_time(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time MedialiveChannel#program_date_time}.'''
        result = self._values.get("program_date_time")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_date_time_clock(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time_clock MedialiveChannel#program_date_time_clock}.'''
        result = self._values.get("program_date_time_clock")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_date_time_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time_period MedialiveChannel#program_date_time_period}.'''
        result = self._values.get("program_date_time_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def redundant_manifest(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#redundant_manifest MedialiveChannel#redundant_manifest}.'''
        result = self._values.get("redundant_manifest")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segment_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_length MedialiveChannel#segment_length}.'''
        result = self._values.get("segment_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def segments_per_subdirectory(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segments_per_subdirectory MedialiveChannel#segments_per_subdirectory}.'''
        result = self._values.get("segments_per_subdirectory")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def stream_inf_resolution(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_inf_resolution MedialiveChannel#stream_inf_resolution}.'''
        result = self._values.get("stream_inf_resolution")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_frame(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.'''
        result = self._values.get("timed_metadata_id3_frame")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.'''
        result = self._values.get("timed_metadata_id3_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timestamp_delta_milliseconds(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_delta_milliseconds MedialiveChannel#timestamp_delta_milliseconds}.'''
        result = self._values.get("timestamp_delta_milliseconds")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ts_file_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ts_file_mode MedialiveChannel#ts_file_mode}.'''
        result = self._values.get("ts_file_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings",
    jsii_struct_bases=[],
    name_mapping={
        "caption_channel": "captionChannel",
        "language_code": "languageCode",
        "language_description": "languageDescription",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings:
    def __init__(
        self,
        *,
        caption_channel: jsii.Number,
        language_code: builtins.str,
        language_description: builtins.str,
    ) -> None:
        '''
        :param caption_channel: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_channel MedialiveChannel#caption_channel}.
        :param language_code: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_description: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_description MedialiveChannel#language_description}.
        '''
        if __debug__:
            def stub(
                *,
                caption_channel: jsii.Number,
                language_code: builtins.str,
                language_description: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument caption_channel", value=caption_channel, expected_type=type_hints["caption_channel"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_description", value=language_description, expected_type=type_hints["language_description"])
        self._values: typing.Dict[str, typing.Any] = {
            "caption_channel": caption_channel,
            "language_code": language_code,
            "language_description": language_description,
        }

    @builtins.property
    def caption_channel(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_channel MedialiveChannel#caption_channel}.'''
        result = self._values.get("caption_channel")
        assert result is not None, "Required property 'caption_channel' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def language_code(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        assert result is not None, "Required property 'language_code' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def language_description(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_description MedialiveChannel#language_description}.'''
        result = self._values.get("language_description")
        assert result is not None, "Required property 'language_description' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="captionChannelInput")
    def caption_channel_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "captionChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="languageDescriptionInput")
    def language_description_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageDescriptionInput"))

    @builtins.property
    @jsii.member(jsii_name="captionChannel")
    def caption_channel(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "captionChannel"))

    @caption_channel.setter
    def caption_channel(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionChannel", value)

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value)

    @builtins.property
    @jsii.member(jsii_name="languageDescription")
    def language_description(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageDescription"))

    @language_description.setter
    def language_description(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageDescription", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings",
    jsii_struct_bases=[],
    name_mapping={
        "hls_akamai_settings": "hlsAkamaiSettings",
        "hls_basic_put_settings": "hlsBasicPutSettings",
        "hls_media_store_settings": "hlsMediaStoreSettings",
        "hls_s3_settings": "hlsS3Settings",
        "hls_webdav_settings": "hlsWebdavSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings:
    def __init__(
        self,
        *,
        hls_akamai_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings", typing.Dict[str, typing.Any]]] = None,
        hls_basic_put_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings", typing.Dict[str, typing.Any]]] = None,
        hls_media_store_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings", typing.Dict[str, typing.Any]]] = None,
        hls_s3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings", typing.Dict[str, typing.Any]]] = None,
        hls_webdav_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param hls_akamai_settings: hls_akamai_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_akamai_settings MedialiveChannel#hls_akamai_settings}
        :param hls_basic_put_settings: hls_basic_put_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_basic_put_settings MedialiveChannel#hls_basic_put_settings}
        :param hls_media_store_settings: hls_media_store_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_media_store_settings MedialiveChannel#hls_media_store_settings}
        :param hls_s3_settings: hls_s3_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_s3_settings MedialiveChannel#hls_s3_settings}
        :param hls_webdav_settings: hls_webdav_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_webdav_settings MedialiveChannel#hls_webdav_settings}
        '''
        if isinstance(hls_akamai_settings, dict):
            hls_akamai_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings(**hls_akamai_settings)
        if isinstance(hls_basic_put_settings, dict):
            hls_basic_put_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings(**hls_basic_put_settings)
        if isinstance(hls_media_store_settings, dict):
            hls_media_store_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings(**hls_media_store_settings)
        if isinstance(hls_s3_settings, dict):
            hls_s3_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings(**hls_s3_settings)
        if isinstance(hls_webdav_settings, dict):
            hls_webdav_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings(**hls_webdav_settings)
        if __debug__:
            def stub(
                *,
                hls_akamai_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings, typing.Dict[str, typing.Any]]] = None,
                hls_basic_put_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings, typing.Dict[str, typing.Any]]] = None,
                hls_media_store_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings, typing.Dict[str, typing.Any]]] = None,
                hls_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings, typing.Dict[str, typing.Any]]] = None,
                hls_webdav_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument hls_akamai_settings", value=hls_akamai_settings, expected_type=type_hints["hls_akamai_settings"])
            check_type(argname="argument hls_basic_put_settings", value=hls_basic_put_settings, expected_type=type_hints["hls_basic_put_settings"])
            check_type(argname="argument hls_media_store_settings", value=hls_media_store_settings, expected_type=type_hints["hls_media_store_settings"])
            check_type(argname="argument hls_s3_settings", value=hls_s3_settings, expected_type=type_hints["hls_s3_settings"])
            check_type(argname="argument hls_webdav_settings", value=hls_webdav_settings, expected_type=type_hints["hls_webdav_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if hls_akamai_settings is not None:
            self._values["hls_akamai_settings"] = hls_akamai_settings
        if hls_basic_put_settings is not None:
            self._values["hls_basic_put_settings"] = hls_basic_put_settings
        if hls_media_store_settings is not None:
            self._values["hls_media_store_settings"] = hls_media_store_settings
        if hls_s3_settings is not None:
            self._values["hls_s3_settings"] = hls_s3_settings
        if hls_webdav_settings is not None:
            self._values["hls_webdav_settings"] = hls_webdav_settings

    @builtins.property
    def hls_akamai_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings"]:
        '''hls_akamai_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_akamai_settings MedialiveChannel#hls_akamai_settings}
        '''
        result = self._values.get("hls_akamai_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings"], result)

    @builtins.property
    def hls_basic_put_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings"]:
        '''hls_basic_put_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_basic_put_settings MedialiveChannel#hls_basic_put_settings}
        '''
        result = self._values.get("hls_basic_put_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings"], result)

    @builtins.property
    def hls_media_store_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings"]:
        '''hls_media_store_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_media_store_settings MedialiveChannel#hls_media_store_settings}
        '''
        result = self._values.get("hls_media_store_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings"], result)

    @builtins.property
    def hls_s3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings"]:
        '''hls_s3_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_s3_settings MedialiveChannel#hls_s3_settings}
        '''
        result = self._values.get("hls_s3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings"], result)

    @builtins.property
    def hls_webdav_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings"]:
        '''hls_webdav_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_webdav_settings MedialiveChannel#hls_webdav_settings}
        '''
        result = self._values.get("hls_webdav_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "http_transfer_mode": "httpTransferMode",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
        "salt": "salt",
        "token": "token",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        salt: typing.Optional[builtins.str] = None,
        token: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param salt: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#salt MedialiveChannel#salt}.
        :param token: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#token MedialiveChannel#token}.
        '''
        if __debug__:
            def stub(
                *,
                connection_retry_interval: typing.Optional[jsii.Number] = None,
                filecache_duration: typing.Optional[jsii.Number] = None,
                http_transfer_mode: typing.Optional[builtins.str] = None,
                num_retries: typing.Optional[jsii.Number] = None,
                restart_delay: typing.Optional[jsii.Number] = None,
                salt: typing.Optional[builtins.str] = None,
                token: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument http_transfer_mode", value=http_transfer_mode, expected_type=type_hints["http_transfer_mode"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
            check_type(argname="argument salt", value=salt, expected_type=type_hints["salt"])
            check_type(argname="argument token", value=token, expected_type=type_hints["token"])
        self._values: typing.Dict[str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if http_transfer_mode is not None:
            self._values["http_transfer_mode"] = http_transfer_mode
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay
        if salt is not None:
            self._values["salt"] = salt
        if token is not None:
            self._values["token"] = token

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def http_transfer_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.'''
        result = self._values.get("http_transfer_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def salt(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#salt MedialiveChannel#salt}.'''
        result = self._values.get("salt")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def token(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#token MedialiveChannel#token}.'''
        result = self._values.get("token")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetHttpTransferMode")
    def reset_http_transfer_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHttpTransferMode", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @jsii.member(jsii_name="resetSalt")
    def reset_salt(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSalt", []))

    @jsii.member(jsii_name="resetToken")
    def reset_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetToken", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="httpTransferModeInput")
    def http_transfer_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "httpTransferModeInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="saltInput")
    def salt_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "saltInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenInput")
    def token_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value)

    @builtins.property
    @jsii.member(jsii_name="httpTransferMode")
    def http_transfer_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "httpTransferMode"))

    @http_transfer_mode.setter
    def http_transfer_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpTransferMode", value)

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value)

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value)

    @builtins.property
    @jsii.member(jsii_name="salt")
    def salt(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "salt"))

    @salt.setter
    def salt(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "salt", value)

    @builtins.property
    @jsii.member(jsii_name="token")
    def token(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "token"))

    @token.setter
    def token(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "token", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            def stub(
                *,
                connection_retry_interval: typing.Optional[jsii.Number] = None,
                filecache_duration: typing.Optional[jsii.Number] = None,
                num_retries: typing.Optional[jsii.Number] = None,
                restart_delay: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value)

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value)

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "media_store_storage_class": "mediaStoreStorageClass",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        media_store_storage_class: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param media_store_storage_class: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_store_storage_class MedialiveChannel#media_store_storage_class}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            def stub(
                *,
                connection_retry_interval: typing.Optional[jsii.Number] = None,
                filecache_duration: typing.Optional[jsii.Number] = None,
                media_store_storage_class: typing.Optional[builtins.str] = None,
                num_retries: typing.Optional[jsii.Number] = None,
                restart_delay: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument media_store_storage_class", value=media_store_storage_class, expected_type=type_hints["media_store_storage_class"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if media_store_storage_class is not None:
            self._values["media_store_storage_class"] = media_store_storage_class
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def media_store_storage_class(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_store_storage_class MedialiveChannel#media_store_storage_class}.'''
        result = self._values.get("media_store_storage_class")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetMediaStoreStorageClass")
    def reset_media_store_storage_class(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaStoreStorageClass", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaStoreStorageClassInput")
    def media_store_storage_class_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "mediaStoreStorageClassInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value)

    @builtins.property
    @jsii.member(jsii_name="mediaStoreStorageClass")
    def media_store_storage_class(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mediaStoreStorageClass"))

    @media_store_storage_class.setter
    def media_store_storage_class(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mediaStoreStorageClass", value)

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value)

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings",
    jsii_struct_bases=[],
    name_mapping={"canned_acl": "cannedAcl"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings:
    def __init__(self, *, canned_acl: typing.Optional[builtins.str] = None) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        if __debug__:
            def stub(*, canned_acl: typing.Optional[builtins.str] = None) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument canned_acl", value=canned_acl, expected_type=type_hints["canned_acl"])
        self._values: typing.Dict[str, typing.Any] = {}
        if canned_acl is not None:
            self._values["canned_acl"] = canned_acl

    @builtins.property
    def canned_acl(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.'''
        result = self._values.get("canned_acl")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCannedAcl")
    def reset_canned_acl(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCannedAcl", []))

    @builtins.property
    @jsii.member(jsii_name="cannedAclInput")
    def canned_acl_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cannedAclInput"))

    @builtins.property
    @jsii.member(jsii_name="cannedAcl")
    def canned_acl(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cannedAcl"))

    @canned_acl.setter
    def canned_acl(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cannedAcl", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "http_transfer_mode": "httpTransferMode",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            def stub(
                *,
                connection_retry_interval: typing.Optional[jsii.Number] = None,
                filecache_duration: typing.Optional[jsii.Number] = None,
                http_transfer_mode: typing.Optional[builtins.str] = None,
                num_retries: typing.Optional[jsii.Number] = None,
                restart_delay: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument http_transfer_mode", value=http_transfer_mode, expected_type=type_hints["http_transfer_mode"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if http_transfer_mode is not None:
            self._values["http_transfer_mode"] = http_transfer_mode
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def http_transfer_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.'''
        result = self._values.get("http_transfer_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetHttpTransferMode")
    def reset_http_transfer_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHttpTransferMode", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="httpTransferModeInput")
    def http_transfer_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "httpTransferModeInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value)

    @builtins.property
    @jsii.member(jsii_name="httpTransferMode")
    def http_transfer_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "httpTransferMode"))

    @http_transfer_mode.setter
    def http_transfer_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpTransferMode", value)

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value)

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putHlsAkamaiSettings")
    def put_hls_akamai_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        salt: typing.Optional[builtins.str] = None,
        token: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param salt: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#salt MedialiveChannel#salt}.
        :param token: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#token MedialiveChannel#token}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            http_transfer_mode=http_transfer_mode,
            num_retries=num_retries,
            restart_delay=restart_delay,
            salt=salt,
            token=token,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsAkamaiSettings", [value]))

    @jsii.member(jsii_name="putHlsBasicPutSettings")
    def put_hls_basic_put_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            num_retries=num_retries,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsBasicPutSettings", [value]))

    @jsii.member(jsii_name="putHlsMediaStoreSettings")
    def put_hls_media_store_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        media_store_storage_class: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param media_store_storage_class: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_store_storage_class MedialiveChannel#media_store_storage_class}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            media_store_storage_class=media_store_storage_class,
            num_retries=num_retries,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsMediaStoreSettings", [value]))

    @jsii.member(jsii_name="putHlsS3Settings")
    def put_hls_s3_settings(
        self,
        *,
        canned_acl: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings(
            canned_acl=canned_acl
        )

        return typing.cast(None, jsii.invoke(self, "putHlsS3Settings", [value]))

    @jsii.member(jsii_name="putHlsWebdavSettings")
    def put_hls_webdav_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            http_transfer_mode=http_transfer_mode,
            num_retries=num_retries,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsWebdavSettings", [value]))

    @jsii.member(jsii_name="resetHlsAkamaiSettings")
    def reset_hls_akamai_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsAkamaiSettings", []))

    @jsii.member(jsii_name="resetHlsBasicPutSettings")
    def reset_hls_basic_put_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsBasicPutSettings", []))

    @jsii.member(jsii_name="resetHlsMediaStoreSettings")
    def reset_hls_media_store_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsMediaStoreSettings", []))

    @jsii.member(jsii_name="resetHlsS3Settings")
    def reset_hls_s3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsS3Settings", []))

    @jsii.member(jsii_name="resetHlsWebdavSettings")
    def reset_hls_webdav_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsWebdavSettings", []))

    @builtins.property
    @jsii.member(jsii_name="hlsAkamaiSettings")
    def hls_akamai_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference, jsii.get(self, "hlsAkamaiSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsBasicPutSettings")
    def hls_basic_put_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference, jsii.get(self, "hlsBasicPutSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsMediaStoreSettings")
    def hls_media_store_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference, jsii.get(self, "hlsMediaStoreSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsS3Settings")
    def hls_s3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference, jsii.get(self, "hlsS3Settings"))

    @builtins.property
    @jsii.member(jsii_name="hlsWebdavSettings")
    def hls_webdav_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference, jsii.get(self, "hlsWebdavSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsAkamaiSettingsInput")
    def hls_akamai_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings], jsii.get(self, "hlsAkamaiSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsBasicPutSettingsInput")
    def hls_basic_put_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings], jsii.get(self, "hlsBasicPutSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsMediaStoreSettingsInput")
    def hls_media_store_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings], jsii.get(self, "hlsMediaStoreSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsS3SettingsInput")
    def hls_s3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings], jsii.get(self, "hlsS3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsWebdavSettingsInput")
    def hls_webdav_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings], jsii.get(self, "hlsWebdavSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings",
    jsii_struct_bases=[],
    name_mapping={"static_key_settings": "staticKeySettings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings:
    def __init__(
        self,
        *,
        static_key_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings", typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param static_key_settings: static_key_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#static_key_settings MedialiveChannel#static_key_settings}
        '''
        if __debug__:
            def stub(
                *,
                static_key_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, typing.Dict[str, typing.Any]]]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument static_key_settings", value=static_key_settings, expected_type=type_hints["static_key_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if static_key_settings is not None:
            self._values["static_key_settings"] = static_key_settings

    @builtins.property
    def static_key_settings(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]]:
        '''static_key_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#static_key_settings MedialiveChannel#static_key_settings}
        '''
        result = self._values.get("static_key_settings")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putStaticKeySettings")
    def put_static_key_settings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putStaticKeySettings", [value]))

    @jsii.member(jsii_name="resetStaticKeySettings")
    def reset_static_key_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStaticKeySettings", []))

    @builtins.property
    @jsii.member(jsii_name="staticKeySettings")
    def static_key_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList", jsii.get(self, "staticKeySettings"))

    @builtins.property
    @jsii.member(jsii_name="staticKeySettingsInput")
    def static_key_settings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]], jsii.get(self, "staticKeySettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings",
    jsii_struct_bases=[],
    name_mapping={
        "static_key_value": "staticKeyValue",
        "key_provider_server": "keyProviderServer",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings:
    def __init__(
        self,
        *,
        static_key_value: builtins.str,
        key_provider_server: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param static_key_value: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#static_key_value MedialiveChannel#static_key_value}.
        :param key_provider_server: key_provider_server block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_provider_server MedialiveChannel#key_provider_server}
        '''
        if isinstance(key_provider_server, dict):
            key_provider_server = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer(**key_provider_server)
        if __debug__:
            def stub(
                *,
                static_key_value: builtins.str,
                key_provider_server: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument static_key_value", value=static_key_value, expected_type=type_hints["static_key_value"])
            check_type(argname="argument key_provider_server", value=key_provider_server, expected_type=type_hints["key_provider_server"])
        self._values: typing.Dict[str, typing.Any] = {
            "static_key_value": static_key_value,
        }
        if key_provider_server is not None:
            self._values["key_provider_server"] = key_provider_server

    @builtins.property
    def static_key_value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#static_key_value MedialiveChannel#static_key_value}.'''
        result = self._values.get("static_key_value")
        assert result is not None, "Required property 'static_key_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def key_provider_server(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer"]:
        '''key_provider_server block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_provider_server MedialiveChannel#key_provider_server}
        '''
        result = self._values.get("key_provider_server")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            def stub(
                *,
                uri: builtins.str,
                password_param: typing.Optional[builtins.str] = None,
                username: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value)

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value)

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putKeyProviderServer")
    def put_key_provider_server(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putKeyProviderServer", [value]))

    @jsii.member(jsii_name="resetKeyProviderServer")
    def reset_key_provider_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyProviderServer", []))

    @builtins.property
    @jsii.member(jsii_name="keyProviderServer")
    def key_provider_server(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference, jsii.get(self, "keyProviderServer"))

    @builtins.property
    @jsii.member(jsii_name="keyProviderServerInput")
    def key_provider_server_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer], jsii.get(self, "keyProviderServerInput"))

    @builtins.property
    @jsii.member(jsii_name="staticKeyValueInput")
    def static_key_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "staticKeyValueInput"))

    @builtins.property
    @jsii.member(jsii_name="staticKeyValue")
    def static_key_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "staticKeyValue"))

    @static_key_value.setter
    def static_key_value(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "staticKeyValue", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putCaptionLanguageMappings")
    def put_caption_language_mappings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCaptionLanguageMappings", [value]))

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putHlsCdnSettings")
    def put_hls_cdn_settings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putHlsCdnSettings", [value]))

    @jsii.member(jsii_name="putKeyProviderSettings")
    def put_key_provider_settings(
        self,
        *,
        static_key_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, typing.Dict[str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param static_key_settings: static_key_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#static_key_settings MedialiveChannel#static_key_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings(
            static_key_settings=static_key_settings
        )

        return typing.cast(None, jsii.invoke(self, "putKeyProviderSettings", [value]))

    @jsii.member(jsii_name="resetAdMarkers")
    def reset_ad_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdMarkers", []))

    @jsii.member(jsii_name="resetBaseUrlContent")
    def reset_base_url_content(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlContent", []))

    @jsii.member(jsii_name="resetBaseUrlContent1")
    def reset_base_url_content1(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlContent1", []))

    @jsii.member(jsii_name="resetBaseUrlManifest")
    def reset_base_url_manifest(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlManifest", []))

    @jsii.member(jsii_name="resetBaseUrlManifest1")
    def reset_base_url_manifest1(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlManifest1", []))

    @jsii.member(jsii_name="resetCaptionLanguageMappings")
    def reset_caption_language_mappings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionLanguageMappings", []))

    @jsii.member(jsii_name="resetCaptionLanguageSetting")
    def reset_caption_language_setting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionLanguageSetting", []))

    @jsii.member(jsii_name="resetClientCache")
    def reset_client_cache(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetClientCache", []))

    @jsii.member(jsii_name="resetCodecSpecification")
    def reset_codec_specification(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodecSpecification", []))

    @jsii.member(jsii_name="resetConstantIv")
    def reset_constant_iv(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConstantIv", []))

    @jsii.member(jsii_name="resetDirectoryStructure")
    def reset_directory_structure(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectoryStructure", []))

    @jsii.member(jsii_name="resetDiscontinuityTags")
    def reset_discontinuity_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDiscontinuityTags", []))

    @jsii.member(jsii_name="resetEncryptionType")
    def reset_encryption_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEncryptionType", []))

    @jsii.member(jsii_name="resetHlsCdnSettings")
    def reset_hls_cdn_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsCdnSettings", []))

    @jsii.member(jsii_name="resetHlsId3SegmentTagging")
    def reset_hls_id3_segment_tagging(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsId3SegmentTagging", []))

    @jsii.member(jsii_name="resetIframeOnlyPlaylists")
    def reset_iframe_only_playlists(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIframeOnlyPlaylists", []))

    @jsii.member(jsii_name="resetIncompleteSegmentBehavior")
    def reset_incomplete_segment_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIncompleteSegmentBehavior", []))

    @jsii.member(jsii_name="resetIndexNSegments")
    def reset_index_n_segments(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIndexNSegments", []))

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetIvInManifest")
    def reset_iv_in_manifest(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIvInManifest", []))

    @jsii.member(jsii_name="resetIvSource")
    def reset_iv_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIvSource", []))

    @jsii.member(jsii_name="resetKeepSegments")
    def reset_keep_segments(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeepSegments", []))

    @jsii.member(jsii_name="resetKeyFormat")
    def reset_key_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyFormat", []))

    @jsii.member(jsii_name="resetKeyFormatVersions")
    def reset_key_format_versions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyFormatVersions", []))

    @jsii.member(jsii_name="resetKeyProviderSettings")
    def reset_key_provider_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyProviderSettings", []))

    @jsii.member(jsii_name="resetManifestCompression")
    def reset_manifest_compression(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManifestCompression", []))

    @jsii.member(jsii_name="resetManifestDurationFormat")
    def reset_manifest_duration_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManifestDurationFormat", []))

    @jsii.member(jsii_name="resetMinSegmentLength")
    def reset_min_segment_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMinSegmentLength", []))

    @jsii.member(jsii_name="resetMode")
    def reset_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMode", []))

    @jsii.member(jsii_name="resetOutputSelection")
    def reset_output_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputSelection", []))

    @jsii.member(jsii_name="resetProgramDateTime")
    def reset_program_date_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramDateTime", []))

    @jsii.member(jsii_name="resetProgramDateTimeClock")
    def reset_program_date_time_clock(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramDateTimeClock", []))

    @jsii.member(jsii_name="resetProgramDateTimePeriod")
    def reset_program_date_time_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramDateTimePeriod", []))

    @jsii.member(jsii_name="resetRedundantManifest")
    def reset_redundant_manifest(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRedundantManifest", []))

    @jsii.member(jsii_name="resetSegmentLength")
    def reset_segment_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentLength", []))

    @jsii.member(jsii_name="resetSegmentsPerSubdirectory")
    def reset_segments_per_subdirectory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentsPerSubdirectory", []))

    @jsii.member(jsii_name="resetStreamInfResolution")
    def reset_stream_inf_resolution(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamInfResolution", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Frame")
    def reset_timed_metadata_id3_frame(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Frame", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Period")
    def reset_timed_metadata_id3_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Period", []))

    @jsii.member(jsii_name="resetTimestampDeltaMilliseconds")
    def reset_timestamp_delta_milliseconds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimestampDeltaMilliseconds", []))

    @jsii.member(jsii_name="resetTsFileMode")
    def reset_ts_file_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTsFileMode", []))

    @builtins.property
    @jsii.member(jsii_name="captionLanguageMappings")
    def caption_language_mappings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList, jsii.get(self, "captionLanguageMappings"))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="hlsCdnSettings")
    def hls_cdn_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList, jsii.get(self, "hlsCdnSettings"))

    @builtins.property
    @jsii.member(jsii_name="keyProviderSettings")
    def key_provider_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference, jsii.get(self, "keyProviderSettings"))

    @builtins.property
    @jsii.member(jsii_name="adMarkersInput")
    def ad_markers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "adMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlContent1Input")
    def base_url_content1_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlContent1Input"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlContentInput")
    def base_url_content_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlContentInput"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifest1Input")
    def base_url_manifest1_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlManifest1Input"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifestInput")
    def base_url_manifest_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlManifestInput"))

    @builtins.property
    @jsii.member(jsii_name="captionLanguageMappingsInput")
    def caption_language_mappings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]], jsii.get(self, "captionLanguageMappingsInput"))

    @builtins.property
    @jsii.member(jsii_name="captionLanguageSettingInput")
    def caption_language_setting_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captionLanguageSettingInput"))

    @builtins.property
    @jsii.member(jsii_name="clientCacheInput")
    def client_cache_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "clientCacheInput"))

    @builtins.property
    @jsii.member(jsii_name="codecSpecificationInput")
    def codec_specification_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codecSpecificationInput"))

    @builtins.property
    @jsii.member(jsii_name="constantIvInput")
    def constant_iv_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "constantIvInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryStructureInput")
    def directory_structure_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directoryStructureInput"))

    @builtins.property
    @jsii.member(jsii_name="discontinuityTagsInput")
    def discontinuity_tags_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "discontinuityTagsInput"))

    @builtins.property
    @jsii.member(jsii_name="encryptionTypeInput")
    def encryption_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "encryptionTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsCdnSettingsInput")
    def hls_cdn_settings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]], jsii.get(self, "hlsCdnSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsId3SegmentTaggingInput")
    def hls_id3_segment_tagging_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "hlsId3SegmentTaggingInput"))

    @builtins.property
    @jsii.member(jsii_name="iframeOnlyPlaylistsInput")
    def iframe_only_playlists_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "iframeOnlyPlaylistsInput"))

    @builtins.property
    @jsii.member(jsii_name="incompleteSegmentBehaviorInput")
    def incomplete_segment_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "incompleteSegmentBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="indexNSegmentsInput")
    def index_n_segments_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "indexNSegmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="ivInManifestInput")
    def iv_in_manifest_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ivInManifestInput"))

    @builtins.property
    @jsii.member(jsii_name="ivSourceInput")
    def iv_source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ivSourceInput"))

    @builtins.property
    @jsii.member(jsii_name="keepSegmentsInput")
    def keep_segments_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "keepSegmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="keyFormatInput")
    def key_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="keyFormatVersionsInput")
    def key_format_versions_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyFormatVersionsInput"))

    @builtins.property
    @jsii.member(jsii_name="keyProviderSettingsInput")
    def key_provider_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings], jsii.get(self, "keyProviderSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="manifestCompressionInput")
    def manifest_compression_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "manifestCompressionInput"))

    @builtins.property
    @jsii.member(jsii_name="manifestDurationFormatInput")
    def manifest_duration_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "manifestDurationFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="minSegmentLengthInput")
    def min_segment_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "minSegmentLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="modeInput")
    def mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "modeInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSelectionInput")
    def output_selection_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="programDateTimeClockInput")
    def program_date_time_clock_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programDateTimeClockInput"))

    @builtins.property
    @jsii.member(jsii_name="programDateTimeInput")
    def program_date_time_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programDateTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="programDateTimePeriodInput")
    def program_date_time_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programDateTimePeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="redundantManifestInput")
    def redundant_manifest_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "redundantManifestInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentLengthInput")
    def segment_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentsPerSubdirectoryInput")
    def segments_per_subdirectory_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentsPerSubdirectoryInput"))

    @builtins.property
    @jsii.member(jsii_name="streamInfResolutionInput")
    def stream_inf_resolution_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamInfResolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3FrameInput")
    def timed_metadata_id3_frame_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataId3FrameInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3PeriodInput")
    def timed_metadata_id3_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "timedMetadataId3PeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="timestampDeltaMillisecondsInput")
    def timestamp_delta_milliseconds_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "timestampDeltaMillisecondsInput"))

    @builtins.property
    @jsii.member(jsii_name="tsFileModeInput")
    def ts_file_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tsFileModeInput"))

    @builtins.property
    @jsii.member(jsii_name="adMarkers")
    def ad_markers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "adMarkers"))

    @ad_markers.setter
    def ad_markers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adMarkers", value)

    @builtins.property
    @jsii.member(jsii_name="baseUrlContent")
    def base_url_content(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlContent"))

    @base_url_content.setter
    def base_url_content(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlContent", value)

    @builtins.property
    @jsii.member(jsii_name="baseUrlContent1")
    def base_url_content1(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlContent1"))

    @base_url_content1.setter
    def base_url_content1(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlContent1", value)

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifest")
    def base_url_manifest(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlManifest"))

    @base_url_manifest.setter
    def base_url_manifest(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlManifest", value)

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifest1")
    def base_url_manifest1(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlManifest1"))

    @base_url_manifest1.setter
    def base_url_manifest1(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlManifest1", value)

    @builtins.property
    @jsii.member(jsii_name="captionLanguageSetting")
    def caption_language_setting(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captionLanguageSetting"))

    @caption_language_setting.setter
    def caption_language_setting(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionLanguageSetting", value)

    @builtins.property
    @jsii.member(jsii_name="clientCache")
    def client_cache(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "clientCache"))

    @client_cache.setter
    def client_cache(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "clientCache", value)

    @builtins.property
    @jsii.member(jsii_name="codecSpecification")
    def codec_specification(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codecSpecification"))

    @codec_specification.setter
    def codec_specification(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codecSpecification", value)

    @builtins.property
    @jsii.member(jsii_name="constantIv")
    def constant_iv(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "constantIv"))

    @constant_iv.setter
    def constant_iv(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "constantIv", value)

    @builtins.property
    @jsii.member(jsii_name="directoryStructure")
    def directory_structure(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "directoryStructure"))

    @directory_structure.setter
    def directory_structure(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "directoryStructure", value)

    @builtins.property
    @jsii.member(jsii_name="discontinuityTags")
    def discontinuity_tags(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "discontinuityTags"))

    @discontinuity_tags.setter
    def discontinuity_tags(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "discontinuityTags", value)

    @builtins.property
    @jsii.member(jsii_name="encryptionType")
    def encryption_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "encryptionType"))

    @encryption_type.setter
    def encryption_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "encryptionType", value)

    @builtins.property
    @jsii.member(jsii_name="hlsId3SegmentTagging")
    def hls_id3_segment_tagging(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "hlsId3SegmentTagging"))

    @hls_id3_segment_tagging.setter
    def hls_id3_segment_tagging(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hlsId3SegmentTagging", value)

    @builtins.property
    @jsii.member(jsii_name="iframeOnlyPlaylists")
    def iframe_only_playlists(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "iframeOnlyPlaylists"))

    @iframe_only_playlists.setter
    def iframe_only_playlists(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "iframeOnlyPlaylists", value)

    @builtins.property
    @jsii.member(jsii_name="incompleteSegmentBehavior")
    def incomplete_segment_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "incompleteSegmentBehavior"))

    @incomplete_segment_behavior.setter
    def incomplete_segment_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "incompleteSegmentBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="indexNSegments")
    def index_n_segments(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "indexNSegments"))

    @index_n_segments.setter
    def index_n_segments(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "indexNSegments", value)

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value)

    @builtins.property
    @jsii.member(jsii_name="ivInManifest")
    def iv_in_manifest(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ivInManifest"))

    @iv_in_manifest.setter
    def iv_in_manifest(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ivInManifest", value)

    @builtins.property
    @jsii.member(jsii_name="ivSource")
    def iv_source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ivSource"))

    @iv_source.setter
    def iv_source(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ivSource", value)

    @builtins.property
    @jsii.member(jsii_name="keepSegments")
    def keep_segments(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "keepSegments"))

    @keep_segments.setter
    def keep_segments(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keepSegments", value)

    @builtins.property
    @jsii.member(jsii_name="keyFormat")
    def key_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keyFormat"))

    @key_format.setter
    def key_format(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keyFormat", value)

    @builtins.property
    @jsii.member(jsii_name="keyFormatVersions")
    def key_format_versions(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keyFormatVersions"))

    @key_format_versions.setter
    def key_format_versions(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keyFormatVersions", value)

    @builtins.property
    @jsii.member(jsii_name="manifestCompression")
    def manifest_compression(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "manifestCompression"))

    @manifest_compression.setter
    def manifest_compression(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "manifestCompression", value)

    @builtins.property
    @jsii.member(jsii_name="manifestDurationFormat")
    def manifest_duration_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "manifestDurationFormat"))

    @manifest_duration_format.setter
    def manifest_duration_format(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "manifestDurationFormat", value)

    @builtins.property
    @jsii.member(jsii_name="minSegmentLength")
    def min_segment_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "minSegmentLength"))

    @min_segment_length.setter
    def min_segment_length(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "minSegmentLength", value)

    @builtins.property
    @jsii.member(jsii_name="mode")
    def mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mode"))

    @mode.setter
    def mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mode", value)

    @builtins.property
    @jsii.member(jsii_name="outputSelection")
    def output_selection(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputSelection"))

    @output_selection.setter
    def output_selection(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputSelection", value)

    @builtins.property
    @jsii.member(jsii_name="programDateTime")
    def program_date_time(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programDateTime"))

    @program_date_time.setter
    def program_date_time(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programDateTime", value)

    @builtins.property
    @jsii.member(jsii_name="programDateTimeClock")
    def program_date_time_clock(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programDateTimeClock"))

    @program_date_time_clock.setter
    def program_date_time_clock(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programDateTimeClock", value)

    @builtins.property
    @jsii.member(jsii_name="programDateTimePeriod")
    def program_date_time_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programDateTimePeriod"))

    @program_date_time_period.setter
    def program_date_time_period(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programDateTimePeriod", value)

    @builtins.property
    @jsii.member(jsii_name="redundantManifest")
    def redundant_manifest(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "redundantManifest"))

    @redundant_manifest.setter
    def redundant_manifest(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "redundantManifest", value)

    @builtins.property
    @jsii.member(jsii_name="segmentLength")
    def segment_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentLength"))

    @segment_length.setter
    def segment_length(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentLength", value)

    @builtins.property
    @jsii.member(jsii_name="segmentsPerSubdirectory")
    def segments_per_subdirectory(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentsPerSubdirectory"))

    @segments_per_subdirectory.setter
    def segments_per_subdirectory(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentsPerSubdirectory", value)

    @builtins.property
    @jsii.member(jsii_name="streamInfResolution")
    def stream_inf_resolution(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamInfResolution"))

    @stream_inf_resolution.setter
    def stream_inf_resolution(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamInfResolution", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Frame")
    def timed_metadata_id3_frame(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataId3Frame"))

    @timed_metadata_id3_frame.setter
    def timed_metadata_id3_frame(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Frame", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Period")
    def timed_metadata_id3_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "timedMetadataId3Period"))

    @timed_metadata_id3_period.setter
    def timed_metadata_id3_period(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Period", value)

    @builtins.property
    @jsii.member(jsii_name="timestampDeltaMilliseconds")
    def timestamp_delta_milliseconds(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "timestampDeltaMilliseconds"))

    @timestamp_delta_milliseconds.setter
    def timestamp_delta_milliseconds(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timestampDeltaMilliseconds", value)

    @builtins.property
    @jsii.member(jsii_name="tsFileMode")
    def ts_file_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tsFileMode"))

    @ts_file_mode.setter
    def ts_file_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tsFileMode", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings",
    jsii_struct_bases=[],
    name_mapping={"destination": "destination"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination", typing.Dict[str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination(**destination)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination, typing.Dict[str, typing.Any]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination", result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "acquisition_point_id": "acquisitionPointId",
        "audio_only_timecodec_control": "audioOnlyTimecodecControl",
        "certificate_mode": "certificateMode",
        "connection_retry_interval": "connectionRetryInterval",
        "event_id": "eventId",
        "event_id_mode": "eventIdMode",
        "event_stop_behavior": "eventStopBehavior",
        "filecache_duration": "filecacheDuration",
        "fragment_length": "fragmentLength",
        "input_loss_action": "inputLossAction",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
        "segmentation_mode": "segmentationMode",
        "send_delay_ms": "sendDelayMs",
        "sparse_track_type": "sparseTrackType",
        "stream_manifest_behavior": "streamManifestBehavior",
        "timestamp_offset": "timestampOffset",
        "timestamp_offset_mode": "timestampOffsetMode",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination", typing.Dict[str, typing.Any]],
        acquisition_point_id: typing.Optional[builtins.str] = None,
        audio_only_timecodec_control: typing.Optional[builtins.str] = None,
        certificate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        event_id: typing.Optional[jsii.Number] = None,
        event_id_mode: typing.Optional[builtins.str] = None,
        event_stop_behavior: typing.Optional[builtins.str] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        fragment_length: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        segmentation_mode: typing.Optional[builtins.str] = None,
        send_delay_ms: typing.Optional[jsii.Number] = None,
        sparse_track_type: typing.Optional[builtins.str] = None,
        stream_manifest_behavior: typing.Optional[builtins.str] = None,
        timestamp_offset: typing.Optional[builtins.str] = None,
        timestamp_offset_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param acquisition_point_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#acquisition_point_id MedialiveChannel#acquisition_point_id}.
        :param audio_only_timecodec_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_timecodec_control MedialiveChannel#audio_only_timecodec_control}.
        :param certificate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param event_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_id MedialiveChannel#event_id}.
        :param event_id_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_id_mode MedialiveChannel#event_id_mode}.
        :param event_stop_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_stop_behavior MedialiveChannel#event_stop_behavior}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param fragment_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_length MedialiveChannel#fragment_length}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param segmentation_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_mode MedialiveChannel#segmentation_mode}.
        :param send_delay_ms: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#send_delay_ms MedialiveChannel#send_delay_ms}.
        :param sparse_track_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sparse_track_type MedialiveChannel#sparse_track_type}.
        :param stream_manifest_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_manifest_behavior MedialiveChannel#stream_manifest_behavior}.
        :param timestamp_offset: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_offset MedialiveChannel#timestamp_offset}.
        :param timestamp_offset_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_offset_mode MedialiveChannel#timestamp_offset_mode}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination(**destination)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination, typing.Dict[str, typing.Any]],
                acquisition_point_id: typing.Optional[builtins.str] = None,
                audio_only_timecodec_control: typing.Optional[builtins.str] = None,
                certificate_mode: typing.Optional[builtins.str] = None,
                connection_retry_interval: typing.Optional[jsii.Number] = None,
                event_id: typing.Optional[jsii.Number] = None,
                event_id_mode: typing.Optional[builtins.str] = None,
                event_stop_behavior: typing.Optional[builtins.str] = None,
                filecache_duration: typing.Optional[jsii.Number] = None,
                fragment_length: typing.Optional[jsii.Number] = None,
                input_loss_action: typing.Optional[builtins.str] = None,
                num_retries: typing.Optional[jsii.Number] = None,
                restart_delay: typing.Optional[jsii.Number] = None,
                segmentation_mode: typing.Optional[builtins.str] = None,
                send_delay_ms: typing.Optional[jsii.Number] = None,
                sparse_track_type: typing.Optional[builtins.str] = None,
                stream_manifest_behavior: typing.Optional[builtins.str] = None,
                timestamp_offset: typing.Optional[builtins.str] = None,
                timestamp_offset_mode: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument acquisition_point_id", value=acquisition_point_id, expected_type=type_hints["acquisition_point_id"])
            check_type(argname="argument audio_only_timecodec_control", value=audio_only_timecodec_control, expected_type=type_hints["audio_only_timecodec_control"])
            check_type(argname="argument certificate_mode", value=certificate_mode, expected_type=type_hints["certificate_mode"])
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument event_id", value=event_id, expected_type=type_hints["event_id"])
            check_type(argname="argument event_id_mode", value=event_id_mode, expected_type=type_hints["event_id_mode"])
            check_type(argname="argument event_stop_behavior", value=event_stop_behavior, expected_type=type_hints["event_stop_behavior"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument fragment_length", value=fragment_length, expected_type=type_hints["fragment_length"])
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
            check_type(argname="argument segmentation_mode", value=segmentation_mode, expected_type=type_hints["segmentation_mode"])
            check_type(argname="argument send_delay_ms", value=send_delay_ms, expected_type=type_hints["send_delay_ms"])
            check_type(argname="argument sparse_track_type", value=sparse_track_type, expected_type=type_hints["sparse_track_type"])
            check_type(argname="argument stream_manifest_behavior", value=stream_manifest_behavior, expected_type=type_hints["stream_manifest_behavior"])
            check_type(argname="argument timestamp_offset", value=timestamp_offset, expected_type=type_hints["timestamp_offset"])
            check_type(argname="argument timestamp_offset_mode", value=timestamp_offset_mode, expected_type=type_hints["timestamp_offset_mode"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }
        if acquisition_point_id is not None:
            self._values["acquisition_point_id"] = acquisition_point_id
        if audio_only_timecodec_control is not None:
            self._values["audio_only_timecodec_control"] = audio_only_timecodec_control
        if certificate_mode is not None:
            self._values["certificate_mode"] = certificate_mode
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if event_id is not None:
            self._values["event_id"] = event_id
        if event_id_mode is not None:
            self._values["event_id_mode"] = event_id_mode
        if event_stop_behavior is not None:
            self._values["event_stop_behavior"] = event_stop_behavior
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if fragment_length is not None:
            self._values["fragment_length"] = fragment_length
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay
        if segmentation_mode is not None:
            self._values["segmentation_mode"] = segmentation_mode
        if send_delay_ms is not None:
            self._values["send_delay_ms"] = send_delay_ms
        if sparse_track_type is not None:
            self._values["sparse_track_type"] = sparse_track_type
        if stream_manifest_behavior is not None:
            self._values["stream_manifest_behavior"] = stream_manifest_behavior
        if timestamp_offset is not None:
            self._values["timestamp_offset"] = timestamp_offset
        if timestamp_offset_mode is not None:
            self._values["timestamp_offset_mode"] = timestamp_offset_mode

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination", result)

    @builtins.property
    def acquisition_point_id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#acquisition_point_id MedialiveChannel#acquisition_point_id}.'''
        result = self._values.get("acquisition_point_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_only_timecodec_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_timecodec_control MedialiveChannel#audio_only_timecodec_control}.'''
        result = self._values.get("audio_only_timecodec_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def certificate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.'''
        result = self._values.get("certificate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def event_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_id MedialiveChannel#event_id}.'''
        result = self._values.get("event_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def event_id_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_id_mode MedialiveChannel#event_id_mode}.'''
        result = self._values.get("event_id_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def event_stop_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_stop_behavior MedialiveChannel#event_stop_behavior}.'''
        result = self._values.get("event_stop_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def fragment_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_length MedialiveChannel#fragment_length}.'''
        result = self._values.get("fragment_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def segmentation_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_mode MedialiveChannel#segmentation_mode}.'''
        result = self._values.get("segmentation_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def send_delay_ms(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#send_delay_ms MedialiveChannel#send_delay_ms}.'''
        result = self._values.get("send_delay_ms")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def sparse_track_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sparse_track_type MedialiveChannel#sparse_track_type}.'''
        result = self._values.get("sparse_track_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def stream_manifest_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_manifest_behavior MedialiveChannel#stream_manifest_behavior}.'''
        result = self._values.get("stream_manifest_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timestamp_offset(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_offset MedialiveChannel#timestamp_offset}.'''
        result = self._values.get("timestamp_offset")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timestamp_offset_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_offset_mode MedialiveChannel#timestamp_offset_mode}.'''
        result = self._values.get("timestamp_offset_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="resetAcquisitionPointId")
    def reset_acquisition_point_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAcquisitionPointId", []))

    @jsii.member(jsii_name="resetAudioOnlyTimecodecControl")
    def reset_audio_only_timecodec_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioOnlyTimecodecControl", []))

    @jsii.member(jsii_name="resetCertificateMode")
    def reset_certificate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertificateMode", []))

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetEventId")
    def reset_event_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEventId", []))

    @jsii.member(jsii_name="resetEventIdMode")
    def reset_event_id_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEventIdMode", []))

    @jsii.member(jsii_name="resetEventStopBehavior")
    def reset_event_stop_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEventStopBehavior", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetFragmentLength")
    def reset_fragment_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFragmentLength", []))

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @jsii.member(jsii_name="resetSegmentationMode")
    def reset_segmentation_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationMode", []))

    @jsii.member(jsii_name="resetSendDelayMs")
    def reset_send_delay_ms(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSendDelayMs", []))

    @jsii.member(jsii_name="resetSparseTrackType")
    def reset_sparse_track_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSparseTrackType", []))

    @jsii.member(jsii_name="resetStreamManifestBehavior")
    def reset_stream_manifest_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamManifestBehavior", []))

    @jsii.member(jsii_name="resetTimestampOffset")
    def reset_timestamp_offset(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimestampOffset", []))

    @jsii.member(jsii_name="resetTimestampOffsetMode")
    def reset_timestamp_offset_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimestampOffsetMode", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="acquisitionPointIdInput")
    def acquisition_point_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "acquisitionPointIdInput"))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyTimecodecControlInput")
    def audio_only_timecodec_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioOnlyTimecodecControlInput"))

    @builtins.property
    @jsii.member(jsii_name="certificateModeInput")
    def certificate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "certificateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="eventIdInput")
    def event_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "eventIdInput"))

    @builtins.property
    @jsii.member(jsii_name="eventIdModeInput")
    def event_id_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "eventIdModeInput"))

    @builtins.property
    @jsii.member(jsii_name="eventStopBehaviorInput")
    def event_stop_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "eventStopBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="fragmentLengthInput")
    def fragment_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fragmentLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationModeInput")
    def segmentation_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationModeInput"))

    @builtins.property
    @jsii.member(jsii_name="sendDelayMsInput")
    def send_delay_ms_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sendDelayMsInput"))

    @builtins.property
    @jsii.member(jsii_name="sparseTrackTypeInput")
    def sparse_track_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sparseTrackTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="streamManifestBehaviorInput")
    def stream_manifest_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamManifestBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timestampOffsetInput")
    def timestamp_offset_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timestampOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="timestampOffsetModeInput")
    def timestamp_offset_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timestampOffsetModeInput"))

    @builtins.property
    @jsii.member(jsii_name="acquisitionPointId")
    def acquisition_point_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "acquisitionPointId"))

    @acquisition_point_id.setter
    def acquisition_point_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "acquisitionPointId", value)

    @builtins.property
    @jsii.member(jsii_name="audioOnlyTimecodecControl")
    def audio_only_timecodec_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioOnlyTimecodecControl"))

    @audio_only_timecodec_control.setter
    def audio_only_timecodec_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioOnlyTimecodecControl", value)

    @builtins.property
    @jsii.member(jsii_name="certificateMode")
    def certificate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "certificateMode"))

    @certificate_mode.setter
    def certificate_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certificateMode", value)

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="eventId")
    def event_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "eventId"))

    @event_id.setter
    def event_id(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "eventId", value)

    @builtins.property
    @jsii.member(jsii_name="eventIdMode")
    def event_id_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "eventIdMode"))

    @event_id_mode.setter
    def event_id_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "eventIdMode", value)

    @builtins.property
    @jsii.member(jsii_name="eventStopBehavior")
    def event_stop_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "eventStopBehavior"))

    @event_stop_behavior.setter
    def event_stop_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "eventStopBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value)

    @builtins.property
    @jsii.member(jsii_name="fragmentLength")
    def fragment_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fragmentLength"))

    @fragment_length.setter
    def fragment_length(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fragmentLength", value)

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value)

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value)

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationMode")
    def segmentation_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationMode"))

    @segmentation_mode.setter
    def segmentation_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationMode", value)

    @builtins.property
    @jsii.member(jsii_name="sendDelayMs")
    def send_delay_ms(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sendDelayMs"))

    @send_delay_ms.setter
    def send_delay_ms(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sendDelayMs", value)

    @builtins.property
    @jsii.member(jsii_name="sparseTrackType")
    def sparse_track_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sparseTrackType"))

    @sparse_track_type.setter
    def sparse_track_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sparseTrackType", value)

    @builtins.property
    @jsii.member(jsii_name="streamManifestBehavior")
    def stream_manifest_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamManifestBehavior"))

    @stream_manifest_behavior.setter
    def stream_manifest_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamManifestBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="timestampOffset")
    def timestamp_offset(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timestampOffset"))

    @timestamp_offset.setter
    def timestamp_offset(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timestampOffset", value)

    @builtins.property
    @jsii.member(jsii_name="timestampOffsetMode")
    def timestamp_offset_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timestampOffsetMode"))

    @timestamp_offset_mode.setter
    def timestamp_offset_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timestampOffsetMode", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putArchiveGroupSettings")
    def put_archive_group_settings(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putArchiveGroupSettings", [value]))

    @jsii.member(jsii_name="putFrameCaptureGroupSettings")
    def put_frame_capture_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination, typing.Dict[str, typing.Any]],
        frame_capture_cdn_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param frame_capture_cdn_settings: frame_capture_cdn_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_cdn_settings MedialiveChannel#frame_capture_cdn_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings(
            destination=destination,
            frame_capture_cdn_settings=frame_capture_cdn_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureGroupSettings", [value]))

    @jsii.member(jsii_name="putHlsGroupSettings")
    def put_hls_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination, typing.Dict[str, typing.Any]],
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        base_url_content: typing.Optional[builtins.str] = None,
        base_url_content1: typing.Optional[builtins.str] = None,
        base_url_manifest: typing.Optional[builtins.str] = None,
        base_url_manifest1: typing.Optional[builtins.str] = None,
        caption_language_mappings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[str, typing.Any]]]]] = None,
        caption_language_setting: typing.Optional[builtins.str] = None,
        client_cache: typing.Optional[builtins.str] = None,
        codec_specification: typing.Optional[builtins.str] = None,
        constant_iv: typing.Optional[builtins.str] = None,
        directory_structure: typing.Optional[builtins.str] = None,
        discontinuity_tags: typing.Optional[builtins.str] = None,
        encryption_type: typing.Optional[builtins.str] = None,
        hls_cdn_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[str, typing.Any]]]]] = None,
        hls_id3_segment_tagging: typing.Optional[builtins.str] = None,
        iframe_only_playlists: typing.Optional[builtins.str] = None,
        incomplete_segment_behavior: typing.Optional[builtins.str] = None,
        index_n_segments: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        iv_in_manifest: typing.Optional[builtins.str] = None,
        iv_source: typing.Optional[builtins.str] = None,
        keep_segments: typing.Optional[jsii.Number] = None,
        key_format: typing.Optional[builtins.str] = None,
        key_format_versions: typing.Optional[builtins.str] = None,
        key_provider_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings, typing.Dict[str, typing.Any]]] = None,
        manifest_compression: typing.Optional[builtins.str] = None,
        manifest_duration_format: typing.Optional[builtins.str] = None,
        min_segment_length: typing.Optional[jsii.Number] = None,
        mode: typing.Optional[builtins.str] = None,
        output_selection: typing.Optional[builtins.str] = None,
        program_date_time: typing.Optional[builtins.str] = None,
        program_date_time_clock: typing.Optional[builtins.str] = None,
        program_date_time_period: typing.Optional[jsii.Number] = None,
        redundant_manifest: typing.Optional[builtins.str] = None,
        segment_length: typing.Optional[jsii.Number] = None,
        segments_per_subdirectory: typing.Optional[jsii.Number] = None,
        stream_inf_resolution: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
        timestamp_delta_milliseconds: typing.Optional[jsii.Number] = None,
        ts_file_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param ad_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param base_url_content: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_content MedialiveChannel#base_url_content}.
        :param base_url_content1: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_content1 MedialiveChannel#base_url_content1}.
        :param base_url_manifest: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_manifest MedialiveChannel#base_url_manifest}.
        :param base_url_manifest1: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#base_url_manifest1 MedialiveChannel#base_url_manifest1}.
        :param caption_language_mappings: caption_language_mappings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_language_mappings MedialiveChannel#caption_language_mappings}
        :param caption_language_setting: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_language_setting MedialiveChannel#caption_language_setting}.
        :param client_cache: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#client_cache MedialiveChannel#client_cache}.
        :param codec_specification: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_specification MedialiveChannel#codec_specification}.
        :param constant_iv: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#constant_iv MedialiveChannel#constant_iv}.
        :param directory_structure: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#directory_structure MedialiveChannel#directory_structure}.
        :param discontinuity_tags: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#discontinuity_tags MedialiveChannel#discontinuity_tags}.
        :param encryption_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#encryption_type MedialiveChannel#encryption_type}.
        :param hls_cdn_settings: hls_cdn_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_cdn_settings MedialiveChannel#hls_cdn_settings}
        :param hls_id3_segment_tagging: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_id3_segment_tagging MedialiveChannel#hls_id3_segment_tagging}.
        :param iframe_only_playlists: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iframe_only_playlists MedialiveChannel#iframe_only_playlists}.
        :param incomplete_segment_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#incomplete_segment_behavior MedialiveChannel#incomplete_segment_behavior}.
        :param index_n_segments: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#index_n_segments MedialiveChannel#index_n_segments}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param iv_in_manifest: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iv_in_manifest MedialiveChannel#iv_in_manifest}.
        :param iv_source: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#iv_source MedialiveChannel#iv_source}.
        :param keep_segments: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#keep_segments MedialiveChannel#keep_segments}.
        :param key_format: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_format MedialiveChannel#key_format}.
        :param key_format_versions: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_format_versions MedialiveChannel#key_format_versions}.
        :param key_provider_settings: key_provider_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#key_provider_settings MedialiveChannel#key_provider_settings}
        :param manifest_compression: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#manifest_compression MedialiveChannel#manifest_compression}.
        :param manifest_duration_format: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#manifest_duration_format MedialiveChannel#manifest_duration_format}.
        :param min_segment_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#min_segment_length MedialiveChannel#min_segment_length}.
        :param mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#mode MedialiveChannel#mode}.
        :param output_selection: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_selection MedialiveChannel#output_selection}.
        :param program_date_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time MedialiveChannel#program_date_time}.
        :param program_date_time_clock: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time_clock MedialiveChannel#program_date_time_clock}.
        :param program_date_time_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_date_time_period MedialiveChannel#program_date_time_period}.
        :param redundant_manifest: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#redundant_manifest MedialiveChannel#redundant_manifest}.
        :param segment_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_length MedialiveChannel#segment_length}.
        :param segments_per_subdirectory: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segments_per_subdirectory MedialiveChannel#segments_per_subdirectory}.
        :param stream_inf_resolution: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_inf_resolution MedialiveChannel#stream_inf_resolution}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        :param timestamp_delta_milliseconds: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_delta_milliseconds MedialiveChannel#timestamp_delta_milliseconds}.
        :param ts_file_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ts_file_mode MedialiveChannel#ts_file_mode}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings(
            destination=destination,
            ad_markers=ad_markers,
            base_url_content=base_url_content,
            base_url_content1=base_url_content1,
            base_url_manifest=base_url_manifest,
            base_url_manifest1=base_url_manifest1,
            caption_language_mappings=caption_language_mappings,
            caption_language_setting=caption_language_setting,
            client_cache=client_cache,
            codec_specification=codec_specification,
            constant_iv=constant_iv,
            directory_structure=directory_structure,
            discontinuity_tags=discontinuity_tags,
            encryption_type=encryption_type,
            hls_cdn_settings=hls_cdn_settings,
            hls_id3_segment_tagging=hls_id3_segment_tagging,
            iframe_only_playlists=iframe_only_playlists,
            incomplete_segment_behavior=incomplete_segment_behavior,
            index_n_segments=index_n_segments,
            input_loss_action=input_loss_action,
            iv_in_manifest=iv_in_manifest,
            iv_source=iv_source,
            keep_segments=keep_segments,
            key_format=key_format,
            key_format_versions=key_format_versions,
            key_provider_settings=key_provider_settings,
            manifest_compression=manifest_compression,
            manifest_duration_format=manifest_duration_format,
            min_segment_length=min_segment_length,
            mode=mode,
            output_selection=output_selection,
            program_date_time=program_date_time,
            program_date_time_clock=program_date_time_clock,
            program_date_time_period=program_date_time_period,
            redundant_manifest=redundant_manifest,
            segment_length=segment_length,
            segments_per_subdirectory=segments_per_subdirectory,
            stream_inf_resolution=stream_inf_resolution,
            timed_metadata_id3_frame=timed_metadata_id3_frame,
            timed_metadata_id3_period=timed_metadata_id3_period,
            timestamp_delta_milliseconds=timestamp_delta_milliseconds,
            ts_file_mode=ts_file_mode,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsGroupSettings", [value]))

    @jsii.member(jsii_name="putMediaPackageGroupSettings")
    def put_media_package_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination, typing.Dict[str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings(
            destination=destination
        )

        return typing.cast(None, jsii.invoke(self, "putMediaPackageGroupSettings", [value]))

    @jsii.member(jsii_name="putMsSmoothGroupSettings")
    def put_ms_smooth_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination, typing.Dict[str, typing.Any]],
        acquisition_point_id: typing.Optional[builtins.str] = None,
        audio_only_timecodec_control: typing.Optional[builtins.str] = None,
        certificate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        event_id: typing.Optional[jsii.Number] = None,
        event_id_mode: typing.Optional[builtins.str] = None,
        event_stop_behavior: typing.Optional[builtins.str] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        fragment_length: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        segmentation_mode: typing.Optional[builtins.str] = None,
        send_delay_ms: typing.Optional[jsii.Number] = None,
        sparse_track_type: typing.Optional[builtins.str] = None,
        stream_manifest_behavior: typing.Optional[builtins.str] = None,
        timestamp_offset: typing.Optional[builtins.str] = None,
        timestamp_offset_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param acquisition_point_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#acquisition_point_id MedialiveChannel#acquisition_point_id}.
        :param audio_only_timecodec_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_timecodec_control MedialiveChannel#audio_only_timecodec_control}.
        :param certificate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param event_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_id MedialiveChannel#event_id}.
        :param event_id_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_id_mode MedialiveChannel#event_id_mode}.
        :param event_stop_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#event_stop_behavior MedialiveChannel#event_stop_behavior}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param fragment_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_length MedialiveChannel#fragment_length}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param segmentation_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_mode MedialiveChannel#segmentation_mode}.
        :param send_delay_ms: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#send_delay_ms MedialiveChannel#send_delay_ms}.
        :param sparse_track_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sparse_track_type MedialiveChannel#sparse_track_type}.
        :param stream_manifest_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#stream_manifest_behavior MedialiveChannel#stream_manifest_behavior}.
        :param timestamp_offset: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_offset MedialiveChannel#timestamp_offset}.
        :param timestamp_offset_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timestamp_offset_mode MedialiveChannel#timestamp_offset_mode}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings(
            destination=destination,
            acquisition_point_id=acquisition_point_id,
            audio_only_timecodec_control=audio_only_timecodec_control,
            certificate_mode=certificate_mode,
            connection_retry_interval=connection_retry_interval,
            event_id=event_id,
            event_id_mode=event_id_mode,
            event_stop_behavior=event_stop_behavior,
            filecache_duration=filecache_duration,
            fragment_length=fragment_length,
            input_loss_action=input_loss_action,
            num_retries=num_retries,
            restart_delay=restart_delay,
            segmentation_mode=segmentation_mode,
            send_delay_ms=send_delay_ms,
            sparse_track_type=sparse_track_type,
            stream_manifest_behavior=stream_manifest_behavior,
            timestamp_offset=timestamp_offset,
            timestamp_offset_mode=timestamp_offset_mode,
        )

        return typing.cast(None, jsii.invoke(self, "putMsSmoothGroupSettings", [value]))

    @jsii.member(jsii_name="putMultiplexGroupSettings")
    def put_multiplex_group_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings()

        return typing.cast(None, jsii.invoke(self, "putMultiplexGroupSettings", [value]))

    @jsii.member(jsii_name="putRtmpGroupSettings")
    def put_rtmp_group_settings(
        self,
        *,
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        authentication_scheme: typing.Optional[builtins.str] = None,
        cache_full_behavior: typing.Optional[builtins.str] = None,
        cache_length: typing.Optional[jsii.Number] = None,
        caption_data: typing.Optional[builtins.str] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ad_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param authentication_scheme: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#authentication_scheme MedialiveChannel#authentication_scheme}.
        :param cache_full_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cache_full_behavior MedialiveChannel#cache_full_behavior}.
        :param cache_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cache_length MedialiveChannel#cache_length}.
        :param caption_data: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_data MedialiveChannel#caption_data}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings(
            ad_markers=ad_markers,
            authentication_scheme=authentication_scheme,
            cache_full_behavior=cache_full_behavior,
            cache_length=cache_length,
            caption_data=caption_data,
            input_loss_action=input_loss_action,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putRtmpGroupSettings", [value]))

    @jsii.member(jsii_name="putUdpGroupSettings")
    def put_udp_group_settings(
        self,
        *,
        input_loss_action: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings(
            input_loss_action=input_loss_action,
            timed_metadata_id3_frame=timed_metadata_id3_frame,
            timed_metadata_id3_period=timed_metadata_id3_period,
        )

        return typing.cast(None, jsii.invoke(self, "putUdpGroupSettings", [value]))

    @jsii.member(jsii_name="resetArchiveGroupSettings")
    def reset_archive_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveGroupSettings", []))

    @jsii.member(jsii_name="resetFrameCaptureGroupSettings")
    def reset_frame_capture_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureGroupSettings", []))

    @jsii.member(jsii_name="resetHlsGroupSettings")
    def reset_hls_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsGroupSettings", []))

    @jsii.member(jsii_name="resetMediaPackageGroupSettings")
    def reset_media_package_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaPackageGroupSettings", []))

    @jsii.member(jsii_name="resetMsSmoothGroupSettings")
    def reset_ms_smooth_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMsSmoothGroupSettings", []))

    @jsii.member(jsii_name="resetMultiplexGroupSettings")
    def reset_multiplex_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMultiplexGroupSettings", []))

    @jsii.member(jsii_name="resetRtmpGroupSettings")
    def reset_rtmp_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRtmpGroupSettings", []))

    @jsii.member(jsii_name="resetUdpGroupSettings")
    def reset_udp_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUdpGroupSettings", []))

    @builtins.property
    @jsii.member(jsii_name="archiveGroupSettings")
    def archive_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList, jsii.get(self, "archiveGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureGroupSettings")
    def frame_capture_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference, jsii.get(self, "frameCaptureGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsGroupSettings")
    def hls_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference, jsii.get(self, "hlsGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageGroupSettings")
    def media_package_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference, jsii.get(self, "mediaPackageGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothGroupSettings")
    def ms_smooth_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference, jsii.get(self, "msSmoothGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="multiplexGroupSettings")
    def multiplex_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference, jsii.get(self, "multiplexGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="rtmpGroupSettings")
    def rtmp_group_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference", jsii.get(self, "rtmpGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="udpGroupSettings")
    def udp_group_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference", jsii.get(self, "udpGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="archiveGroupSettingsInput")
    def archive_group_settings_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]], jsii.get(self, "archiveGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureGroupSettingsInput")
    def frame_capture_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings], jsii.get(self, "frameCaptureGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsGroupSettingsInput")
    def hls_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings], jsii.get(self, "hlsGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageGroupSettingsInput")
    def media_package_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings], jsii.get(self, "mediaPackageGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothGroupSettingsInput")
    def ms_smooth_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings], jsii.get(self, "msSmoothGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexGroupSettingsInput")
    def multiplex_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings], jsii.get(self, "multiplexGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rtmpGroupSettingsInput")
    def rtmp_group_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"], jsii.get(self, "rtmpGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="udpGroupSettingsInput")
    def udp_group_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"], jsii.get(self, "udpGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "ad_markers": "adMarkers",
        "authentication_scheme": "authenticationScheme",
        "cache_full_behavior": "cacheFullBehavior",
        "cache_length": "cacheLength",
        "caption_data": "captionData",
        "input_loss_action": "inputLossAction",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings:
    def __init__(
        self,
        *,
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        authentication_scheme: typing.Optional[builtins.str] = None,
        cache_full_behavior: typing.Optional[builtins.str] = None,
        cache_length: typing.Optional[jsii.Number] = None,
        caption_data: typing.Optional[builtins.str] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ad_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param authentication_scheme: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#authentication_scheme MedialiveChannel#authentication_scheme}.
        :param cache_full_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cache_full_behavior MedialiveChannel#cache_full_behavior}.
        :param cache_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cache_length MedialiveChannel#cache_length}.
        :param caption_data: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_data MedialiveChannel#caption_data}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param restart_delay: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            def stub(
                *,
                ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
                authentication_scheme: typing.Optional[builtins.str] = None,
                cache_full_behavior: typing.Optional[builtins.str] = None,
                cache_length: typing.Optional[jsii.Number] = None,
                caption_data: typing.Optional[builtins.str] = None,
                input_loss_action: typing.Optional[builtins.str] = None,
                restart_delay: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument ad_markers", value=ad_markers, expected_type=type_hints["ad_markers"])
            check_type(argname="argument authentication_scheme", value=authentication_scheme, expected_type=type_hints["authentication_scheme"])
            check_type(argname="argument cache_full_behavior", value=cache_full_behavior, expected_type=type_hints["cache_full_behavior"])
            check_type(argname="argument cache_length", value=cache_length, expected_type=type_hints["cache_length"])
            check_type(argname="argument caption_data", value=caption_data, expected_type=type_hints["caption_data"])
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[str, typing.Any] = {}
        if ad_markers is not None:
            self._values["ad_markers"] = ad_markers
        if authentication_scheme is not None:
            self._values["authentication_scheme"] = authentication_scheme
        if cache_full_behavior is not None:
            self._values["cache_full_behavior"] = cache_full_behavior
        if cache_length is not None:
            self._values["cache_length"] = cache_length
        if caption_data is not None:
            self._values["caption_data"] = caption_data
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def ad_markers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ad_markers MedialiveChannel#ad_markers}.'''
        result = self._values.get("ad_markers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def authentication_scheme(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#authentication_scheme MedialiveChannel#authentication_scheme}.'''
        result = self._values.get("authentication_scheme")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cache_full_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cache_full_behavior MedialiveChannel#cache_full_behavior}.'''
        result = self._values.get("cache_full_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cache_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cache_length MedialiveChannel#cache_length}.'''
        result = self._values.get("cache_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def caption_data(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_data MedialiveChannel#caption_data}.'''
        result = self._values.get("caption_data")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAdMarkers")
    def reset_ad_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdMarkers", []))

    @jsii.member(jsii_name="resetAuthenticationScheme")
    def reset_authentication_scheme(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthenticationScheme", []))

    @jsii.member(jsii_name="resetCacheFullBehavior")
    def reset_cache_full_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCacheFullBehavior", []))

    @jsii.member(jsii_name="resetCacheLength")
    def reset_cache_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCacheLength", []))

    @jsii.member(jsii_name="resetCaptionData")
    def reset_caption_data(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionData", []))

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="adMarkersInput")
    def ad_markers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "adMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="authenticationSchemeInput")
    def authentication_scheme_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authenticationSchemeInput"))

    @builtins.property
    @jsii.member(jsii_name="cacheFullBehaviorInput")
    def cache_full_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cacheFullBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="cacheLengthInput")
    def cache_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "cacheLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="captionDataInput")
    def caption_data_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captionDataInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="adMarkers")
    def ad_markers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "adMarkers"))

    @ad_markers.setter
    def ad_markers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adMarkers", value)

    @builtins.property
    @jsii.member(jsii_name="authenticationScheme")
    def authentication_scheme(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authenticationScheme"))

    @authentication_scheme.setter
    def authentication_scheme(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authenticationScheme", value)

    @builtins.property
    @jsii.member(jsii_name="cacheFullBehavior")
    def cache_full_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cacheFullBehavior"))

    @cache_full_behavior.setter
    def cache_full_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cacheFullBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="cacheLength")
    def cache_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "cacheLength"))

    @cache_length.setter
    def cache_length(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cacheLength", value)

    @builtins.property
    @jsii.member(jsii_name="captionData")
    def caption_data(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captionData"))

    @caption_data.setter
    def caption_data(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionData", value)

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value)

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "input_loss_action": "inputLossAction",
        "timed_metadata_id3_frame": "timedMetadataId3Frame",
        "timed_metadata_id3_period": "timedMetadataId3Period",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings:
    def __init__(
        self,
        *,
        input_loss_action: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_action: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        '''
        if __debug__:
            def stub(
                *,
                input_loss_action: typing.Optional[builtins.str] = None,
                timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
                timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument timed_metadata_id3_frame", value=timed_metadata_id3_frame, expected_type=type_hints["timed_metadata_id3_frame"])
            check_type(argname="argument timed_metadata_id3_period", value=timed_metadata_id3_period, expected_type=type_hints["timed_metadata_id3_period"])
        self._values: typing.Dict[str, typing.Any] = {}
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if timed_metadata_id3_frame is not None:
            self._values["timed_metadata_id3_frame"] = timed_metadata_id3_frame
        if timed_metadata_id3_period is not None:
            self._values["timed_metadata_id3_period"] = timed_metadata_id3_period

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_frame(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.'''
        result = self._values.get("timed_metadata_id3_frame")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.'''
        result = self._values.get("timed_metadata_id3_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Frame")
    def reset_timed_metadata_id3_frame(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Frame", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Period")
    def reset_timed_metadata_id3_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Period", []))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3FrameInput")
    def timed_metadata_id3_frame_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataId3FrameInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3PeriodInput")
    def timed_metadata_id3_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "timedMetadataId3PeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Frame")
    def timed_metadata_id3_frame(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataId3Frame"))

    @timed_metadata_id3_frame.setter
    def timed_metadata_id3_frame(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Frame", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Period")
    def timed_metadata_id3_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "timedMetadataId3Period"))

    @timed_metadata_id3_period.setter
    def timed_metadata_id3_period(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Period", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putOutputGroupSettings")
    def put_output_group_settings(
        self,
        *,
        archive_group_settings: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[str, typing.Any]]]]] = None,
        frame_capture_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings, typing.Dict[str, typing.Any]]] = None,
        hls_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings, typing.Dict[str, typing.Any]]] = None,
        media_package_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings, typing.Dict[str, typing.Any]]] = None,
        ms_smooth_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings, typing.Dict[str, typing.Any]]] = None,
        multiplex_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings, typing.Dict[str, typing.Any]]] = None,
        rtmp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings, typing.Dict[str, typing.Any]]] = None,
        udp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_group_settings: archive_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_group_settings MedialiveChannel#archive_group_settings}
        :param frame_capture_group_settings: frame_capture_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_group_settings MedialiveChannel#frame_capture_group_settings}
        :param hls_group_settings: hls_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_group_settings MedialiveChannel#hls_group_settings}
        :param media_package_group_settings: media_package_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_group_settings MedialiveChannel#media_package_group_settings}
        :param ms_smooth_group_settings: ms_smooth_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ms_smooth_group_settings MedialiveChannel#ms_smooth_group_settings}
        :param multiplex_group_settings: multiplex_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_group_settings MedialiveChannel#multiplex_group_settings}
        :param rtmp_group_settings: rtmp_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rtmp_group_settings MedialiveChannel#rtmp_group_settings}
        :param udp_group_settings: udp_group_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#udp_group_settings MedialiveChannel#udp_group_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings(
            archive_group_settings=archive_group_settings,
            frame_capture_group_settings=frame_capture_group_settings,
            hls_group_settings=hls_group_settings,
            media_package_group_settings=media_package_group_settings,
            ms_smooth_group_settings=ms_smooth_group_settings,
            multiplex_group_settings=multiplex_group_settings,
            rtmp_group_settings=rtmp_group_settings,
            udp_group_settings=udp_group_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putOutputGroupSettings", [value]))

    @jsii.member(jsii_name="putOutputs")
    def put_outputs(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputs", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putOutputs", [value]))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="outputGroupSettings")
    def output_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference, jsii.get(self, "outputGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="outputs")
    def outputs(self) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsList":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsList", jsii.get(self, "outputs"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputGroupSettingsInput")
    def output_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings], jsii.get(self, "outputGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="outputsInput")
    def outputs_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]]], jsii.get(self, "outputsInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputs",
    jsii_struct_bases=[],
    name_mapping={
        "output_settings": "outputSettings",
        "audio_description_names": "audioDescriptionNames",
        "caption_description_names": "captionDescriptionNames",
        "output_name": "outputName",
        "video_description_name": "videoDescriptionName",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputs:
    def __init__(
        self,
        *,
        output_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings", typing.Dict[str, typing.Any]],
        audio_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
        caption_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
        output_name: typing.Optional[builtins.str] = None,
        video_description_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_settings: output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_settings MedialiveChannel#output_settings}
        :param audio_description_names: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_description_names MedialiveChannel#audio_description_names}.
        :param caption_description_names: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_description_names MedialiveChannel#caption_description_names}.
        :param output_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_name MedialiveChannel#output_name}.
        :param video_description_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_description_name MedialiveChannel#video_description_name}.
        '''
        if isinstance(output_settings, dict):
            output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings(**output_settings)
        if __debug__:
            def stub(
                *,
                output_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings, typing.Dict[str, typing.Any]],
                audio_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
                caption_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
                output_name: typing.Optional[builtins.str] = None,
                video_description_name: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument output_settings", value=output_settings, expected_type=type_hints["output_settings"])
            check_type(argname="argument audio_description_names", value=audio_description_names, expected_type=type_hints["audio_description_names"])
            check_type(argname="argument caption_description_names", value=caption_description_names, expected_type=type_hints["caption_description_names"])
            check_type(argname="argument output_name", value=output_name, expected_type=type_hints["output_name"])
            check_type(argname="argument video_description_name", value=video_description_name, expected_type=type_hints["video_description_name"])
        self._values: typing.Dict[str, typing.Any] = {
            "output_settings": output_settings,
        }
        if audio_description_names is not None:
            self._values["audio_description_names"] = audio_description_names
        if caption_description_names is not None:
            self._values["caption_description_names"] = caption_description_names
        if output_name is not None:
            self._values["output_name"] = output_name
        if video_description_name is not None:
            self._values["video_description_name"] = video_description_name

    @builtins.property
    def output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings":
        '''output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_settings MedialiveChannel#output_settings}
        '''
        result = self._values.get("output_settings")
        assert result is not None, "Required property 'output_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings", result)

    @builtins.property
    def audio_description_names(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_description_names MedialiveChannel#audio_description_names}.'''
        result = self._values.get("audio_description_names")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def caption_description_names(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_description_names MedialiveChannel#caption_description_names}.'''
        result = self._values.get("caption_description_names")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def output_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_name MedialiveChannel#output_name}.'''
        result = self._values.get("output_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def video_description_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_description_name MedialiveChannel#video_description_name}.'''
        result = self._values.get("video_description_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputs(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putOutputSettings")
    def put_output_settings(
        self,
        *,
        archive_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings", typing.Dict[str, typing.Any]]] = None,
        frame_capture_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings", typing.Dict[str, typing.Any]]] = None,
        hls_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings", typing.Dict[str, typing.Any]]] = None,
        media_package_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings", typing.Dict[str, typing.Any]]] = None,
        ms_smooth_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings", typing.Dict[str, typing.Any]]] = None,
        multiplex_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings", typing.Dict[str, typing.Any]]] = None,
        rtmp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings", typing.Dict[str, typing.Any]]] = None,
        udp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_output_settings: archive_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_output_settings MedialiveChannel#archive_output_settings}
        :param frame_capture_output_settings: frame_capture_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_output_settings MedialiveChannel#frame_capture_output_settings}
        :param hls_output_settings: hls_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_output_settings MedialiveChannel#hls_output_settings}
        :param media_package_output_settings: media_package_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_output_settings MedialiveChannel#media_package_output_settings}
        :param ms_smooth_output_settings: ms_smooth_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ms_smooth_output_settings MedialiveChannel#ms_smooth_output_settings}
        :param multiplex_output_settings: multiplex_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_output_settings MedialiveChannel#multiplex_output_settings}
        :param rtmp_output_settings: rtmp_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rtmp_output_settings MedialiveChannel#rtmp_output_settings}
        :param udp_output_settings: udp_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#udp_output_settings MedialiveChannel#udp_output_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings(
            archive_output_settings=archive_output_settings,
            frame_capture_output_settings=frame_capture_output_settings,
            hls_output_settings=hls_output_settings,
            media_package_output_settings=media_package_output_settings,
            ms_smooth_output_settings=ms_smooth_output_settings,
            multiplex_output_settings=multiplex_output_settings,
            rtmp_output_settings=rtmp_output_settings,
            udp_output_settings=udp_output_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putOutputSettings", [value]))

    @jsii.member(jsii_name="resetAudioDescriptionNames")
    def reset_audio_description_names(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioDescriptionNames", []))

    @jsii.member(jsii_name="resetCaptionDescriptionNames")
    def reset_caption_description_names(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionDescriptionNames", []))

    @jsii.member(jsii_name="resetOutputName")
    def reset_output_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputName", []))

    @jsii.member(jsii_name="resetVideoDescriptionName")
    def reset_video_description_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoDescriptionName", []))

    @builtins.property
    @jsii.member(jsii_name="outputSettings")
    def output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference", jsii.get(self, "outputSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptionNamesInput")
    def audio_description_names_input(
        self,
    ) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "audioDescriptionNamesInput"))

    @builtins.property
    @jsii.member(jsii_name="captionDescriptionNamesInput")
    def caption_description_names_input(
        self,
    ) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "captionDescriptionNamesInput"))

    @builtins.property
    @jsii.member(jsii_name="outputNameInput")
    def output_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputNameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSettingsInput")
    def output_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings"], jsii.get(self, "outputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="videoDescriptionNameInput")
    def video_description_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoDescriptionNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptionNames")
    def audio_description_names(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "audioDescriptionNames"))

    @audio_description_names.setter
    def audio_description_names(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioDescriptionNames", value)

    @builtins.property
    @jsii.member(jsii_name="captionDescriptionNames")
    def caption_description_names(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "captionDescriptionNames"))

    @caption_description_names.setter
    def caption_description_names(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionDescriptionNames", value)

    @builtins.property
    @jsii.member(jsii_name="outputName")
    def output_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputName"))

    @output_name.setter
    def output_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputName", value)

    @builtins.property
    @jsii.member(jsii_name="videoDescriptionName")
    def video_description_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoDescriptionName"))

    @video_description_name.setter
    def video_description_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoDescriptionName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "archive_output_settings": "archiveOutputSettings",
        "frame_capture_output_settings": "frameCaptureOutputSettings",
        "hls_output_settings": "hlsOutputSettings",
        "media_package_output_settings": "mediaPackageOutputSettings",
        "ms_smooth_output_settings": "msSmoothOutputSettings",
        "multiplex_output_settings": "multiplexOutputSettings",
        "rtmp_output_settings": "rtmpOutputSettings",
        "udp_output_settings": "udpOutputSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings:
    def __init__(
        self,
        *,
        archive_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings", typing.Dict[str, typing.Any]]] = None,
        frame_capture_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings", typing.Dict[str, typing.Any]]] = None,
        hls_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings", typing.Dict[str, typing.Any]]] = None,
        media_package_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings", typing.Dict[str, typing.Any]]] = None,
        ms_smooth_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings", typing.Dict[str, typing.Any]]] = None,
        multiplex_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings", typing.Dict[str, typing.Any]]] = None,
        rtmp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings", typing.Dict[str, typing.Any]]] = None,
        udp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_output_settings: archive_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_output_settings MedialiveChannel#archive_output_settings}
        :param frame_capture_output_settings: frame_capture_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_output_settings MedialiveChannel#frame_capture_output_settings}
        :param hls_output_settings: hls_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_output_settings MedialiveChannel#hls_output_settings}
        :param media_package_output_settings: media_package_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_output_settings MedialiveChannel#media_package_output_settings}
        :param ms_smooth_output_settings: ms_smooth_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ms_smooth_output_settings MedialiveChannel#ms_smooth_output_settings}
        :param multiplex_output_settings: multiplex_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_output_settings MedialiveChannel#multiplex_output_settings}
        :param rtmp_output_settings: rtmp_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rtmp_output_settings MedialiveChannel#rtmp_output_settings}
        :param udp_output_settings: udp_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#udp_output_settings MedialiveChannel#udp_output_settings}
        '''
        if isinstance(archive_output_settings, dict):
            archive_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings(**archive_output_settings)
        if isinstance(frame_capture_output_settings, dict):
            frame_capture_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings(**frame_capture_output_settings)
        if isinstance(hls_output_settings, dict):
            hls_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings(**hls_output_settings)
        if isinstance(media_package_output_settings, dict):
            media_package_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings(**media_package_output_settings)
        if isinstance(ms_smooth_output_settings, dict):
            ms_smooth_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings(**ms_smooth_output_settings)
        if isinstance(multiplex_output_settings, dict):
            multiplex_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings(**multiplex_output_settings)
        if isinstance(rtmp_output_settings, dict):
            rtmp_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings(**rtmp_output_settings)
        if isinstance(udp_output_settings, dict):
            udp_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings(**udp_output_settings)
        if __debug__:
            def stub(
                *,
                archive_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings, typing.Dict[str, typing.Any]]] = None,
                frame_capture_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings, typing.Dict[str, typing.Any]]] = None,
                hls_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings, typing.Dict[str, typing.Any]]] = None,
                media_package_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings, typing.Dict[str, typing.Any]]] = None,
                ms_smooth_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings, typing.Dict[str, typing.Any]]] = None,
                multiplex_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings, typing.Dict[str, typing.Any]]] = None,
                rtmp_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings, typing.Dict[str, typing.Any]]] = None,
                udp_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument archive_output_settings", value=archive_output_settings, expected_type=type_hints["archive_output_settings"])
            check_type(argname="argument frame_capture_output_settings", value=frame_capture_output_settings, expected_type=type_hints["frame_capture_output_settings"])
            check_type(argname="argument hls_output_settings", value=hls_output_settings, expected_type=type_hints["hls_output_settings"])
            check_type(argname="argument media_package_output_settings", value=media_package_output_settings, expected_type=type_hints["media_package_output_settings"])
            check_type(argname="argument ms_smooth_output_settings", value=ms_smooth_output_settings, expected_type=type_hints["ms_smooth_output_settings"])
            check_type(argname="argument multiplex_output_settings", value=multiplex_output_settings, expected_type=type_hints["multiplex_output_settings"])
            check_type(argname="argument rtmp_output_settings", value=rtmp_output_settings, expected_type=type_hints["rtmp_output_settings"])
            check_type(argname="argument udp_output_settings", value=udp_output_settings, expected_type=type_hints["udp_output_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if archive_output_settings is not None:
            self._values["archive_output_settings"] = archive_output_settings
        if frame_capture_output_settings is not None:
            self._values["frame_capture_output_settings"] = frame_capture_output_settings
        if hls_output_settings is not None:
            self._values["hls_output_settings"] = hls_output_settings
        if media_package_output_settings is not None:
            self._values["media_package_output_settings"] = media_package_output_settings
        if ms_smooth_output_settings is not None:
            self._values["ms_smooth_output_settings"] = ms_smooth_output_settings
        if multiplex_output_settings is not None:
            self._values["multiplex_output_settings"] = multiplex_output_settings
        if rtmp_output_settings is not None:
            self._values["rtmp_output_settings"] = rtmp_output_settings
        if udp_output_settings is not None:
            self._values["udp_output_settings"] = udp_output_settings

    @builtins.property
    def archive_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings"]:
        '''archive_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#archive_output_settings MedialiveChannel#archive_output_settings}
        '''
        result = self._values.get("archive_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings"], result)

    @builtins.property
    def frame_capture_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings"]:
        '''frame_capture_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_output_settings MedialiveChannel#frame_capture_output_settings}
        '''
        result = self._values.get("frame_capture_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings"], result)

    @builtins.property
    def hls_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings"]:
        '''hls_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_output_settings MedialiveChannel#hls_output_settings}
        '''
        result = self._values.get("hls_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings"], result)

    @builtins.property
    def media_package_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings"]:
        '''media_package_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#media_package_output_settings MedialiveChannel#media_package_output_settings}
        '''
        result = self._values.get("media_package_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings"], result)

    @builtins.property
    def ms_smooth_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings"]:
        '''ms_smooth_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ms_smooth_output_settings MedialiveChannel#ms_smooth_output_settings}
        '''
        result = self._values.get("ms_smooth_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings"], result)

    @builtins.property
    def multiplex_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings"]:
        '''multiplex_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#multiplex_output_settings MedialiveChannel#multiplex_output_settings}
        '''
        result = self._values.get("multiplex_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings"], result)

    @builtins.property
    def rtmp_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"]:
        '''rtmp_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rtmp_output_settings MedialiveChannel#rtmp_output_settings}
        '''
        result = self._values.get("rtmp_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"], result)

    @builtins.property
    def udp_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"]:
        '''udp_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#udp_output_settings MedialiveChannel#udp_output_settings}
        '''
        result = self._values.get("udp_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "container_settings": "containerSettings",
        "extension": "extension",
        "name_modifier": "nameModifier",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings:
    def __init__(
        self,
        *,
        container_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings", typing.Dict[str, typing.Any]]] = None,
        extension: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param extension: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#extension MedialiveChannel#extension}.
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        if isinstance(container_settings, dict):
            container_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings(**container_settings)
        if __debug__:
            def stub(
                *,
                container_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings, typing.Dict[str, typing.Any]]] = None,
                extension: typing.Optional[builtins.str] = None,
                name_modifier: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument container_settings", value=container_settings, expected_type=type_hints["container_settings"])
            check_type(argname="argument extension", value=extension, expected_type=type_hints["extension"])
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
        self._values: typing.Dict[str, typing.Any] = {}
        if container_settings is not None:
            self._values["container_settings"] = container_settings
        if extension is not None:
            self._values["extension"] = extension
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier

    @builtins.property
    def container_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings"]:
        '''container_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#container_settings MedialiveChannel#container_settings}
        '''
        result = self._values.get("container_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings"], result)

    @builtins.property
    def extension(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#extension MedialiveChannel#extension}.'''
        result = self._values.get("extension")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings",
    jsii_struct_bases=[],
    name_mapping={"m2_ts_settings": "m2TsSettings", "raw_settings": "rawSettings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings:
    def __init__(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings", typing.Dict[str, typing.Any]]] = None,
        raw_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        :param raw_settings: raw_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#raw_settings MedialiveChannel#raw_settings}
        '''
        if isinstance(m2_ts_settings, dict):
            m2_ts_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings(**m2_ts_settings)
        if isinstance(raw_settings, dict):
            raw_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings(**raw_settings)
        if __debug__:
            def stub(
                *,
                m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings, typing.Dict[str, typing.Any]]] = None,
                raw_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument m2_ts_settings", value=m2_ts_settings, expected_type=type_hints["m2_ts_settings"])
            check_type(argname="argument raw_settings", value=raw_settings, expected_type=type_hints["raw_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if m2_ts_settings is not None:
            self._values["m2_ts_settings"] = m2_ts_settings
        if raw_settings is not None:
            self._values["raw_settings"] = raw_settings

    @builtins.property
    def m2_ts_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings"]:
        '''m2ts_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        result = self._values.get("m2_ts_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings"], result)

    @builtins.property
    def raw_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"]:
        '''raw_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#raw_settings MedialiveChannel#raw_settings}
        '''
        result = self._values.get("raw_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "absent_input_audio_behavior": "absentInputAudioBehavior",
        "arib": "arib",
        "arib_captions_pid": "aribCaptionsPid",
        "arib_captions_pid_control": "aribCaptionsPidControl",
        "audio_buffer_model": "audioBufferModel",
        "audio_frames_per_pes": "audioFramesPerPes",
        "audio_pids": "audioPids",
        "audio_stream_type": "audioStreamType",
        "bitrate": "bitrate",
        "buffer_model": "bufferModel",
        "cc_descriptor": "ccDescriptor",
        "dvb_nit_settings": "dvbNitSettings",
        "dvb_sdt_settings": "dvbSdtSettings",
        "dvb_sub_pids": "dvbSubPids",
        "dvb_tdt_settings": "dvbTdtSettings",
        "dvb_teletext_pid": "dvbTeletextPid",
        "ebif": "ebif",
        "ebp_audio_interval": "ebpAudioInterval",
        "ebp_lookahead_ms": "ebpLookaheadMs",
        "ebp_placement": "ebpPlacement",
        "ecm_pid": "ecmPid",
        "es_rate_in_pes": "esRateInPes",
        "etv_platform_pid": "etvPlatformPid",
        "etv_signal_pid": "etvSignalPid",
        "fragment_time": "fragmentTime",
        "klv": "klv",
        "klv_data_pids": "klvDataPids",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "null_packet_bitrate": "nullPacketBitrate",
        "pat_interval": "patInterval",
        "pcr_control": "pcrControl",
        "pcr_period": "pcrPeriod",
        "pcr_pid": "pcrPid",
        "pmt_interval": "pmtInterval",
        "pmt_pid": "pmtPid",
        "program_num": "programNum",
        "rate_mode": "rateMode",
        "scte27_pids": "scte27Pids",
        "scte35_control": "scte35Control",
        "scte35_pid": "scte35Pid",
        "segmentation_markers": "segmentationMarkers",
        "segmentation_style": "segmentationStyle",
        "segmentation_time": "segmentationTime",
        "timed_metadata_behavior": "timedMetadataBehavior",
        "timed_metadata_pid": "timedMetadataPid",
        "transport_stream_id": "transportStreamId",
        "video_pid": "videoPid",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings:
    def __init__(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        if isinstance(dvb_nit_settings, dict):
            dvb_nit_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(**dvb_nit_settings)
        if isinstance(dvb_sdt_settings, dict):
            dvb_sdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(**dvb_sdt_settings)
        if isinstance(dvb_tdt_settings, dict):
            dvb_tdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(**dvb_tdt_settings)
        if __debug__:
            def stub(
                *,
                absent_input_audio_behavior: typing.Optional[builtins.str] = None,
                arib: typing.Optional[builtins.str] = None,
                arib_captions_pid: typing.Optional[builtins.str] = None,
                arib_captions_pid_control: typing.Optional[builtins.str] = None,
                audio_buffer_model: typing.Optional[builtins.str] = None,
                audio_frames_per_pes: typing.Optional[jsii.Number] = None,
                audio_pids: typing.Optional[builtins.str] = None,
                audio_stream_type: typing.Optional[builtins.str] = None,
                bitrate: typing.Optional[jsii.Number] = None,
                buffer_model: typing.Optional[builtins.str] = None,
                cc_descriptor: typing.Optional[builtins.str] = None,
                dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_sub_pids: typing.Optional[builtins.str] = None,
                dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_teletext_pid: typing.Optional[builtins.str] = None,
                ebif: typing.Optional[builtins.str] = None,
                ebp_audio_interval: typing.Optional[builtins.str] = None,
                ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
                ebp_placement: typing.Optional[builtins.str] = None,
                ecm_pid: typing.Optional[builtins.str] = None,
                es_rate_in_pes: typing.Optional[builtins.str] = None,
                etv_platform_pid: typing.Optional[builtins.str] = None,
                etv_signal_pid: typing.Optional[builtins.str] = None,
                fragment_time: typing.Optional[jsii.Number] = None,
                klv: typing.Optional[builtins.str] = None,
                klv_data_pids: typing.Optional[builtins.str] = None,
                nielsen_id3_behavior: typing.Optional[builtins.str] = None,
                null_packet_bitrate: typing.Optional[jsii.Number] = None,
                pat_interval: typing.Optional[jsii.Number] = None,
                pcr_control: typing.Optional[builtins.str] = None,
                pcr_period: typing.Optional[jsii.Number] = None,
                pcr_pid: typing.Optional[builtins.str] = None,
                pmt_interval: typing.Optional[jsii.Number] = None,
                pmt_pid: typing.Optional[builtins.str] = None,
                program_num: typing.Optional[jsii.Number] = None,
                rate_mode: typing.Optional[builtins.str] = None,
                scte27_pids: typing.Optional[builtins.str] = None,
                scte35_control: typing.Optional[builtins.str] = None,
                scte35_pid: typing.Optional[builtins.str] = None,
                segmentation_markers: typing.Optional[builtins.str] = None,
                segmentation_style: typing.Optional[builtins.str] = None,
                segmentation_time: typing.Optional[jsii.Number] = None,
                timed_metadata_behavior: typing.Optional[builtins.str] = None,
                timed_metadata_pid: typing.Optional[builtins.str] = None,
                transport_stream_id: typing.Optional[jsii.Number] = None,
                video_pid: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument absent_input_audio_behavior", value=absent_input_audio_behavior, expected_type=type_hints["absent_input_audio_behavior"])
            check_type(argname="argument arib", value=arib, expected_type=type_hints["arib"])
            check_type(argname="argument arib_captions_pid", value=arib_captions_pid, expected_type=type_hints["arib_captions_pid"])
            check_type(argname="argument arib_captions_pid_control", value=arib_captions_pid_control, expected_type=type_hints["arib_captions_pid_control"])
            check_type(argname="argument audio_buffer_model", value=audio_buffer_model, expected_type=type_hints["audio_buffer_model"])
            check_type(argname="argument audio_frames_per_pes", value=audio_frames_per_pes, expected_type=type_hints["audio_frames_per_pes"])
            check_type(argname="argument audio_pids", value=audio_pids, expected_type=type_hints["audio_pids"])
            check_type(argname="argument audio_stream_type", value=audio_stream_type, expected_type=type_hints["audio_stream_type"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument buffer_model", value=buffer_model, expected_type=type_hints["buffer_model"])
            check_type(argname="argument cc_descriptor", value=cc_descriptor, expected_type=type_hints["cc_descriptor"])
            check_type(argname="argument dvb_nit_settings", value=dvb_nit_settings, expected_type=type_hints["dvb_nit_settings"])
            check_type(argname="argument dvb_sdt_settings", value=dvb_sdt_settings, expected_type=type_hints["dvb_sdt_settings"])
            check_type(argname="argument dvb_sub_pids", value=dvb_sub_pids, expected_type=type_hints["dvb_sub_pids"])
            check_type(argname="argument dvb_tdt_settings", value=dvb_tdt_settings, expected_type=type_hints["dvb_tdt_settings"])
            check_type(argname="argument dvb_teletext_pid", value=dvb_teletext_pid, expected_type=type_hints["dvb_teletext_pid"])
            check_type(argname="argument ebif", value=ebif, expected_type=type_hints["ebif"])
            check_type(argname="argument ebp_audio_interval", value=ebp_audio_interval, expected_type=type_hints["ebp_audio_interval"])
            check_type(argname="argument ebp_lookahead_ms", value=ebp_lookahead_ms, expected_type=type_hints["ebp_lookahead_ms"])
            check_type(argname="argument ebp_placement", value=ebp_placement, expected_type=type_hints["ebp_placement"])
            check_type(argname="argument ecm_pid", value=ecm_pid, expected_type=type_hints["ecm_pid"])
            check_type(argname="argument es_rate_in_pes", value=es_rate_in_pes, expected_type=type_hints["es_rate_in_pes"])
            check_type(argname="argument etv_platform_pid", value=etv_platform_pid, expected_type=type_hints["etv_platform_pid"])
            check_type(argname="argument etv_signal_pid", value=etv_signal_pid, expected_type=type_hints["etv_signal_pid"])
            check_type(argname="argument fragment_time", value=fragment_time, expected_type=type_hints["fragment_time"])
            check_type(argname="argument klv", value=klv, expected_type=type_hints["klv"])
            check_type(argname="argument klv_data_pids", value=klv_data_pids, expected_type=type_hints["klv_data_pids"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument null_packet_bitrate", value=null_packet_bitrate, expected_type=type_hints["null_packet_bitrate"])
            check_type(argname="argument pat_interval", value=pat_interval, expected_type=type_hints["pat_interval"])
            check_type(argname="argument pcr_control", value=pcr_control, expected_type=type_hints["pcr_control"])
            check_type(argname="argument pcr_period", value=pcr_period, expected_type=type_hints["pcr_period"])
            check_type(argname="argument pcr_pid", value=pcr_pid, expected_type=type_hints["pcr_pid"])
            check_type(argname="argument pmt_interval", value=pmt_interval, expected_type=type_hints["pmt_interval"])
            check_type(argname="argument pmt_pid", value=pmt_pid, expected_type=type_hints["pmt_pid"])
            check_type(argname="argument program_num", value=program_num, expected_type=type_hints["program_num"])
            check_type(argname="argument rate_mode", value=rate_mode, expected_type=type_hints["rate_mode"])
            check_type(argname="argument scte27_pids", value=scte27_pids, expected_type=type_hints["scte27_pids"])
            check_type(argname="argument scte35_control", value=scte35_control, expected_type=type_hints["scte35_control"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument segmentation_markers", value=segmentation_markers, expected_type=type_hints["segmentation_markers"])
            check_type(argname="argument segmentation_style", value=segmentation_style, expected_type=type_hints["segmentation_style"])
            check_type(argname="argument segmentation_time", value=segmentation_time, expected_type=type_hints["segmentation_time"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
            check_type(argname="argument timed_metadata_pid", value=timed_metadata_pid, expected_type=type_hints["timed_metadata_pid"])
            check_type(argname="argument transport_stream_id", value=transport_stream_id, expected_type=type_hints["transport_stream_id"])
            check_type(argname="argument video_pid", value=video_pid, expected_type=type_hints["video_pid"])
        self._values: typing.Dict[str, typing.Any] = {}
        if absent_input_audio_behavior is not None:
            self._values["absent_input_audio_behavior"] = absent_input_audio_behavior
        if arib is not None:
            self._values["arib"] = arib
        if arib_captions_pid is not None:
            self._values["arib_captions_pid"] = arib_captions_pid
        if arib_captions_pid_control is not None:
            self._values["arib_captions_pid_control"] = arib_captions_pid_control
        if audio_buffer_model is not None:
            self._values["audio_buffer_model"] = audio_buffer_model
        if audio_frames_per_pes is not None:
            self._values["audio_frames_per_pes"] = audio_frames_per_pes
        if audio_pids is not None:
            self._values["audio_pids"] = audio_pids
        if audio_stream_type is not None:
            self._values["audio_stream_type"] = audio_stream_type
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if buffer_model is not None:
            self._values["buffer_model"] = buffer_model
        if cc_descriptor is not None:
            self._values["cc_descriptor"] = cc_descriptor
        if dvb_nit_settings is not None:
            self._values["dvb_nit_settings"] = dvb_nit_settings
        if dvb_sdt_settings is not None:
            self._values["dvb_sdt_settings"] = dvb_sdt_settings
        if dvb_sub_pids is not None:
            self._values["dvb_sub_pids"] = dvb_sub_pids
        if dvb_tdt_settings is not None:
            self._values["dvb_tdt_settings"] = dvb_tdt_settings
        if dvb_teletext_pid is not None:
            self._values["dvb_teletext_pid"] = dvb_teletext_pid
        if ebif is not None:
            self._values["ebif"] = ebif
        if ebp_audio_interval is not None:
            self._values["ebp_audio_interval"] = ebp_audio_interval
        if ebp_lookahead_ms is not None:
            self._values["ebp_lookahead_ms"] = ebp_lookahead_ms
        if ebp_placement is not None:
            self._values["ebp_placement"] = ebp_placement
        if ecm_pid is not None:
            self._values["ecm_pid"] = ecm_pid
        if es_rate_in_pes is not None:
            self._values["es_rate_in_pes"] = es_rate_in_pes
        if etv_platform_pid is not None:
            self._values["etv_platform_pid"] = etv_platform_pid
        if etv_signal_pid is not None:
            self._values["etv_signal_pid"] = etv_signal_pid
        if fragment_time is not None:
            self._values["fragment_time"] = fragment_time
        if klv is not None:
            self._values["klv"] = klv
        if klv_data_pids is not None:
            self._values["klv_data_pids"] = klv_data_pids
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if null_packet_bitrate is not None:
            self._values["null_packet_bitrate"] = null_packet_bitrate
        if pat_interval is not None:
            self._values["pat_interval"] = pat_interval
        if pcr_control is not None:
            self._values["pcr_control"] = pcr_control
        if pcr_period is not None:
            self._values["pcr_period"] = pcr_period
        if pcr_pid is not None:
            self._values["pcr_pid"] = pcr_pid
        if pmt_interval is not None:
            self._values["pmt_interval"] = pmt_interval
        if pmt_pid is not None:
            self._values["pmt_pid"] = pmt_pid
        if program_num is not None:
            self._values["program_num"] = program_num
        if rate_mode is not None:
            self._values["rate_mode"] = rate_mode
        if scte27_pids is not None:
            self._values["scte27_pids"] = scte27_pids
        if scte35_control is not None:
            self._values["scte35_control"] = scte35_control
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if segmentation_markers is not None:
            self._values["segmentation_markers"] = segmentation_markers
        if segmentation_style is not None:
            self._values["segmentation_style"] = segmentation_style
        if segmentation_time is not None:
            self._values["segmentation_time"] = segmentation_time
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior
        if timed_metadata_pid is not None:
            self._values["timed_metadata_pid"] = timed_metadata_pid
        if transport_stream_id is not None:
            self._values["transport_stream_id"] = transport_stream_id
        if video_pid is not None:
            self._values["video_pid"] = video_pid

    @builtins.property
    def absent_input_audio_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.'''
        result = self._values.get("absent_input_audio_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib MedialiveChannel#arib}.'''
        result = self._values.get("arib")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.'''
        result = self._values.get("arib_captions_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.'''
        result = self._values.get("arib_captions_pid_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.'''
        result = self._values.get("audio_buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_frames_per_pes(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.'''
        result = self._values.get("audio_frames_per_pes")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def audio_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.'''
        result = self._values.get("audio_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_stream_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.'''
        result = self._values.get("audio_stream_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_model MedialiveChannel#buffer_model}.'''
        result = self._values.get("buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cc_descriptor(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.'''
        result = self._values.get("cc_descriptor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_nit_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"]:
        '''dvb_nit_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        '''
        result = self._values.get("dvb_nit_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"], result)

    @builtins.property
    def dvb_sdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"]:
        '''dvb_sdt_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        '''
        result = self._values.get("dvb_sdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"], result)

    @builtins.property
    def dvb_sub_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.'''
        result = self._values.get("dvb_sub_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_tdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"]:
        '''dvb_tdt_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        '''
        result = self._values.get("dvb_tdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"], result)

    @builtins.property
    def dvb_teletext_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.'''
        result = self._values.get("dvb_teletext_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebif(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebif MedialiveChannel#ebif}.'''
        result = self._values.get("ebif")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_audio_interval(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.'''
        result = self._values.get("ebp_audio_interval")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_lookahead_ms(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.'''
        result = self._values.get("ebp_lookahead_ms")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ebp_placement(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.'''
        result = self._values.get("ebp_placement")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ecm_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.'''
        result = self._values.get("ecm_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def es_rate_in_pes(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.'''
        result = self._values.get("es_rate_in_pes")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_platform_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.'''
        result = self._values.get("etv_platform_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_signal_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.'''
        result = self._values.get("etv_signal_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def fragment_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_time MedialiveChannel#fragment_time}.'''
        result = self._values.get("fragment_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def klv(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv MedialiveChannel#klv}.'''
        result = self._values.get("klv")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def klv_data_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.'''
        result = self._values.get("klv_data_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def null_packet_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.'''
        result = self._values.get("null_packet_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pat_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.'''
        result = self._values.get("pat_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.'''
        result = self._values.get("pcr_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pcr_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.'''
        result = self._values.get("pcr_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.'''
        result = self._values.get("pcr_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pmt_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.'''
        result = self._values.get("pmt_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pmt_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.'''
        result = self._values.get("pmt_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_num(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.'''
        result = self._values.get("program_num")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_mode MedialiveChannel#rate_mode}.'''
        result = self._values.get("rate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte27_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.'''
        result = self._values.get("scte27_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_control MedialiveChannel#scte35_control}.'''
        result = self._values.get("scte35_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_markers(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.'''
        result = self._values.get("segmentation_markers")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_style(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.'''
        result = self._values.get("segmentation_style")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.'''
        result = self._values.get("segmentation_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.'''
        result = self._values.get("timed_metadata_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transport_stream_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.'''
        result = self._values.get("transport_stream_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.'''
        result = self._values.get("video_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    jsii_struct_bases=[],
    name_mapping={
        "network_id": "networkId",
        "network_name": "networkName",
        "rep_interval": "repInterval",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings:
    def __init__(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            def stub(
                *,
                network_id: jsii.Number,
                network_name: builtins.str,
                rep_interval: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument network_id", value=network_id, expected_type=type_hints["network_id"])
            check_type(argname="argument network_name", value=network_name, expected_type=type_hints["network_name"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[str, typing.Any] = {
            "network_id": network_id,
            "network_name": network_name,
        }
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def network_id(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_id MedialiveChannel#network_id}.'''
        result = self._values.get("network_id")
        assert result is not None, "Required property 'network_id' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def network_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_name MedialiveChannel#network_name}.'''
        result = self._values.get("network_name")
        assert result is not None, "Required property 'network_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="networkIdInput")
    def network_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "networkIdInput"))

    @builtins.property
    @jsii.member(jsii_name="networkNameInput")
    def network_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "networkNameInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="networkId")
    def network_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "networkId"))

    @network_id.setter
    def network_id(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkId", value)

    @builtins.property
    @jsii.member(jsii_name="networkName")
    def network_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "networkName"))

    @network_name.setter
    def network_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkName", value)

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    jsii_struct_bases=[],
    name_mapping={
        "output_sdt": "outputSdt",
        "rep_interval": "repInterval",
        "service_name": "serviceName",
        "service_provider_name": "serviceProviderName",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings:
    def __init__(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        if __debug__:
            def stub(
                *,
                output_sdt: typing.Optional[builtins.str] = None,
                rep_interval: typing.Optional[jsii.Number] = None,
                service_name: typing.Optional[builtins.str] = None,
                service_provider_name: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument output_sdt", value=output_sdt, expected_type=type_hints["output_sdt"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
            check_type(argname="argument service_name", value=service_name, expected_type=type_hints["service_name"])
            check_type(argname="argument service_provider_name", value=service_provider_name, expected_type=type_hints["service_provider_name"])
        self._values: typing.Dict[str, typing.Any] = {}
        if output_sdt is not None:
            self._values["output_sdt"] = output_sdt
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval
        if service_name is not None:
            self._values["service_name"] = service_name
        if service_provider_name is not None:
            self._values["service_provider_name"] = service_provider_name

    @builtins.property
    def output_sdt(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_sdt MedialiveChannel#output_sdt}.'''
        result = self._values.get("output_sdt")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def service_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_name MedialiveChannel#service_name}.'''
        result = self._values.get("service_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def service_provider_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.'''
        result = self._values.get("service_provider_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOutputSdt")
    def reset_output_sdt(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputSdt", []))

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @jsii.member(jsii_name="resetServiceName")
    def reset_service_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceName", []))

    @jsii.member(jsii_name="resetServiceProviderName")
    def reset_service_provider_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceProviderName", []))

    @builtins.property
    @jsii.member(jsii_name="outputSdtInput")
    def output_sdt_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputSdtInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceNameInput")
    def service_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceNameInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceProviderNameInput")
    def service_provider_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceProviderNameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSdt")
    def output_sdt(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputSdt"))

    @output_sdt.setter
    def output_sdt(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputSdt", value)

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value)

    @builtins.property
    @jsii.member(jsii_name="serviceName")
    def service_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceName"))

    @service_name.setter
    def service_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceName", value)

    @builtins.property
    @jsii.member(jsii_name="serviceProviderName")
    def service_provider_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceProviderName"))

    @service_provider_name.setter
    def service_provider_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceProviderName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    jsii_struct_bases=[],
    name_mapping={"rep_interval": "repInterval"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings:
    def __init__(self, *, rep_interval: typing.Optional[jsii.Number] = None) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            def stub(*, rep_interval: typing.Optional[jsii.Number] = None) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[str, typing.Any] = {}
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDvbNitSettings")
    def put_dvb_nit_settings(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(
            network_id=network_id, network_name=network_name, rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbNitSettings", [value]))

    @jsii.member(jsii_name="putDvbSdtSettings")
    def put_dvb_sdt_settings(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(
            output_sdt=output_sdt,
            rep_interval=rep_interval,
            service_name=service_name,
            service_provider_name=service_provider_name,
        )

        return typing.cast(None, jsii.invoke(self, "putDvbSdtSettings", [value]))

    @jsii.member(jsii_name="putDvbTdtSettings")
    def put_dvb_tdt_settings(
        self,
        *,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(
            rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbTdtSettings", [value]))

    @jsii.member(jsii_name="resetAbsentInputAudioBehavior")
    def reset_absent_input_audio_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAbsentInputAudioBehavior", []))

    @jsii.member(jsii_name="resetArib")
    def reset_arib(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArib", []))

    @jsii.member(jsii_name="resetAribCaptionsPid")
    def reset_arib_captions_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPid", []))

    @jsii.member(jsii_name="resetAribCaptionsPidControl")
    def reset_arib_captions_pid_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPidControl", []))

    @jsii.member(jsii_name="resetAudioBufferModel")
    def reset_audio_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioBufferModel", []))

    @jsii.member(jsii_name="resetAudioFramesPerPes")
    def reset_audio_frames_per_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioFramesPerPes", []))

    @jsii.member(jsii_name="resetAudioPids")
    def reset_audio_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPids", []))

    @jsii.member(jsii_name="resetAudioStreamType")
    def reset_audio_stream_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioStreamType", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBufferModel")
    def reset_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferModel", []))

    @jsii.member(jsii_name="resetCcDescriptor")
    def reset_cc_descriptor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCcDescriptor", []))

    @jsii.member(jsii_name="resetDvbNitSettings")
    def reset_dvb_nit_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbNitSettings", []))

    @jsii.member(jsii_name="resetDvbSdtSettings")
    def reset_dvb_sdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSdtSettings", []))

    @jsii.member(jsii_name="resetDvbSubPids")
    def reset_dvb_sub_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSubPids", []))

    @jsii.member(jsii_name="resetDvbTdtSettings")
    def reset_dvb_tdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTdtSettings", []))

    @jsii.member(jsii_name="resetDvbTeletextPid")
    def reset_dvb_teletext_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTeletextPid", []))

    @jsii.member(jsii_name="resetEbif")
    def reset_ebif(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbif", []))

    @jsii.member(jsii_name="resetEbpAudioInterval")
    def reset_ebp_audio_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpAudioInterval", []))

    @jsii.member(jsii_name="resetEbpLookaheadMs")
    def reset_ebp_lookahead_ms(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpLookaheadMs", []))

    @jsii.member(jsii_name="resetEbpPlacement")
    def reset_ebp_placement(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpPlacement", []))

    @jsii.member(jsii_name="resetEcmPid")
    def reset_ecm_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcmPid", []))

    @jsii.member(jsii_name="resetEsRateInPes")
    def reset_es_rate_in_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEsRateInPes", []))

    @jsii.member(jsii_name="resetEtvPlatformPid")
    def reset_etv_platform_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvPlatformPid", []))

    @jsii.member(jsii_name="resetEtvSignalPid")
    def reset_etv_signal_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvSignalPid", []))

    @jsii.member(jsii_name="resetFragmentTime")
    def reset_fragment_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFragmentTime", []))

    @jsii.member(jsii_name="resetKlv")
    def reset_klv(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlv", []))

    @jsii.member(jsii_name="resetKlvDataPids")
    def reset_klv_data_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlvDataPids", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetNullPacketBitrate")
    def reset_null_packet_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullPacketBitrate", []))

    @jsii.member(jsii_name="resetPatInterval")
    def reset_pat_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPatInterval", []))

    @jsii.member(jsii_name="resetPcrControl")
    def reset_pcr_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrControl", []))

    @jsii.member(jsii_name="resetPcrPeriod")
    def reset_pcr_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPeriod", []))

    @jsii.member(jsii_name="resetPcrPid")
    def reset_pcr_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPid", []))

    @jsii.member(jsii_name="resetPmtInterval")
    def reset_pmt_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtInterval", []))

    @jsii.member(jsii_name="resetPmtPid")
    def reset_pmt_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtPid", []))

    @jsii.member(jsii_name="resetProgramNum")
    def reset_program_num(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramNum", []))

    @jsii.member(jsii_name="resetRateMode")
    def reset_rate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateMode", []))

    @jsii.member(jsii_name="resetScte27Pids")
    def reset_scte27_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27Pids", []))

    @jsii.member(jsii_name="resetScte35Control")
    def reset_scte35_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Control", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetSegmentationMarkers")
    def reset_segmentation_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationMarkers", []))

    @jsii.member(jsii_name="resetSegmentationStyle")
    def reset_segmentation_style(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationStyle", []))

    @jsii.member(jsii_name="resetSegmentationTime")
    def reset_segmentation_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationTime", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @jsii.member(jsii_name="resetTimedMetadataPid")
    def reset_timed_metadata_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataPid", []))

    @jsii.member(jsii_name="resetTransportStreamId")
    def reset_transport_stream_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransportStreamId", []))

    @jsii.member(jsii_name="resetVideoPid")
    def reset_video_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoPid", []))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettings")
    def dvb_nit_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference, jsii.get(self, "dvbNitSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettings")
    def dvb_sdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference, jsii.get(self, "dvbSdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettings")
    def dvb_tdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference, jsii.get(self, "dvbTdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehaviorInput")
    def absent_input_audio_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "absentInputAudioBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControlInput")
    def arib_captions_pid_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidControlInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidInput")
    def arib_captions_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidInput"))

    @builtins.property
    @jsii.member(jsii_name="aribInput")
    def arib_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribInput"))

    @builtins.property
    @jsii.member(jsii_name="audioBufferModelInput")
    def audio_buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioBufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPesInput")
    def audio_frames_per_pes_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioFramesPerPesInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidsInput")
    def audio_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioStreamTypeInput")
    def audio_stream_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioStreamTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferModelInput")
    def buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="ccDescriptorInput")
    def cc_descriptor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ccDescriptorInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettingsInput")
    def dvb_nit_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "dvbNitSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettingsInput")
    def dvb_sdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "dvbSdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubPidsInput")
    def dvb_sub_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbSubPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettingsInput")
    def dvb_tdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "dvbTdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPidInput")
    def dvb_teletext_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbTeletextPidInput"))

    @builtins.property
    @jsii.member(jsii_name="ebifInput")
    def ebif_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebifInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpAudioIntervalInput")
    def ebp_audio_interval_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpAudioIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMsInput")
    def ebp_lookahead_ms_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ebpLookaheadMsInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpPlacementInput")
    def ebp_placement_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpPlacementInput"))

    @builtins.property
    @jsii.member(jsii_name="ecmPidInput")
    def ecm_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ecmPidInput"))

    @builtins.property
    @jsii.member(jsii_name="esRateInPesInput")
    def es_rate_in_pes_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "esRateInPesInput"))

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPidInput")
    def etv_platform_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvPlatformPidInput"))

    @builtins.property
    @jsii.member(jsii_name="etvSignalPidInput")
    def etv_signal_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvSignalPidInput"))

    @builtins.property
    @jsii.member(jsii_name="fragmentTimeInput")
    def fragment_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fragmentTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="klvDataPidsInput")
    def klv_data_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvDataPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="klvInput")
    def klv_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrateInput")
    def null_packet_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "nullPacketBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="patIntervalInput")
    def pat_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "patIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrControlInput")
    def pcr_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrControlInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPeriodInput")
    def pcr_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pcrPeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPidInput")
    def pcr_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrPidInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtIntervalInput")
    def pmt_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pmtIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtPidInput")
    def pmt_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pmtPidInput"))

    @builtins.property
    @jsii.member(jsii_name="programNumInput")
    def program_num_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programNumInput"))

    @builtins.property
    @jsii.member(jsii_name="rateModeInput")
    def rate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27PidsInput")
    def scte27_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte27PidsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35ControlInput")
    def scte35_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35ControlInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkersInput")
    def segmentation_markers_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationStyleInput")
    def segmentation_style_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationStyleInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationTimeInput")
    def segmentation_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentationTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPidInput")
    def timed_metadata_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataPidInput"))

    @builtins.property
    @jsii.member(jsii_name="transportStreamIdInput")
    def transport_stream_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "transportStreamIdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoPidInput")
    def video_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoPidInput"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehavior")
    def absent_input_audio_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "absentInputAudioBehavior"))

    @absent_input_audio_behavior.setter
    def absent_input_audio_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "absentInputAudioBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="arib")
    def arib(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arib"))

    @arib.setter
    def arib(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "arib", value)

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPid")
    def arib_captions_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPid"))

    @arib_captions_pid.setter
    def arib_captions_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPid", value)

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControl")
    def arib_captions_pid_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPidControl"))

    @arib_captions_pid_control.setter
    def arib_captions_pid_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPidControl", value)

    @builtins.property
    @jsii.member(jsii_name="audioBufferModel")
    def audio_buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioBufferModel"))

    @audio_buffer_model.setter
    def audio_buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioBufferModel", value)

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPes")
    def audio_frames_per_pes(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioFramesPerPes"))

    @audio_frames_per_pes.setter
    def audio_frames_per_pes(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioFramesPerPes", value)

    @builtins.property
    @jsii.member(jsii_name="audioPids")
    def audio_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioPids"))

    @audio_pids.setter
    def audio_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioPids", value)

    @builtins.property
    @jsii.member(jsii_name="audioStreamType")
    def audio_stream_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioStreamType"))

    @audio_stream_type.setter
    def audio_stream_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioStreamType", value)

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="bufferModel")
    def buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bufferModel"))

    @buffer_model.setter
    def buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferModel", value)

    @builtins.property
    @jsii.member(jsii_name="ccDescriptor")
    def cc_descriptor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ccDescriptor"))

    @cc_descriptor.setter
    def cc_descriptor(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ccDescriptor", value)

    @builtins.property
    @jsii.member(jsii_name="dvbSubPids")
    def dvb_sub_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbSubPids"))

    @dvb_sub_pids.setter
    def dvb_sub_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbSubPids", value)

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPid")
    def dvb_teletext_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbTeletextPid"))

    @dvb_teletext_pid.setter
    def dvb_teletext_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbTeletextPid", value)

    @builtins.property
    @jsii.member(jsii_name="ebif")
    def ebif(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebif"))

    @ebif.setter
    def ebif(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebif", value)

    @builtins.property
    @jsii.member(jsii_name="ebpAudioInterval")
    def ebp_audio_interval(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpAudioInterval"))

    @ebp_audio_interval.setter
    def ebp_audio_interval(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpAudioInterval", value)

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMs")
    def ebp_lookahead_ms(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ebpLookaheadMs"))

    @ebp_lookahead_ms.setter
    def ebp_lookahead_ms(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpLookaheadMs", value)

    @builtins.property
    @jsii.member(jsii_name="ebpPlacement")
    def ebp_placement(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpPlacement"))

    @ebp_placement.setter
    def ebp_placement(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpPlacement", value)

    @builtins.property
    @jsii.member(jsii_name="ecmPid")
    def ecm_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ecmPid"))

    @ecm_pid.setter
    def ecm_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ecmPid", value)

    @builtins.property
    @jsii.member(jsii_name="esRateInPes")
    def es_rate_in_pes(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "esRateInPes"))

    @es_rate_in_pes.setter
    def es_rate_in_pes(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "esRateInPes", value)

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPid")
    def etv_platform_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvPlatformPid"))

    @etv_platform_pid.setter
    def etv_platform_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvPlatformPid", value)

    @builtins.property
    @jsii.member(jsii_name="etvSignalPid")
    def etv_signal_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvSignalPid"))

    @etv_signal_pid.setter
    def etv_signal_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvSignalPid", value)

    @builtins.property
    @jsii.member(jsii_name="fragmentTime")
    def fragment_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fragmentTime"))

    @fragment_time.setter
    def fragment_time(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fragmentTime", value)

    @builtins.property
    @jsii.member(jsii_name="klv")
    def klv(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klv"))

    @klv.setter
    def klv(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klv", value)

    @builtins.property
    @jsii.member(jsii_name="klvDataPids")
    def klv_data_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klvDataPids"))

    @klv_data_pids.setter
    def klv_data_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klvDataPids", value)

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value)

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrate")
    def null_packet_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "nullPacketBitrate"))

    @null_packet_bitrate.setter
    def null_packet_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullPacketBitrate", value)

    @builtins.property
    @jsii.member(jsii_name="patInterval")
    def pat_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "patInterval"))

    @pat_interval.setter
    def pat_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "patInterval", value)

    @builtins.property
    @jsii.member(jsii_name="pcrControl")
    def pcr_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrControl"))

    @pcr_control.setter
    def pcr_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrControl", value)

    @builtins.property
    @jsii.member(jsii_name="pcrPeriod")
    def pcr_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pcrPeriod"))

    @pcr_period.setter
    def pcr_period(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPeriod", value)

    @builtins.property
    @jsii.member(jsii_name="pcrPid")
    def pcr_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrPid"))

    @pcr_pid.setter
    def pcr_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPid", value)

    @builtins.property
    @jsii.member(jsii_name="pmtInterval")
    def pmt_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pmtInterval"))

    @pmt_interval.setter
    def pmt_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtInterval", value)

    @builtins.property
    @jsii.member(jsii_name="pmtPid")
    def pmt_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pmtPid"))

    @pmt_pid.setter
    def pmt_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtPid", value)

    @builtins.property
    @jsii.member(jsii_name="programNum")
    def program_num(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programNum"))

    @program_num.setter
    def program_num(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programNum", value)

    @builtins.property
    @jsii.member(jsii_name="rateMode")
    def rate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateMode"))

    @rate_mode.setter
    def rate_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateMode", value)

    @builtins.property
    @jsii.member(jsii_name="scte27Pids")
    def scte27_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte27Pids"))

    @scte27_pids.setter
    def scte27_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte27Pids", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Control")
    def scte35_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Control"))

    @scte35_control.setter
    def scte35_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Control", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkers")
    def segmentation_markers(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationMarkers"))

    @segmentation_markers.setter
    def segmentation_markers(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationMarkers", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationStyle")
    def segmentation_style(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationStyle"))

    @segmentation_style.setter
    def segmentation_style(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationStyle", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationTime")
    def segmentation_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentationTime"))

    @segmentation_time.setter
    def segmentation_time(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationTime", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPid")
    def timed_metadata_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataPid"))

    @timed_metadata_pid.setter
    def timed_metadata_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataPid", value)

    @builtins.property
    @jsii.member(jsii_name="transportStreamId")
    def transport_stream_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "transportStreamId"))

    @transport_stream_id.setter
    def transport_stream_id(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transportStreamId", value)

    @builtins.property
    @jsii.member(jsii_name="videoPid")
    def video_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoPid"))

    @video_pid.setter
    def video_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoPid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putM2TsSettings")
    def put_m2_ts_settings(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings(
            absent_input_audio_behavior=absent_input_audio_behavior,
            arib=arib,
            arib_captions_pid=arib_captions_pid,
            arib_captions_pid_control=arib_captions_pid_control,
            audio_buffer_model=audio_buffer_model,
            audio_frames_per_pes=audio_frames_per_pes,
            audio_pids=audio_pids,
            audio_stream_type=audio_stream_type,
            bitrate=bitrate,
            buffer_model=buffer_model,
            cc_descriptor=cc_descriptor,
            dvb_nit_settings=dvb_nit_settings,
            dvb_sdt_settings=dvb_sdt_settings,
            dvb_sub_pids=dvb_sub_pids,
            dvb_tdt_settings=dvb_tdt_settings,
            dvb_teletext_pid=dvb_teletext_pid,
            ebif=ebif,
            ebp_audio_interval=ebp_audio_interval,
            ebp_lookahead_ms=ebp_lookahead_ms,
            ebp_placement=ebp_placement,
            ecm_pid=ecm_pid,
            es_rate_in_pes=es_rate_in_pes,
            etv_platform_pid=etv_platform_pid,
            etv_signal_pid=etv_signal_pid,
            fragment_time=fragment_time,
            klv=klv,
            klv_data_pids=klv_data_pids,
            nielsen_id3_behavior=nielsen_id3_behavior,
            null_packet_bitrate=null_packet_bitrate,
            pat_interval=pat_interval,
            pcr_control=pcr_control,
            pcr_period=pcr_period,
            pcr_pid=pcr_pid,
            pmt_interval=pmt_interval,
            pmt_pid=pmt_pid,
            program_num=program_num,
            rate_mode=rate_mode,
            scte27_pids=scte27_pids,
            scte35_control=scte35_control,
            scte35_pid=scte35_pid,
            segmentation_markers=segmentation_markers,
            segmentation_style=segmentation_style,
            segmentation_time=segmentation_time,
            timed_metadata_behavior=timed_metadata_behavior,
            timed_metadata_pid=timed_metadata_pid,
            transport_stream_id=transport_stream_id,
            video_pid=video_pid,
        )

        return typing.cast(None, jsii.invoke(self, "putM2TsSettings", [value]))

    @jsii.member(jsii_name="putRawSettings")
    def put_raw_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings()

        return typing.cast(None, jsii.invoke(self, "putRawSettings", [value]))

    @jsii.member(jsii_name="resetM2TsSettings")
    def reset_m2_ts_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetM2TsSettings", []))

    @jsii.member(jsii_name="resetRawSettings")
    def reset_raw_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRawSettings", []))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettings")
    def m2_ts_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference, jsii.get(self, "m2TsSettings"))

    @builtins.property
    @jsii.member(jsii_name="rawSettings")
    def raw_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference", jsii.get(self, "rawSettings"))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettingsInput")
    def m2_ts_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "m2TsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rawSettingsInput")
    def raw_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"], jsii.get(self, "rawSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putContainerSettings")
    def put_container_settings(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings, typing.Dict[str, typing.Any]]] = None,
        raw_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        :param raw_settings: raw_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#raw_settings MedialiveChannel#raw_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings(
            m2_ts_settings=m2_ts_settings, raw_settings=raw_settings
        )

        return typing.cast(None, jsii.invoke(self, "putContainerSettings", [value]))

    @jsii.member(jsii_name="resetContainerSettings")
    def reset_container_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetContainerSettings", []))

    @jsii.member(jsii_name="resetExtension")
    def reset_extension(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtension", []))

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @builtins.property
    @jsii.member(jsii_name="containerSettings")
    def container_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference, jsii.get(self, "containerSettings"))

    @builtins.property
    @jsii.member(jsii_name="containerSettingsInput")
    def container_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings], jsii.get(self, "containerSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="extensionInput")
    def extension_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "extensionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="extension")
    def extension(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "extension"))

    @extension.setter
    def extension(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "extension", value)

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings",
    jsii_struct_bases=[],
    name_mapping={"name_modifier": "nameModifier"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings:
    def __init__(self, *, name_modifier: typing.Optional[builtins.str] = None) -> None:
        '''
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        if __debug__:
            def stub(*, name_modifier: typing.Optional[builtins.str] = None) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
        self._values: typing.Dict[str, typing.Any] = {}
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "hls_settings": "hlsSettings",
        "h265_packaging_type": "h265PackagingType",
        "name_modifier": "nameModifier",
        "segment_modifier": "segmentModifier",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings:
    def __init__(
        self,
        *,
        hls_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings", typing.Dict[str, typing.Any]],
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
        segment_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_settings: hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_settings MedialiveChannel#hls_settings}
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        :param segment_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_modifier MedialiveChannel#segment_modifier}.
        '''
        if isinstance(hls_settings, dict):
            hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings(**hls_settings)
        if __debug__:
            def stub(
                *,
                hls_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings, typing.Dict[str, typing.Any]],
                h265_packaging_type: typing.Optional[builtins.str] = None,
                name_modifier: typing.Optional[builtins.str] = None,
                segment_modifier: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument hls_settings", value=hls_settings, expected_type=type_hints["hls_settings"])
            check_type(argname="argument h265_packaging_type", value=h265_packaging_type, expected_type=type_hints["h265_packaging_type"])
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
            check_type(argname="argument segment_modifier", value=segment_modifier, expected_type=type_hints["segment_modifier"])
        self._values: typing.Dict[str, typing.Any] = {
            "hls_settings": hls_settings,
        }
        if h265_packaging_type is not None:
            self._values["h265_packaging_type"] = h265_packaging_type
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier
        if segment_modifier is not None:
            self._values["segment_modifier"] = segment_modifier

    @builtins.property
    def hls_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings":
        '''hls_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_settings MedialiveChannel#hls_settings}
        '''
        result = self._values.get("hls_settings")
        assert result is not None, "Required property 'hls_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings", result)

    @builtins.property
    def h265_packaging_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.'''
        result = self._values.get("h265_packaging_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segment_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_modifier MedialiveChannel#segment_modifier}.'''
        result = self._values.get("segment_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_only_hls_settings": "audioOnlyHlsSettings",
        "fmp4_hls_settings": "fmp4HlsSettings",
        "frame_capture_hls_settings": "frameCaptureHlsSettings",
        "standard_hls_settings": "standardHlsSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings:
    def __init__(
        self,
        *,
        audio_only_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings", typing.Dict[str, typing.Any]]] = None,
        fmp4_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings", typing.Dict[str, typing.Any]]] = None,
        frame_capture_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings", typing.Dict[str, typing.Any]]] = None,
        standard_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_only_hls_settings: audio_only_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_hls_settings MedialiveChannel#audio_only_hls_settings}
        :param fmp4_hls_settings: fmp4_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fmp4_hls_settings MedialiveChannel#fmp4_hls_settings}
        :param frame_capture_hls_settings: frame_capture_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_hls_settings MedialiveChannel#frame_capture_hls_settings}
        :param standard_hls_settings: standard_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#standard_hls_settings MedialiveChannel#standard_hls_settings}
        '''
        if isinstance(audio_only_hls_settings, dict):
            audio_only_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings(**audio_only_hls_settings)
        if isinstance(fmp4_hls_settings, dict):
            fmp4_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings(**fmp4_hls_settings)
        if isinstance(frame_capture_hls_settings, dict):
            frame_capture_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings(**frame_capture_hls_settings)
        if isinstance(standard_hls_settings, dict):
            standard_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings(**standard_hls_settings)
        if __debug__:
            def stub(
                *,
                audio_only_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings, typing.Dict[str, typing.Any]]] = None,
                fmp4_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings, typing.Dict[str, typing.Any]]] = None,
                frame_capture_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings, typing.Dict[str, typing.Any]]] = None,
                standard_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_only_hls_settings", value=audio_only_hls_settings, expected_type=type_hints["audio_only_hls_settings"])
            check_type(argname="argument fmp4_hls_settings", value=fmp4_hls_settings, expected_type=type_hints["fmp4_hls_settings"])
            check_type(argname="argument frame_capture_hls_settings", value=frame_capture_hls_settings, expected_type=type_hints["frame_capture_hls_settings"])
            check_type(argname="argument standard_hls_settings", value=standard_hls_settings, expected_type=type_hints["standard_hls_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_only_hls_settings is not None:
            self._values["audio_only_hls_settings"] = audio_only_hls_settings
        if fmp4_hls_settings is not None:
            self._values["fmp4_hls_settings"] = fmp4_hls_settings
        if frame_capture_hls_settings is not None:
            self._values["frame_capture_hls_settings"] = frame_capture_hls_settings
        if standard_hls_settings is not None:
            self._values["standard_hls_settings"] = standard_hls_settings

    @builtins.property
    def audio_only_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings"]:
        '''audio_only_hls_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_hls_settings MedialiveChannel#audio_only_hls_settings}
        '''
        result = self._values.get("audio_only_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings"], result)

    @builtins.property
    def fmp4_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings"]:
        '''fmp4_hls_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fmp4_hls_settings MedialiveChannel#fmp4_hls_settings}
        '''
        result = self._values.get("fmp4_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings"], result)

    @builtins.property
    def frame_capture_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings"]:
        '''frame_capture_hls_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_hls_settings MedialiveChannel#frame_capture_hls_settings}
        '''
        result = self._values.get("frame_capture_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings"], result)

    @builtins.property
    def standard_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"]:
        '''standard_hls_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#standard_hls_settings MedialiveChannel#standard_hls_settings}
        '''
        result = self._values.get("standard_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_group_id": "audioGroupId",
        "audio_only_image": "audioOnlyImage",
        "audio_track_type": "audioTrackType",
        "segment_type": "segmentType",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings:
    def __init__(
        self,
        *,
        audio_group_id: typing.Optional[builtins.str] = None,
        audio_only_image: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage", typing.Dict[str, typing.Any]]] = None,
        audio_track_type: typing.Optional[builtins.str] = None,
        segment_type: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_group_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_group_id MedialiveChannel#audio_group_id}.
        :param audio_only_image: audio_only_image block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_image MedialiveChannel#audio_only_image}
        :param audio_track_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_track_type MedialiveChannel#audio_track_type}.
        :param segment_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_type MedialiveChannel#segment_type}.
        '''
        if isinstance(audio_only_image, dict):
            audio_only_image = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage(**audio_only_image)
        if __debug__:
            def stub(
                *,
                audio_group_id: typing.Optional[builtins.str] = None,
                audio_only_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage, typing.Dict[str, typing.Any]]] = None,
                audio_track_type: typing.Optional[builtins.str] = None,
                segment_type: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_group_id", value=audio_group_id, expected_type=type_hints["audio_group_id"])
            check_type(argname="argument audio_only_image", value=audio_only_image, expected_type=type_hints["audio_only_image"])
            check_type(argname="argument audio_track_type", value=audio_track_type, expected_type=type_hints["audio_track_type"])
            check_type(argname="argument segment_type", value=segment_type, expected_type=type_hints["segment_type"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_group_id is not None:
            self._values["audio_group_id"] = audio_group_id
        if audio_only_image is not None:
            self._values["audio_only_image"] = audio_only_image
        if audio_track_type is not None:
            self._values["audio_track_type"] = audio_track_type
        if segment_type is not None:
            self._values["segment_type"] = segment_type

    @builtins.property
    def audio_group_id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_group_id MedialiveChannel#audio_group_id}.'''
        result = self._values.get("audio_group_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_only_image(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage"]:
        '''audio_only_image block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_image MedialiveChannel#audio_only_image}
        '''
        result = self._values.get("audio_only_image")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage"], result)

    @builtins.property
    def audio_track_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_track_type MedialiveChannel#audio_track_type}.'''
        result = self._values.get("audio_track_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segment_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_type MedialiveChannel#segment_type}.'''
        result = self._values.get("segment_type")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            def stub(
                *,
                uri: builtins.str,
                password_param: typing.Optional[builtins.str] = None,
                username: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value)

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value)

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioOnlyImage")
    def put_audio_only_image(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putAudioOnlyImage", [value]))

    @jsii.member(jsii_name="resetAudioGroupId")
    def reset_audio_group_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioGroupId", []))

    @jsii.member(jsii_name="resetAudioOnlyImage")
    def reset_audio_only_image(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioOnlyImage", []))

    @jsii.member(jsii_name="resetAudioTrackType")
    def reset_audio_track_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioTrackType", []))

    @jsii.member(jsii_name="resetSegmentType")
    def reset_segment_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentType", []))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyImage")
    def audio_only_image(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference, jsii.get(self, "audioOnlyImage"))

    @builtins.property
    @jsii.member(jsii_name="audioGroupIdInput")
    def audio_group_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioGroupIdInput"))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyImageInput")
    def audio_only_image_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage], jsii.get(self, "audioOnlyImageInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTrackTypeInput")
    def audio_track_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioTrackTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentTypeInput")
    def segment_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="audioGroupId")
    def audio_group_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioGroupId"))

    @audio_group_id.setter
    def audio_group_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioGroupId", value)

    @builtins.property
    @jsii.member(jsii_name="audioTrackType")
    def audio_track_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioTrackType"))

    @audio_track_type.setter
    def audio_track_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioTrackType", value)

    @builtins.property
    @jsii.member(jsii_name="segmentType")
    def segment_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentType"))

    @segment_type.setter
    def segment_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentType", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_rendition_sets": "audioRenditionSets",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "timed_metadata_behavior": "timedMetadataBehavior",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings:
    def __init__(
        self,
        *,
        audio_rendition_sets: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        '''
        if __debug__:
            def stub(
                *,
                audio_rendition_sets: typing.Optional[builtins.str] = None,
                nielsen_id3_behavior: typing.Optional[builtins.str] = None,
                timed_metadata_behavior: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_rendition_sets", value=audio_rendition_sets, expected_type=type_hints["audio_rendition_sets"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_rendition_sets is not None:
            self._values["audio_rendition_sets"] = audio_rendition_sets
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior

    @builtins.property
    def audio_rendition_sets(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.'''
        result = self._values.get("audio_rendition_sets")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAudioRenditionSets")
    def reset_audio_rendition_sets(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioRenditionSets", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSetsInput")
    def audio_rendition_sets_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioRenditionSetsInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSets")
    def audio_rendition_sets(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioRenditionSets"))

    @audio_rendition_sets.setter
    def audio_rendition_sets(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioRenditionSets", value)

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioOnlyHlsSettings")
    def put_audio_only_hls_settings(
        self,
        *,
        audio_group_id: typing.Optional[builtins.str] = None,
        audio_only_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage, typing.Dict[str, typing.Any]]] = None,
        audio_track_type: typing.Optional[builtins.str] = None,
        segment_type: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_group_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_group_id MedialiveChannel#audio_group_id}.
        :param audio_only_image: audio_only_image block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_image MedialiveChannel#audio_only_image}
        :param audio_track_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_track_type MedialiveChannel#audio_track_type}.
        :param segment_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_type MedialiveChannel#segment_type}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings(
            audio_group_id=audio_group_id,
            audio_only_image=audio_only_image,
            audio_track_type=audio_track_type,
            segment_type=segment_type,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioOnlyHlsSettings", [value]))

    @jsii.member(jsii_name="putFmp4HlsSettings")
    def put_fmp4_hls_settings(
        self,
        *,
        audio_rendition_sets: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings(
            audio_rendition_sets=audio_rendition_sets,
            nielsen_id3_behavior=nielsen_id3_behavior,
            timed_metadata_behavior=timed_metadata_behavior,
        )

        return typing.cast(None, jsii.invoke(self, "putFmp4HlsSettings", [value]))

    @jsii.member(jsii_name="putFrameCaptureHlsSettings")
    def put_frame_capture_hls_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings()

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureHlsSettings", [value]))

    @jsii.member(jsii_name="putStandardHlsSettings")
    def put_standard_hls_settings(
        self,
        *,
        m3_u8_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings", typing.Dict[str, typing.Any]],
        audio_rendition_sets: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param m3_u8_settings: m3u8_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m3u8_settings MedialiveChannel#m3u8_settings}
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings(
            m3_u8_settings=m3_u8_settings, audio_rendition_sets=audio_rendition_sets
        )

        return typing.cast(None, jsii.invoke(self, "putStandardHlsSettings", [value]))

    @jsii.member(jsii_name="resetAudioOnlyHlsSettings")
    def reset_audio_only_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioOnlyHlsSettings", []))

    @jsii.member(jsii_name="resetFmp4HlsSettings")
    def reset_fmp4_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFmp4HlsSettings", []))

    @jsii.member(jsii_name="resetFrameCaptureHlsSettings")
    def reset_frame_capture_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureHlsSettings", []))

    @jsii.member(jsii_name="resetStandardHlsSettings")
    def reset_standard_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStandardHlsSettings", []))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyHlsSettings")
    def audio_only_hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference, jsii.get(self, "audioOnlyHlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="fmp4HlsSettings")
    def fmp4_hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference, jsii.get(self, "fmp4HlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureHlsSettings")
    def frame_capture_hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference, jsii.get(self, "frameCaptureHlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="standardHlsSettings")
    def standard_hls_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference", jsii.get(self, "standardHlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyHlsSettingsInput")
    def audio_only_hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings], jsii.get(self, "audioOnlyHlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="fmp4HlsSettingsInput")
    def fmp4_hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings], jsii.get(self, "fmp4HlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureHlsSettingsInput")
    def frame_capture_hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings], jsii.get(self, "frameCaptureHlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="standardHlsSettingsInput")
    def standard_hls_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"], jsii.get(self, "standardHlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "m3_u8_settings": "m3U8Settings",
        "audio_rendition_sets": "audioRenditionSets",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings:
    def __init__(
        self,
        *,
        m3_u8_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings", typing.Dict[str, typing.Any]],
        audio_rendition_sets: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param m3_u8_settings: m3u8_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m3u8_settings MedialiveChannel#m3u8_settings}
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        '''
        if isinstance(m3_u8_settings, dict):
            m3_u8_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings(**m3_u8_settings)
        if __debug__:
            def stub(
                *,
                m3_u8_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings, typing.Dict[str, typing.Any]],
                audio_rendition_sets: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument m3_u8_settings", value=m3_u8_settings, expected_type=type_hints["m3_u8_settings"])
            check_type(argname="argument audio_rendition_sets", value=audio_rendition_sets, expected_type=type_hints["audio_rendition_sets"])
        self._values: typing.Dict[str, typing.Any] = {
            "m3_u8_settings": m3_u8_settings,
        }
        if audio_rendition_sets is not None:
            self._values["audio_rendition_sets"] = audio_rendition_sets

    @builtins.property
    def m3_u8_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings":
        '''m3u8_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m3u8_settings MedialiveChannel#m3u8_settings}
        '''
        result = self._values.get("m3_u8_settings")
        assert result is not None, "Required property 'm3_u8_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings", result)

    @builtins.property
    def audio_rendition_sets(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.'''
        result = self._values.get("audio_rendition_sets")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_frames_per_pes": "audioFramesPerPes",
        "audio_pids": "audioPids",
        "ecm_pid": "ecmPid",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "pat_interval": "patInterval",
        "pcr_control": "pcrControl",
        "pcr_period": "pcrPeriod",
        "pcr_pid": "pcrPid",
        "pmt_interval": "pmtInterval",
        "pmt_pid": "pmtPid",
        "program_num": "programNum",
        "scte35_behavior": "scte35Behavior",
        "scte35_pid": "scte35Pid",
        "timed_metadata_behavior": "timedMetadataBehavior",
        "timed_metadata_pid": "timedMetadataPid",
        "transport_stream_id": "transportStreamId",
        "video_pid": "videoPid",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings:
    def __init__(
        self,
        *,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        scte35_behavior: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param pat_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.
        :param scte35_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_behavior MedialiveChannel#scte35_behavior}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        if __debug__:
            def stub(
                *,
                audio_frames_per_pes: typing.Optional[jsii.Number] = None,
                audio_pids: typing.Optional[builtins.str] = None,
                ecm_pid: typing.Optional[builtins.str] = None,
                nielsen_id3_behavior: typing.Optional[builtins.str] = None,
                pat_interval: typing.Optional[jsii.Number] = None,
                pcr_control: typing.Optional[builtins.str] = None,
                pcr_period: typing.Optional[jsii.Number] = None,
                pcr_pid: typing.Optional[builtins.str] = None,
                pmt_interval: typing.Optional[jsii.Number] = None,
                pmt_pid: typing.Optional[builtins.str] = None,
                program_num: typing.Optional[jsii.Number] = None,
                scte35_behavior: typing.Optional[builtins.str] = None,
                scte35_pid: typing.Optional[builtins.str] = None,
                timed_metadata_behavior: typing.Optional[builtins.str] = None,
                timed_metadata_pid: typing.Optional[builtins.str] = None,
                transport_stream_id: typing.Optional[jsii.Number] = None,
                video_pid: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_frames_per_pes", value=audio_frames_per_pes, expected_type=type_hints["audio_frames_per_pes"])
            check_type(argname="argument audio_pids", value=audio_pids, expected_type=type_hints["audio_pids"])
            check_type(argname="argument ecm_pid", value=ecm_pid, expected_type=type_hints["ecm_pid"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument pat_interval", value=pat_interval, expected_type=type_hints["pat_interval"])
            check_type(argname="argument pcr_control", value=pcr_control, expected_type=type_hints["pcr_control"])
            check_type(argname="argument pcr_period", value=pcr_period, expected_type=type_hints["pcr_period"])
            check_type(argname="argument pcr_pid", value=pcr_pid, expected_type=type_hints["pcr_pid"])
            check_type(argname="argument pmt_interval", value=pmt_interval, expected_type=type_hints["pmt_interval"])
            check_type(argname="argument pmt_pid", value=pmt_pid, expected_type=type_hints["pmt_pid"])
            check_type(argname="argument program_num", value=program_num, expected_type=type_hints["program_num"])
            check_type(argname="argument scte35_behavior", value=scte35_behavior, expected_type=type_hints["scte35_behavior"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
            check_type(argname="argument timed_metadata_pid", value=timed_metadata_pid, expected_type=type_hints["timed_metadata_pid"])
            check_type(argname="argument transport_stream_id", value=transport_stream_id, expected_type=type_hints["transport_stream_id"])
            check_type(argname="argument video_pid", value=video_pid, expected_type=type_hints["video_pid"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_frames_per_pes is not None:
            self._values["audio_frames_per_pes"] = audio_frames_per_pes
        if audio_pids is not None:
            self._values["audio_pids"] = audio_pids
        if ecm_pid is not None:
            self._values["ecm_pid"] = ecm_pid
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if pat_interval is not None:
            self._values["pat_interval"] = pat_interval
        if pcr_control is not None:
            self._values["pcr_control"] = pcr_control
        if pcr_period is not None:
            self._values["pcr_period"] = pcr_period
        if pcr_pid is not None:
            self._values["pcr_pid"] = pcr_pid
        if pmt_interval is not None:
            self._values["pmt_interval"] = pmt_interval
        if pmt_pid is not None:
            self._values["pmt_pid"] = pmt_pid
        if program_num is not None:
            self._values["program_num"] = program_num
        if scte35_behavior is not None:
            self._values["scte35_behavior"] = scte35_behavior
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior
        if timed_metadata_pid is not None:
            self._values["timed_metadata_pid"] = timed_metadata_pid
        if transport_stream_id is not None:
            self._values["transport_stream_id"] = transport_stream_id
        if video_pid is not None:
            self._values["video_pid"] = video_pid

    @builtins.property
    def audio_frames_per_pes(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.'''
        result = self._values.get("audio_frames_per_pes")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def audio_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.'''
        result = self._values.get("audio_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ecm_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.'''
        result = self._values.get("ecm_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pat_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.'''
        result = self._values.get("pat_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.'''
        result = self._values.get("pcr_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pcr_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.'''
        result = self._values.get("pcr_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.'''
        result = self._values.get("pcr_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pmt_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.'''
        result = self._values.get("pmt_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pmt_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.'''
        result = self._values.get("pmt_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_num(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.'''
        result = self._values.get("program_num")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def scte35_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_behavior MedialiveChannel#scte35_behavior}.'''
        result = self._values.get("scte35_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.'''
        result = self._values.get("timed_metadata_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transport_stream_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.'''
        result = self._values.get("transport_stream_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.'''
        result = self._values.get("video_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAudioFramesPerPes")
    def reset_audio_frames_per_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioFramesPerPes", []))

    @jsii.member(jsii_name="resetAudioPids")
    def reset_audio_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPids", []))

    @jsii.member(jsii_name="resetEcmPid")
    def reset_ecm_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcmPid", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetPatInterval")
    def reset_pat_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPatInterval", []))

    @jsii.member(jsii_name="resetPcrControl")
    def reset_pcr_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrControl", []))

    @jsii.member(jsii_name="resetPcrPeriod")
    def reset_pcr_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPeriod", []))

    @jsii.member(jsii_name="resetPcrPid")
    def reset_pcr_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPid", []))

    @jsii.member(jsii_name="resetPmtInterval")
    def reset_pmt_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtInterval", []))

    @jsii.member(jsii_name="resetPmtPid")
    def reset_pmt_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtPid", []))

    @jsii.member(jsii_name="resetProgramNum")
    def reset_program_num(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramNum", []))

    @jsii.member(jsii_name="resetScte35Behavior")
    def reset_scte35_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Behavior", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @jsii.member(jsii_name="resetTimedMetadataPid")
    def reset_timed_metadata_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataPid", []))

    @jsii.member(jsii_name="resetTransportStreamId")
    def reset_transport_stream_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransportStreamId", []))

    @jsii.member(jsii_name="resetVideoPid")
    def reset_video_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoPid", []))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPesInput")
    def audio_frames_per_pes_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioFramesPerPesInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidsInput")
    def audio_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="ecmPidInput")
    def ecm_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ecmPidInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="patIntervalInput")
    def pat_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "patIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrControlInput")
    def pcr_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrControlInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPeriodInput")
    def pcr_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pcrPeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPidInput")
    def pcr_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrPidInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtIntervalInput")
    def pmt_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pmtIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtPidInput")
    def pmt_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pmtPidInput"))

    @builtins.property
    @jsii.member(jsii_name="programNumInput")
    def program_num_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programNumInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35BehaviorInput")
    def scte35_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPidInput")
    def timed_metadata_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataPidInput"))

    @builtins.property
    @jsii.member(jsii_name="transportStreamIdInput")
    def transport_stream_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "transportStreamIdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoPidInput")
    def video_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoPidInput"))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPes")
    def audio_frames_per_pes(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioFramesPerPes"))

    @audio_frames_per_pes.setter
    def audio_frames_per_pes(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioFramesPerPes", value)

    @builtins.property
    @jsii.member(jsii_name="audioPids")
    def audio_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioPids"))

    @audio_pids.setter
    def audio_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioPids", value)

    @builtins.property
    @jsii.member(jsii_name="ecmPid")
    def ecm_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ecmPid"))

    @ecm_pid.setter
    def ecm_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ecmPid", value)

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value)

    @builtins.property
    @jsii.member(jsii_name="patInterval")
    def pat_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "patInterval"))

    @pat_interval.setter
    def pat_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "patInterval", value)

    @builtins.property
    @jsii.member(jsii_name="pcrControl")
    def pcr_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrControl"))

    @pcr_control.setter
    def pcr_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrControl", value)

    @builtins.property
    @jsii.member(jsii_name="pcrPeriod")
    def pcr_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pcrPeriod"))

    @pcr_period.setter
    def pcr_period(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPeriod", value)

    @builtins.property
    @jsii.member(jsii_name="pcrPid")
    def pcr_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrPid"))

    @pcr_pid.setter
    def pcr_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPid", value)

    @builtins.property
    @jsii.member(jsii_name="pmtInterval")
    def pmt_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pmtInterval"))

    @pmt_interval.setter
    def pmt_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtInterval", value)

    @builtins.property
    @jsii.member(jsii_name="pmtPid")
    def pmt_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pmtPid"))

    @pmt_pid.setter
    def pmt_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtPid", value)

    @builtins.property
    @jsii.member(jsii_name="programNum")
    def program_num(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programNum"))

    @program_num.setter
    def program_num(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programNum", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Behavior")
    def scte35_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Behavior"))

    @scte35_behavior.setter
    def scte35_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Behavior", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPid")
    def timed_metadata_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataPid"))

    @timed_metadata_pid.setter
    def timed_metadata_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataPid", value)

    @builtins.property
    @jsii.member(jsii_name="transportStreamId")
    def transport_stream_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "transportStreamId"))

    @transport_stream_id.setter
    def transport_stream_id(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transportStreamId", value)

    @builtins.property
    @jsii.member(jsii_name="videoPid")
    def video_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoPid"))

    @video_pid.setter
    def video_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoPid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putM3U8Settings")
    def put_m3_u8_settings(
        self,
        *,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        scte35_behavior: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param pat_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.
        :param scte35_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_behavior MedialiveChannel#scte35_behavior}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings(
            audio_frames_per_pes=audio_frames_per_pes,
            audio_pids=audio_pids,
            ecm_pid=ecm_pid,
            nielsen_id3_behavior=nielsen_id3_behavior,
            pat_interval=pat_interval,
            pcr_control=pcr_control,
            pcr_period=pcr_period,
            pcr_pid=pcr_pid,
            pmt_interval=pmt_interval,
            pmt_pid=pmt_pid,
            program_num=program_num,
            scte35_behavior=scte35_behavior,
            scte35_pid=scte35_pid,
            timed_metadata_behavior=timed_metadata_behavior,
            timed_metadata_pid=timed_metadata_pid,
            transport_stream_id=transport_stream_id,
            video_pid=video_pid,
        )

        return typing.cast(None, jsii.invoke(self, "putM3U8Settings", [value]))

    @jsii.member(jsii_name="resetAudioRenditionSets")
    def reset_audio_rendition_sets(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioRenditionSets", []))

    @builtins.property
    @jsii.member(jsii_name="m3U8Settings")
    def m3_u8_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference, jsii.get(self, "m3U8Settings"))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSetsInput")
    def audio_rendition_sets_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioRenditionSetsInput"))

    @builtins.property
    @jsii.member(jsii_name="m3U8SettingsInput")
    def m3_u8_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings], jsii.get(self, "m3U8SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSets")
    def audio_rendition_sets(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioRenditionSets"))

    @audio_rendition_sets.setter
    def audio_rendition_sets(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioRenditionSets", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putHlsSettings")
    def put_hls_settings(
        self,
        *,
        audio_only_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings, typing.Dict[str, typing.Any]]] = None,
        fmp4_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings, typing.Dict[str, typing.Any]]] = None,
        frame_capture_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings, typing.Dict[str, typing.Any]]] = None,
        standard_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_only_hls_settings: audio_only_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_only_hls_settings MedialiveChannel#audio_only_hls_settings}
        :param fmp4_hls_settings: fmp4_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fmp4_hls_settings MedialiveChannel#fmp4_hls_settings}
        :param frame_capture_hls_settings: frame_capture_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_hls_settings MedialiveChannel#frame_capture_hls_settings}
        :param standard_hls_settings: standard_hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#standard_hls_settings MedialiveChannel#standard_hls_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings(
            audio_only_hls_settings=audio_only_hls_settings,
            fmp4_hls_settings=fmp4_hls_settings,
            frame_capture_hls_settings=frame_capture_hls_settings,
            standard_hls_settings=standard_hls_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsSettings", [value]))

    @jsii.member(jsii_name="resetH265PackagingType")
    def reset_h265_packaging_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH265PackagingType", []))

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @jsii.member(jsii_name="resetSegmentModifier")
    def reset_segment_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentModifier", []))

    @builtins.property
    @jsii.member(jsii_name="hlsSettings")
    def hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference, jsii.get(self, "hlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingTypeInput")
    def h265_packaging_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "h265PackagingTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsSettingsInput")
    def hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings], jsii.get(self, "hlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentModifierInput")
    def segment_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingType")
    def h265_packaging_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "h265PackagingType"))

    @h265_packaging_type.setter
    def h265_packaging_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "h265PackagingType", value)

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value)

    @builtins.property
    @jsii.member(jsii_name="segmentModifier")
    def segment_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentModifier"))

    @segment_modifier.setter
    def segment_modifier(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentModifier", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "h265_packaging_type": "h265PackagingType",
        "name_modifier": "nameModifier",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings:
    def __init__(
        self,
        *,
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        if __debug__:
            def stub(
                *,
                h265_packaging_type: typing.Optional[builtins.str] = None,
                name_modifier: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument h265_packaging_type", value=h265_packaging_type, expected_type=type_hints["h265_packaging_type"])
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
        self._values: typing.Dict[str, typing.Any] = {}
        if h265_packaging_type is not None:
            self._values["h265_packaging_type"] = h265_packaging_type
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier

    @builtins.property
    def h265_packaging_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.'''
        result = self._values.get("h265_packaging_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetH265PackagingType")
    def reset_h265_packaging_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH265PackagingType", []))

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingTypeInput")
    def h265_packaging_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "h265PackagingTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingType")
    def h265_packaging_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "h265PackagingType"))

    @h265_packaging_type.setter
    def h265_packaging_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "h265PackagingType", value)

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings",
    jsii_struct_bases=[],
    name_mapping={"destination": "destination"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination", typing.Dict[str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination(**destination)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination, typing.Dict[str, typing.Any]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination", result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putArchiveOutputSettings")
    def put_archive_output_settings(
        self,
        *,
        container_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings, typing.Dict[str, typing.Any]]] = None,
        extension: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param extension: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#extension MedialiveChannel#extension}.
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings(
            container_settings=container_settings,
            extension=extension,
            name_modifier=name_modifier,
        )

        return typing.cast(None, jsii.invoke(self, "putArchiveOutputSettings", [value]))

    @jsii.member(jsii_name="putFrameCaptureOutputSettings")
    def put_frame_capture_output_settings(
        self,
        *,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings(
            name_modifier=name_modifier
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureOutputSettings", [value]))

    @jsii.member(jsii_name="putHlsOutputSettings")
    def put_hls_output_settings(
        self,
        *,
        hls_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings, typing.Dict[str, typing.Any]],
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
        segment_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_settings: hls_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_settings MedialiveChannel#hls_settings}
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        :param segment_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segment_modifier MedialiveChannel#segment_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings(
            hls_settings=hls_settings,
            h265_packaging_type=h265_packaging_type,
            name_modifier=name_modifier,
            segment_modifier=segment_modifier,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsOutputSettings", [value]))

    @jsii.member(jsii_name="putMediaPackageOutputSettings")
    def put_media_package_output_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings()

        return typing.cast(None, jsii.invoke(self, "putMediaPackageOutputSettings", [value]))

    @jsii.member(jsii_name="putMsSmoothOutputSettings")
    def put_ms_smooth_output_settings(
        self,
        *,
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings(
            h265_packaging_type=h265_packaging_type, name_modifier=name_modifier
        )

        return typing.cast(None, jsii.invoke(self, "putMsSmoothOutputSettings", [value]))

    @jsii.member(jsii_name="putMultiplexOutputSettings")
    def put_multiplex_output_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination, typing.Dict[str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings(
            destination=destination
        )

        return typing.cast(None, jsii.invoke(self, "putMultiplexOutputSettings", [value]))

    @jsii.member(jsii_name="putRtmpOutputSettings")
    def put_rtmp_output_settings(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination", typing.Dict[str, typing.Any]],
        certficate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param certficate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#certficate_mode MedialiveChannel#certficate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings(
            destination=destination,
            certficate_mode=certficate_mode,
            connection_retry_interval=connection_retry_interval,
            num_retries=num_retries,
        )

        return typing.cast(None, jsii.invoke(self, "putRtmpOutputSettings", [value]))

    @jsii.member(jsii_name="putUdpOutputSettings")
    def put_udp_output_settings(
        self,
        *,
        container_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings", typing.Dict[str, typing.Any]],
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination", typing.Dict[str, typing.Any]],
        buffer_msec: typing.Optional[jsii.Number] = None,
        fec_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param buffer_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_msec MedialiveChannel#buffer_msec}.
        :param fec_output_settings: fec_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fec_output_settings MedialiveChannel#fec_output_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings(
            container_settings=container_settings,
            destination=destination,
            buffer_msec=buffer_msec,
            fec_output_settings=fec_output_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putUdpOutputSettings", [value]))

    @jsii.member(jsii_name="resetArchiveOutputSettings")
    def reset_archive_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveOutputSettings", []))

    @jsii.member(jsii_name="resetFrameCaptureOutputSettings")
    def reset_frame_capture_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureOutputSettings", []))

    @jsii.member(jsii_name="resetHlsOutputSettings")
    def reset_hls_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsOutputSettings", []))

    @jsii.member(jsii_name="resetMediaPackageOutputSettings")
    def reset_media_package_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaPackageOutputSettings", []))

    @jsii.member(jsii_name="resetMsSmoothOutputSettings")
    def reset_ms_smooth_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMsSmoothOutputSettings", []))

    @jsii.member(jsii_name="resetMultiplexOutputSettings")
    def reset_multiplex_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMultiplexOutputSettings", []))

    @jsii.member(jsii_name="resetRtmpOutputSettings")
    def reset_rtmp_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRtmpOutputSettings", []))

    @jsii.member(jsii_name="resetUdpOutputSettings")
    def reset_udp_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUdpOutputSettings", []))

    @builtins.property
    @jsii.member(jsii_name="archiveOutputSettings")
    def archive_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference, jsii.get(self, "archiveOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureOutputSettings")
    def frame_capture_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference, jsii.get(self, "frameCaptureOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsOutputSettings")
    def hls_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference, jsii.get(self, "hlsOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageOutputSettings")
    def media_package_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference, jsii.get(self, "mediaPackageOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothOutputSettings")
    def ms_smooth_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference, jsii.get(self, "msSmoothOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="multiplexOutputSettings")
    def multiplex_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference, jsii.get(self, "multiplexOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="rtmpOutputSettings")
    def rtmp_output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference", jsii.get(self, "rtmpOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="udpOutputSettings")
    def udp_output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference", jsii.get(self, "udpOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="archiveOutputSettingsInput")
    def archive_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings], jsii.get(self, "archiveOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureOutputSettingsInput")
    def frame_capture_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings], jsii.get(self, "frameCaptureOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsOutputSettingsInput")
    def hls_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings], jsii.get(self, "hlsOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageOutputSettingsInput")
    def media_package_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings], jsii.get(self, "mediaPackageOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothOutputSettingsInput")
    def ms_smooth_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings], jsii.get(self, "msSmoothOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexOutputSettingsInput")
    def multiplex_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings], jsii.get(self, "multiplexOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rtmpOutputSettingsInput")
    def rtmp_output_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"], jsii.get(self, "rtmpOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="udpOutputSettingsInput")
    def udp_output_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"], jsii.get(self, "udpOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "certficate_mode": "certficateMode",
        "connection_retry_interval": "connectionRetryInterval",
        "num_retries": "numRetries",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination", typing.Dict[str, typing.Any]],
        certficate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param certficate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#certficate_mode MedialiveChannel#certficate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param num_retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination(**destination)
        if __debug__:
            def stub(
                *,
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination, typing.Dict[str, typing.Any]],
                certficate_mode: typing.Optional[builtins.str] = None,
                connection_retry_interval: typing.Optional[jsii.Number] = None,
                num_retries: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument certficate_mode", value=certficate_mode, expected_type=type_hints["certficate_mode"])
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination": destination,
        }
        if certficate_mode is not None:
            self._values["certficate_mode"] = certficate_mode
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if num_retries is not None:
            self._values["num_retries"] = num_retries

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination", result)

    @builtins.property
    def certficate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#certficate_mode MedialiveChannel#certficate_mode}.'''
        result = self._values.get("certficate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="resetCertficateMode")
    def reset_certficate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertficateMode", []))

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="certficateModeInput")
    def certficate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "certficateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="certficateMode")
    def certficate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "certficateMode"))

    @certficate_mode.setter
    def certficate_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certficateMode", value)

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "container_settings": "containerSettings",
        "destination": "destination",
        "buffer_msec": "bufferMsec",
        "fec_output_settings": "fecOutputSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings:
    def __init__(
        self,
        *,
        container_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings", typing.Dict[str, typing.Any]],
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination", typing.Dict[str, typing.Any]],
        buffer_msec: typing.Optional[jsii.Number] = None,
        fec_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param destination: destination block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        :param buffer_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_msec MedialiveChannel#buffer_msec}.
        :param fec_output_settings: fec_output_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fec_output_settings MedialiveChannel#fec_output_settings}
        '''
        if isinstance(container_settings, dict):
            container_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings(**container_settings)
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination(**destination)
        if isinstance(fec_output_settings, dict):
            fec_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings(**fec_output_settings)
        if __debug__:
            def stub(
                *,
                container_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings, typing.Dict[str, typing.Any]],
                destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination, typing.Dict[str, typing.Any]],
                buffer_msec: typing.Optional[jsii.Number] = None,
                fec_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument container_settings", value=container_settings, expected_type=type_hints["container_settings"])
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument buffer_msec", value=buffer_msec, expected_type=type_hints["buffer_msec"])
            check_type(argname="argument fec_output_settings", value=fec_output_settings, expected_type=type_hints["fec_output_settings"])
        self._values: typing.Dict[str, typing.Any] = {
            "container_settings": container_settings,
            "destination": destination,
        }
        if buffer_msec is not None:
            self._values["buffer_msec"] = buffer_msec
        if fec_output_settings is not None:
            self._values["fec_output_settings"] = fec_output_settings

    @builtins.property
    def container_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings":
        '''container_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#container_settings MedialiveChannel#container_settings}
        '''
        result = self._values.get("container_settings")
        assert result is not None, "Required property 'container_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings", result)

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination", result)

    @builtins.property
    def buffer_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_msec MedialiveChannel#buffer_msec}.'''
        result = self._values.get("buffer_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def fec_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings"]:
        '''fec_output_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fec_output_settings MedialiveChannel#fec_output_settings}
        '''
        result = self._values.get("fec_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings",
    jsii_struct_bases=[],
    name_mapping={"m2_ts_settings": "m2TsSettings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings:
    def __init__(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        if isinstance(m2_ts_settings, dict):
            m2_ts_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings(**m2_ts_settings)
        if __debug__:
            def stub(
                *,
                m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument m2_ts_settings", value=m2_ts_settings, expected_type=type_hints["m2_ts_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if m2_ts_settings is not None:
            self._values["m2_ts_settings"] = m2_ts_settings

    @builtins.property
    def m2_ts_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings"]:
        '''m2ts_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        result = self._values.get("m2_ts_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "absent_input_audio_behavior": "absentInputAudioBehavior",
        "arib": "arib",
        "arib_captions_pid": "aribCaptionsPid",
        "arib_captions_pid_control": "aribCaptionsPidControl",
        "audio_buffer_model": "audioBufferModel",
        "audio_frames_per_pes": "audioFramesPerPes",
        "audio_pids": "audioPids",
        "audio_stream_type": "audioStreamType",
        "bitrate": "bitrate",
        "buffer_model": "bufferModel",
        "cc_descriptor": "ccDescriptor",
        "dvb_nit_settings": "dvbNitSettings",
        "dvb_sdt_settings": "dvbSdtSettings",
        "dvb_sub_pids": "dvbSubPids",
        "dvb_tdt_settings": "dvbTdtSettings",
        "dvb_teletext_pid": "dvbTeletextPid",
        "ebif": "ebif",
        "ebp_audio_interval": "ebpAudioInterval",
        "ebp_lookahead_ms": "ebpLookaheadMs",
        "ebp_placement": "ebpPlacement",
        "ecm_pid": "ecmPid",
        "es_rate_in_pes": "esRateInPes",
        "etv_platform_pid": "etvPlatformPid",
        "etv_signal_pid": "etvSignalPid",
        "fragment_time": "fragmentTime",
        "klv": "klv",
        "klv_data_pids": "klvDataPids",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "null_packet_bitrate": "nullPacketBitrate",
        "pat_interval": "patInterval",
        "pcr_control": "pcrControl",
        "pcr_period": "pcrPeriod",
        "pcr_pid": "pcrPid",
        "pmt_interval": "pmtInterval",
        "pmt_pid": "pmtPid",
        "program_num": "programNum",
        "rate_mode": "rateMode",
        "scte27_pids": "scte27Pids",
        "scte35_control": "scte35Control",
        "scte35_pid": "scte35Pid",
        "segmentation_markers": "segmentationMarkers",
        "segmentation_style": "segmentationStyle",
        "segmentation_time": "segmentationTime",
        "timed_metadata_behavior": "timedMetadataBehavior",
        "timed_metadata_pid": "timedMetadataPid",
        "transport_stream_id": "transportStreamId",
        "video_pid": "videoPid",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings:
    def __init__(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        if isinstance(dvb_nit_settings, dict):
            dvb_nit_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(**dvb_nit_settings)
        if isinstance(dvb_sdt_settings, dict):
            dvb_sdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(**dvb_sdt_settings)
        if isinstance(dvb_tdt_settings, dict):
            dvb_tdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(**dvb_tdt_settings)
        if __debug__:
            def stub(
                *,
                absent_input_audio_behavior: typing.Optional[builtins.str] = None,
                arib: typing.Optional[builtins.str] = None,
                arib_captions_pid: typing.Optional[builtins.str] = None,
                arib_captions_pid_control: typing.Optional[builtins.str] = None,
                audio_buffer_model: typing.Optional[builtins.str] = None,
                audio_frames_per_pes: typing.Optional[jsii.Number] = None,
                audio_pids: typing.Optional[builtins.str] = None,
                audio_stream_type: typing.Optional[builtins.str] = None,
                bitrate: typing.Optional[jsii.Number] = None,
                buffer_model: typing.Optional[builtins.str] = None,
                cc_descriptor: typing.Optional[builtins.str] = None,
                dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_sub_pids: typing.Optional[builtins.str] = None,
                dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_teletext_pid: typing.Optional[builtins.str] = None,
                ebif: typing.Optional[builtins.str] = None,
                ebp_audio_interval: typing.Optional[builtins.str] = None,
                ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
                ebp_placement: typing.Optional[builtins.str] = None,
                ecm_pid: typing.Optional[builtins.str] = None,
                es_rate_in_pes: typing.Optional[builtins.str] = None,
                etv_platform_pid: typing.Optional[builtins.str] = None,
                etv_signal_pid: typing.Optional[builtins.str] = None,
                fragment_time: typing.Optional[jsii.Number] = None,
                klv: typing.Optional[builtins.str] = None,
                klv_data_pids: typing.Optional[builtins.str] = None,
                nielsen_id3_behavior: typing.Optional[builtins.str] = None,
                null_packet_bitrate: typing.Optional[jsii.Number] = None,
                pat_interval: typing.Optional[jsii.Number] = None,
                pcr_control: typing.Optional[builtins.str] = None,
                pcr_period: typing.Optional[jsii.Number] = None,
                pcr_pid: typing.Optional[builtins.str] = None,
                pmt_interval: typing.Optional[jsii.Number] = None,
                pmt_pid: typing.Optional[builtins.str] = None,
                program_num: typing.Optional[jsii.Number] = None,
                rate_mode: typing.Optional[builtins.str] = None,
                scte27_pids: typing.Optional[builtins.str] = None,
                scte35_control: typing.Optional[builtins.str] = None,
                scte35_pid: typing.Optional[builtins.str] = None,
                segmentation_markers: typing.Optional[builtins.str] = None,
                segmentation_style: typing.Optional[builtins.str] = None,
                segmentation_time: typing.Optional[jsii.Number] = None,
                timed_metadata_behavior: typing.Optional[builtins.str] = None,
                timed_metadata_pid: typing.Optional[builtins.str] = None,
                transport_stream_id: typing.Optional[jsii.Number] = None,
                video_pid: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument absent_input_audio_behavior", value=absent_input_audio_behavior, expected_type=type_hints["absent_input_audio_behavior"])
            check_type(argname="argument arib", value=arib, expected_type=type_hints["arib"])
            check_type(argname="argument arib_captions_pid", value=arib_captions_pid, expected_type=type_hints["arib_captions_pid"])
            check_type(argname="argument arib_captions_pid_control", value=arib_captions_pid_control, expected_type=type_hints["arib_captions_pid_control"])
            check_type(argname="argument audio_buffer_model", value=audio_buffer_model, expected_type=type_hints["audio_buffer_model"])
            check_type(argname="argument audio_frames_per_pes", value=audio_frames_per_pes, expected_type=type_hints["audio_frames_per_pes"])
            check_type(argname="argument audio_pids", value=audio_pids, expected_type=type_hints["audio_pids"])
            check_type(argname="argument audio_stream_type", value=audio_stream_type, expected_type=type_hints["audio_stream_type"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument buffer_model", value=buffer_model, expected_type=type_hints["buffer_model"])
            check_type(argname="argument cc_descriptor", value=cc_descriptor, expected_type=type_hints["cc_descriptor"])
            check_type(argname="argument dvb_nit_settings", value=dvb_nit_settings, expected_type=type_hints["dvb_nit_settings"])
            check_type(argname="argument dvb_sdt_settings", value=dvb_sdt_settings, expected_type=type_hints["dvb_sdt_settings"])
            check_type(argname="argument dvb_sub_pids", value=dvb_sub_pids, expected_type=type_hints["dvb_sub_pids"])
            check_type(argname="argument dvb_tdt_settings", value=dvb_tdt_settings, expected_type=type_hints["dvb_tdt_settings"])
            check_type(argname="argument dvb_teletext_pid", value=dvb_teletext_pid, expected_type=type_hints["dvb_teletext_pid"])
            check_type(argname="argument ebif", value=ebif, expected_type=type_hints["ebif"])
            check_type(argname="argument ebp_audio_interval", value=ebp_audio_interval, expected_type=type_hints["ebp_audio_interval"])
            check_type(argname="argument ebp_lookahead_ms", value=ebp_lookahead_ms, expected_type=type_hints["ebp_lookahead_ms"])
            check_type(argname="argument ebp_placement", value=ebp_placement, expected_type=type_hints["ebp_placement"])
            check_type(argname="argument ecm_pid", value=ecm_pid, expected_type=type_hints["ecm_pid"])
            check_type(argname="argument es_rate_in_pes", value=es_rate_in_pes, expected_type=type_hints["es_rate_in_pes"])
            check_type(argname="argument etv_platform_pid", value=etv_platform_pid, expected_type=type_hints["etv_platform_pid"])
            check_type(argname="argument etv_signal_pid", value=etv_signal_pid, expected_type=type_hints["etv_signal_pid"])
            check_type(argname="argument fragment_time", value=fragment_time, expected_type=type_hints["fragment_time"])
            check_type(argname="argument klv", value=klv, expected_type=type_hints["klv"])
            check_type(argname="argument klv_data_pids", value=klv_data_pids, expected_type=type_hints["klv_data_pids"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument null_packet_bitrate", value=null_packet_bitrate, expected_type=type_hints["null_packet_bitrate"])
            check_type(argname="argument pat_interval", value=pat_interval, expected_type=type_hints["pat_interval"])
            check_type(argname="argument pcr_control", value=pcr_control, expected_type=type_hints["pcr_control"])
            check_type(argname="argument pcr_period", value=pcr_period, expected_type=type_hints["pcr_period"])
            check_type(argname="argument pcr_pid", value=pcr_pid, expected_type=type_hints["pcr_pid"])
            check_type(argname="argument pmt_interval", value=pmt_interval, expected_type=type_hints["pmt_interval"])
            check_type(argname="argument pmt_pid", value=pmt_pid, expected_type=type_hints["pmt_pid"])
            check_type(argname="argument program_num", value=program_num, expected_type=type_hints["program_num"])
            check_type(argname="argument rate_mode", value=rate_mode, expected_type=type_hints["rate_mode"])
            check_type(argname="argument scte27_pids", value=scte27_pids, expected_type=type_hints["scte27_pids"])
            check_type(argname="argument scte35_control", value=scte35_control, expected_type=type_hints["scte35_control"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument segmentation_markers", value=segmentation_markers, expected_type=type_hints["segmentation_markers"])
            check_type(argname="argument segmentation_style", value=segmentation_style, expected_type=type_hints["segmentation_style"])
            check_type(argname="argument segmentation_time", value=segmentation_time, expected_type=type_hints["segmentation_time"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
            check_type(argname="argument timed_metadata_pid", value=timed_metadata_pid, expected_type=type_hints["timed_metadata_pid"])
            check_type(argname="argument transport_stream_id", value=transport_stream_id, expected_type=type_hints["transport_stream_id"])
            check_type(argname="argument video_pid", value=video_pid, expected_type=type_hints["video_pid"])
        self._values: typing.Dict[str, typing.Any] = {}
        if absent_input_audio_behavior is not None:
            self._values["absent_input_audio_behavior"] = absent_input_audio_behavior
        if arib is not None:
            self._values["arib"] = arib
        if arib_captions_pid is not None:
            self._values["arib_captions_pid"] = arib_captions_pid
        if arib_captions_pid_control is not None:
            self._values["arib_captions_pid_control"] = arib_captions_pid_control
        if audio_buffer_model is not None:
            self._values["audio_buffer_model"] = audio_buffer_model
        if audio_frames_per_pes is not None:
            self._values["audio_frames_per_pes"] = audio_frames_per_pes
        if audio_pids is not None:
            self._values["audio_pids"] = audio_pids
        if audio_stream_type is not None:
            self._values["audio_stream_type"] = audio_stream_type
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if buffer_model is not None:
            self._values["buffer_model"] = buffer_model
        if cc_descriptor is not None:
            self._values["cc_descriptor"] = cc_descriptor
        if dvb_nit_settings is not None:
            self._values["dvb_nit_settings"] = dvb_nit_settings
        if dvb_sdt_settings is not None:
            self._values["dvb_sdt_settings"] = dvb_sdt_settings
        if dvb_sub_pids is not None:
            self._values["dvb_sub_pids"] = dvb_sub_pids
        if dvb_tdt_settings is not None:
            self._values["dvb_tdt_settings"] = dvb_tdt_settings
        if dvb_teletext_pid is not None:
            self._values["dvb_teletext_pid"] = dvb_teletext_pid
        if ebif is not None:
            self._values["ebif"] = ebif
        if ebp_audio_interval is not None:
            self._values["ebp_audio_interval"] = ebp_audio_interval
        if ebp_lookahead_ms is not None:
            self._values["ebp_lookahead_ms"] = ebp_lookahead_ms
        if ebp_placement is not None:
            self._values["ebp_placement"] = ebp_placement
        if ecm_pid is not None:
            self._values["ecm_pid"] = ecm_pid
        if es_rate_in_pes is not None:
            self._values["es_rate_in_pes"] = es_rate_in_pes
        if etv_platform_pid is not None:
            self._values["etv_platform_pid"] = etv_platform_pid
        if etv_signal_pid is not None:
            self._values["etv_signal_pid"] = etv_signal_pid
        if fragment_time is not None:
            self._values["fragment_time"] = fragment_time
        if klv is not None:
            self._values["klv"] = klv
        if klv_data_pids is not None:
            self._values["klv_data_pids"] = klv_data_pids
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if null_packet_bitrate is not None:
            self._values["null_packet_bitrate"] = null_packet_bitrate
        if pat_interval is not None:
            self._values["pat_interval"] = pat_interval
        if pcr_control is not None:
            self._values["pcr_control"] = pcr_control
        if pcr_period is not None:
            self._values["pcr_period"] = pcr_period
        if pcr_pid is not None:
            self._values["pcr_pid"] = pcr_pid
        if pmt_interval is not None:
            self._values["pmt_interval"] = pmt_interval
        if pmt_pid is not None:
            self._values["pmt_pid"] = pmt_pid
        if program_num is not None:
            self._values["program_num"] = program_num
        if rate_mode is not None:
            self._values["rate_mode"] = rate_mode
        if scte27_pids is not None:
            self._values["scte27_pids"] = scte27_pids
        if scte35_control is not None:
            self._values["scte35_control"] = scte35_control
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if segmentation_markers is not None:
            self._values["segmentation_markers"] = segmentation_markers
        if segmentation_style is not None:
            self._values["segmentation_style"] = segmentation_style
        if segmentation_time is not None:
            self._values["segmentation_time"] = segmentation_time
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior
        if timed_metadata_pid is not None:
            self._values["timed_metadata_pid"] = timed_metadata_pid
        if transport_stream_id is not None:
            self._values["transport_stream_id"] = transport_stream_id
        if video_pid is not None:
            self._values["video_pid"] = video_pid

    @builtins.property
    def absent_input_audio_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.'''
        result = self._values.get("absent_input_audio_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib MedialiveChannel#arib}.'''
        result = self._values.get("arib")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.'''
        result = self._values.get("arib_captions_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.'''
        result = self._values.get("arib_captions_pid_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.'''
        result = self._values.get("audio_buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_frames_per_pes(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.'''
        result = self._values.get("audio_frames_per_pes")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def audio_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.'''
        result = self._values.get("audio_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_stream_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.'''
        result = self._values.get("audio_stream_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_model MedialiveChannel#buffer_model}.'''
        result = self._values.get("buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cc_descriptor(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.'''
        result = self._values.get("cc_descriptor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_nit_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"]:
        '''dvb_nit_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        '''
        result = self._values.get("dvb_nit_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"], result)

    @builtins.property
    def dvb_sdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"]:
        '''dvb_sdt_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        '''
        result = self._values.get("dvb_sdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"], result)

    @builtins.property
    def dvb_sub_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.'''
        result = self._values.get("dvb_sub_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_tdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"]:
        '''dvb_tdt_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        '''
        result = self._values.get("dvb_tdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"], result)

    @builtins.property
    def dvb_teletext_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.'''
        result = self._values.get("dvb_teletext_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebif(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebif MedialiveChannel#ebif}.'''
        result = self._values.get("ebif")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_audio_interval(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.'''
        result = self._values.get("ebp_audio_interval")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_lookahead_ms(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.'''
        result = self._values.get("ebp_lookahead_ms")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ebp_placement(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.'''
        result = self._values.get("ebp_placement")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ecm_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.'''
        result = self._values.get("ecm_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def es_rate_in_pes(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.'''
        result = self._values.get("es_rate_in_pes")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_platform_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.'''
        result = self._values.get("etv_platform_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_signal_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.'''
        result = self._values.get("etv_signal_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def fragment_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_time MedialiveChannel#fragment_time}.'''
        result = self._values.get("fragment_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def klv(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv MedialiveChannel#klv}.'''
        result = self._values.get("klv")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def klv_data_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.'''
        result = self._values.get("klv_data_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def null_packet_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.'''
        result = self._values.get("null_packet_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pat_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.'''
        result = self._values.get("pat_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.'''
        result = self._values.get("pcr_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pcr_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.'''
        result = self._values.get("pcr_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.'''
        result = self._values.get("pcr_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pmt_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.'''
        result = self._values.get("pmt_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pmt_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.'''
        result = self._values.get("pmt_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_num(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.'''
        result = self._values.get("program_num")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_mode MedialiveChannel#rate_mode}.'''
        result = self._values.get("rate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte27_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.'''
        result = self._values.get("scte27_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_control MedialiveChannel#scte35_control}.'''
        result = self._values.get("scte35_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_markers(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.'''
        result = self._values.get("segmentation_markers")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_style(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.'''
        result = self._values.get("segmentation_style")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.'''
        result = self._values.get("segmentation_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.'''
        result = self._values.get("timed_metadata_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transport_stream_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.'''
        result = self._values.get("transport_stream_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.'''
        result = self._values.get("video_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    jsii_struct_bases=[],
    name_mapping={
        "network_id": "networkId",
        "network_name": "networkName",
        "rep_interval": "repInterval",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings:
    def __init__(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            def stub(
                *,
                network_id: jsii.Number,
                network_name: builtins.str,
                rep_interval: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument network_id", value=network_id, expected_type=type_hints["network_id"])
            check_type(argname="argument network_name", value=network_name, expected_type=type_hints["network_name"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[str, typing.Any] = {
            "network_id": network_id,
            "network_name": network_name,
        }
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def network_id(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_id MedialiveChannel#network_id}.'''
        result = self._values.get("network_id")
        assert result is not None, "Required property 'network_id' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def network_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_name MedialiveChannel#network_name}.'''
        result = self._values.get("network_name")
        assert result is not None, "Required property 'network_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="networkIdInput")
    def network_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "networkIdInput"))

    @builtins.property
    @jsii.member(jsii_name="networkNameInput")
    def network_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "networkNameInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="networkId")
    def network_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "networkId"))

    @network_id.setter
    def network_id(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkId", value)

    @builtins.property
    @jsii.member(jsii_name="networkName")
    def network_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "networkName"))

    @network_name.setter
    def network_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkName", value)

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    jsii_struct_bases=[],
    name_mapping={
        "output_sdt": "outputSdt",
        "rep_interval": "repInterval",
        "service_name": "serviceName",
        "service_provider_name": "serviceProviderName",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings:
    def __init__(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        if __debug__:
            def stub(
                *,
                output_sdt: typing.Optional[builtins.str] = None,
                rep_interval: typing.Optional[jsii.Number] = None,
                service_name: typing.Optional[builtins.str] = None,
                service_provider_name: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument output_sdt", value=output_sdt, expected_type=type_hints["output_sdt"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
            check_type(argname="argument service_name", value=service_name, expected_type=type_hints["service_name"])
            check_type(argname="argument service_provider_name", value=service_provider_name, expected_type=type_hints["service_provider_name"])
        self._values: typing.Dict[str, typing.Any] = {}
        if output_sdt is not None:
            self._values["output_sdt"] = output_sdt
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval
        if service_name is not None:
            self._values["service_name"] = service_name
        if service_provider_name is not None:
            self._values["service_provider_name"] = service_provider_name

    @builtins.property
    def output_sdt(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_sdt MedialiveChannel#output_sdt}.'''
        result = self._values.get("output_sdt")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def service_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_name MedialiveChannel#service_name}.'''
        result = self._values.get("service_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def service_provider_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.'''
        result = self._values.get("service_provider_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOutputSdt")
    def reset_output_sdt(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputSdt", []))

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @jsii.member(jsii_name="resetServiceName")
    def reset_service_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceName", []))

    @jsii.member(jsii_name="resetServiceProviderName")
    def reset_service_provider_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceProviderName", []))

    @builtins.property
    @jsii.member(jsii_name="outputSdtInput")
    def output_sdt_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputSdtInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceNameInput")
    def service_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceNameInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceProviderNameInput")
    def service_provider_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceProviderNameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSdt")
    def output_sdt(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputSdt"))

    @output_sdt.setter
    def output_sdt(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputSdt", value)

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value)

    @builtins.property
    @jsii.member(jsii_name="serviceName")
    def service_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceName"))

    @service_name.setter
    def service_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceName", value)

    @builtins.property
    @jsii.member(jsii_name="serviceProviderName")
    def service_provider_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceProviderName"))

    @service_provider_name.setter
    def service_provider_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceProviderName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    jsii_struct_bases=[],
    name_mapping={"rep_interval": "repInterval"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings:
    def __init__(self, *, rep_interval: typing.Optional[jsii.Number] = None) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            def stub(*, rep_interval: typing.Optional[jsii.Number] = None) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[str, typing.Any] = {}
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDvbNitSettings")
    def put_dvb_nit_settings(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(
            network_id=network_id, network_name=network_name, rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbNitSettings", [value]))

    @jsii.member(jsii_name="putDvbSdtSettings")
    def put_dvb_sdt_settings(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(
            output_sdt=output_sdt,
            rep_interval=rep_interval,
            service_name=service_name,
            service_provider_name=service_provider_name,
        )

        return typing.cast(None, jsii.invoke(self, "putDvbSdtSettings", [value]))

    @jsii.member(jsii_name="putDvbTdtSettings")
    def put_dvb_tdt_settings(
        self,
        *,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(
            rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbTdtSettings", [value]))

    @jsii.member(jsii_name="resetAbsentInputAudioBehavior")
    def reset_absent_input_audio_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAbsentInputAudioBehavior", []))

    @jsii.member(jsii_name="resetArib")
    def reset_arib(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArib", []))

    @jsii.member(jsii_name="resetAribCaptionsPid")
    def reset_arib_captions_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPid", []))

    @jsii.member(jsii_name="resetAribCaptionsPidControl")
    def reset_arib_captions_pid_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPidControl", []))

    @jsii.member(jsii_name="resetAudioBufferModel")
    def reset_audio_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioBufferModel", []))

    @jsii.member(jsii_name="resetAudioFramesPerPes")
    def reset_audio_frames_per_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioFramesPerPes", []))

    @jsii.member(jsii_name="resetAudioPids")
    def reset_audio_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPids", []))

    @jsii.member(jsii_name="resetAudioStreamType")
    def reset_audio_stream_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioStreamType", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBufferModel")
    def reset_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferModel", []))

    @jsii.member(jsii_name="resetCcDescriptor")
    def reset_cc_descriptor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCcDescriptor", []))

    @jsii.member(jsii_name="resetDvbNitSettings")
    def reset_dvb_nit_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbNitSettings", []))

    @jsii.member(jsii_name="resetDvbSdtSettings")
    def reset_dvb_sdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSdtSettings", []))

    @jsii.member(jsii_name="resetDvbSubPids")
    def reset_dvb_sub_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSubPids", []))

    @jsii.member(jsii_name="resetDvbTdtSettings")
    def reset_dvb_tdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTdtSettings", []))

    @jsii.member(jsii_name="resetDvbTeletextPid")
    def reset_dvb_teletext_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTeletextPid", []))

    @jsii.member(jsii_name="resetEbif")
    def reset_ebif(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbif", []))

    @jsii.member(jsii_name="resetEbpAudioInterval")
    def reset_ebp_audio_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpAudioInterval", []))

    @jsii.member(jsii_name="resetEbpLookaheadMs")
    def reset_ebp_lookahead_ms(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpLookaheadMs", []))

    @jsii.member(jsii_name="resetEbpPlacement")
    def reset_ebp_placement(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpPlacement", []))

    @jsii.member(jsii_name="resetEcmPid")
    def reset_ecm_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcmPid", []))

    @jsii.member(jsii_name="resetEsRateInPes")
    def reset_es_rate_in_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEsRateInPes", []))

    @jsii.member(jsii_name="resetEtvPlatformPid")
    def reset_etv_platform_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvPlatformPid", []))

    @jsii.member(jsii_name="resetEtvSignalPid")
    def reset_etv_signal_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvSignalPid", []))

    @jsii.member(jsii_name="resetFragmentTime")
    def reset_fragment_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFragmentTime", []))

    @jsii.member(jsii_name="resetKlv")
    def reset_klv(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlv", []))

    @jsii.member(jsii_name="resetKlvDataPids")
    def reset_klv_data_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlvDataPids", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetNullPacketBitrate")
    def reset_null_packet_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullPacketBitrate", []))

    @jsii.member(jsii_name="resetPatInterval")
    def reset_pat_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPatInterval", []))

    @jsii.member(jsii_name="resetPcrControl")
    def reset_pcr_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrControl", []))

    @jsii.member(jsii_name="resetPcrPeriod")
    def reset_pcr_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPeriod", []))

    @jsii.member(jsii_name="resetPcrPid")
    def reset_pcr_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPid", []))

    @jsii.member(jsii_name="resetPmtInterval")
    def reset_pmt_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtInterval", []))

    @jsii.member(jsii_name="resetPmtPid")
    def reset_pmt_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtPid", []))

    @jsii.member(jsii_name="resetProgramNum")
    def reset_program_num(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramNum", []))

    @jsii.member(jsii_name="resetRateMode")
    def reset_rate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateMode", []))

    @jsii.member(jsii_name="resetScte27Pids")
    def reset_scte27_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27Pids", []))

    @jsii.member(jsii_name="resetScte35Control")
    def reset_scte35_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Control", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetSegmentationMarkers")
    def reset_segmentation_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationMarkers", []))

    @jsii.member(jsii_name="resetSegmentationStyle")
    def reset_segmentation_style(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationStyle", []))

    @jsii.member(jsii_name="resetSegmentationTime")
    def reset_segmentation_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationTime", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @jsii.member(jsii_name="resetTimedMetadataPid")
    def reset_timed_metadata_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataPid", []))

    @jsii.member(jsii_name="resetTransportStreamId")
    def reset_transport_stream_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransportStreamId", []))

    @jsii.member(jsii_name="resetVideoPid")
    def reset_video_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoPid", []))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettings")
    def dvb_nit_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference, jsii.get(self, "dvbNitSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettings")
    def dvb_sdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference, jsii.get(self, "dvbSdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettings")
    def dvb_tdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference, jsii.get(self, "dvbTdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehaviorInput")
    def absent_input_audio_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "absentInputAudioBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControlInput")
    def arib_captions_pid_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidControlInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidInput")
    def arib_captions_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidInput"))

    @builtins.property
    @jsii.member(jsii_name="aribInput")
    def arib_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribInput"))

    @builtins.property
    @jsii.member(jsii_name="audioBufferModelInput")
    def audio_buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioBufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPesInput")
    def audio_frames_per_pes_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioFramesPerPesInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidsInput")
    def audio_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioStreamTypeInput")
    def audio_stream_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioStreamTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferModelInput")
    def buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="ccDescriptorInput")
    def cc_descriptor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ccDescriptorInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettingsInput")
    def dvb_nit_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "dvbNitSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettingsInput")
    def dvb_sdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "dvbSdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubPidsInput")
    def dvb_sub_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbSubPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettingsInput")
    def dvb_tdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "dvbTdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPidInput")
    def dvb_teletext_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbTeletextPidInput"))

    @builtins.property
    @jsii.member(jsii_name="ebifInput")
    def ebif_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebifInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpAudioIntervalInput")
    def ebp_audio_interval_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpAudioIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMsInput")
    def ebp_lookahead_ms_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ebpLookaheadMsInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpPlacementInput")
    def ebp_placement_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpPlacementInput"))

    @builtins.property
    @jsii.member(jsii_name="ecmPidInput")
    def ecm_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ecmPidInput"))

    @builtins.property
    @jsii.member(jsii_name="esRateInPesInput")
    def es_rate_in_pes_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "esRateInPesInput"))

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPidInput")
    def etv_platform_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvPlatformPidInput"))

    @builtins.property
    @jsii.member(jsii_name="etvSignalPidInput")
    def etv_signal_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvSignalPidInput"))

    @builtins.property
    @jsii.member(jsii_name="fragmentTimeInput")
    def fragment_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fragmentTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="klvDataPidsInput")
    def klv_data_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvDataPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="klvInput")
    def klv_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrateInput")
    def null_packet_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "nullPacketBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="patIntervalInput")
    def pat_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "patIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrControlInput")
    def pcr_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrControlInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPeriodInput")
    def pcr_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pcrPeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPidInput")
    def pcr_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrPidInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtIntervalInput")
    def pmt_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pmtIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtPidInput")
    def pmt_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pmtPidInput"))

    @builtins.property
    @jsii.member(jsii_name="programNumInput")
    def program_num_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programNumInput"))

    @builtins.property
    @jsii.member(jsii_name="rateModeInput")
    def rate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27PidsInput")
    def scte27_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte27PidsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35ControlInput")
    def scte35_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35ControlInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkersInput")
    def segmentation_markers_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationStyleInput")
    def segmentation_style_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationStyleInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationTimeInput")
    def segmentation_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentationTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPidInput")
    def timed_metadata_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataPidInput"))

    @builtins.property
    @jsii.member(jsii_name="transportStreamIdInput")
    def transport_stream_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "transportStreamIdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoPidInput")
    def video_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoPidInput"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehavior")
    def absent_input_audio_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "absentInputAudioBehavior"))

    @absent_input_audio_behavior.setter
    def absent_input_audio_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "absentInputAudioBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="arib")
    def arib(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arib"))

    @arib.setter
    def arib(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "arib", value)

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPid")
    def arib_captions_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPid"))

    @arib_captions_pid.setter
    def arib_captions_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPid", value)

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControl")
    def arib_captions_pid_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPidControl"))

    @arib_captions_pid_control.setter
    def arib_captions_pid_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPidControl", value)

    @builtins.property
    @jsii.member(jsii_name="audioBufferModel")
    def audio_buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioBufferModel"))

    @audio_buffer_model.setter
    def audio_buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioBufferModel", value)

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPes")
    def audio_frames_per_pes(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioFramesPerPes"))

    @audio_frames_per_pes.setter
    def audio_frames_per_pes(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioFramesPerPes", value)

    @builtins.property
    @jsii.member(jsii_name="audioPids")
    def audio_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioPids"))

    @audio_pids.setter
    def audio_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioPids", value)

    @builtins.property
    @jsii.member(jsii_name="audioStreamType")
    def audio_stream_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioStreamType"))

    @audio_stream_type.setter
    def audio_stream_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioStreamType", value)

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="bufferModel")
    def buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bufferModel"))

    @buffer_model.setter
    def buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferModel", value)

    @builtins.property
    @jsii.member(jsii_name="ccDescriptor")
    def cc_descriptor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ccDescriptor"))

    @cc_descriptor.setter
    def cc_descriptor(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ccDescriptor", value)

    @builtins.property
    @jsii.member(jsii_name="dvbSubPids")
    def dvb_sub_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbSubPids"))

    @dvb_sub_pids.setter
    def dvb_sub_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbSubPids", value)

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPid")
    def dvb_teletext_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbTeletextPid"))

    @dvb_teletext_pid.setter
    def dvb_teletext_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbTeletextPid", value)

    @builtins.property
    @jsii.member(jsii_name="ebif")
    def ebif(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebif"))

    @ebif.setter
    def ebif(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebif", value)

    @builtins.property
    @jsii.member(jsii_name="ebpAudioInterval")
    def ebp_audio_interval(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpAudioInterval"))

    @ebp_audio_interval.setter
    def ebp_audio_interval(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpAudioInterval", value)

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMs")
    def ebp_lookahead_ms(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ebpLookaheadMs"))

    @ebp_lookahead_ms.setter
    def ebp_lookahead_ms(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpLookaheadMs", value)

    @builtins.property
    @jsii.member(jsii_name="ebpPlacement")
    def ebp_placement(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpPlacement"))

    @ebp_placement.setter
    def ebp_placement(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpPlacement", value)

    @builtins.property
    @jsii.member(jsii_name="ecmPid")
    def ecm_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ecmPid"))

    @ecm_pid.setter
    def ecm_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ecmPid", value)

    @builtins.property
    @jsii.member(jsii_name="esRateInPes")
    def es_rate_in_pes(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "esRateInPes"))

    @es_rate_in_pes.setter
    def es_rate_in_pes(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "esRateInPes", value)

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPid")
    def etv_platform_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvPlatformPid"))

    @etv_platform_pid.setter
    def etv_platform_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvPlatformPid", value)

    @builtins.property
    @jsii.member(jsii_name="etvSignalPid")
    def etv_signal_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvSignalPid"))

    @etv_signal_pid.setter
    def etv_signal_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvSignalPid", value)

    @builtins.property
    @jsii.member(jsii_name="fragmentTime")
    def fragment_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fragmentTime"))

    @fragment_time.setter
    def fragment_time(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fragmentTime", value)

    @builtins.property
    @jsii.member(jsii_name="klv")
    def klv(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klv"))

    @klv.setter
    def klv(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klv", value)

    @builtins.property
    @jsii.member(jsii_name="klvDataPids")
    def klv_data_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klvDataPids"))

    @klv_data_pids.setter
    def klv_data_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klvDataPids", value)

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value)

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrate")
    def null_packet_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "nullPacketBitrate"))

    @null_packet_bitrate.setter
    def null_packet_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullPacketBitrate", value)

    @builtins.property
    @jsii.member(jsii_name="patInterval")
    def pat_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "patInterval"))

    @pat_interval.setter
    def pat_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "patInterval", value)

    @builtins.property
    @jsii.member(jsii_name="pcrControl")
    def pcr_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrControl"))

    @pcr_control.setter
    def pcr_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrControl", value)

    @builtins.property
    @jsii.member(jsii_name="pcrPeriod")
    def pcr_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pcrPeriod"))

    @pcr_period.setter
    def pcr_period(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPeriod", value)

    @builtins.property
    @jsii.member(jsii_name="pcrPid")
    def pcr_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrPid"))

    @pcr_pid.setter
    def pcr_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPid", value)

    @builtins.property
    @jsii.member(jsii_name="pmtInterval")
    def pmt_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pmtInterval"))

    @pmt_interval.setter
    def pmt_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtInterval", value)

    @builtins.property
    @jsii.member(jsii_name="pmtPid")
    def pmt_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pmtPid"))

    @pmt_pid.setter
    def pmt_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtPid", value)

    @builtins.property
    @jsii.member(jsii_name="programNum")
    def program_num(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programNum"))

    @program_num.setter
    def program_num(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programNum", value)

    @builtins.property
    @jsii.member(jsii_name="rateMode")
    def rate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateMode"))

    @rate_mode.setter
    def rate_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateMode", value)

    @builtins.property
    @jsii.member(jsii_name="scte27Pids")
    def scte27_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte27Pids"))

    @scte27_pids.setter
    def scte27_pids(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte27Pids", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Control")
    def scte35_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Control"))

    @scte35_control.setter
    def scte35_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Control", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkers")
    def segmentation_markers(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationMarkers"))

    @segmentation_markers.setter
    def segmentation_markers(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationMarkers", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationStyle")
    def segmentation_style(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationStyle"))

    @segmentation_style.setter
    def segmentation_style(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationStyle", value)

    @builtins.property
    @jsii.member(jsii_name="segmentationTime")
    def segmentation_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentationTime"))

    @segmentation_time.setter
    def segmentation_time(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationTime", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPid")
    def timed_metadata_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataPid"))

    @timed_metadata_pid.setter
    def timed_metadata_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataPid", value)

    @builtins.property
    @jsii.member(jsii_name="transportStreamId")
    def transport_stream_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "transportStreamId"))

    @transport_stream_id.setter
    def transport_stream_id(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transportStreamId", value)

    @builtins.property
    @jsii.member(jsii_name="videoPid")
    def video_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoPid"))

    @video_pid.setter
    def video_pid(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoPid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putM2TsSettings")
    def put_m2_ts_settings(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings(
            absent_input_audio_behavior=absent_input_audio_behavior,
            arib=arib,
            arib_captions_pid=arib_captions_pid,
            arib_captions_pid_control=arib_captions_pid_control,
            audio_buffer_model=audio_buffer_model,
            audio_frames_per_pes=audio_frames_per_pes,
            audio_pids=audio_pids,
            audio_stream_type=audio_stream_type,
            bitrate=bitrate,
            buffer_model=buffer_model,
            cc_descriptor=cc_descriptor,
            dvb_nit_settings=dvb_nit_settings,
            dvb_sdt_settings=dvb_sdt_settings,
            dvb_sub_pids=dvb_sub_pids,
            dvb_tdt_settings=dvb_tdt_settings,
            dvb_teletext_pid=dvb_teletext_pid,
            ebif=ebif,
            ebp_audio_interval=ebp_audio_interval,
            ebp_lookahead_ms=ebp_lookahead_ms,
            ebp_placement=ebp_placement,
            ecm_pid=ecm_pid,
            es_rate_in_pes=es_rate_in_pes,
            etv_platform_pid=etv_platform_pid,
            etv_signal_pid=etv_signal_pid,
            fragment_time=fragment_time,
            klv=klv,
            klv_data_pids=klv_data_pids,
            nielsen_id3_behavior=nielsen_id3_behavior,
            null_packet_bitrate=null_packet_bitrate,
            pat_interval=pat_interval,
            pcr_control=pcr_control,
            pcr_period=pcr_period,
            pcr_pid=pcr_pid,
            pmt_interval=pmt_interval,
            pmt_pid=pmt_pid,
            program_num=program_num,
            rate_mode=rate_mode,
            scte27_pids=scte27_pids,
            scte35_control=scte35_control,
            scte35_pid=scte35_pid,
            segmentation_markers=segmentation_markers,
            segmentation_style=segmentation_style,
            segmentation_time=segmentation_time,
            timed_metadata_behavior=timed_metadata_behavior,
            timed_metadata_pid=timed_metadata_pid,
            transport_stream_id=transport_stream_id,
            video_pid=video_pid,
        )

        return typing.cast(None, jsii.invoke(self, "putM2TsSettings", [value]))

    @jsii.member(jsii_name="resetM2TsSettings")
    def reset_m2_ts_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetM2TsSettings", []))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettings")
    def m2_ts_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference, jsii.get(self, "m2TsSettings"))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettingsInput")
    def m2_ts_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "m2TsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            def stub(*, destination_ref_id: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "column_depth": "columnDepth",
        "include_fec": "includeFec",
        "row_length": "rowLength",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings:
    def __init__(
        self,
        *,
        column_depth: typing.Optional[jsii.Number] = None,
        include_fec: typing.Optional[builtins.str] = None,
        row_length: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column_depth: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#column_depth MedialiveChannel#column_depth}.
        :param include_fec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#include_fec MedialiveChannel#include_fec}.
        :param row_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#row_length MedialiveChannel#row_length}.
        '''
        if __debug__:
            def stub(
                *,
                column_depth: typing.Optional[jsii.Number] = None,
                include_fec: typing.Optional[builtins.str] = None,
                row_length: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument column_depth", value=column_depth, expected_type=type_hints["column_depth"])
            check_type(argname="argument include_fec", value=include_fec, expected_type=type_hints["include_fec"])
            check_type(argname="argument row_length", value=row_length, expected_type=type_hints["row_length"])
        self._values: typing.Dict[str, typing.Any] = {}
        if column_depth is not None:
            self._values["column_depth"] = column_depth
        if include_fec is not None:
            self._values["include_fec"] = include_fec
        if row_length is not None:
            self._values["row_length"] = row_length

    @builtins.property
    def column_depth(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#column_depth MedialiveChannel#column_depth}.'''
        result = self._values.get("column_depth")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def include_fec(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#include_fec MedialiveChannel#include_fec}.'''
        result = self._values.get("include_fec")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def row_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#row_length MedialiveChannel#row_length}.'''
        result = self._values.get("row_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetColumnDepth")
    def reset_column_depth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColumnDepth", []))

    @jsii.member(jsii_name="resetIncludeFec")
    def reset_include_fec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIncludeFec", []))

    @jsii.member(jsii_name="resetRowLength")
    def reset_row_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRowLength", []))

    @builtins.property
    @jsii.member(jsii_name="columnDepthInput")
    def column_depth_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnDepthInput"))

    @builtins.property
    @jsii.member(jsii_name="includeFecInput")
    def include_fec_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeFecInput"))

    @builtins.property
    @jsii.member(jsii_name="rowLengthInput")
    def row_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="columnDepth")
    def column_depth(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "columnDepth"))

    @column_depth.setter
    def column_depth(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "columnDepth", value)

    @builtins.property
    @jsii.member(jsii_name="includeFec")
    def include_fec(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "includeFec"))

    @include_fec.setter
    def include_fec(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "includeFec", value)

    @builtins.property
    @jsii.member(jsii_name="rowLength")
    def row_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "rowLength"))

    @row_length.setter
    def row_length(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rowLength", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putContainerSettings")
    def put_container_settings(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings(
            m2_ts_settings=m2_ts_settings
        )

        return typing.cast(None, jsii.invoke(self, "putContainerSettings", [value]))

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putFecOutputSettings")
    def put_fec_output_settings(
        self,
        *,
        column_depth: typing.Optional[jsii.Number] = None,
        include_fec: typing.Optional[builtins.str] = None,
        row_length: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column_depth: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#column_depth MedialiveChannel#column_depth}.
        :param include_fec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#include_fec MedialiveChannel#include_fec}.
        :param row_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#row_length MedialiveChannel#row_length}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings(
            column_depth=column_depth, include_fec=include_fec, row_length=row_length
        )

        return typing.cast(None, jsii.invoke(self, "putFecOutputSettings", [value]))

    @jsii.member(jsii_name="resetBufferMsec")
    def reset_buffer_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferMsec", []))

    @jsii.member(jsii_name="resetFecOutputSettings")
    def reset_fec_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFecOutputSettings", []))

    @builtins.property
    @jsii.member(jsii_name="containerSettings")
    def container_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference, jsii.get(self, "containerSettings"))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="fecOutputSettings")
    def fec_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference, jsii.get(self, "fecOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="bufferMsecInput")
    def buffer_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufferMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="containerSettingsInput")
    def container_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings], jsii.get(self, "containerSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="fecOutputSettingsInput")
    def fec_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings], jsii.get(self, "fecOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferMsec")
    def buffer_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufferMsec"))

    @buffer_msec.setter
    def buffer_msec(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferMsec", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioDescriptions")
    def put_audio_descriptions(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putAudioDescriptions", [value]))

    @jsii.member(jsii_name="putAvailBlanking")
    def put_avail_blanking(
        self,
        *,
        avail_blanking_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage, typing.Dict[str, typing.Any]]] = None,
        state: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param avail_blanking_image: avail_blanking_image block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#avail_blanking_image MedialiveChannel#avail_blanking_image}
        :param state: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#state MedialiveChannel#state}.
        '''
        value = MedialiveChannelEncoderSettingsAvailBlanking(
            avail_blanking_image=avail_blanking_image, state=state
        )

        return typing.cast(None, jsii.invoke(self, "putAvailBlanking", [value]))

    @jsii.member(jsii_name="putOutputGroups")
    def put_output_groups(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putOutputGroups", [value]))

    @jsii.member(jsii_name="putTimecodeConfig")
    def put_timecode_config(
        self,
        *,
        source: builtins.str,
        sync_threshold: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source MedialiveChannel#source}.
        :param sync_threshold: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sync_threshold MedialiveChannel#sync_threshold}.
        '''
        value = MedialiveChannelEncoderSettingsTimecodeConfig(
            source=source, sync_threshold=sync_threshold
        )

        return typing.cast(None, jsii.invoke(self, "putTimecodeConfig", [value]))

    @jsii.member(jsii_name="putVideoDescriptions")
    def put_video_descriptions(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptions", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVideoDescriptions", [value]))

    @jsii.member(jsii_name="resetAudioDescriptions")
    def reset_audio_descriptions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioDescriptions", []))

    @jsii.member(jsii_name="resetAvailBlanking")
    def reset_avail_blanking(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAvailBlanking", []))

    @jsii.member(jsii_name="resetVideoDescriptions")
    def reset_video_descriptions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoDescriptions", []))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptions")
    def audio_descriptions(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsList, jsii.get(self, "audioDescriptions"))

    @builtins.property
    @jsii.member(jsii_name="availBlanking")
    def avail_blanking(
        self,
    ) -> MedialiveChannelEncoderSettingsAvailBlankingOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAvailBlankingOutputReference, jsii.get(self, "availBlanking"))

    @builtins.property
    @jsii.member(jsii_name="outputGroups")
    def output_groups(self) -> MedialiveChannelEncoderSettingsOutputGroupsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsList, jsii.get(self, "outputGroups"))

    @builtins.property
    @jsii.member(jsii_name="timecodeConfig")
    def timecode_config(
        self,
    ) -> "MedialiveChannelEncoderSettingsTimecodeConfigOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsTimecodeConfigOutputReference", jsii.get(self, "timecodeConfig"))

    @builtins.property
    @jsii.member(jsii_name="videoDescriptions")
    def video_descriptions(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsList":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsList", jsii.get(self, "videoDescriptions"))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptionsInput")
    def audio_descriptions_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]], jsii.get(self, "audioDescriptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="availBlankingInput")
    def avail_blanking_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking], jsii.get(self, "availBlankingInput"))

    @builtins.property
    @jsii.member(jsii_name="outputGroupsInput")
    def output_groups_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]], jsii.get(self, "outputGroupsInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeConfigInput")
    def timecode_config_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsTimecodeConfig"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsTimecodeConfig"], jsii.get(self, "timecodeConfigInput"))

    @builtins.property
    @jsii.member(jsii_name="videoDescriptionsInput")
    def video_descriptions_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]], jsii.get(self, "videoDescriptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelEncoderSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettings],
    ) -> None:
        if __debug__:
            def stub(value: typing.Optional[MedialiveChannelEncoderSettings]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsTimecodeConfig",
    jsii_struct_bases=[],
    name_mapping={"source": "source", "sync_threshold": "syncThreshold"},
)
class MedialiveChannelEncoderSettingsTimecodeConfig:
    def __init__(
        self,
        *,
        source: builtins.str,
        sync_threshold: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source MedialiveChannel#source}.
        :param sync_threshold: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sync_threshold MedialiveChannel#sync_threshold}.
        '''
        if __debug__:
            def stub(
                *,
                source: builtins.str,
                sync_threshold: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_threshold", value=sync_threshold, expected_type=type_hints["sync_threshold"])
        self._values: typing.Dict[str, typing.Any] = {
            "source": source,
        }
        if sync_threshold is not None:
            self._values["sync_threshold"] = sync_threshold

    @builtins.property
    def source(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source MedialiveChannel#source}.'''
        result = self._values.get("source")
        assert result is not None, "Required property 'source' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def sync_threshold(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sync_threshold MedialiveChannel#sync_threshold}.'''
        result = self._values.get("sync_threshold")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsTimecodeConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsTimecodeConfigOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetSyncThreshold")
    def reset_sync_threshold(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncThreshold", []))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncThresholdInput")
    def sync_threshold_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "syncThresholdInput"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "source"))

    @source.setter
    def source(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source", value)

    @builtins.property
    @jsii.member(jsii_name="syncThreshold")
    def sync_threshold(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "syncThreshold"))

    @sync_threshold.setter
    def sync_threshold(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncThreshold", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptions",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "codec_settings": "codecSettings",
        "height": "height",
        "respond_to_afd": "respondToAfd",
        "scaling_behavior": "scalingBehavior",
        "sharpness": "sharpness",
        "width": "width",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptions:
    def __init__(
        self,
        *,
        name: builtins.str,
        codec_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings", typing.Dict[str, typing.Any]]] = None,
        height: typing.Optional[jsii.Number] = None,
        respond_to_afd: typing.Optional[builtins.str] = None,
        scaling_behavior: typing.Optional[builtins.str] = None,
        sharpness: typing.Optional[jsii.Number] = None,
        width: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        :param codec_settings: codec_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        :param height: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height MedialiveChannel#height}.
        :param respond_to_afd: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#respond_to_afd MedialiveChannel#respond_to_afd}.
        :param scaling_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scaling_behavior MedialiveChannel#scaling_behavior}.
        :param sharpness: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sharpness MedialiveChannel#sharpness}.
        :param width: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#width MedialiveChannel#width}.
        '''
        if isinstance(codec_settings, dict):
            codec_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings(**codec_settings)
        if __debug__:
            def stub(
                *,
                name: builtins.str,
                codec_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings, typing.Dict[str, typing.Any]]] = None,
                height: typing.Optional[jsii.Number] = None,
                respond_to_afd: typing.Optional[builtins.str] = None,
                scaling_behavior: typing.Optional[builtins.str] = None,
                sharpness: typing.Optional[jsii.Number] = None,
                width: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument codec_settings", value=codec_settings, expected_type=type_hints["codec_settings"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument respond_to_afd", value=respond_to_afd, expected_type=type_hints["respond_to_afd"])
            check_type(argname="argument scaling_behavior", value=scaling_behavior, expected_type=type_hints["scaling_behavior"])
            check_type(argname="argument sharpness", value=sharpness, expected_type=type_hints["sharpness"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
        self._values: typing.Dict[str, typing.Any] = {
            "name": name,
        }
        if codec_settings is not None:
            self._values["codec_settings"] = codec_settings
        if height is not None:
            self._values["height"] = height
        if respond_to_afd is not None:
            self._values["respond_to_afd"] = respond_to_afd
        if scaling_behavior is not None:
            self._values["scaling_behavior"] = scaling_behavior
        if sharpness is not None:
            self._values["sharpness"] = sharpness
        if width is not None:
            self._values["width"] = width

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def codec_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings"]:
        '''codec_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        '''
        result = self._values.get("codec_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings"], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height MedialiveChannel#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def respond_to_afd(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#respond_to_afd MedialiveChannel#respond_to_afd}.'''
        result = self._values.get("respond_to_afd")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scaling_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scaling_behavior MedialiveChannel#scaling_behavior}.'''
        result = self._values.get("scaling_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sharpness(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#sharpness MedialiveChannel#sharpness}.'''
        result = self._values.get("sharpness")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#width MedialiveChannel#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings",
    jsii_struct_bases=[],
    name_mapping={
        "frame_capture_settings": "frameCaptureSettings",
        "h264_settings": "h264Settings",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings:
    def __init__(
        self,
        *,
        frame_capture_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings", typing.Dict[str, typing.Any]]] = None,
        h264_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_settings: frame_capture_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_settings MedialiveChannel#frame_capture_settings}
        :param h264_settings: h264_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h264_settings MedialiveChannel#h264_settings}
        '''
        if isinstance(frame_capture_settings, dict):
            frame_capture_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings(**frame_capture_settings)
        if isinstance(h264_settings, dict):
            h264_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings(**h264_settings)
        if __debug__:
            def stub(
                *,
                frame_capture_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings, typing.Dict[str, typing.Any]]] = None,
                h264_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument frame_capture_settings", value=frame_capture_settings, expected_type=type_hints["frame_capture_settings"])
            check_type(argname="argument h264_settings", value=h264_settings, expected_type=type_hints["h264_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if frame_capture_settings is not None:
            self._values["frame_capture_settings"] = frame_capture_settings
        if h264_settings is not None:
            self._values["h264_settings"] = h264_settings

    @builtins.property
    def frame_capture_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings"]:
        '''frame_capture_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_settings MedialiveChannel#frame_capture_settings}
        '''
        result = self._values.get("frame_capture_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings"], result)

    @builtins.property
    def h264_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings"]:
        '''h264_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h264_settings MedialiveChannel#h264_settings}
        '''
        result = self._values.get("h264_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings",
    jsii_struct_bases=[],
    name_mapping={
        "capture_interval": "captureInterval",
        "capture_interval_units": "captureIntervalUnits",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings:
    def __init__(
        self,
        *,
        capture_interval: typing.Optional[jsii.Number] = None,
        capture_interval_units: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param capture_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#capture_interval MedialiveChannel#capture_interval}.
        :param capture_interval_units: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#capture_interval_units MedialiveChannel#capture_interval_units}.
        '''
        if __debug__:
            def stub(
                *,
                capture_interval: typing.Optional[jsii.Number] = None,
                capture_interval_units: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument capture_interval", value=capture_interval, expected_type=type_hints["capture_interval"])
            check_type(argname="argument capture_interval_units", value=capture_interval_units, expected_type=type_hints["capture_interval_units"])
        self._values: typing.Dict[str, typing.Any] = {}
        if capture_interval is not None:
            self._values["capture_interval"] = capture_interval
        if capture_interval_units is not None:
            self._values["capture_interval_units"] = capture_interval_units

    @builtins.property
    def capture_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#capture_interval MedialiveChannel#capture_interval}.'''
        result = self._values.get("capture_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def capture_interval_units(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#capture_interval_units MedialiveChannel#capture_interval_units}.'''
        result = self._values.get("capture_interval_units")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCaptureInterval")
    def reset_capture_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptureInterval", []))

    @jsii.member(jsii_name="resetCaptureIntervalUnits")
    def reset_capture_interval_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptureIntervalUnits", []))

    @builtins.property
    @jsii.member(jsii_name="captureIntervalInput")
    def capture_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "captureIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="captureIntervalUnitsInput")
    def capture_interval_units_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captureIntervalUnitsInput"))

    @builtins.property
    @jsii.member(jsii_name="captureInterval")
    def capture_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "captureInterval"))

    @capture_interval.setter
    def capture_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captureInterval", value)

    @builtins.property
    @jsii.member(jsii_name="captureIntervalUnits")
    def capture_interval_units(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captureIntervalUnits"))

    @capture_interval_units.setter
    def capture_interval_units(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captureIntervalUnits", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings",
    jsii_struct_bases=[],
    name_mapping={
        "adaptive_quantization": "adaptiveQuantization",
        "afd_signaling": "afdSignaling",
        "bitrate": "bitrate",
        "buf_fill_pct": "bufFillPct",
        "buf_size": "bufSize",
        "color_metadata": "colorMetadata",
        "entropy_encoding": "entropyEncoding",
        "filter_settings": "filterSettings",
        "fixed_afd": "fixedAfd",
        "flicker_aq": "flickerAq",
        "force_field_pictures": "forceFieldPictures",
        "framerate_control": "framerateControl",
        "framerate_denominator": "framerateDenominator",
        "framerate_numerator": "framerateNumerator",
        "gop_b_reference": "gopBReference",
        "gop_closed_cadence": "gopClosedCadence",
        "gop_num_b_frames": "gopNumBFrames",
        "gop_size": "gopSize",
        "gop_size_units": "gopSizeUnits",
        "level": "level",
        "look_ahead_rate_control": "lookAheadRateControl",
        "max_bitrate": "maxBitrate",
        "min_i_interval": "minIInterval",
        "num_ref_frames": "numRefFrames",
        "par_control": "parControl",
        "par_denominator": "parDenominator",
        "par_numerator": "parNumerator",
        "profile": "profile",
        "quality_level": "qualityLevel",
        "qvbr_quality_level": "qvbrQualityLevel",
        "rate_control_mode": "rateControlMode",
        "scan_type": "scanType",
        "scene_change_detect": "sceneChangeDetect",
        "slices": "slices",
        "softness": "softness",
        "spatial_aq": "spatialAq",
        "subgop_length": "subgopLength",
        "syntax": "syntax",
        "temporal_aq": "temporalAq",
        "timecode_insertion": "timecodeInsertion",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings:
    def __init__(
        self,
        *,
        adaptive_quantization: typing.Optional[builtins.str] = None,
        afd_signaling: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buf_fill_pct: typing.Optional[jsii.Number] = None,
        buf_size: typing.Optional[jsii.Number] = None,
        color_metadata: typing.Optional[builtins.str] = None,
        entropy_encoding: typing.Optional[builtins.str] = None,
        filter_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings", typing.Dict[str, typing.Any]]] = None,
        fixed_afd: typing.Optional[builtins.str] = None,
        flicker_aq: typing.Optional[builtins.str] = None,
        force_field_pictures: typing.Optional[builtins.str] = None,
        framerate_control: typing.Optional[builtins.str] = None,
        framerate_denominator: typing.Optional[jsii.Number] = None,
        framerate_numerator: typing.Optional[jsii.Number] = None,
        gop_b_reference: typing.Optional[builtins.str] = None,
        gop_closed_cadence: typing.Optional[jsii.Number] = None,
        gop_num_b_frames: typing.Optional[jsii.Number] = None,
        gop_size: typing.Optional[jsii.Number] = None,
        gop_size_units: typing.Optional[builtins.str] = None,
        level: typing.Optional[builtins.str] = None,
        look_ahead_rate_control: typing.Optional[builtins.str] = None,
        max_bitrate: typing.Optional[jsii.Number] = None,
        min_i_interval: typing.Optional[jsii.Number] = None,
        num_ref_frames: typing.Optional[jsii.Number] = None,
        par_control: typing.Optional[builtins.str] = None,
        par_denominator: typing.Optional[jsii.Number] = None,
        par_numerator: typing.Optional[jsii.Number] = None,
        profile: typing.Optional[builtins.str] = None,
        quality_level: typing.Optional[builtins.str] = None,
        qvbr_quality_level: typing.Optional[jsii.Number] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        scan_type: typing.Optional[builtins.str] = None,
        scene_change_detect: typing.Optional[builtins.str] = None,
        slices: typing.Optional[jsii.Number] = None,
        softness: typing.Optional[jsii.Number] = None,
        spatial_aq: typing.Optional[builtins.str] = None,
        subgop_length: typing.Optional[builtins.str] = None,
        syntax: typing.Optional[builtins.str] = None,
        temporal_aq: typing.Optional[builtins.str] = None,
        timecode_insertion: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param adaptive_quantization: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.
        :param afd_signaling: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buf_fill_pct: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buf_fill_pct MedialiveChannel#buf_fill_pct}.
        :param buf_size: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buf_size MedialiveChannel#buf_size}.
        :param color_metadata: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_metadata MedialiveChannel#color_metadata}.
        :param entropy_encoding: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#entropy_encoding MedialiveChannel#entropy_encoding}.
        :param filter_settings: filter_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        :param fixed_afd: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.
        :param flicker_aq: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.
        :param force_field_pictures: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#force_field_pictures MedialiveChannel#force_field_pictures}.
        :param framerate_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_control MedialiveChannel#framerate_control}.
        :param framerate_denominator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.
        :param framerate_numerator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.
        :param gop_b_reference: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_b_reference MedialiveChannel#gop_b_reference}.
        :param gop_closed_cadence: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.
        :param gop_num_b_frames: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_num_b_frames MedialiveChannel#gop_num_b_frames}.
        :param gop_size: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_size MedialiveChannel#gop_size}.
        :param gop_size_units: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.
        :param level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#level MedialiveChannel#level}.
        :param look_ahead_rate_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.
        :param max_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.
        :param min_i_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.
        :param num_ref_frames: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_ref_frames MedialiveChannel#num_ref_frames}.
        :param par_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_control MedialiveChannel#par_control}.
        :param par_denominator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_denominator MedialiveChannel#par_denominator}.
        :param par_numerator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_numerator MedialiveChannel#par_numerator}.
        :param profile: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#profile MedialiveChannel#profile}.
        :param quality_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#quality_level MedialiveChannel#quality_level}.
        :param qvbr_quality_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param scan_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scan_type MedialiveChannel#scan_type}.
        :param scene_change_detect: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.
        :param slices: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#slices MedialiveChannel#slices}.
        :param softness: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#softness MedialiveChannel#softness}.
        :param spatial_aq: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#spatial_aq MedialiveChannel#spatial_aq}.
        :param subgop_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#subgop_length MedialiveChannel#subgop_length}.
        :param syntax: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#syntax MedialiveChannel#syntax}.
        :param temporal_aq: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#temporal_aq MedialiveChannel#temporal_aq}.
        :param timecode_insertion: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.
        '''
        if isinstance(filter_settings, dict):
            filter_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings(**filter_settings)
        if __debug__:
            def stub(
                *,
                adaptive_quantization: typing.Optional[builtins.str] = None,
                afd_signaling: typing.Optional[builtins.str] = None,
                bitrate: typing.Optional[jsii.Number] = None,
                buf_fill_pct: typing.Optional[jsii.Number] = None,
                buf_size: typing.Optional[jsii.Number] = None,
                color_metadata: typing.Optional[builtins.str] = None,
                entropy_encoding: typing.Optional[builtins.str] = None,
                filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings, typing.Dict[str, typing.Any]]] = None,
                fixed_afd: typing.Optional[builtins.str] = None,
                flicker_aq: typing.Optional[builtins.str] = None,
                force_field_pictures: typing.Optional[builtins.str] = None,
                framerate_control: typing.Optional[builtins.str] = None,
                framerate_denominator: typing.Optional[jsii.Number] = None,
                framerate_numerator: typing.Optional[jsii.Number] = None,
                gop_b_reference: typing.Optional[builtins.str] = None,
                gop_closed_cadence: typing.Optional[jsii.Number] = None,
                gop_num_b_frames: typing.Optional[jsii.Number] = None,
                gop_size: typing.Optional[jsii.Number] = None,
                gop_size_units: typing.Optional[builtins.str] = None,
                level: typing.Optional[builtins.str] = None,
                look_ahead_rate_control: typing.Optional[builtins.str] = None,
                max_bitrate: typing.Optional[jsii.Number] = None,
                min_i_interval: typing.Optional[jsii.Number] = None,
                num_ref_frames: typing.Optional[jsii.Number] = None,
                par_control: typing.Optional[builtins.str] = None,
                par_denominator: typing.Optional[jsii.Number] = None,
                par_numerator: typing.Optional[jsii.Number] = None,
                profile: typing.Optional[builtins.str] = None,
                quality_level: typing.Optional[builtins.str] = None,
                qvbr_quality_level: typing.Optional[jsii.Number] = None,
                rate_control_mode: typing.Optional[builtins.str] = None,
                scan_type: typing.Optional[builtins.str] = None,
                scene_change_detect: typing.Optional[builtins.str] = None,
                slices: typing.Optional[jsii.Number] = None,
                softness: typing.Optional[jsii.Number] = None,
                spatial_aq: typing.Optional[builtins.str] = None,
                subgop_length: typing.Optional[builtins.str] = None,
                syntax: typing.Optional[builtins.str] = None,
                temporal_aq: typing.Optional[builtins.str] = None,
                timecode_insertion: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument adaptive_quantization", value=adaptive_quantization, expected_type=type_hints["adaptive_quantization"])
            check_type(argname="argument afd_signaling", value=afd_signaling, expected_type=type_hints["afd_signaling"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument buf_fill_pct", value=buf_fill_pct, expected_type=type_hints["buf_fill_pct"])
            check_type(argname="argument buf_size", value=buf_size, expected_type=type_hints["buf_size"])
            check_type(argname="argument color_metadata", value=color_metadata, expected_type=type_hints["color_metadata"])
            check_type(argname="argument entropy_encoding", value=entropy_encoding, expected_type=type_hints["entropy_encoding"])
            check_type(argname="argument filter_settings", value=filter_settings, expected_type=type_hints["filter_settings"])
            check_type(argname="argument fixed_afd", value=fixed_afd, expected_type=type_hints["fixed_afd"])
            check_type(argname="argument flicker_aq", value=flicker_aq, expected_type=type_hints["flicker_aq"])
            check_type(argname="argument force_field_pictures", value=force_field_pictures, expected_type=type_hints["force_field_pictures"])
            check_type(argname="argument framerate_control", value=framerate_control, expected_type=type_hints["framerate_control"])
            check_type(argname="argument framerate_denominator", value=framerate_denominator, expected_type=type_hints["framerate_denominator"])
            check_type(argname="argument framerate_numerator", value=framerate_numerator, expected_type=type_hints["framerate_numerator"])
            check_type(argname="argument gop_b_reference", value=gop_b_reference, expected_type=type_hints["gop_b_reference"])
            check_type(argname="argument gop_closed_cadence", value=gop_closed_cadence, expected_type=type_hints["gop_closed_cadence"])
            check_type(argname="argument gop_num_b_frames", value=gop_num_b_frames, expected_type=type_hints["gop_num_b_frames"])
            check_type(argname="argument gop_size", value=gop_size, expected_type=type_hints["gop_size"])
            check_type(argname="argument gop_size_units", value=gop_size_units, expected_type=type_hints["gop_size_units"])
            check_type(argname="argument level", value=level, expected_type=type_hints["level"])
            check_type(argname="argument look_ahead_rate_control", value=look_ahead_rate_control, expected_type=type_hints["look_ahead_rate_control"])
            check_type(argname="argument max_bitrate", value=max_bitrate, expected_type=type_hints["max_bitrate"])
            check_type(argname="argument min_i_interval", value=min_i_interval, expected_type=type_hints["min_i_interval"])
            check_type(argname="argument num_ref_frames", value=num_ref_frames, expected_type=type_hints["num_ref_frames"])
            check_type(argname="argument par_control", value=par_control, expected_type=type_hints["par_control"])
            check_type(argname="argument par_denominator", value=par_denominator, expected_type=type_hints["par_denominator"])
            check_type(argname="argument par_numerator", value=par_numerator, expected_type=type_hints["par_numerator"])
            check_type(argname="argument profile", value=profile, expected_type=type_hints["profile"])
            check_type(argname="argument quality_level", value=quality_level, expected_type=type_hints["quality_level"])
            check_type(argname="argument qvbr_quality_level", value=qvbr_quality_level, expected_type=type_hints["qvbr_quality_level"])
            check_type(argname="argument rate_control_mode", value=rate_control_mode, expected_type=type_hints["rate_control_mode"])
            check_type(argname="argument scan_type", value=scan_type, expected_type=type_hints["scan_type"])
            check_type(argname="argument scene_change_detect", value=scene_change_detect, expected_type=type_hints["scene_change_detect"])
            check_type(argname="argument slices", value=slices, expected_type=type_hints["slices"])
            check_type(argname="argument softness", value=softness, expected_type=type_hints["softness"])
            check_type(argname="argument spatial_aq", value=spatial_aq, expected_type=type_hints["spatial_aq"])
            check_type(argname="argument subgop_length", value=subgop_length, expected_type=type_hints["subgop_length"])
            check_type(argname="argument syntax", value=syntax, expected_type=type_hints["syntax"])
            check_type(argname="argument temporal_aq", value=temporal_aq, expected_type=type_hints["temporal_aq"])
            check_type(argname="argument timecode_insertion", value=timecode_insertion, expected_type=type_hints["timecode_insertion"])
        self._values: typing.Dict[str, typing.Any] = {}
        if adaptive_quantization is not None:
            self._values["adaptive_quantization"] = adaptive_quantization
        if afd_signaling is not None:
            self._values["afd_signaling"] = afd_signaling
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if buf_fill_pct is not None:
            self._values["buf_fill_pct"] = buf_fill_pct
        if buf_size is not None:
            self._values["buf_size"] = buf_size
        if color_metadata is not None:
            self._values["color_metadata"] = color_metadata
        if entropy_encoding is not None:
            self._values["entropy_encoding"] = entropy_encoding
        if filter_settings is not None:
            self._values["filter_settings"] = filter_settings
        if fixed_afd is not None:
            self._values["fixed_afd"] = fixed_afd
        if flicker_aq is not None:
            self._values["flicker_aq"] = flicker_aq
        if force_field_pictures is not None:
            self._values["force_field_pictures"] = force_field_pictures
        if framerate_control is not None:
            self._values["framerate_control"] = framerate_control
        if framerate_denominator is not None:
            self._values["framerate_denominator"] = framerate_denominator
        if framerate_numerator is not None:
            self._values["framerate_numerator"] = framerate_numerator
        if gop_b_reference is not None:
            self._values["gop_b_reference"] = gop_b_reference
        if gop_closed_cadence is not None:
            self._values["gop_closed_cadence"] = gop_closed_cadence
        if gop_num_b_frames is not None:
            self._values["gop_num_b_frames"] = gop_num_b_frames
        if gop_size is not None:
            self._values["gop_size"] = gop_size
        if gop_size_units is not None:
            self._values["gop_size_units"] = gop_size_units
        if level is not None:
            self._values["level"] = level
        if look_ahead_rate_control is not None:
            self._values["look_ahead_rate_control"] = look_ahead_rate_control
        if max_bitrate is not None:
            self._values["max_bitrate"] = max_bitrate
        if min_i_interval is not None:
            self._values["min_i_interval"] = min_i_interval
        if num_ref_frames is not None:
            self._values["num_ref_frames"] = num_ref_frames
        if par_control is not None:
            self._values["par_control"] = par_control
        if par_denominator is not None:
            self._values["par_denominator"] = par_denominator
        if par_numerator is not None:
            self._values["par_numerator"] = par_numerator
        if profile is not None:
            self._values["profile"] = profile
        if quality_level is not None:
            self._values["quality_level"] = quality_level
        if qvbr_quality_level is not None:
            self._values["qvbr_quality_level"] = qvbr_quality_level
        if rate_control_mode is not None:
            self._values["rate_control_mode"] = rate_control_mode
        if scan_type is not None:
            self._values["scan_type"] = scan_type
        if scene_change_detect is not None:
            self._values["scene_change_detect"] = scene_change_detect
        if slices is not None:
            self._values["slices"] = slices
        if softness is not None:
            self._values["softness"] = softness
        if spatial_aq is not None:
            self._values["spatial_aq"] = spatial_aq
        if subgop_length is not None:
            self._values["subgop_length"] = subgop_length
        if syntax is not None:
            self._values["syntax"] = syntax
        if temporal_aq is not None:
            self._values["temporal_aq"] = temporal_aq
        if timecode_insertion is not None:
            self._values["timecode_insertion"] = timecode_insertion

    @builtins.property
    def adaptive_quantization(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.'''
        result = self._values.get("adaptive_quantization")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def afd_signaling(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.'''
        result = self._values.get("afd_signaling")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buf_fill_pct(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buf_fill_pct MedialiveChannel#buf_fill_pct}.'''
        result = self._values.get("buf_fill_pct")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buf_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buf_size MedialiveChannel#buf_size}.'''
        result = self._values.get("buf_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def color_metadata(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_metadata MedialiveChannel#color_metadata}.'''
        result = self._values.get("color_metadata")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def entropy_encoding(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#entropy_encoding MedialiveChannel#entropy_encoding}.'''
        result = self._values.get("entropy_encoding")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filter_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings"]:
        '''filter_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        '''
        result = self._values.get("filter_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings"], result)

    @builtins.property
    def fixed_afd(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.'''
        result = self._values.get("fixed_afd")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def flicker_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.'''
        result = self._values.get("flicker_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def force_field_pictures(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#force_field_pictures MedialiveChannel#force_field_pictures}.'''
        result = self._values.get("force_field_pictures")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def framerate_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_control MedialiveChannel#framerate_control}.'''
        result = self._values.get("framerate_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def framerate_denominator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.'''
        result = self._values.get("framerate_denominator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def framerate_numerator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.'''
        result = self._values.get("framerate_numerator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_b_reference(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_b_reference MedialiveChannel#gop_b_reference}.'''
        result = self._values.get("gop_b_reference")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def gop_closed_cadence(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.'''
        result = self._values.get("gop_closed_cadence")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_num_b_frames(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_num_b_frames MedialiveChannel#gop_num_b_frames}.'''
        result = self._values.get("gop_num_b_frames")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_size MedialiveChannel#gop_size}.'''
        result = self._values.get("gop_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_size_units(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.'''
        result = self._values.get("gop_size_units")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#level MedialiveChannel#level}.'''
        result = self._values.get("level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def look_ahead_rate_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.'''
        result = self._values.get("look_ahead_rate_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.'''
        result = self._values.get("max_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def min_i_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.'''
        result = self._values.get("min_i_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def num_ref_frames(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_ref_frames MedialiveChannel#num_ref_frames}.'''
        result = self._values.get("num_ref_frames")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def par_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_control MedialiveChannel#par_control}.'''
        result = self._values.get("par_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def par_denominator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_denominator MedialiveChannel#par_denominator}.'''
        result = self._values.get("par_denominator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def par_numerator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_numerator MedialiveChannel#par_numerator}.'''
        result = self._values.get("par_numerator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#profile MedialiveChannel#profile}.'''
        result = self._values.get("profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def quality_level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#quality_level MedialiveChannel#quality_level}.'''
        result = self._values.get("quality_level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def qvbr_quality_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.'''
        result = self._values.get("qvbr_quality_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_control_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.'''
        result = self._values.get("rate_control_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scan_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scan_type MedialiveChannel#scan_type}.'''
        result = self._values.get("scan_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scene_change_detect(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.'''
        result = self._values.get("scene_change_detect")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def slices(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#slices MedialiveChannel#slices}.'''
        result = self._values.get("slices")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def softness(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#softness MedialiveChannel#softness}.'''
        result = self._values.get("softness")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def spatial_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#spatial_aq MedialiveChannel#spatial_aq}.'''
        result = self._values.get("spatial_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def subgop_length(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#subgop_length MedialiveChannel#subgop_length}.'''
        result = self._values.get("subgop_length")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def syntax(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#syntax MedialiveChannel#syntax}.'''
        result = self._values.get("syntax")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def temporal_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#temporal_aq MedialiveChannel#temporal_aq}.'''
        result = self._values.get("temporal_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timecode_insertion(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.'''
        result = self._values.get("timecode_insertion")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings",
    jsii_struct_bases=[],
    name_mapping={"temporal_filter_settings": "temporalFilterSettings"},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings:
    def __init__(
        self,
        *,
        temporal_filter_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param temporal_filter_settings: temporal_filter_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        if isinstance(temporal_filter_settings, dict):
            temporal_filter_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings(**temporal_filter_settings)
        if __debug__:
            def stub(
                *,
                temporal_filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument temporal_filter_settings", value=temporal_filter_settings, expected_type=type_hints["temporal_filter_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if temporal_filter_settings is not None:
            self._values["temporal_filter_settings"] = temporal_filter_settings

    @builtins.property
    def temporal_filter_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"]:
        '''temporal_filter_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        result = self._values.get("temporal_filter_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTemporalFilterSettings")
    def put_temporal_filter_settings(
        self,
        *,
        post_filter_sharpening: typing.Optional[builtins.str] = None,
        strength: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param post_filter_sharpening: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.
        :param strength: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#strength MedialiveChannel#strength}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings(
            post_filter_sharpening=post_filter_sharpening, strength=strength
        )

        return typing.cast(None, jsii.invoke(self, "putTemporalFilterSettings", [value]))

    @jsii.member(jsii_name="resetTemporalFilterSettings")
    def reset_temporal_filter_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemporalFilterSettings", []))

    @builtins.property
    @jsii.member(jsii_name="temporalFilterSettings")
    def temporal_filter_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference", jsii.get(self, "temporalFilterSettings"))

    @builtins.property
    @jsii.member(jsii_name="temporalFilterSettingsInput")
    def temporal_filter_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"], jsii.get(self, "temporalFilterSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings",
    jsii_struct_bases=[],
    name_mapping={
        "post_filter_sharpening": "postFilterSharpening",
        "strength": "strength",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings:
    def __init__(
        self,
        *,
        post_filter_sharpening: typing.Optional[builtins.str] = None,
        strength: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param post_filter_sharpening: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.
        :param strength: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#strength MedialiveChannel#strength}.
        '''
        if __debug__:
            def stub(
                *,
                post_filter_sharpening: typing.Optional[builtins.str] = None,
                strength: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument post_filter_sharpening", value=post_filter_sharpening, expected_type=type_hints["post_filter_sharpening"])
            check_type(argname="argument strength", value=strength, expected_type=type_hints["strength"])
        self._values: typing.Dict[str, typing.Any] = {}
        if post_filter_sharpening is not None:
            self._values["post_filter_sharpening"] = post_filter_sharpening
        if strength is not None:
            self._values["strength"] = strength

    @builtins.property
    def post_filter_sharpening(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.'''
        result = self._values.get("post_filter_sharpening")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def strength(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#strength MedialiveChannel#strength}.'''
        result = self._values.get("strength")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPostFilterSharpening")
    def reset_post_filter_sharpening(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPostFilterSharpening", []))

    @jsii.member(jsii_name="resetStrength")
    def reset_strength(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStrength", []))

    @builtins.property
    @jsii.member(jsii_name="postFilterSharpeningInput")
    def post_filter_sharpening_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "postFilterSharpeningInput"))

    @builtins.property
    @jsii.member(jsii_name="strengthInput")
    def strength_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "strengthInput"))

    @builtins.property
    @jsii.member(jsii_name="postFilterSharpening")
    def post_filter_sharpening(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "postFilterSharpening"))

    @post_filter_sharpening.setter
    def post_filter_sharpening(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "postFilterSharpening", value)

    @builtins.property
    @jsii.member(jsii_name="strength")
    def strength(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "strength"))

    @strength.setter
    def strength(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "strength", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFilterSettings")
    def put_filter_settings(
        self,
        *,
        temporal_filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param temporal_filter_settings: temporal_filter_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings(
            temporal_filter_settings=temporal_filter_settings
        )

        return typing.cast(None, jsii.invoke(self, "putFilterSettings", [value]))

    @jsii.member(jsii_name="resetAdaptiveQuantization")
    def reset_adaptive_quantization(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdaptiveQuantization", []))

    @jsii.member(jsii_name="resetAfdSignaling")
    def reset_afd_signaling(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAfdSignaling", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBufFillPct")
    def reset_buf_fill_pct(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufFillPct", []))

    @jsii.member(jsii_name="resetBufSize")
    def reset_buf_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufSize", []))

    @jsii.member(jsii_name="resetColorMetadata")
    def reset_color_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorMetadata", []))

    @jsii.member(jsii_name="resetEntropyEncoding")
    def reset_entropy_encoding(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEntropyEncoding", []))

    @jsii.member(jsii_name="resetFilterSettings")
    def reset_filter_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterSettings", []))

    @jsii.member(jsii_name="resetFixedAfd")
    def reset_fixed_afd(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFixedAfd", []))

    @jsii.member(jsii_name="resetFlickerAq")
    def reset_flicker_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFlickerAq", []))

    @jsii.member(jsii_name="resetForceFieldPictures")
    def reset_force_field_pictures(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceFieldPictures", []))

    @jsii.member(jsii_name="resetFramerateControl")
    def reset_framerate_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFramerateControl", []))

    @jsii.member(jsii_name="resetFramerateDenominator")
    def reset_framerate_denominator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFramerateDenominator", []))

    @jsii.member(jsii_name="resetFramerateNumerator")
    def reset_framerate_numerator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFramerateNumerator", []))

    @jsii.member(jsii_name="resetGopBReference")
    def reset_gop_b_reference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopBReference", []))

    @jsii.member(jsii_name="resetGopClosedCadence")
    def reset_gop_closed_cadence(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopClosedCadence", []))

    @jsii.member(jsii_name="resetGopNumBFrames")
    def reset_gop_num_b_frames(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopNumBFrames", []))

    @jsii.member(jsii_name="resetGopSize")
    def reset_gop_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopSize", []))

    @jsii.member(jsii_name="resetGopSizeUnits")
    def reset_gop_size_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopSizeUnits", []))

    @jsii.member(jsii_name="resetLevel")
    def reset_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLevel", []))

    @jsii.member(jsii_name="resetLookAheadRateControl")
    def reset_look_ahead_rate_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLookAheadRateControl", []))

    @jsii.member(jsii_name="resetMaxBitrate")
    def reset_max_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxBitrate", []))

    @jsii.member(jsii_name="resetMinIInterval")
    def reset_min_i_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMinIInterval", []))

    @jsii.member(jsii_name="resetNumRefFrames")
    def reset_num_ref_frames(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRefFrames", []))

    @jsii.member(jsii_name="resetParControl")
    def reset_par_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParControl", []))

    @jsii.member(jsii_name="resetParDenominator")
    def reset_par_denominator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParDenominator", []))

    @jsii.member(jsii_name="resetParNumerator")
    def reset_par_numerator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParNumerator", []))

    @jsii.member(jsii_name="resetProfile")
    def reset_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProfile", []))

    @jsii.member(jsii_name="resetQualityLevel")
    def reset_quality_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetQualityLevel", []))

    @jsii.member(jsii_name="resetQvbrQualityLevel")
    def reset_qvbr_quality_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetQvbrQualityLevel", []))

    @jsii.member(jsii_name="resetRateControlMode")
    def reset_rate_control_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateControlMode", []))

    @jsii.member(jsii_name="resetScanType")
    def reset_scan_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScanType", []))

    @jsii.member(jsii_name="resetSceneChangeDetect")
    def reset_scene_change_detect(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSceneChangeDetect", []))

    @jsii.member(jsii_name="resetSlices")
    def reset_slices(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSlices", []))

    @jsii.member(jsii_name="resetSoftness")
    def reset_softness(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSoftness", []))

    @jsii.member(jsii_name="resetSpatialAq")
    def reset_spatial_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpatialAq", []))

    @jsii.member(jsii_name="resetSubgopLength")
    def reset_subgop_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSubgopLength", []))

    @jsii.member(jsii_name="resetSyntax")
    def reset_syntax(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyntax", []))

    @jsii.member(jsii_name="resetTemporalAq")
    def reset_temporal_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemporalAq", []))

    @jsii.member(jsii_name="resetTimecodeInsertion")
    def reset_timecode_insertion(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimecodeInsertion", []))

    @builtins.property
    @jsii.member(jsii_name="filterSettings")
    def filter_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference, jsii.get(self, "filterSettings"))

    @builtins.property
    @jsii.member(jsii_name="adaptiveQuantizationInput")
    def adaptive_quantization_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "adaptiveQuantizationInput"))

    @builtins.property
    @jsii.member(jsii_name="afdSignalingInput")
    def afd_signaling_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "afdSignalingInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufFillPctInput")
    def buf_fill_pct_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufFillPctInput"))

    @builtins.property
    @jsii.member(jsii_name="bufSizeInput")
    def buf_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="colorMetadataInput")
    def color_metadata_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="entropyEncodingInput")
    def entropy_encoding_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "entropyEncodingInput"))

    @builtins.property
    @jsii.member(jsii_name="filterSettingsInput")
    def filter_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings], jsii.get(self, "filterSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="fixedAfdInput")
    def fixed_afd_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fixedAfdInput"))

    @builtins.property
    @jsii.member(jsii_name="flickerAqInput")
    def flicker_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "flickerAqInput"))

    @builtins.property
    @jsii.member(jsii_name="forceFieldPicturesInput")
    def force_field_pictures_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "forceFieldPicturesInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateControlInput")
    def framerate_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "framerateControlInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateDenominatorInput")
    def framerate_denominator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "framerateDenominatorInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateNumeratorInput")
    def framerate_numerator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "framerateNumeratorInput"))

    @builtins.property
    @jsii.member(jsii_name="gopBReferenceInput")
    def gop_b_reference_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "gopBReferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="gopClosedCadenceInput")
    def gop_closed_cadence_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopClosedCadenceInput"))

    @builtins.property
    @jsii.member(jsii_name="gopNumBFramesInput")
    def gop_num_b_frames_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopNumBFramesInput"))

    @builtins.property
    @jsii.member(jsii_name="gopSizeInput")
    def gop_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="gopSizeUnitsInput")
    def gop_size_units_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "gopSizeUnitsInput"))

    @builtins.property
    @jsii.member(jsii_name="levelInput")
    def level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "levelInput"))

    @builtins.property
    @jsii.member(jsii_name="lookAheadRateControlInput")
    def look_ahead_rate_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lookAheadRateControlInput"))

    @builtins.property
    @jsii.member(jsii_name="maxBitrateInput")
    def max_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="minIIntervalInput")
    def min_i_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "minIIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="numRefFramesInput")
    def num_ref_frames_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRefFramesInput"))

    @builtins.property
    @jsii.member(jsii_name="parControlInput")
    def par_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "parControlInput"))

    @builtins.property
    @jsii.member(jsii_name="parDenominatorInput")
    def par_denominator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "parDenominatorInput"))

    @builtins.property
    @jsii.member(jsii_name="parNumeratorInput")
    def par_numerator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "parNumeratorInput"))

    @builtins.property
    @jsii.member(jsii_name="profileInput")
    def profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "profileInput"))

    @builtins.property
    @jsii.member(jsii_name="qualityLevelInput")
    def quality_level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "qualityLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="qvbrQualityLevelInput")
    def qvbr_quality_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "qvbrQualityLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="rateControlModeInput")
    def rate_control_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateControlModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scanTypeInput")
    def scan_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scanTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="sceneChangeDetectInput")
    def scene_change_detect_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sceneChangeDetectInput"))

    @builtins.property
    @jsii.member(jsii_name="slicesInput")
    def slices_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "slicesInput"))

    @builtins.property
    @jsii.member(jsii_name="softnessInput")
    def softness_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "softnessInput"))

    @builtins.property
    @jsii.member(jsii_name="spatialAqInput")
    def spatial_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "spatialAqInput"))

    @builtins.property
    @jsii.member(jsii_name="subgopLengthInput")
    def subgop_length_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "subgopLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="syntaxInput")
    def syntax_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "syntaxInput"))

    @builtins.property
    @jsii.member(jsii_name="temporalAqInput")
    def temporal_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "temporalAqInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeInsertionInput")
    def timecode_insertion_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timecodeInsertionInput"))

    @builtins.property
    @jsii.member(jsii_name="adaptiveQuantization")
    def adaptive_quantization(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "adaptiveQuantization"))

    @adaptive_quantization.setter
    def adaptive_quantization(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adaptiveQuantization", value)

    @builtins.property
    @jsii.member(jsii_name="afdSignaling")
    def afd_signaling(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "afdSignaling"))

    @afd_signaling.setter
    def afd_signaling(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "afdSignaling", value)

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value)

    @builtins.property
    @jsii.member(jsii_name="bufFillPct")
    def buf_fill_pct(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufFillPct"))

    @buf_fill_pct.setter
    def buf_fill_pct(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufFillPct", value)

    @builtins.property
    @jsii.member(jsii_name="bufSize")
    def buf_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufSize"))

    @buf_size.setter
    def buf_size(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufSize", value)

    @builtins.property
    @jsii.member(jsii_name="colorMetadata")
    def color_metadata(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorMetadata"))

    @color_metadata.setter
    def color_metadata(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorMetadata", value)

    @builtins.property
    @jsii.member(jsii_name="entropyEncoding")
    def entropy_encoding(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "entropyEncoding"))

    @entropy_encoding.setter
    def entropy_encoding(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "entropyEncoding", value)

    @builtins.property
    @jsii.member(jsii_name="fixedAfd")
    def fixed_afd(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fixedAfd"))

    @fixed_afd.setter
    def fixed_afd(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fixedAfd", value)

    @builtins.property
    @jsii.member(jsii_name="flickerAq")
    def flicker_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "flickerAq"))

    @flicker_aq.setter
    def flicker_aq(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "flickerAq", value)

    @builtins.property
    @jsii.member(jsii_name="forceFieldPictures")
    def force_field_pictures(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "forceFieldPictures"))

    @force_field_pictures.setter
    def force_field_pictures(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceFieldPictures", value)

    @builtins.property
    @jsii.member(jsii_name="framerateControl")
    def framerate_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "framerateControl"))

    @framerate_control.setter
    def framerate_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateControl", value)

    @builtins.property
    @jsii.member(jsii_name="framerateDenominator")
    def framerate_denominator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "framerateDenominator"))

    @framerate_denominator.setter
    def framerate_denominator(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateDenominator", value)

    @builtins.property
    @jsii.member(jsii_name="framerateNumerator")
    def framerate_numerator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "framerateNumerator"))

    @framerate_numerator.setter
    def framerate_numerator(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateNumerator", value)

    @builtins.property
    @jsii.member(jsii_name="gopBReference")
    def gop_b_reference(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "gopBReference"))

    @gop_b_reference.setter
    def gop_b_reference(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopBReference", value)

    @builtins.property
    @jsii.member(jsii_name="gopClosedCadence")
    def gop_closed_cadence(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopClosedCadence"))

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopClosedCadence", value)

    @builtins.property
    @jsii.member(jsii_name="gopNumBFrames")
    def gop_num_b_frames(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopNumBFrames"))

    @gop_num_b_frames.setter
    def gop_num_b_frames(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopNumBFrames", value)

    @builtins.property
    @jsii.member(jsii_name="gopSize")
    def gop_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopSize"))

    @gop_size.setter
    def gop_size(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopSize", value)

    @builtins.property
    @jsii.member(jsii_name="gopSizeUnits")
    def gop_size_units(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "gopSizeUnits"))

    @gop_size_units.setter
    def gop_size_units(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopSizeUnits", value)

    @builtins.property
    @jsii.member(jsii_name="level")
    def level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "level"))

    @level.setter
    def level(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "level", value)

    @builtins.property
    @jsii.member(jsii_name="lookAheadRateControl")
    def look_ahead_rate_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lookAheadRateControl"))

    @look_ahead_rate_control.setter
    def look_ahead_rate_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lookAheadRateControl", value)

    @builtins.property
    @jsii.member(jsii_name="maxBitrate")
    def max_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "maxBitrate"))

    @max_bitrate.setter
    def max_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxBitrate", value)

    @builtins.property
    @jsii.member(jsii_name="minIInterval")
    def min_i_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "minIInterval"))

    @min_i_interval.setter
    def min_i_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "minIInterval", value)

    @builtins.property
    @jsii.member(jsii_name="numRefFrames")
    def num_ref_frames(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRefFrames"))

    @num_ref_frames.setter
    def num_ref_frames(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRefFrames", value)

    @builtins.property
    @jsii.member(jsii_name="parControl")
    def par_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "parControl"))

    @par_control.setter
    def par_control(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parControl", value)

    @builtins.property
    @jsii.member(jsii_name="parDenominator")
    def par_denominator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "parDenominator"))

    @par_denominator.setter
    def par_denominator(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parDenominator", value)

    @builtins.property
    @jsii.member(jsii_name="parNumerator")
    def par_numerator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "parNumerator"))

    @par_numerator.setter
    def par_numerator(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parNumerator", value)

    @builtins.property
    @jsii.member(jsii_name="profile")
    def profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "profile"))

    @profile.setter
    def profile(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "profile", value)

    @builtins.property
    @jsii.member(jsii_name="qualityLevel")
    def quality_level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "qualityLevel"))

    @quality_level.setter
    def quality_level(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "qualityLevel", value)

    @builtins.property
    @jsii.member(jsii_name="qvbrQualityLevel")
    def qvbr_quality_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "qvbrQualityLevel"))

    @qvbr_quality_level.setter
    def qvbr_quality_level(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "qvbrQualityLevel", value)

    @builtins.property
    @jsii.member(jsii_name="rateControlMode")
    def rate_control_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateControlMode"))

    @rate_control_mode.setter
    def rate_control_mode(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateControlMode", value)

    @builtins.property
    @jsii.member(jsii_name="scanType")
    def scan_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scanType"))

    @scan_type.setter
    def scan_type(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scanType", value)

    @builtins.property
    @jsii.member(jsii_name="sceneChangeDetect")
    def scene_change_detect(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sceneChangeDetect"))

    @scene_change_detect.setter
    def scene_change_detect(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sceneChangeDetect", value)

    @builtins.property
    @jsii.member(jsii_name="slices")
    def slices(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "slices"))

    @slices.setter
    def slices(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "slices", value)

    @builtins.property
    @jsii.member(jsii_name="softness")
    def softness(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "softness"))

    @softness.setter
    def softness(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "softness", value)

    @builtins.property
    @jsii.member(jsii_name="spatialAq")
    def spatial_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "spatialAq"))

    @spatial_aq.setter
    def spatial_aq(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "spatialAq", value)

    @builtins.property
    @jsii.member(jsii_name="subgopLength")
    def subgop_length(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "subgopLength"))

    @subgop_length.setter
    def subgop_length(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "subgopLength", value)

    @builtins.property
    @jsii.member(jsii_name="syntax")
    def syntax(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "syntax"))

    @syntax.setter
    def syntax(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syntax", value)

    @builtins.property
    @jsii.member(jsii_name="temporalAq")
    def temporal_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "temporalAq"))

    @temporal_aq.setter
    def temporal_aq(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "temporalAq", value)

    @builtins.property
    @jsii.member(jsii_name="timecodeInsertion")
    def timecode_insertion(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timecodeInsertion"))

    @timecode_insertion.setter
    def timecode_insertion(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timecodeInsertion", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFrameCaptureSettings")
    def put_frame_capture_settings(
        self,
        *,
        capture_interval: typing.Optional[jsii.Number] = None,
        capture_interval_units: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param capture_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#capture_interval MedialiveChannel#capture_interval}.
        :param capture_interval_units: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#capture_interval_units MedialiveChannel#capture_interval_units}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings(
            capture_interval=capture_interval,
            capture_interval_units=capture_interval_units,
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureSettings", [value]))

    @jsii.member(jsii_name="putH264Settings")
    def put_h264_settings(
        self,
        *,
        adaptive_quantization: typing.Optional[builtins.str] = None,
        afd_signaling: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buf_fill_pct: typing.Optional[jsii.Number] = None,
        buf_size: typing.Optional[jsii.Number] = None,
        color_metadata: typing.Optional[builtins.str] = None,
        entropy_encoding: typing.Optional[builtins.str] = None,
        filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings, typing.Dict[str, typing.Any]]] = None,
        fixed_afd: typing.Optional[builtins.str] = None,
        flicker_aq: typing.Optional[builtins.str] = None,
        force_field_pictures: typing.Optional[builtins.str] = None,
        framerate_control: typing.Optional[builtins.str] = None,
        framerate_denominator: typing.Optional[jsii.Number] = None,
        framerate_numerator: typing.Optional[jsii.Number] = None,
        gop_b_reference: typing.Optional[builtins.str] = None,
        gop_closed_cadence: typing.Optional[jsii.Number] = None,
        gop_num_b_frames: typing.Optional[jsii.Number] = None,
        gop_size: typing.Optional[jsii.Number] = None,
        gop_size_units: typing.Optional[builtins.str] = None,
        level: typing.Optional[builtins.str] = None,
        look_ahead_rate_control: typing.Optional[builtins.str] = None,
        max_bitrate: typing.Optional[jsii.Number] = None,
        min_i_interval: typing.Optional[jsii.Number] = None,
        num_ref_frames: typing.Optional[jsii.Number] = None,
        par_control: typing.Optional[builtins.str] = None,
        par_denominator: typing.Optional[jsii.Number] = None,
        par_numerator: typing.Optional[jsii.Number] = None,
        profile: typing.Optional[builtins.str] = None,
        quality_level: typing.Optional[builtins.str] = None,
        qvbr_quality_level: typing.Optional[jsii.Number] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        scan_type: typing.Optional[builtins.str] = None,
        scene_change_detect: typing.Optional[builtins.str] = None,
        slices: typing.Optional[jsii.Number] = None,
        softness: typing.Optional[jsii.Number] = None,
        spatial_aq: typing.Optional[builtins.str] = None,
        subgop_length: typing.Optional[builtins.str] = None,
        syntax: typing.Optional[builtins.str] = None,
        temporal_aq: typing.Optional[builtins.str] = None,
        timecode_insertion: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param adaptive_quantization: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.
        :param afd_signaling: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.
        :param bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buf_fill_pct: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buf_fill_pct MedialiveChannel#buf_fill_pct}.
        :param buf_size: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buf_size MedialiveChannel#buf_size}.
        :param color_metadata: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_metadata MedialiveChannel#color_metadata}.
        :param entropy_encoding: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#entropy_encoding MedialiveChannel#entropy_encoding}.
        :param filter_settings: filter_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        :param fixed_afd: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.
        :param flicker_aq: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.
        :param force_field_pictures: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#force_field_pictures MedialiveChannel#force_field_pictures}.
        :param framerate_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_control MedialiveChannel#framerate_control}.
        :param framerate_denominator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.
        :param framerate_numerator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.
        :param gop_b_reference: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_b_reference MedialiveChannel#gop_b_reference}.
        :param gop_closed_cadence: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.
        :param gop_num_b_frames: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_num_b_frames MedialiveChannel#gop_num_b_frames}.
        :param gop_size: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_size MedialiveChannel#gop_size}.
        :param gop_size_units: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.
        :param level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#level MedialiveChannel#level}.
        :param look_ahead_rate_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.
        :param max_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.
        :param min_i_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.
        :param num_ref_frames: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#num_ref_frames MedialiveChannel#num_ref_frames}.
        :param par_control: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_control MedialiveChannel#par_control}.
        :param par_denominator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_denominator MedialiveChannel#par_denominator}.
        :param par_numerator: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#par_numerator MedialiveChannel#par_numerator}.
        :param profile: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#profile MedialiveChannel#profile}.
        :param quality_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#quality_level MedialiveChannel#quality_level}.
        :param qvbr_quality_level: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param scan_type: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scan_type MedialiveChannel#scan_type}.
        :param scene_change_detect: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.
        :param slices: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#slices MedialiveChannel#slices}.
        :param softness: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#softness MedialiveChannel#softness}.
        :param spatial_aq: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#spatial_aq MedialiveChannel#spatial_aq}.
        :param subgop_length: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#subgop_length MedialiveChannel#subgop_length}.
        :param syntax: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#syntax MedialiveChannel#syntax}.
        :param temporal_aq: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#temporal_aq MedialiveChannel#temporal_aq}.
        :param timecode_insertion: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings(
            adaptive_quantization=adaptive_quantization,
            afd_signaling=afd_signaling,
            bitrate=bitrate,
            buf_fill_pct=buf_fill_pct,
            buf_size=buf_size,
            color_metadata=color_metadata,
            entropy_encoding=entropy_encoding,
            filter_settings=filter_settings,
            fixed_afd=fixed_afd,
            flicker_aq=flicker_aq,
            force_field_pictures=force_field_pictures,
            framerate_control=framerate_control,
            framerate_denominator=framerate_denominator,
            framerate_numerator=framerate_numerator,
            gop_b_reference=gop_b_reference,
            gop_closed_cadence=gop_closed_cadence,
            gop_num_b_frames=gop_num_b_frames,
            gop_size=gop_size,
            gop_size_units=gop_size_units,
            level=level,
            look_ahead_rate_control=look_ahead_rate_control,
            max_bitrate=max_bitrate,
            min_i_interval=min_i_interval,
            num_ref_frames=num_ref_frames,
            par_control=par_control,
            par_denominator=par_denominator,
            par_numerator=par_numerator,
            profile=profile,
            quality_level=quality_level,
            qvbr_quality_level=qvbr_quality_level,
            rate_control_mode=rate_control_mode,
            scan_type=scan_type,
            scene_change_detect=scene_change_detect,
            slices=slices,
            softness=softness,
            spatial_aq=spatial_aq,
            subgop_length=subgop_length,
            syntax=syntax,
            temporal_aq=temporal_aq,
            timecode_insertion=timecode_insertion,
        )

        return typing.cast(None, jsii.invoke(self, "putH264Settings", [value]))

    @jsii.member(jsii_name="resetFrameCaptureSettings")
    def reset_frame_capture_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureSettings", []))

    @jsii.member(jsii_name="resetH264Settings")
    def reset_h264_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH264Settings", []))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureSettings")
    def frame_capture_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference, jsii.get(self, "frameCaptureSettings"))

    @builtins.property
    @jsii.member(jsii_name="h264Settings")
    def h264_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference, jsii.get(self, "h264Settings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureSettingsInput")
    def frame_capture_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings], jsii.get(self, "frameCaptureSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="h264SettingsInput")
    def h264_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings], jsii.get(self, "h264SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsVideoDescriptionsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putCodecSettings")
    def put_codec_settings(
        self,
        *,
        frame_capture_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings, typing.Dict[str, typing.Any]]] = None,
        h264_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_settings: frame_capture_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#frame_capture_settings MedialiveChannel#frame_capture_settings}
        :param h264_settings: h264_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#h264_settings MedialiveChannel#h264_settings}
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings(
            frame_capture_settings=frame_capture_settings, h264_settings=h264_settings
        )

        return typing.cast(None, jsii.invoke(self, "putCodecSettings", [value]))

    @jsii.member(jsii_name="resetCodecSettings")
    def reset_codec_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodecSettings", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetRespondToAfd")
    def reset_respond_to_afd(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRespondToAfd", []))

    @jsii.member(jsii_name="resetScalingBehavior")
    def reset_scaling_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScalingBehavior", []))

    @jsii.member(jsii_name="resetSharpness")
    def reset_sharpness(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSharpness", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @builtins.property
    @jsii.member(jsii_name="codecSettings")
    def codec_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference, jsii.get(self, "codecSettings"))

    @builtins.property
    @jsii.member(jsii_name="codecSettingsInput")
    def codec_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings], jsii.get(self, "codecSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="respondToAfdInput")
    def respond_to_afd_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "respondToAfdInput"))

    @builtins.property
    @jsii.member(jsii_name="scalingBehaviorInput")
    def scaling_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scalingBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="sharpnessInput")
    def sharpness_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sharpnessInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="respondToAfd")
    def respond_to_afd(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "respondToAfd"))

    @respond_to_afd.setter
    def respond_to_afd(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "respondToAfd", value)

    @builtins.property
    @jsii.member(jsii_name="scalingBehavior")
    def scaling_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scalingBehavior"))

    @scaling_behavior.setter
    def scaling_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scalingBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="sharpness")
    def sharpness(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sharpness"))

    @sharpness.setter
    def sharpness(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sharpness", value)

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachments",
    jsii_struct_bases=[],
    name_mapping={
        "input_attachment_name": "inputAttachmentName",
        "input_id": "inputId",
        "automatic_input_failover_settings": "automaticInputFailoverSettings",
        "input_settings": "inputSettings",
    },
)
class MedialiveChannelInputAttachments:
    def __init__(
        self,
        *,
        input_attachment_name: builtins.str,
        input_id: builtins.str,
        automatic_input_failover_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings", typing.Dict[str, typing.Any]]] = None,
        input_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param input_attachment_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_attachment_name MedialiveChannel#input_attachment_name}.
        :param input_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_id MedialiveChannel#input_id}.
        :param automatic_input_failover_settings: automatic_input_failover_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#automatic_input_failover_settings MedialiveChannel#automatic_input_failover_settings}
        :param input_settings: input_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_settings MedialiveChannel#input_settings}
        '''
        if isinstance(automatic_input_failover_settings, dict):
            automatic_input_failover_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings(**automatic_input_failover_settings)
        if isinstance(input_settings, dict):
            input_settings = MedialiveChannelInputAttachmentsInputSettings(**input_settings)
        if __debug__:
            def stub(
                *,
                input_attachment_name: builtins.str,
                input_id: builtins.str,
                automatic_input_failover_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings, typing.Dict[str, typing.Any]]] = None,
                input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument input_attachment_name", value=input_attachment_name, expected_type=type_hints["input_attachment_name"])
            check_type(argname="argument input_id", value=input_id, expected_type=type_hints["input_id"])
            check_type(argname="argument automatic_input_failover_settings", value=automatic_input_failover_settings, expected_type=type_hints["automatic_input_failover_settings"])
            check_type(argname="argument input_settings", value=input_settings, expected_type=type_hints["input_settings"])
        self._values: typing.Dict[str, typing.Any] = {
            "input_attachment_name": input_attachment_name,
            "input_id": input_id,
        }
        if automatic_input_failover_settings is not None:
            self._values["automatic_input_failover_settings"] = automatic_input_failover_settings
        if input_settings is not None:
            self._values["input_settings"] = input_settings

    @builtins.property
    def input_attachment_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_attachment_name MedialiveChannel#input_attachment_name}.'''
        result = self._values.get("input_attachment_name")
        assert result is not None, "Required property 'input_attachment_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def input_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_id MedialiveChannel#input_id}.'''
        result = self._values.get("input_id")
        assert result is not None, "Required property 'input_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def automatic_input_failover_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings"]:
        '''automatic_input_failover_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#automatic_input_failover_settings MedialiveChannel#automatic_input_failover_settings}
        '''
        result = self._values.get("automatic_input_failover_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings"], result)

    @builtins.property
    def input_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettings"]:
        '''input_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_settings MedialiveChannel#input_settings}
        '''
        result = self._values.get("input_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachments(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings",
    jsii_struct_bases=[],
    name_mapping={
        "secondary_input_id": "secondaryInputId",
        "error_clear_time_msec": "errorClearTimeMsec",
        "failover_condition": "failoverCondition",
        "input_preference": "inputPreference",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings:
    def __init__(
        self,
        *,
        secondary_input_id: builtins.str,
        error_clear_time_msec: typing.Optional[jsii.Number] = None,
        failover_condition: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition", typing.Dict[str, typing.Any]]]]] = None,
        input_preference: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param secondary_input_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#secondary_input_id MedialiveChannel#secondary_input_id}.
        :param error_clear_time_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#error_clear_time_msec MedialiveChannel#error_clear_time_msec}.
        :param failover_condition: failover_condition block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#failover_condition MedialiveChannel#failover_condition}
        :param input_preference: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_preference MedialiveChannel#input_preference}.
        '''
        if __debug__:
            def stub(
                *,
                secondary_input_id: builtins.str,
                error_clear_time_msec: typing.Optional[jsii.Number] = None,
                failover_condition: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[str, typing.Any]]]]] = None,
                input_preference: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument secondary_input_id", value=secondary_input_id, expected_type=type_hints["secondary_input_id"])
            check_type(argname="argument error_clear_time_msec", value=error_clear_time_msec, expected_type=type_hints["error_clear_time_msec"])
            check_type(argname="argument failover_condition", value=failover_condition, expected_type=type_hints["failover_condition"])
            check_type(argname="argument input_preference", value=input_preference, expected_type=type_hints["input_preference"])
        self._values: typing.Dict[str, typing.Any] = {
            "secondary_input_id": secondary_input_id,
        }
        if error_clear_time_msec is not None:
            self._values["error_clear_time_msec"] = error_clear_time_msec
        if failover_condition is not None:
            self._values["failover_condition"] = failover_condition
        if input_preference is not None:
            self._values["input_preference"] = input_preference

    @builtins.property
    def secondary_input_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#secondary_input_id MedialiveChannel#secondary_input_id}.'''
        result = self._values.get("secondary_input_id")
        assert result is not None, "Required property 'secondary_input_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def error_clear_time_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#error_clear_time_msec MedialiveChannel#error_clear_time_msec}.'''
        result = self._values.get("error_clear_time_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def failover_condition(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition"]]]:
        '''failover_condition block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#failover_condition MedialiveChannel#failover_condition}
        '''
        result = self._values.get("failover_condition")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition"]]], result)

    @builtins.property
    def input_preference(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_preference MedialiveChannel#input_preference}.'''
        result = self._values.get("input_preference")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition",
    jsii_struct_bases=[],
    name_mapping={"failover_condition_settings": "failoverConditionSettings"},
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition:
    def __init__(
        self,
        *,
        failover_condition_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param failover_condition_settings: failover_condition_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#failover_condition_settings MedialiveChannel#failover_condition_settings}
        '''
        if isinstance(failover_condition_settings, dict):
            failover_condition_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings(**failover_condition_settings)
        if __debug__:
            def stub(
                *,
                failover_condition_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument failover_condition_settings", value=failover_condition_settings, expected_type=type_hints["failover_condition_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if failover_condition_settings is not None:
            self._values["failover_condition_settings"] = failover_condition_settings

    @builtins.property
    def failover_condition_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings"]:
        '''failover_condition_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#failover_condition_settings MedialiveChannel#failover_condition_settings}
        '''
        result = self._values.get("failover_condition_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_silence_settings": "audioSilenceSettings",
        "input_loss_settings": "inputLossSettings",
        "video_black_settings": "videoBlackSettings",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings:
    def __init__(
        self,
        *,
        audio_silence_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings", typing.Dict[str, typing.Any]]] = None,
        input_loss_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings", typing.Dict[str, typing.Any]]] = None,
        video_black_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_silence_settings: audio_silence_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_silence_settings MedialiveChannel#audio_silence_settings}
        :param input_loss_settings: input_loss_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_settings MedialiveChannel#input_loss_settings}
        :param video_black_settings: video_black_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_black_settings MedialiveChannel#video_black_settings}
        '''
        if isinstance(audio_silence_settings, dict):
            audio_silence_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings(**audio_silence_settings)
        if isinstance(input_loss_settings, dict):
            input_loss_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings(**input_loss_settings)
        if isinstance(video_black_settings, dict):
            video_black_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings(**video_black_settings)
        if __debug__:
            def stub(
                *,
                audio_silence_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings, typing.Dict[str, typing.Any]]] = None,
                input_loss_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings, typing.Dict[str, typing.Any]]] = None,
                video_black_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_silence_settings", value=audio_silence_settings, expected_type=type_hints["audio_silence_settings"])
            check_type(argname="argument input_loss_settings", value=input_loss_settings, expected_type=type_hints["input_loss_settings"])
            check_type(argname="argument video_black_settings", value=video_black_settings, expected_type=type_hints["video_black_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_silence_settings is not None:
            self._values["audio_silence_settings"] = audio_silence_settings
        if input_loss_settings is not None:
            self._values["input_loss_settings"] = input_loss_settings
        if video_black_settings is not None:
            self._values["video_black_settings"] = video_black_settings

    @builtins.property
    def audio_silence_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings"]:
        '''audio_silence_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_silence_settings MedialiveChannel#audio_silence_settings}
        '''
        result = self._values.get("audio_silence_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings"], result)

    @builtins.property
    def input_loss_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings"]:
        '''input_loss_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_settings MedialiveChannel#input_loss_settings}
        '''
        result = self._values.get("input_loss_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings"], result)

    @builtins.property
    def video_black_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"]:
        '''video_black_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_black_settings MedialiveChannel#video_black_settings}
        '''
        result = self._values.get("video_black_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_selector_name": "audioSelectorName",
        "audio_silence_threshold_msec": "audioSilenceThresholdMsec",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings:
    def __init__(
        self,
        *,
        audio_selector_name: builtins.str,
        audio_silence_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param audio_selector_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.
        :param audio_silence_threshold_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_silence_threshold_msec MedialiveChannel#audio_silence_threshold_msec}.
        '''
        if __debug__:
            def stub(
                *,
                audio_selector_name: builtins.str,
                audio_silence_threshold_msec: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_selector_name", value=audio_selector_name, expected_type=type_hints["audio_selector_name"])
            check_type(argname="argument audio_silence_threshold_msec", value=audio_silence_threshold_msec, expected_type=type_hints["audio_silence_threshold_msec"])
        self._values: typing.Dict[str, typing.Any] = {
            "audio_selector_name": audio_selector_name,
        }
        if audio_silence_threshold_msec is not None:
            self._values["audio_silence_threshold_msec"] = audio_silence_threshold_msec

    @builtins.property
    def audio_selector_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.'''
        result = self._values.get("audio_selector_name")
        assert result is not None, "Required property 'audio_selector_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def audio_silence_threshold_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_silence_threshold_msec MedialiveChannel#audio_silence_threshold_msec}.'''
        result = self._values.get("audio_silence_threshold_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAudioSilenceThresholdMsec")
    def reset_audio_silence_threshold_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioSilenceThresholdMsec", []))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorNameInput")
    def audio_selector_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioSelectorNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSilenceThresholdMsecInput")
    def audio_silence_threshold_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioSilenceThresholdMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorName")
    def audio_selector_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioSelectorName"))

    @audio_selector_name.setter
    def audio_selector_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioSelectorName", value)

    @builtins.property
    @jsii.member(jsii_name="audioSilenceThresholdMsec")
    def audio_silence_threshold_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioSilenceThresholdMsec"))

    @audio_silence_threshold_msec.setter
    def audio_silence_threshold_msec(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioSilenceThresholdMsec", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings",
    jsii_struct_bases=[],
    name_mapping={"input_loss_threshold_msec": "inputLossThresholdMsec"},
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings:
    def __init__(
        self,
        *,
        input_loss_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_threshold_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_threshold_msec MedialiveChannel#input_loss_threshold_msec}.
        '''
        if __debug__:
            def stub(
                *,
                input_loss_threshold_msec: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument input_loss_threshold_msec", value=input_loss_threshold_msec, expected_type=type_hints["input_loss_threshold_msec"])
        self._values: typing.Dict[str, typing.Any] = {}
        if input_loss_threshold_msec is not None:
            self._values["input_loss_threshold_msec"] = input_loss_threshold_msec

    @builtins.property
    def input_loss_threshold_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_threshold_msec MedialiveChannel#input_loss_threshold_msec}.'''
        result = self._values.get("input_loss_threshold_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetInputLossThresholdMsec")
    def reset_input_loss_threshold_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossThresholdMsec", []))

    @builtins.property
    @jsii.member(jsii_name="inputLossThresholdMsecInput")
    def input_loss_threshold_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "inputLossThresholdMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossThresholdMsec")
    def input_loss_threshold_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "inputLossThresholdMsec"))

    @input_loss_threshold_msec.setter
    def input_loss_threshold_msec(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossThresholdMsec", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioSilenceSettings")
    def put_audio_silence_settings(
        self,
        *,
        audio_selector_name: builtins.str,
        audio_silence_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param audio_selector_name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.
        :param audio_silence_threshold_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_silence_threshold_msec MedialiveChannel#audio_silence_threshold_msec}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings(
            audio_selector_name=audio_selector_name,
            audio_silence_threshold_msec=audio_silence_threshold_msec,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioSilenceSettings", [value]))

    @jsii.member(jsii_name="putInputLossSettings")
    def put_input_loss_settings(
        self,
        *,
        input_loss_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_threshold_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_threshold_msec MedialiveChannel#input_loss_threshold_msec}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings(
            input_loss_threshold_msec=input_loss_threshold_msec
        )

        return typing.cast(None, jsii.invoke(self, "putInputLossSettings", [value]))

    @jsii.member(jsii_name="putVideoBlackSettings")
    def put_video_black_settings(
        self,
        *,
        black_detect_threshold: typing.Optional[jsii.Number] = None,
        video_black_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param black_detect_threshold: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#black_detect_threshold MedialiveChannel#black_detect_threshold}.
        :param video_black_threshold_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_black_threshold_msec MedialiveChannel#video_black_threshold_msec}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings(
            black_detect_threshold=black_detect_threshold,
            video_black_threshold_msec=video_black_threshold_msec,
        )

        return typing.cast(None, jsii.invoke(self, "putVideoBlackSettings", [value]))

    @jsii.member(jsii_name="resetAudioSilenceSettings")
    def reset_audio_silence_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioSilenceSettings", []))

    @jsii.member(jsii_name="resetInputLossSettings")
    def reset_input_loss_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossSettings", []))

    @jsii.member(jsii_name="resetVideoBlackSettings")
    def reset_video_black_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoBlackSettings", []))

    @builtins.property
    @jsii.member(jsii_name="audioSilenceSettings")
    def audio_silence_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference, jsii.get(self, "audioSilenceSettings"))

    @builtins.property
    @jsii.member(jsii_name="inputLossSettings")
    def input_loss_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference, jsii.get(self, "inputLossSettings"))

    @builtins.property
    @jsii.member(jsii_name="videoBlackSettings")
    def video_black_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference", jsii.get(self, "videoBlackSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioSilenceSettingsInput")
    def audio_silence_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings], jsii.get(self, "audioSilenceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossSettingsInput")
    def input_loss_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings], jsii.get(self, "inputLossSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="videoBlackSettingsInput")
    def video_black_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"], jsii.get(self, "videoBlackSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings",
    jsii_struct_bases=[],
    name_mapping={
        "black_detect_threshold": "blackDetectThreshold",
        "video_black_threshold_msec": "videoBlackThresholdMsec",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings:
    def __init__(
        self,
        *,
        black_detect_threshold: typing.Optional[jsii.Number] = None,
        video_black_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param black_detect_threshold: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#black_detect_threshold MedialiveChannel#black_detect_threshold}.
        :param video_black_threshold_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_black_threshold_msec MedialiveChannel#video_black_threshold_msec}.
        '''
        if __debug__:
            def stub(
                *,
                black_detect_threshold: typing.Optional[jsii.Number] = None,
                video_black_threshold_msec: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument black_detect_threshold", value=black_detect_threshold, expected_type=type_hints["black_detect_threshold"])
            check_type(argname="argument video_black_threshold_msec", value=video_black_threshold_msec, expected_type=type_hints["video_black_threshold_msec"])
        self._values: typing.Dict[str, typing.Any] = {}
        if black_detect_threshold is not None:
            self._values["black_detect_threshold"] = black_detect_threshold
        if video_black_threshold_msec is not None:
            self._values["video_black_threshold_msec"] = video_black_threshold_msec

    @builtins.property
    def black_detect_threshold(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#black_detect_threshold MedialiveChannel#black_detect_threshold}.'''
        result = self._values.get("black_detect_threshold")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_black_threshold_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_black_threshold_msec MedialiveChannel#video_black_threshold_msec}.'''
        result = self._values.get("video_black_threshold_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBlackDetectThreshold")
    def reset_black_detect_threshold(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBlackDetectThreshold", []))

    @jsii.member(jsii_name="resetVideoBlackThresholdMsec")
    def reset_video_black_threshold_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoBlackThresholdMsec", []))

    @builtins.property
    @jsii.member(jsii_name="blackDetectThresholdInput")
    def black_detect_threshold_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "blackDetectThresholdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoBlackThresholdMsecInput")
    def video_black_threshold_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "videoBlackThresholdMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="blackDetectThreshold")
    def black_detect_threshold(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "blackDetectThreshold"))

    @black_detect_threshold.setter
    def black_detect_threshold(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "blackDetectThreshold", value)

    @builtins.property
    @jsii.member(jsii_name="videoBlackThresholdMsec")
    def video_black_threshold_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "videoBlackThresholdMsec"))

    @video_black_threshold_msec.setter
    def video_black_threshold_msec(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoBlackThresholdMsec", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putFailoverConditionSettings")
    def put_failover_condition_settings(
        self,
        *,
        audio_silence_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings, typing.Dict[str, typing.Any]]] = None,
        input_loss_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings, typing.Dict[str, typing.Any]]] = None,
        video_black_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_silence_settings: audio_silence_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_silence_settings MedialiveChannel#audio_silence_settings}
        :param input_loss_settings: input_loss_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_loss_settings MedialiveChannel#input_loss_settings}
        :param video_black_settings: video_black_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_black_settings MedialiveChannel#video_black_settings}
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings(
            audio_silence_settings=audio_silence_settings,
            input_loss_settings=input_loss_settings,
            video_black_settings=video_black_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putFailoverConditionSettings", [value]))

    @jsii.member(jsii_name="resetFailoverConditionSettings")
    def reset_failover_condition_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFailoverConditionSettings", []))

    @builtins.property
    @jsii.member(jsii_name="failoverConditionSettings")
    def failover_condition_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference, jsii.get(self, "failoverConditionSettings"))

    @builtins.property
    @jsii.member(jsii_name="failoverConditionSettingsInput")
    def failover_condition_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings], jsii.get(self, "failoverConditionSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFailoverCondition")
    def put_failover_condition(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFailoverCondition", [value]))

    @jsii.member(jsii_name="resetErrorClearTimeMsec")
    def reset_error_clear_time_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetErrorClearTimeMsec", []))

    @jsii.member(jsii_name="resetFailoverCondition")
    def reset_failover_condition(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFailoverCondition", []))

    @jsii.member(jsii_name="resetInputPreference")
    def reset_input_preference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputPreference", []))

    @builtins.property
    @jsii.member(jsii_name="failoverCondition")
    def failover_condition(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList, jsii.get(self, "failoverCondition"))

    @builtins.property
    @jsii.member(jsii_name="errorClearTimeMsecInput")
    def error_clear_time_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "errorClearTimeMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="failoverConditionInput")
    def failover_condition_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]], jsii.get(self, "failoverConditionInput"))

    @builtins.property
    @jsii.member(jsii_name="inputPreferenceInput")
    def input_preference_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputPreferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="secondaryInputIdInput")
    def secondary_input_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secondaryInputIdInput"))

    @builtins.property
    @jsii.member(jsii_name="errorClearTimeMsec")
    def error_clear_time_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "errorClearTimeMsec"))

    @error_clear_time_msec.setter
    def error_clear_time_msec(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "errorClearTimeMsec", value)

    @builtins.property
    @jsii.member(jsii_name="inputPreference")
    def input_preference(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputPreference"))

    @input_preference.setter
    def input_preference(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputPreference", value)

    @builtins.property
    @jsii.member(jsii_name="secondaryInputId")
    def secondary_input_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secondaryInputId"))

    @secondary_input_id.setter
    def secondary_input_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secondaryInputId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_selector": "audioSelector",
        "caption_selector": "captionSelector",
        "deblock_filter": "deblockFilter",
        "denoise_filter": "denoiseFilter",
        "filter_strength": "filterStrength",
        "input_filter": "inputFilter",
        "network_input_settings": "networkInputSettings",
        "scte35_pid": "scte35Pid",
        "smpte2038_data_preference": "smpte2038DataPreference",
        "source_end_behavior": "sourceEndBehavior",
        "video_selector": "videoSelector",
    },
)
class MedialiveChannelInputAttachmentsInputSettings:
    def __init__(
        self,
        *,
        audio_selector: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelector", typing.Dict[str, typing.Any]]]]] = None,
        caption_selector: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelector", typing.Dict[str, typing.Any]]]]] = None,
        deblock_filter: typing.Optional[builtins.str] = None,
        denoise_filter: typing.Optional[builtins.str] = None,
        filter_strength: typing.Optional[jsii.Number] = None,
        input_filter: typing.Optional[builtins.str] = None,
        network_input_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings", typing.Dict[str, typing.Any]]] = None,
        scte35_pid: typing.Optional[jsii.Number] = None,
        smpte2038_data_preference: typing.Optional[builtins.str] = None,
        source_end_behavior: typing.Optional[builtins.str] = None,
        video_selector: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsVideoSelector", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_selector: audio_selector block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector MedialiveChannel#audio_selector}
        :param caption_selector: caption_selector block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_selector MedialiveChannel#caption_selector}
        :param deblock_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#deblock_filter MedialiveChannel#deblock_filter}.
        :param denoise_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#denoise_filter MedialiveChannel#denoise_filter}.
        :param filter_strength: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filter_strength MedialiveChannel#filter_strength}.
        :param input_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_filter MedialiveChannel#input_filter}.
        :param network_input_settings: network_input_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_input_settings MedialiveChannel#network_input_settings}
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param smpte2038_data_preference: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#smpte2038_data_preference MedialiveChannel#smpte2038_data_preference}.
        :param source_end_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_end_behavior MedialiveChannel#source_end_behavior}.
        :param video_selector: video_selector block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_selector MedialiveChannel#video_selector}
        '''
        if isinstance(network_input_settings, dict):
            network_input_settings = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings(**network_input_settings)
        if isinstance(video_selector, dict):
            video_selector = MedialiveChannelInputAttachmentsInputSettingsVideoSelector(**video_selector)
        if __debug__:
            def stub(
                *,
                audio_selector: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[str, typing.Any]]]]] = None,
                caption_selector: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[str, typing.Any]]]]] = None,
                deblock_filter: typing.Optional[builtins.str] = None,
                denoise_filter: typing.Optional[builtins.str] = None,
                filter_strength: typing.Optional[jsii.Number] = None,
                input_filter: typing.Optional[builtins.str] = None,
                network_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings, typing.Dict[str, typing.Any]]] = None,
                scte35_pid: typing.Optional[jsii.Number] = None,
                smpte2038_data_preference: typing.Optional[builtins.str] = None,
                source_end_behavior: typing.Optional[builtins.str] = None,
                video_selector: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsVideoSelector, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_selector", value=audio_selector, expected_type=type_hints["audio_selector"])
            check_type(argname="argument caption_selector", value=caption_selector, expected_type=type_hints["caption_selector"])
            check_type(argname="argument deblock_filter", value=deblock_filter, expected_type=type_hints["deblock_filter"])
            check_type(argname="argument denoise_filter", value=denoise_filter, expected_type=type_hints["denoise_filter"])
            check_type(argname="argument filter_strength", value=filter_strength, expected_type=type_hints["filter_strength"])
            check_type(argname="argument input_filter", value=input_filter, expected_type=type_hints["input_filter"])
            check_type(argname="argument network_input_settings", value=network_input_settings, expected_type=type_hints["network_input_settings"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument smpte2038_data_preference", value=smpte2038_data_preference, expected_type=type_hints["smpte2038_data_preference"])
            check_type(argname="argument source_end_behavior", value=source_end_behavior, expected_type=type_hints["source_end_behavior"])
            check_type(argname="argument video_selector", value=video_selector, expected_type=type_hints["video_selector"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_selector is not None:
            self._values["audio_selector"] = audio_selector
        if caption_selector is not None:
            self._values["caption_selector"] = caption_selector
        if deblock_filter is not None:
            self._values["deblock_filter"] = deblock_filter
        if denoise_filter is not None:
            self._values["denoise_filter"] = denoise_filter
        if filter_strength is not None:
            self._values["filter_strength"] = filter_strength
        if input_filter is not None:
            self._values["input_filter"] = input_filter
        if network_input_settings is not None:
            self._values["network_input_settings"] = network_input_settings
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if smpte2038_data_preference is not None:
            self._values["smpte2038_data_preference"] = smpte2038_data_preference
        if source_end_behavior is not None:
            self._values["source_end_behavior"] = source_end_behavior
        if video_selector is not None:
            self._values["video_selector"] = video_selector

    @builtins.property
    def audio_selector(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelector"]]]:
        '''audio_selector block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector MedialiveChannel#audio_selector}
        '''
        result = self._values.get("audio_selector")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelector"]]], result)

    @builtins.property
    def caption_selector(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsCaptionSelector"]]]:
        '''caption_selector block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_selector MedialiveChannel#caption_selector}
        '''
        result = self._values.get("caption_selector")
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsCaptionSelector"]]], result)

    @builtins.property
    def deblock_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#deblock_filter MedialiveChannel#deblock_filter}.'''
        result = self._values.get("deblock_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def denoise_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#denoise_filter MedialiveChannel#denoise_filter}.'''
        result = self._values.get("denoise_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filter_strength(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filter_strength MedialiveChannel#filter_strength}.'''
        result = self._values.get("filter_strength")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_filter MedialiveChannel#input_filter}.'''
        result = self._values.get("input_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def network_input_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings"]:
        '''network_input_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_input_settings MedialiveChannel#network_input_settings}
        '''
        result = self._values.get("network_input_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings"], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def smpte2038_data_preference(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#smpte2038_data_preference MedialiveChannel#smpte2038_data_preference}.'''
        result = self._values.get("smpte2038_data_preference")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source_end_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_end_behavior MedialiveChannel#source_end_behavior}.'''
        result = self._values.get("source_end_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def video_selector(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"]:
        '''video_selector block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_selector MedialiveChannel#video_selector}
        '''
        result = self._values.get("video_selector")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelector",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "selector_settings": "selectorSettings"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelector:
    def __init__(
        self,
        *,
        name: builtins.str,
        selector_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        :param selector_settings: selector_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        if isinstance(selector_settings, dict):
            selector_settings = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings(**selector_settings)
        if __debug__:
            def stub(
                *,
                name: builtins.str,
                selector_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument selector_settings", value=selector_settings, expected_type=type_hints["selector_settings"])
        self._values: typing.Dict[str, typing.Any] = {
            "name": name,
        }
        if selector_settings is not None:
            self._values["selector_settings"] = selector_settings

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def selector_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"]:
        '''selector_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        result = self._values.get("selector_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSelectorSettings")
    def put_selector_settings(
        self,
        *,
        audio_hls_rendition_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection", typing.Dict[str, typing.Any]]] = None,
        audio_language_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection", typing.Dict[str, typing.Any]]] = None,
        audio_pid_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection", typing.Dict[str, typing.Any]]] = None,
        audio_track_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_hls_rendition_selection: audio_hls_rendition_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_hls_rendition_selection MedialiveChannel#audio_hls_rendition_selection}
        :param audio_language_selection: audio_language_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_language_selection MedialiveChannel#audio_language_selection}
        :param audio_pid_selection: audio_pid_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pid_selection MedialiveChannel#audio_pid_selection}
        :param audio_track_selection: audio_track_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_track_selection MedialiveChannel#audio_track_selection}
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings(
            audio_hls_rendition_selection=audio_hls_rendition_selection,
            audio_language_selection=audio_language_selection,
            audio_pid_selection=audio_pid_selection,
            audio_track_selection=audio_track_selection,
        )

        return typing.cast(None, jsii.invoke(self, "putSelectorSettings", [value]))

    @jsii.member(jsii_name="resetSelectorSettings")
    def reset_selector_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelectorSettings", []))

    @builtins.property
    @jsii.member(jsii_name="selectorSettings")
    def selector_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference", jsii.get(self, "selectorSettings"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="selectorSettingsInput")
    def selector_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"], jsii.get(self, "selectorSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_hls_rendition_selection": "audioHlsRenditionSelection",
        "audio_language_selection": "audioLanguageSelection",
        "audio_pid_selection": "audioPidSelection",
        "audio_track_selection": "audioTrackSelection",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings:
    def __init__(
        self,
        *,
        audio_hls_rendition_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection", typing.Dict[str, typing.Any]]] = None,
        audio_language_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection", typing.Dict[str, typing.Any]]] = None,
        audio_pid_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection", typing.Dict[str, typing.Any]]] = None,
        audio_track_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_hls_rendition_selection: audio_hls_rendition_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_hls_rendition_selection MedialiveChannel#audio_hls_rendition_selection}
        :param audio_language_selection: audio_language_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_language_selection MedialiveChannel#audio_language_selection}
        :param audio_pid_selection: audio_pid_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pid_selection MedialiveChannel#audio_pid_selection}
        :param audio_track_selection: audio_track_selection block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_track_selection MedialiveChannel#audio_track_selection}
        '''
        if isinstance(audio_hls_rendition_selection, dict):
            audio_hls_rendition_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection(**audio_hls_rendition_selection)
        if isinstance(audio_language_selection, dict):
            audio_language_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection(**audio_language_selection)
        if isinstance(audio_pid_selection, dict):
            audio_pid_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection(**audio_pid_selection)
        if isinstance(audio_track_selection, dict):
            audio_track_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection(**audio_track_selection)
        if __debug__:
            def stub(
                *,
                audio_hls_rendition_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection, typing.Dict[str, typing.Any]]] = None,
                audio_language_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection, typing.Dict[str, typing.Any]]] = None,
                audio_pid_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection, typing.Dict[str, typing.Any]]] = None,
                audio_track_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument audio_hls_rendition_selection", value=audio_hls_rendition_selection, expected_type=type_hints["audio_hls_rendition_selection"])
            check_type(argname="argument audio_language_selection", value=audio_language_selection, expected_type=type_hints["audio_language_selection"])
            check_type(argname="argument audio_pid_selection", value=audio_pid_selection, expected_type=type_hints["audio_pid_selection"])
            check_type(argname="argument audio_track_selection", value=audio_track_selection, expected_type=type_hints["audio_track_selection"])
        self._values: typing.Dict[str, typing.Any] = {}
        if audio_hls_rendition_selection is not None:
            self._values["audio_hls_rendition_selection"] = audio_hls_rendition_selection
        if audio_language_selection is not None:
            self._values["audio_language_selection"] = audio_language_selection
        if audio_pid_selection is not None:
            self._values["audio_pid_selection"] = audio_pid_selection
        if audio_track_selection is not None:
            self._values["audio_track_selection"] = audio_track_selection

    @builtins.property
    def audio_hls_rendition_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection"]:
        '''audio_hls_rendition_selection block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_hls_rendition_selection MedialiveChannel#audio_hls_rendition_selection}
        '''
        result = self._values.get("audio_hls_rendition_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection"], result)

    @builtins.property
    def audio_language_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection"]:
        '''audio_language_selection block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_language_selection MedialiveChannel#audio_language_selection}
        '''
        result = self._values.get("audio_language_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection"], result)

    @builtins.property
    def audio_pid_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection"]:
        '''audio_pid_selection block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_pid_selection MedialiveChannel#audio_pid_selection}
        '''
        result = self._values.get("audio_pid_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection"], result)

    @builtins.property
    def audio_track_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection"]:
        '''audio_track_selection block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_track_selection MedialiveChannel#audio_track_selection}
        '''
        result = self._values.get("audio_track_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection",
    jsii_struct_bases=[],
    name_mapping={"group_id": "groupId", "name": "name"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection:
    def __init__(self, *, group_id: builtins.str, name: builtins.str) -> None:
        '''
        :param group_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#group_id MedialiveChannel#group_id}.
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        '''
        if __debug__:
            def stub(*, group_id: builtins.str, name: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument group_id", value=group_id, expected_type=type_hints["group_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[str, typing.Any] = {
            "group_id": group_id,
            "name": name,
        }

    @builtins.property
    def group_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#group_id MedialiveChannel#group_id}.'''
        result = self._values.get("group_id")
        assert result is not None, "Required property 'group_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="groupIdInput")
    def group_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="groupId")
    def group_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "groupId"))

    @group_id.setter
    def group_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "groupId", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection",
    jsii_struct_bases=[],
    name_mapping={
        "language_code": "languageCode",
        "language_selection_policy": "languageSelectionPolicy",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection:
    def __init__(
        self,
        *,
        language_code: builtins.str,
        language_selection_policy: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param language_code: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_selection_policy: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_selection_policy MedialiveChannel#language_selection_policy}.
        '''
        if __debug__:
            def stub(
                *,
                language_code: builtins.str,
                language_selection_policy: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_selection_policy", value=language_selection_policy, expected_type=type_hints["language_selection_policy"])
        self._values: typing.Dict[str, typing.Any] = {
            "language_code": language_code,
        }
        if language_selection_policy is not None:
            self._values["language_selection_policy"] = language_selection_policy

    @builtins.property
    def language_code(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        assert result is not None, "Required property 'language_code' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def language_selection_policy(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_selection_policy MedialiveChannel#language_selection_policy}.'''
        result = self._values.get("language_selection_policy")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetLanguageSelectionPolicy")
    def reset_language_selection_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageSelectionPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="languageSelectionPolicyInput")
    def language_selection_policy_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageSelectionPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value)

    @builtins.property
    @jsii.member(jsii_name="languageSelectionPolicy")
    def language_selection_policy(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageSelectionPolicy"))

    @language_selection_policy.setter
    def language_selection_policy(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageSelectionPolicy", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection",
    jsii_struct_bases=[],
    name_mapping={"pid": "pid"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection:
    def __init__(self, *, pid: jsii.Number) -> None:
        '''
        :param pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.
        '''
        if __debug__:
            def stub(*, pid: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument pid", value=pid, expected_type=type_hints["pid"])
        self._values: typing.Dict[str, typing.Any] = {
            "pid": pid,
        }

    @builtins.property
    def pid(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.'''
        result = self._values.get("pid")
        assert result is not None, "Required property 'pid' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="pidInput")
    def pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pidInput"))

    @builtins.property
    @jsii.member(jsii_name="pid")
    def pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pid"))

    @pid.setter
    def pid(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection",
    jsii_struct_bases=[],
    name_mapping={"track": "track"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection:
    def __init__(
        self,
        *,
        track: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param track: track block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#track MedialiveChannel#track}
        '''
        if __debug__:
            def stub(
                *,
                track: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument track", value=track, expected_type=type_hints["track"])
        self._values: typing.Dict[str, typing.Any] = {
            "track": track,
        }

    @builtins.property
    def track(
        self,
    ) -> typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack"]]:
        '''track block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#track MedialiveChannel#track}
        '''
        result = self._values.get("track")
        assert result is not None, "Required property 'track' is missing"
        return typing.cast(typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack"]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTrack")
    def put_track(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack", typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTrack", [value]))

    @builtins.property
    @jsii.member(jsii_name="track")
    def track(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList", jsii.get(self, "track"))

    @builtins.property
    @jsii.member(jsii_name="trackInput")
    def track_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack"]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack"]]], jsii.get(self, "trackInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack",
    jsii_struct_bases=[],
    name_mapping={"track": "track"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack:
    def __init__(self, *, track: jsii.Number) -> None:
        '''
        :param track: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#track MedialiveChannel#track}.
        '''
        if __debug__:
            def stub(*, track: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument track", value=track, expected_type=type_hints["track"])
        self._values: typing.Dict[str, typing.Any] = {
            "track": track,
        }

    @builtins.property
    def track(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#track MedialiveChannel#track}.'''
        result = self._values.get("track")
        assert result is not None, "Required property 'track' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="trackInput")
    def track_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "trackInput"))

    @builtins.property
    @jsii.member(jsii_name="track")
    def track(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "track"))

    @track.setter
    def track(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "track", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioHlsRenditionSelection")
    def put_audio_hls_rendition_selection(
        self,
        *,
        group_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param group_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#group_id MedialiveChannel#group_id}.
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection(
            group_id=group_id, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putAudioHlsRenditionSelection", [value]))

    @jsii.member(jsii_name="putAudioLanguageSelection")
    def put_audio_language_selection(
        self,
        *,
        language_code: builtins.str,
        language_selection_policy: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param language_code: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_selection_policy: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_selection_policy MedialiveChannel#language_selection_policy}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection(
            language_code=language_code,
            language_selection_policy=language_selection_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioLanguageSelection", [value]))

    @jsii.member(jsii_name="putAudioPidSelection")
    def put_audio_pid_selection(self, *, pid: jsii.Number) -> None:
        '''
        :param pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection(
            pid=pid
        )

        return typing.cast(None, jsii.invoke(self, "putAudioPidSelection", [value]))

    @jsii.member(jsii_name="putAudioTrackSelection")
    def put_audio_track_selection(
        self,
        *,
        track: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param track: track block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#track MedialiveChannel#track}
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection(
            track=track
        )

        return typing.cast(None, jsii.invoke(self, "putAudioTrackSelection", [value]))

    @jsii.member(jsii_name="resetAudioHlsRenditionSelection")
    def reset_audio_hls_rendition_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioHlsRenditionSelection", []))

    @jsii.member(jsii_name="resetAudioLanguageSelection")
    def reset_audio_language_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioLanguageSelection", []))

    @jsii.member(jsii_name="resetAudioPidSelection")
    def reset_audio_pid_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPidSelection", []))

    @jsii.member(jsii_name="resetAudioTrackSelection")
    def reset_audio_track_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioTrackSelection", []))

    @builtins.property
    @jsii.member(jsii_name="audioHlsRenditionSelection")
    def audio_hls_rendition_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference, jsii.get(self, "audioHlsRenditionSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioLanguageSelection")
    def audio_language_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference, jsii.get(self, "audioLanguageSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioPidSelection")
    def audio_pid_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference, jsii.get(self, "audioPidSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioTrackSelection")
    def audio_track_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference, jsii.get(self, "audioTrackSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioHlsRenditionSelectionInput")
    def audio_hls_rendition_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection], jsii.get(self, "audioHlsRenditionSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="audioLanguageSelectionInput")
    def audio_language_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection], jsii.get(self, "audioLanguageSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidSelectionInput")
    def audio_pid_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection], jsii.get(self, "audioPidSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTrackSelectionInput")
    def audio_track_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection], jsii.get(self, "audioTrackSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelector",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "language_code": "languageCode",
        "selector_settings": "selectorSettings",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelector:
    def __init__(
        self,
        *,
        name: builtins.str,
        language_code: typing.Optional[builtins.str] = None,
        selector_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param name: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.
        :param language_code: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.
        :param selector_settings: selector_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        if isinstance(selector_settings, dict):
            selector_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings(**selector_settings)
        if __debug__:
            def stub(
                *,
                name: builtins.str,
                language_code: typing.Optional[builtins.str] = None,
                selector_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument selector_settings", value=selector_settings, expected_type=type_hints["selector_settings"])
        self._values: typing.Dict[str, typing.Any] = {
            "name": name,
        }
        if language_code is not None:
            self._values["language_code"] = language_code
        if selector_settings is not None:
            self._values["selector_settings"] = selector_settings

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def language_code(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def selector_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"]:
        '''selector_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        result = self._values.get("selector_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSelectorSettings")
    def put_selector_settings(
        self,
        *,
        ancillary_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_tdt_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings", typing.Dict[str, typing.Any]]] = None,
        embedded_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings", typing.Dict[str, typing.Any]]] = None,
        scte20_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings", typing.Dict[str, typing.Any]]] = None,
        scte27_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings", typing.Dict[str, typing.Any]]] = None,
        teletext_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param ancillary_source_settings: ancillary_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ancillary_source_settings MedialiveChannel#ancillary_source_settings}
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param embedded_source_settings: embedded_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#embedded_source_settings MedialiveChannel#embedded_source_settings}
        :param scte20_source_settings: scte20_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte20_source_settings MedialiveChannel#scte20_source_settings}
        :param scte27_source_settings: scte27_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_source_settings MedialiveChannel#scte27_source_settings}
        :param teletext_source_settings: teletext_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#teletext_source_settings MedialiveChannel#teletext_source_settings}
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings(
            ancillary_source_settings=ancillary_source_settings,
            dvb_tdt_settings=dvb_tdt_settings,
            embedded_source_settings=embedded_source_settings,
            scte20_source_settings=scte20_source_settings,
            scte27_source_settings=scte27_source_settings,
            teletext_source_settings=teletext_source_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putSelectorSettings", [value]))

    @jsii.member(jsii_name="resetLanguageCode")
    def reset_language_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCode", []))

    @jsii.member(jsii_name="resetSelectorSettings")
    def reset_selector_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelectorSettings", []))

    @builtins.property
    @jsii.member(jsii_name="selectorSettings")
    def selector_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference", jsii.get(self, "selectorSettings"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="selectorSettingsInput")
    def selector_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"], jsii.get(self, "selectorSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings",
    jsii_struct_bases=[],
    name_mapping={
        "ancillary_source_settings": "ancillarySourceSettings",
        "dvb_tdt_settings": "dvbTdtSettings",
        "embedded_source_settings": "embeddedSourceSettings",
        "scte20_source_settings": "scte20SourceSettings",
        "scte27_source_settings": "scte27SourceSettings",
        "teletext_source_settings": "teletextSourceSettings",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings:
    def __init__(
        self,
        *,
        ancillary_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings", typing.Dict[str, typing.Any]]] = None,
        dvb_tdt_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings", typing.Dict[str, typing.Any]]] = None,
        embedded_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings", typing.Dict[str, typing.Any]]] = None,
        scte20_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings", typing.Dict[str, typing.Any]]] = None,
        scte27_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings", typing.Dict[str, typing.Any]]] = None,
        teletext_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings", typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param ancillary_source_settings: ancillary_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ancillary_source_settings MedialiveChannel#ancillary_source_settings}
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param embedded_source_settings: embedded_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#embedded_source_settings MedialiveChannel#embedded_source_settings}
        :param scte20_source_settings: scte20_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte20_source_settings MedialiveChannel#scte20_source_settings}
        :param scte27_source_settings: scte27_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_source_settings MedialiveChannel#scte27_source_settings}
        :param teletext_source_settings: teletext_source_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#teletext_source_settings MedialiveChannel#teletext_source_settings}
        '''
        if isinstance(ancillary_source_settings, dict):
            ancillary_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings(**ancillary_source_settings)
        if isinstance(dvb_tdt_settings, dict):
            dvb_tdt_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings(**dvb_tdt_settings)
        if isinstance(embedded_source_settings, dict):
            embedded_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings(**embedded_source_settings)
        if isinstance(scte20_source_settings, dict):
            scte20_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings(**scte20_source_settings)
        if isinstance(scte27_source_settings, dict):
            scte27_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings(**scte27_source_settings)
        if isinstance(teletext_source_settings, dict):
            teletext_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings(**teletext_source_settings)
        if __debug__:
            def stub(
                *,
                ancillary_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings, typing.Dict[str, typing.Any]]] = None,
                dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings, typing.Dict[str, typing.Any]]] = None,
                embedded_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings, typing.Dict[str, typing.Any]]] = None,
                scte20_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings, typing.Dict[str, typing.Any]]] = None,
                scte27_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings, typing.Dict[str, typing.Any]]] = None,
                teletext_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings, typing.Dict[str, typing.Any]]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument ancillary_source_settings", value=ancillary_source_settings, expected_type=type_hints["ancillary_source_settings"])
            check_type(argname="argument dvb_tdt_settings", value=dvb_tdt_settings, expected_type=type_hints["dvb_tdt_settings"])
            check_type(argname="argument embedded_source_settings", value=embedded_source_settings, expected_type=type_hints["embedded_source_settings"])
            check_type(argname="argument scte20_source_settings", value=scte20_source_settings, expected_type=type_hints["scte20_source_settings"])
            check_type(argname="argument scte27_source_settings", value=scte27_source_settings, expected_type=type_hints["scte27_source_settings"])
            check_type(argname="argument teletext_source_settings", value=teletext_source_settings, expected_type=type_hints["teletext_source_settings"])
        self._values: typing.Dict[str, typing.Any] = {}
        if ancillary_source_settings is not None:
            self._values["ancillary_source_settings"] = ancillary_source_settings
        if dvb_tdt_settings is not None:
            self._values["dvb_tdt_settings"] = dvb_tdt_settings
        if embedded_source_settings is not None:
            self._values["embedded_source_settings"] = embedded_source_settings
        if scte20_source_settings is not None:
            self._values["scte20_source_settings"] = scte20_source_settings
        if scte27_source_settings is not None:
            self._values["scte27_source_settings"] = scte27_source_settings
        if teletext_source_settings is not None:
            self._values["teletext_source_settings"] = teletext_source_settings

    @builtins.property
    def ancillary_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings"]:
        '''ancillary_source_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ancillary_source_settings MedialiveChannel#ancillary_source_settings}
        '''
        result = self._values.get("ancillary_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings"], result)

    @builtins.property
    def dvb_tdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings"]:
        '''dvb_tdt_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        '''
        result = self._values.get("dvb_tdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings"], result)

    @builtins.property
    def embedded_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings"]:
        '''embedded_source_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#embedded_source_settings MedialiveChannel#embedded_source_settings}
        '''
        result = self._values.get("embedded_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings"], result)

    @builtins.property
    def scte20_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"]:
        '''scte20_source_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte20_source_settings MedialiveChannel#scte20_source_settings}
        '''
        result = self._values.get("scte20_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"], result)

    @builtins.property
    def scte27_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"]:
        '''scte27_source_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte27_source_settings MedialiveChannel#scte27_source_settings}
        '''
        result = self._values.get("scte27_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"], result)

    @builtins.property
    def teletext_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"]:
        '''teletext_source_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#teletext_source_settings MedialiveChannel#teletext_source_settings}
        '''
        result = self._values.get("teletext_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings",
    jsii_struct_bases=[],
    name_mapping={"source_ancillary_channel_number": "sourceAncillaryChannelNumber"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings:
    def __init__(
        self,
        *,
        source_ancillary_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source_ancillary_channel_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_ancillary_channel_number MedialiveChannel#source_ancillary_channel_number}.
        '''
        if __debug__:
            def stub(
                *,
                source_ancillary_channel_number: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument source_ancillary_channel_number", value=source_ancillary_channel_number, expected_type=type_hints["source_ancillary_channel_number"])
        self._values: typing.Dict[str, typing.Any] = {}
        if source_ancillary_channel_number is not None:
            self._values["source_ancillary_channel_number"] = source_ancillary_channel_number

    @builtins.property
    def source_ancillary_channel_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_ancillary_channel_number MedialiveChannel#source_ancillary_channel_number}.'''
        result = self._values.get("source_ancillary_channel_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetSourceAncillaryChannelNumber")
    def reset_source_ancillary_channel_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceAncillaryChannelNumber", []))

    @builtins.property
    @jsii.member(jsii_name="sourceAncillaryChannelNumberInput")
    def source_ancillary_channel_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sourceAncillaryChannelNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceAncillaryChannelNumber")
    def source_ancillary_channel_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sourceAncillaryChannelNumber"))

    @source_ancillary_channel_number.setter
    def source_ancillary_channel_number(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sourceAncillaryChannelNumber", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings",
    jsii_struct_bases=[],
    name_mapping={"ocr_language": "ocrLanguage", "pid": "pid"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings:
    def __init__(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.
        '''
        if __debug__:
            def stub(
                *,
                ocr_language: typing.Optional[builtins.str] = None,
                pid: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument ocr_language", value=ocr_language, expected_type=type_hints["ocr_language"])
            check_type(argname="argument pid", value=pid, expected_type=type_hints["pid"])
        self._values: typing.Dict[str, typing.Any] = {}
        if ocr_language is not None:
            self._values["ocr_language"] = ocr_language
        if pid is not None:
            self._values["pid"] = pid

    @builtins.property
    def ocr_language(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ocr_language MedialiveChannel#ocr_language}.'''
        result = self._values.get("ocr_language")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pid(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.'''
        result = self._values.get("pid")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOcrLanguage")
    def reset_ocr_language(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOcrLanguage", []))

    @jsii.member(jsii_name="resetPid")
    def reset_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPid", []))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguageInput")
    def ocr_language_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ocrLanguageInput"))

    @builtins.property
    @jsii.member(jsii_name="pidInput")
    def pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pidInput"))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguage")
    def ocr_language(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ocrLanguage"))

    @ocr_language.setter
    def ocr_language(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ocrLanguage", value)

    @builtins.property
    @jsii.member(jsii_name="pid")
    def pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pid"))

    @pid.setter
    def pid(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "convert608_to708": "convert608To708",
        "scte20_detection": "scte20Detection",
        "source608_channel_number": "source608ChannelNumber",
        "source608_track_number": "source608TrackNumber",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings:
    def __init__(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        scte20_detection: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
        source608_track_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param scte20_detection: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte20_detection MedialiveChannel#scte20_detection}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        :param source608_track_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_track_number MedialiveChannel#source_608_track_number}.
        '''
        if __debug__:
            def stub(
                *,
                convert608_to708: typing.Optional[builtins.str] = None,
                scte20_detection: typing.Optional[builtins.str] = None,
                source608_channel_number: typing.Optional[jsii.Number] = None,
                source608_track_number: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument convert608_to708", value=convert608_to708, expected_type=type_hints["convert608_to708"])
            check_type(argname="argument scte20_detection", value=scte20_detection, expected_type=type_hints["scte20_detection"])
            check_type(argname="argument source608_channel_number", value=source608_channel_number, expected_type=type_hints["source608_channel_number"])
            check_type(argname="argument source608_track_number", value=source608_track_number, expected_type=type_hints["source608_track_number"])
        self._values: typing.Dict[str, typing.Any] = {}
        if convert608_to708 is not None:
            self._values["convert608_to708"] = convert608_to708
        if scte20_detection is not None:
            self._values["scte20_detection"] = scte20_detection
        if source608_channel_number is not None:
            self._values["source608_channel_number"] = source608_channel_number
        if source608_track_number is not None:
            self._values["source608_track_number"] = source608_track_number

    @builtins.property
    def convert608_to708(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.'''
        result = self._values.get("convert608_to708")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte20_detection(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte20_detection MedialiveChannel#scte20_detection}.'''
        result = self._values.get("scte20_detection")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source608_channel_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.'''
        result = self._values.get("source608_channel_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source608_track_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_track_number MedialiveChannel#source_608_track_number}.'''
        result = self._values.get("source608_track_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConvert608To708")
    def reset_convert608_to708(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConvert608To708", []))

    @jsii.member(jsii_name="resetScte20Detection")
    def reset_scte20_detection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte20Detection", []))

    @jsii.member(jsii_name="resetSource608ChannelNumber")
    def reset_source608_channel_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource608ChannelNumber", []))

    @jsii.member(jsii_name="resetSource608TrackNumber")
    def reset_source608_track_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource608TrackNumber", []))

    @builtins.property
    @jsii.member(jsii_name="convert608To708Input")
    def convert608_to708_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "convert608To708Input"))

    @builtins.property
    @jsii.member(jsii_name="scte20DetectionInput")
    def scte20_detection_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte20DetectionInput"))

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumberInput")
    def source608_channel_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "source608ChannelNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="source608TrackNumberInput")
    def source608_track_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "source608TrackNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="convert608To708")
    def convert608_to708(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "convert608To708"))

    @convert608_to708.setter
    def convert608_to708(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "convert608To708", value)

    @builtins.property
    @jsii.member(jsii_name="scte20Detection")
    def scte20_detection(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte20Detection"))

    @scte20_detection.setter
    def scte20_detection(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte20Detection", value)

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumber")
    def source608_channel_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "source608ChannelNumber"))

    @source608_channel_number.setter
    def source608_channel_number(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source608ChannelNumber", value)

    @builtins.property
    @jsii.member(jsii_name="source608TrackNumber")
    def source608_track_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "source608TrackNumber"))

    @source608_track_number.setter
    def source608_track_number(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source608TrackNumber", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAncillarySourceSettings")
    def put_ancillary_source_settings(
        self,
        *,
        source_ancillary_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source_ancillary_channel_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_ancillary_channel_number MedialiveChannel#source_ancillary_channel_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings(
            source_ancillary_channel_number=source_ancillary_channel_number
        )

        return typing.cast(None, jsii.invoke(self, "putAncillarySourceSettings", [value]))

    @jsii.member(jsii_name="putDvbTdtSettings")
    def put_dvb_tdt_settings(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings(
            ocr_language=ocr_language, pid=pid
        )

        return typing.cast(None, jsii.invoke(self, "putDvbTdtSettings", [value]))

    @jsii.member(jsii_name="putEmbeddedSourceSettings")
    def put_embedded_source_settings(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        scte20_detection: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
        source608_track_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param scte20_detection: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte20_detection MedialiveChannel#scte20_detection}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        :param source608_track_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_track_number MedialiveChannel#source_608_track_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings(
            convert608_to708=convert608_to708,
            scte20_detection=scte20_detection,
            source608_channel_number=source608_channel_number,
            source608_track_number=source608_track_number,
        )

        return typing.cast(None, jsii.invoke(self, "putEmbeddedSourceSettings", [value]))

    @jsii.member(jsii_name="putScte20SourceSettings")
    def put_scte20_source_settings(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings(
            convert608_to708=convert608_to708,
            source608_channel_number=source608_channel_number,
        )

        return typing.cast(None, jsii.invoke(self, "putScte20SourceSettings", [value]))

    @jsii.member(jsii_name="putScte27SourceSettings")
    def put_scte27_source_settings(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings(
            ocr_language=ocr_language, pid=pid
        )

        return typing.cast(None, jsii.invoke(self, "putScte27SourceSettings", [value]))

    @jsii.member(jsii_name="putTeletextSourceSettings")
    def put_teletext_source_settings(
        self,
        *,
        output_rectangle: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle", typing.Dict[str, typing.Any]]] = None,
        page_number: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_rectangle: output_rectangle block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_rectangle MedialiveChannel#output_rectangle}
        :param page_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#page_number MedialiveChannel#page_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings(
            output_rectangle=output_rectangle, page_number=page_number
        )

        return typing.cast(None, jsii.invoke(self, "putTeletextSourceSettings", [value]))

    @jsii.member(jsii_name="resetAncillarySourceSettings")
    def reset_ancillary_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAncillarySourceSettings", []))

    @jsii.member(jsii_name="resetDvbTdtSettings")
    def reset_dvb_tdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTdtSettings", []))

    @jsii.member(jsii_name="resetEmbeddedSourceSettings")
    def reset_embedded_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmbeddedSourceSettings", []))

    @jsii.member(jsii_name="resetScte20SourceSettings")
    def reset_scte20_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte20SourceSettings", []))

    @jsii.member(jsii_name="resetScte27SourceSettings")
    def reset_scte27_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27SourceSettings", []))

    @jsii.member(jsii_name="resetTeletextSourceSettings")
    def reset_teletext_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeletextSourceSettings", []))

    @builtins.property
    @jsii.member(jsii_name="ancillarySourceSettings")
    def ancillary_source_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference, jsii.get(self, "ancillarySourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettings")
    def dvb_tdt_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference, jsii.get(self, "dvbTdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="embeddedSourceSettings")
    def embedded_source_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference, jsii.get(self, "embeddedSourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="scte20SourceSettings")
    def scte20_source_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference", jsii.get(self, "scte20SourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="scte27SourceSettings")
    def scte27_source_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference", jsii.get(self, "scte27SourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="teletextSourceSettings")
    def teletext_source_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference", jsii.get(self, "teletextSourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="ancillarySourceSettingsInput")
    def ancillary_source_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings], jsii.get(self, "ancillarySourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettingsInput")
    def dvb_tdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings], jsii.get(self, "dvbTdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="embeddedSourceSettingsInput")
    def embedded_source_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings], jsii.get(self, "embeddedSourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte20SourceSettingsInput")
    def scte20_source_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"], jsii.get(self, "scte20SourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27SourceSettingsInput")
    def scte27_source_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"], jsii.get(self, "scte27SourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="teletextSourceSettingsInput")
    def teletext_source_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"], jsii.get(self, "teletextSourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "convert608_to708": "convert608To708",
        "source608_channel_number": "source608ChannelNumber",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings:
    def __init__(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        '''
        if __debug__:
            def stub(
                *,
                convert608_to708: typing.Optional[builtins.str] = None,
                source608_channel_number: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument convert608_to708", value=convert608_to708, expected_type=type_hints["convert608_to708"])
            check_type(argname="argument source608_channel_number", value=source608_channel_number, expected_type=type_hints["source608_channel_number"])
        self._values: typing.Dict[str, typing.Any] = {}
        if convert608_to708 is not None:
            self._values["convert608_to708"] = convert608_to708
        if source608_channel_number is not None:
            self._values["source608_channel_number"] = source608_channel_number

    @builtins.property
    def convert608_to708(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.'''
        result = self._values.get("convert608_to708")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source608_channel_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.'''
        result = self._values.get("source608_channel_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConvert608To708")
    def reset_convert608_to708(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConvert608To708", []))

    @jsii.member(jsii_name="resetSource608ChannelNumber")
    def reset_source608_channel_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource608ChannelNumber", []))

    @builtins.property
    @jsii.member(jsii_name="convert608To708Input")
    def convert608_to708_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "convert608To708Input"))

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumberInput")
    def source608_channel_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "source608ChannelNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="convert608To708")
    def convert608_to708(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "convert608To708"))

    @convert608_to708.setter
    def convert608_to708(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "convert608To708", value)

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumber")
    def source608_channel_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "source608ChannelNumber"))

    @source608_channel_number.setter
    def source608_channel_number(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source608ChannelNumber", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings",
    jsii_struct_bases=[],
    name_mapping={"ocr_language": "ocrLanguage", "pid": "pid"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings:
    def __init__(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.
        '''
        if __debug__:
            def stub(
                *,
                ocr_language: typing.Optional[builtins.str] = None,
                pid: typing.Optional[jsii.Number] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument ocr_language", value=ocr_language, expected_type=type_hints["ocr_language"])
            check_type(argname="argument pid", value=pid, expected_type=type_hints["pid"])
        self._values: typing.Dict[str, typing.Any] = {}
        if ocr_language is not None:
            self._values["ocr_language"] = ocr_language
        if pid is not None:
            self._values["pid"] = pid

    @builtins.property
    def ocr_language(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#ocr_language MedialiveChannel#ocr_language}.'''
        result = self._values.get("ocr_language")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pid(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#pid MedialiveChannel#pid}.'''
        result = self._values.get("pid")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOcrLanguage")
    def reset_ocr_language(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOcrLanguage", []))

    @jsii.member(jsii_name="resetPid")
    def reset_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPid", []))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguageInput")
    def ocr_language_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ocrLanguageInput"))

    @builtins.property
    @jsii.member(jsii_name="pidInput")
    def pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pidInput"))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguage")
    def ocr_language(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ocrLanguage"))

    @ocr_language.setter
    def ocr_language(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ocrLanguage", value)

    @builtins.property
    @jsii.member(jsii_name="pid")
    def pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pid"))

    @pid.setter
    def pid(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pid", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings",
    jsii_struct_bases=[],
    name_mapping={"output_rectangle": "outputRectangle", "page_number": "pageNumber"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings:
    def __init__(
        self,
        *,
        output_rectangle: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle", typing.Dict[str, typing.Any]]] = None,
        page_number: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_rectangle: output_rectangle block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_rectangle MedialiveChannel#output_rectangle}
        :param page_number: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#page_number MedialiveChannel#page_number}.
        '''
        if isinstance(output_rectangle, dict):
            output_rectangle = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle(**output_rectangle)
        if __debug__:
            def stub(
                *,
                output_rectangle: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle, typing.Dict[str, typing.Any]]] = None,
                page_number: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument output_rectangle", value=output_rectangle, expected_type=type_hints["output_rectangle"])
            check_type(argname="argument page_number", value=page_number, expected_type=type_hints["page_number"])
        self._values: typing.Dict[str, typing.Any] = {}
        if output_rectangle is not None:
            self._values["output_rectangle"] = output_rectangle
        if page_number is not None:
            self._values["page_number"] = page_number

    @builtins.property
    def output_rectangle(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle"]:
        '''output_rectangle block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#output_rectangle MedialiveChannel#output_rectangle}
        '''
        result = self._values.get("output_rectangle")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle"], result)

    @builtins.property
    def page_number(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#page_number MedialiveChannel#page_number}.'''
        result = self._values.get("page_number")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle",
    jsii_struct_bases=[],
    name_mapping={
        "height": "height",
        "left_offset": "leftOffset",
        "top_offset": "topOffset",
        "width": "width",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle:
    def __init__(
        self,
        *,
        height: jsii.Number,
        left_offset: jsii.Number,
        top_offset: jsii.Number,
        width: jsii.Number,
    ) -> None:
        '''
        :param height: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height MedialiveChannel#height}.
        :param left_offset: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#left_offset MedialiveChannel#left_offset}.
        :param top_offset: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#top_offset MedialiveChannel#top_offset}.
        :param width: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#width MedialiveChannel#width}.
        '''
        if __debug__:
            def stub(
                *,
                height: jsii.Number,
                left_offset: jsii.Number,
                top_offset: jsii.Number,
                width: jsii.Number,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument left_offset", value=left_offset, expected_type=type_hints["left_offset"])
            check_type(argname="argument top_offset", value=top_offset, expected_type=type_hints["top_offset"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
        self._values: typing.Dict[str, typing.Any] = {
            "height": height,
            "left_offset": left_offset,
            "top_offset": top_offset,
            "width": width,
        }

    @builtins.property
    def height(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height MedialiveChannel#height}.'''
        result = self._values.get("height")
        assert result is not None, "Required property 'height' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def left_offset(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#left_offset MedialiveChannel#left_offset}.'''
        result = self._values.get("left_offset")
        assert result is not None, "Required property 'left_offset' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def top_offset(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#top_offset MedialiveChannel#top_offset}.'''
        result = self._values.get("top_offset")
        assert result is not None, "Required property 'top_offset' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def width(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#width MedialiveChannel#width}.'''
        result = self._values.get("width")
        assert result is not None, "Required property 'width' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="leftOffsetInput")
    def left_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "leftOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="topOffsetInput")
    def top_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "topOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value)

    @builtins.property
    @jsii.member(jsii_name="leftOffset")
    def left_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "leftOffset"))

    @left_offset.setter
    def left_offset(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "leftOffset", value)

    @builtins.property
    @jsii.member(jsii_name="topOffset")
    def top_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "topOffset"))

    @top_offset.setter
    def top_offset(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "topOffset", value)

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putOutputRectangle")
    def put_output_rectangle(
        self,
        *,
        height: jsii.Number,
        left_offset: jsii.Number,
        top_offset: jsii.Number,
        width: jsii.Number,
    ) -> None:
        '''
        :param height: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#height MedialiveChannel#height}.
        :param left_offset: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#left_offset MedialiveChannel#left_offset}.
        :param top_offset: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#top_offset MedialiveChannel#top_offset}.
        :param width: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#width MedialiveChannel#width}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle(
            height=height, left_offset=left_offset, top_offset=top_offset, width=width
        )

        return typing.cast(None, jsii.invoke(self, "putOutputRectangle", [value]))

    @jsii.member(jsii_name="resetOutputRectangle")
    def reset_output_rectangle(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputRectangle", []))

    @jsii.member(jsii_name="resetPageNumber")
    def reset_page_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPageNumber", []))

    @builtins.property
    @jsii.member(jsii_name="outputRectangle")
    def output_rectangle(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference, jsii.get(self, "outputRectangle"))

    @builtins.property
    @jsii.member(jsii_name="outputRectangleInput")
    def output_rectangle_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle], jsii.get(self, "outputRectangleInput"))

    @builtins.property
    @jsii.member(jsii_name="pageNumberInput")
    def page_number_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pageNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="pageNumber")
    def page_number(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pageNumber"))

    @page_number.setter
    def page_number(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pageNumber", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "hls_input_settings": "hlsInputSettings",
        "server_validation": "serverValidation",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings:
    def __init__(
        self,
        *,
        hls_input_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings", typing.Dict[str, typing.Any]]] = None,
        server_validation: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_input_settings: hls_input_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_input_settings MedialiveChannel#hls_input_settings}
        :param server_validation: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#server_validation MedialiveChannel#server_validation}.
        '''
        if isinstance(hls_input_settings, dict):
            hls_input_settings = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings(**hls_input_settings)
        if __debug__:
            def stub(
                *,
                hls_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings, typing.Dict[str, typing.Any]]] = None,
                server_validation: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument hls_input_settings", value=hls_input_settings, expected_type=type_hints["hls_input_settings"])
            check_type(argname="argument server_validation", value=server_validation, expected_type=type_hints["server_validation"])
        self._values: typing.Dict[str, typing.Any] = {}
        if hls_input_settings is not None:
            self._values["hls_input_settings"] = hls_input_settings
        if server_validation is not None:
            self._values["server_validation"] = server_validation

    @builtins.property
    def hls_input_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings"]:
        '''hls_input_settings block.

        Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_input_settings MedialiveChannel#hls_input_settings}
        '''
        result = self._values.get("hls_input_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings"], result)

    @builtins.property
    def server_validation(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#server_validation MedialiveChannel#server_validation}.'''
        result = self._values.get("server_validation")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bandwidth": "bandwidth",
        "buffer_segments": "bufferSegments",
        "retries": "retries",
        "retry_interval": "retryInterval",
        "scte35_source": "scte35Source",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings:
    def __init__(
        self,
        *,
        bandwidth: typing.Optional[jsii.Number] = None,
        buffer_segments: typing.Optional[jsii.Number] = None,
        retries: typing.Optional[jsii.Number] = None,
        retry_interval: typing.Optional[jsii.Number] = None,
        scte35_source: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bandwidth: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bandwidth MedialiveChannel#bandwidth}.
        :param buffer_segments: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_segments MedialiveChannel#buffer_segments}.
        :param retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#retries MedialiveChannel#retries}.
        :param retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#retry_interval MedialiveChannel#retry_interval}.
        :param scte35_source: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_source MedialiveChannel#scte35_source}.
        '''
        if __debug__:
            def stub(
                *,
                bandwidth: typing.Optional[jsii.Number] = None,
                buffer_segments: typing.Optional[jsii.Number] = None,
                retries: typing.Optional[jsii.Number] = None,
                retry_interval: typing.Optional[jsii.Number] = None,
                scte35_source: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument bandwidth", value=bandwidth, expected_type=type_hints["bandwidth"])
            check_type(argname="argument buffer_segments", value=buffer_segments, expected_type=type_hints["buffer_segments"])
            check_type(argname="argument retries", value=retries, expected_type=type_hints["retries"])
            check_type(argname="argument retry_interval", value=retry_interval, expected_type=type_hints["retry_interval"])
            check_type(argname="argument scte35_source", value=scte35_source, expected_type=type_hints["scte35_source"])
        self._values: typing.Dict[str, typing.Any] = {}
        if bandwidth is not None:
            self._values["bandwidth"] = bandwidth
        if buffer_segments is not None:
            self._values["buffer_segments"] = buffer_segments
        if retries is not None:
            self._values["retries"] = retries
        if retry_interval is not None:
            self._values["retry_interval"] = retry_interval
        if scte35_source is not None:
            self._values["scte35_source"] = scte35_source

    @builtins.property
    def bandwidth(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bandwidth MedialiveChannel#bandwidth}.'''
        result = self._values.get("bandwidth")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buffer_segments(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_segments MedialiveChannel#buffer_segments}.'''
        result = self._values.get("buffer_segments")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#retries MedialiveChannel#retries}.'''
        result = self._values.get("retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#retry_interval MedialiveChannel#retry_interval}.'''
        result = self._values.get("retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def scte35_source(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_source MedialiveChannel#scte35_source}.'''
        result = self._values.get("scte35_source")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBandwidth")
    def reset_bandwidth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBandwidth", []))

    @jsii.member(jsii_name="resetBufferSegments")
    def reset_buffer_segments(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferSegments", []))

    @jsii.member(jsii_name="resetRetries")
    def reset_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetries", []))

    @jsii.member(jsii_name="resetRetryInterval")
    def reset_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetryInterval", []))

    @jsii.member(jsii_name="resetScte35Source")
    def reset_scte35_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Source", []))

    @builtins.property
    @jsii.member(jsii_name="bandwidthInput")
    def bandwidth_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bandwidthInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferSegmentsInput")
    def buffer_segments_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufferSegmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="retriesInput")
    def retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "retriesInput"))

    @builtins.property
    @jsii.member(jsii_name="retryIntervalInput")
    def retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "retryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35SourceInput")
    def scte35_source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35SourceInput"))

    @builtins.property
    @jsii.member(jsii_name="bandwidth")
    def bandwidth(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bandwidth"))

    @bandwidth.setter
    def bandwidth(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bandwidth", value)

    @builtins.property
    @jsii.member(jsii_name="bufferSegments")
    def buffer_segments(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufferSegments"))

    @buffer_segments.setter
    def buffer_segments(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferSegments", value)

    @builtins.property
    @jsii.member(jsii_name="retries")
    def retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "retries"))

    @retries.setter
    def retries(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "retries", value)

    @builtins.property
    @jsii.member(jsii_name="retryInterval")
    def retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "retryInterval"))

    @retry_interval.setter
    def retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "retryInterval", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Source")
    def scte35_source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Source"))

    @scte35_source.setter
    def scte35_source(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Source", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putHlsInputSettings")
    def put_hls_input_settings(
        self,
        *,
        bandwidth: typing.Optional[jsii.Number] = None,
        buffer_segments: typing.Optional[jsii.Number] = None,
        retries: typing.Optional[jsii.Number] = None,
        retry_interval: typing.Optional[jsii.Number] = None,
        scte35_source: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bandwidth: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#bandwidth MedialiveChannel#bandwidth}.
        :param buffer_segments: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#buffer_segments MedialiveChannel#buffer_segments}.
        :param retries: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#retries MedialiveChannel#retries}.
        :param retry_interval: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#retry_interval MedialiveChannel#retry_interval}.
        :param scte35_source: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_source MedialiveChannel#scte35_source}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings(
            bandwidth=bandwidth,
            buffer_segments=buffer_segments,
            retries=retries,
            retry_interval=retry_interval,
            scte35_source=scte35_source,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsInputSettings", [value]))

    @jsii.member(jsii_name="resetHlsInputSettings")
    def reset_hls_input_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsInputSettings", []))

    @jsii.member(jsii_name="resetServerValidation")
    def reset_server_validation(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServerValidation", []))

    @builtins.property
    @jsii.member(jsii_name="hlsInputSettings")
    def hls_input_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference, jsii.get(self, "hlsInputSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsInputSettingsInput")
    def hls_input_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings], jsii.get(self, "hlsInputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="serverValidationInput")
    def server_validation_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverValidationInput"))

    @builtins.property
    @jsii.member(jsii_name="serverValidation")
    def server_validation(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serverValidation"))

    @server_validation.setter
    def server_validation(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serverValidation", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsInputSettingsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioSelector")
    def put_audio_selector(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putAudioSelector", [value]))

    @jsii.member(jsii_name="putCaptionSelector")
    def put_caption_selector(
        self,
        value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            def stub(
                value: typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[str, typing.Any]]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCaptionSelector", [value]))

    @jsii.member(jsii_name="putNetworkInputSettings")
    def put_network_input_settings(
        self,
        *,
        hls_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings, typing.Dict[str, typing.Any]]] = None,
        server_validation: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_input_settings: hls_input_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#hls_input_settings MedialiveChannel#hls_input_settings}
        :param server_validation: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#server_validation MedialiveChannel#server_validation}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings(
            hls_input_settings=hls_input_settings, server_validation=server_validation
        )

        return typing.cast(None, jsii.invoke(self, "putNetworkInputSettings", [value]))

    @jsii.member(jsii_name="putVideoSelector")
    def put_video_selector(
        self,
        *,
        color_space: typing.Optional[builtins.str] = None,
        color_space_usage: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color_space: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_space MedialiveChannel#color_space}.
        :param color_space_usage: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_space_usage MedialiveChannel#color_space_usage}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsVideoSelector(
            color_space=color_space, color_space_usage=color_space_usage
        )

        return typing.cast(None, jsii.invoke(self, "putVideoSelector", [value]))

    @jsii.member(jsii_name="resetAudioSelector")
    def reset_audio_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioSelector", []))

    @jsii.member(jsii_name="resetCaptionSelector")
    def reset_caption_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionSelector", []))

    @jsii.member(jsii_name="resetDeblockFilter")
    def reset_deblock_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDeblockFilter", []))

    @jsii.member(jsii_name="resetDenoiseFilter")
    def reset_denoise_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDenoiseFilter", []))

    @jsii.member(jsii_name="resetFilterStrength")
    def reset_filter_strength(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterStrength", []))

    @jsii.member(jsii_name="resetInputFilter")
    def reset_input_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputFilter", []))

    @jsii.member(jsii_name="resetNetworkInputSettings")
    def reset_network_input_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNetworkInputSettings", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetSmpte2038DataPreference")
    def reset_smpte2038_data_preference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSmpte2038DataPreference", []))

    @jsii.member(jsii_name="resetSourceEndBehavior")
    def reset_source_end_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceEndBehavior", []))

    @jsii.member(jsii_name="resetVideoSelector")
    def reset_video_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoSelector", []))

    @builtins.property
    @jsii.member(jsii_name="audioSelector")
    def audio_selector(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList, jsii.get(self, "audioSelector"))

    @builtins.property
    @jsii.member(jsii_name="captionSelector")
    def caption_selector(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList, jsii.get(self, "captionSelector"))

    @builtins.property
    @jsii.member(jsii_name="networkInputSettings")
    def network_input_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference, jsii.get(self, "networkInputSettings"))

    @builtins.property
    @jsii.member(jsii_name="videoSelector")
    def video_selector(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference", jsii.get(self, "videoSelector"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorInput")
    def audio_selector_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]], jsii.get(self, "audioSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="captionSelectorInput")
    def caption_selector_input(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]], jsii.get(self, "captionSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="deblockFilterInput")
    def deblock_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "deblockFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="denoiseFilterInput")
    def denoise_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "denoiseFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="filterStrengthInput")
    def filter_strength_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filterStrengthInput"))

    @builtins.property
    @jsii.member(jsii_name="inputFilterInput")
    def input_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="networkInputSettingsInput")
    def network_input_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings], jsii.get(self, "networkInputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="smpte2038DataPreferenceInput")
    def smpte2038_data_preference_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "smpte2038DataPreferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceEndBehaviorInput")
    def source_end_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sourceEndBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="videoSelectorInput")
    def video_selector_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"], jsii.get(self, "videoSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="deblockFilter")
    def deblock_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "deblockFilter"))

    @deblock_filter.setter
    def deblock_filter(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "deblockFilter", value)

    @builtins.property
    @jsii.member(jsii_name="denoiseFilter")
    def denoise_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "denoiseFilter"))

    @denoise_filter.setter
    def denoise_filter(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "denoiseFilter", value)

    @builtins.property
    @jsii.member(jsii_name="filterStrength")
    def filter_strength(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filterStrength"))

    @filter_strength.setter
    def filter_strength(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filterStrength", value)

    @builtins.property
    @jsii.member(jsii_name="inputFilter")
    def input_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputFilter"))

    @input_filter.setter
    def input_filter(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputFilter", value)

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: jsii.Number) -> None:
        if __debug__:
            def stub(value: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value)

    @builtins.property
    @jsii.member(jsii_name="smpte2038DataPreference")
    def smpte2038_data_preference(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "smpte2038DataPreference"))

    @smpte2038_data_preference.setter
    def smpte2038_data_preference(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "smpte2038DataPreference", value)

    @builtins.property
    @jsii.member(jsii_name="sourceEndBehavior")
    def source_end_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sourceEndBehavior"))

    @source_end_behavior.setter
    def source_end_behavior(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sourceEndBehavior", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettings],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettings],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsVideoSelector",
    jsii_struct_bases=[],
    name_mapping={"color_space": "colorSpace", "color_space_usage": "colorSpaceUsage"},
)
class MedialiveChannelInputAttachmentsInputSettingsVideoSelector:
    def __init__(
        self,
        *,
        color_space: typing.Optional[builtins.str] = None,
        color_space_usage: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color_space: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_space MedialiveChannel#color_space}.
        :param color_space_usage: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_space_usage MedialiveChannel#color_space_usage}.
        '''
        if __debug__:
            def stub(
                *,
                color_space: typing.Optional[builtins.str] = None,
                color_space_usage: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument color_space", value=color_space, expected_type=type_hints["color_space"])
            check_type(argname="argument color_space_usage", value=color_space_usage, expected_type=type_hints["color_space_usage"])
        self._values: typing.Dict[str, typing.Any] = {}
        if color_space is not None:
            self._values["color_space"] = color_space
        if color_space_usage is not None:
            self._values["color_space_usage"] = color_space_usage

    @builtins.property
    def color_space(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_space MedialiveChannel#color_space}.'''
        result = self._values.get("color_space")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def color_space_usage(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#color_space_usage MedialiveChannel#color_space_usage}.'''
        result = self._values.get("color_space_usage")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsVideoSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetColorSpace")
    def reset_color_space(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorSpace", []))

    @jsii.member(jsii_name="resetColorSpaceUsage")
    def reset_color_space_usage(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorSpaceUsage", []))

    @builtins.property
    @jsii.member(jsii_name="colorSpaceInput")
    def color_space_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorSpaceInput"))

    @builtins.property
    @jsii.member(jsii_name="colorSpaceUsageInput")
    def color_space_usage_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorSpaceUsageInput"))

    @builtins.property
    @jsii.member(jsii_name="colorSpace")
    def color_space(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorSpace"))

    @color_space.setter
    def color_space(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorSpace", value)

    @builtins.property
    @jsii.member(jsii_name="colorSpaceUsage")
    def color_space_usage(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorSpaceUsage"))

    @color_space_usage.setter
    def color_space_usage(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorSpaceUsage", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsList(
    cdktf.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsList",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                wraps_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            def stub(index: jsii.Number) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> cdktf.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(cdktf.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: cdktf.IInterpolatingParent) -> None:
        if __debug__:
            def stub(value: cdktf.IInterpolatingParent) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            def stub(value: builtins.bool) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachments]]]:
        return typing.cast(typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachments]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachments]]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[cdktf.IResolvable, typing.List[MedialiveChannelInputAttachments]]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class MedialiveChannelInputAttachmentsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
                complex_object_index: jsii.Number,
                complex_object_is_from_set: builtins.bool,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAutomaticInputFailoverSettings")
    def put_automatic_input_failover_settings(
        self,
        *,
        secondary_input_id: builtins.str,
        error_clear_time_msec: typing.Optional[jsii.Number] = None,
        failover_condition: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[str, typing.Any]]]]] = None,
        input_preference: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param secondary_input_id: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#secondary_input_id MedialiveChannel#secondary_input_id}.
        :param error_clear_time_msec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#error_clear_time_msec MedialiveChannel#error_clear_time_msec}.
        :param failover_condition: failover_condition block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#failover_condition MedialiveChannel#failover_condition}
        :param input_preference: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_preference MedialiveChannel#input_preference}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings(
            secondary_input_id=secondary_input_id,
            error_clear_time_msec=error_clear_time_msec,
            failover_condition=failover_condition,
            input_preference=input_preference,
        )

        return typing.cast(None, jsii.invoke(self, "putAutomaticInputFailoverSettings", [value]))

    @jsii.member(jsii_name="putInputSettings")
    def put_input_settings(
        self,
        *,
        audio_selector: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[str, typing.Any]]]]] = None,
        caption_selector: typing.Optional[typing.Union[cdktf.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[str, typing.Any]]]]] = None,
        deblock_filter: typing.Optional[builtins.str] = None,
        denoise_filter: typing.Optional[builtins.str] = None,
        filter_strength: typing.Optional[jsii.Number] = None,
        input_filter: typing.Optional[builtins.str] = None,
        network_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings, typing.Dict[str, typing.Any]]] = None,
        scte35_pid: typing.Optional[jsii.Number] = None,
        smpte2038_data_preference: typing.Optional[builtins.str] = None,
        source_end_behavior: typing.Optional[builtins.str] = None,
        video_selector: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsVideoSelector, typing.Dict[str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_selector: audio_selector block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#audio_selector MedialiveChannel#audio_selector}
        :param caption_selector: caption_selector block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#caption_selector MedialiveChannel#caption_selector}
        :param deblock_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#deblock_filter MedialiveChannel#deblock_filter}.
        :param denoise_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#denoise_filter MedialiveChannel#denoise_filter}.
        :param filter_strength: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#filter_strength MedialiveChannel#filter_strength}.
        :param input_filter: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_filter MedialiveChannel#input_filter}.
        :param network_input_settings: network_input_settings block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#network_input_settings MedialiveChannel#network_input_settings}
        :param scte35_pid: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param smpte2038_data_preference: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#smpte2038_data_preference MedialiveChannel#smpte2038_data_preference}.
        :param source_end_behavior: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#source_end_behavior MedialiveChannel#source_end_behavior}.
        :param video_selector: video_selector block. Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#video_selector MedialiveChannel#video_selector}
        '''
        value = MedialiveChannelInputAttachmentsInputSettings(
            audio_selector=audio_selector,
            caption_selector=caption_selector,
            deblock_filter=deblock_filter,
            denoise_filter=denoise_filter,
            filter_strength=filter_strength,
            input_filter=input_filter,
            network_input_settings=network_input_settings,
            scte35_pid=scte35_pid,
            smpte2038_data_preference=smpte2038_data_preference,
            source_end_behavior=source_end_behavior,
            video_selector=video_selector,
        )

        return typing.cast(None, jsii.invoke(self, "putInputSettings", [value]))

    @jsii.member(jsii_name="resetAutomaticInputFailoverSettings")
    def reset_automatic_input_failover_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomaticInputFailoverSettings", []))

    @jsii.member(jsii_name="resetInputSettings")
    def reset_input_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputSettings", []))

    @builtins.property
    @jsii.member(jsii_name="automaticInputFailoverSettings")
    def automatic_input_failover_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference, jsii.get(self, "automaticInputFailoverSettings"))

    @builtins.property
    @jsii.member(jsii_name="inputSettings")
    def input_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsOutputReference, jsii.get(self, "inputSettings"))

    @builtins.property
    @jsii.member(jsii_name="automaticInputFailoverSettingsInput")
    def automatic_input_failover_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings], jsii.get(self, "automaticInputFailoverSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachmentNameInput")
    def input_attachment_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputAttachmentNameInput"))

    @builtins.property
    @jsii.member(jsii_name="inputIdInput")
    def input_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputIdInput"))

    @builtins.property
    @jsii.member(jsii_name="inputSettingsInput")
    def input_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettings], jsii.get(self, "inputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachmentName")
    def input_attachment_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputAttachmentName"))

    @input_attachment_name.setter
    def input_attachment_name(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputAttachmentName", value)

    @builtins.property
    @jsii.member(jsii_name="inputId")
    def input_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputId"))

    @input_id.setter
    def input_id(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputId", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelInputAttachments, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelInputAttachments, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelInputAttachments, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelInputAttachments, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputSpecification",
    jsii_struct_bases=[],
    name_mapping={
        "codec": "codec",
        "input_resolution": "inputResolution",
        "maximum_bitrate": "maximumBitrate",
    },
)
class MedialiveChannelInputSpecification:
    def __init__(
        self,
        *,
        codec: builtins.str,
        input_resolution: builtins.str,
        maximum_bitrate: builtins.str,
    ) -> None:
        '''
        :param codec: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec MedialiveChannel#codec}.
        :param input_resolution: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_resolution MedialiveChannel#input_resolution}.
        :param maximum_bitrate: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maximum_bitrate MedialiveChannel#maximum_bitrate}.
        '''
        if __debug__:
            def stub(
                *,
                codec: builtins.str,
                input_resolution: builtins.str,
                maximum_bitrate: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument codec", value=codec, expected_type=type_hints["codec"])
            check_type(argname="argument input_resolution", value=input_resolution, expected_type=type_hints["input_resolution"])
            check_type(argname="argument maximum_bitrate", value=maximum_bitrate, expected_type=type_hints["maximum_bitrate"])
        self._values: typing.Dict[str, typing.Any] = {
            "codec": codec,
            "input_resolution": input_resolution,
            "maximum_bitrate": maximum_bitrate,
        }

    @builtins.property
    def codec(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#codec MedialiveChannel#codec}.'''
        result = self._values.get("codec")
        assert result is not None, "Required property 'codec' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def input_resolution(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#input_resolution MedialiveChannel#input_resolution}.'''
        result = self._values.get("input_resolution")
        assert result is not None, "Required property 'input_resolution' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def maximum_bitrate(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maximum_bitrate MedialiveChannel#maximum_bitrate}.'''
        result = self._values.get("maximum_bitrate")
        assert result is not None, "Required property 'maximum_bitrate' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputSpecification(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputSpecificationOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputSpecificationOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="codecInput")
    def codec_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codecInput"))

    @builtins.property
    @jsii.member(jsii_name="inputResolutionInput")
    def input_resolution_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputResolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="maximumBitrateInput")
    def maximum_bitrate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maximumBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codec")
    def codec(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codec"))

    @codec.setter
    def codec(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codec", value)

    @builtins.property
    @jsii.member(jsii_name="inputResolution")
    def input_resolution(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputResolution"))

    @input_resolution.setter
    def input_resolution(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputResolution", value)

    @builtins.property
    @jsii.member(jsii_name="maximumBitrate")
    def maximum_bitrate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maximumBitrate"))

    @maximum_bitrate.setter
    def maximum_bitrate(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maximumBitrate", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelInputSpecification]:
        return typing.cast(typing.Optional[MedialiveChannelInputSpecification], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputSpecification],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[MedialiveChannelInputSpecification],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelMaintenance",
    jsii_struct_bases=[],
    name_mapping={
        "maintenance_day": "maintenanceDay",
        "maintenance_start_time": "maintenanceStartTime",
    },
)
class MedialiveChannelMaintenance:
    def __init__(
        self,
        *,
        maintenance_day: builtins.str,
        maintenance_start_time: builtins.str,
    ) -> None:
        '''
        :param maintenance_day: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance_day MedialiveChannel#maintenance_day}.
        :param maintenance_start_time: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance_start_time MedialiveChannel#maintenance_start_time}.
        '''
        if __debug__:
            def stub(
                *,
                maintenance_day: builtins.str,
                maintenance_start_time: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument maintenance_day", value=maintenance_day, expected_type=type_hints["maintenance_day"])
            check_type(argname="argument maintenance_start_time", value=maintenance_start_time, expected_type=type_hints["maintenance_start_time"])
        self._values: typing.Dict[str, typing.Any] = {
            "maintenance_day": maintenance_day,
            "maintenance_start_time": maintenance_start_time,
        }

    @builtins.property
    def maintenance_day(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance_day MedialiveChannel#maintenance_day}.'''
        result = self._values.get("maintenance_day")
        assert result is not None, "Required property 'maintenance_day' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def maintenance_start_time(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#maintenance_start_time MedialiveChannel#maintenance_start_time}.'''
        result = self._values.get("maintenance_start_time")
        assert result is not None, "Required property 'maintenance_start_time' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelMaintenance(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelMaintenanceOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelMaintenanceOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="maintenanceDayInput")
    def maintenance_day_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maintenanceDayInput"))

    @builtins.property
    @jsii.member(jsii_name="maintenanceStartTimeInput")
    def maintenance_start_time_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maintenanceStartTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="maintenanceDay")
    def maintenance_day(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maintenanceDay"))

    @maintenance_day.setter
    def maintenance_day(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maintenanceDay", value)

    @builtins.property
    @jsii.member(jsii_name="maintenanceStartTime")
    def maintenance_start_time(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maintenanceStartTime"))

    @maintenance_start_time.setter
    def maintenance_start_time(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maintenanceStartTime", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelMaintenance]:
        return typing.cast(typing.Optional[MedialiveChannelMaintenance], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelMaintenance],
    ) -> None:
        if __debug__:
            def stub(value: typing.Optional[MedialiveChannelMaintenance]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelTimeouts",
    jsii_struct_bases=[],
    name_mapping={"create": "create", "delete": "delete", "update": "update"},
)
class MedialiveChannelTimeouts:
    def __init__(
        self,
        *,
        create: typing.Optional[builtins.str] = None,
        delete: typing.Optional[builtins.str] = None,
        update: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param create: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#create MedialiveChannel#create}.
        :param delete: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#delete MedialiveChannel#delete}.
        :param update: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#update MedialiveChannel#update}.
        '''
        if __debug__:
            def stub(
                *,
                create: typing.Optional[builtins.str] = None,
                delete: typing.Optional[builtins.str] = None,
                update: typing.Optional[builtins.str] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument create", value=create, expected_type=type_hints["create"])
            check_type(argname="argument delete", value=delete, expected_type=type_hints["delete"])
            check_type(argname="argument update", value=update, expected_type=type_hints["update"])
        self._values: typing.Dict[str, typing.Any] = {}
        if create is not None:
            self._values["create"] = create
        if delete is not None:
            self._values["delete"] = delete
        if update is not None:
            self._values["update"] = update

    @builtins.property
    def create(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#create MedialiveChannel#create}.'''
        result = self._values.get("create")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def delete(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#delete MedialiveChannel#delete}.'''
        result = self._values.get("delete")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def update(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#update MedialiveChannel#update}.'''
        result = self._values.get("update")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelTimeouts(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelTimeoutsOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelTimeoutsOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCreate")
    def reset_create(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCreate", []))

    @jsii.member(jsii_name="resetDelete")
    def reset_delete(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDelete", []))

    @jsii.member(jsii_name="resetUpdate")
    def reset_update(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUpdate", []))

    @builtins.property
    @jsii.member(jsii_name="createInput")
    def create_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "createInput"))

    @builtins.property
    @jsii.member(jsii_name="deleteInput")
    def delete_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "deleteInput"))

    @builtins.property
    @jsii.member(jsii_name="updateInput")
    def update_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "updateInput"))

    @builtins.property
    @jsii.member(jsii_name="create")
    def create(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "create"))

    @create.setter
    def create(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "create", value)

    @builtins.property
    @jsii.member(jsii_name="delete")
    def delete(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "delete"))

    @delete.setter
    def delete(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "delete", value)

    @builtins.property
    @jsii.member(jsii_name="update")
    def update(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "update"))

    @update.setter
    def update(self, value: builtins.str) -> None:
        if __debug__:
            def stub(value: builtins.str) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "update", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[MedialiveChannelTimeouts, cdktf.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[MedialiveChannelTimeouts, cdktf.IResolvable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[MedialiveChannelTimeouts, cdktf.IResolvable]],
    ) -> None:
        if __debug__:
            def stub(
                value: typing.Optional[typing.Union[MedialiveChannelTimeouts, cdktf.IResolvable]],
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelVpc",
    jsii_struct_bases=[],
    name_mapping={
        "public_address_allocation_ids": "publicAddressAllocationIds",
        "subnet_ids": "subnetIds",
        "security_group_ids": "securityGroupIds",
    },
)
class MedialiveChannelVpc:
    def __init__(
        self,
        *,
        public_address_allocation_ids: typing.Sequence[builtins.str],
        subnet_ids: typing.Sequence[builtins.str],
        security_group_ids: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param public_address_allocation_ids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#public_address_allocation_ids MedialiveChannel#public_address_allocation_ids}.
        :param subnet_ids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#subnet_ids MedialiveChannel#subnet_ids}.
        :param security_group_ids: Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#security_group_ids MedialiveChannel#security_group_ids}.
        '''
        if __debug__:
            def stub(
                *,
                public_address_allocation_ids: typing.Sequence[builtins.str],
                subnet_ids: typing.Sequence[builtins.str],
                security_group_ids: typing.Optional[typing.Sequence[builtins.str]] = None,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument public_address_allocation_ids", value=public_address_allocation_ids, expected_type=type_hints["public_address_allocation_ids"])
            check_type(argname="argument subnet_ids", value=subnet_ids, expected_type=type_hints["subnet_ids"])
            check_type(argname="argument security_group_ids", value=security_group_ids, expected_type=type_hints["security_group_ids"])
        self._values: typing.Dict[str, typing.Any] = {
            "public_address_allocation_ids": public_address_allocation_ids,
            "subnet_ids": subnet_ids,
        }
        if security_group_ids is not None:
            self._values["security_group_ids"] = security_group_ids

    @builtins.property
    def public_address_allocation_ids(self) -> typing.List[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#public_address_allocation_ids MedialiveChannel#public_address_allocation_ids}.'''
        result = self._values.get("public_address_allocation_ids")
        assert result is not None, "Required property 'public_address_allocation_ids' is missing"
        return typing.cast(typing.List[builtins.str], result)

    @builtins.property
    def subnet_ids(self) -> typing.List[builtins.str]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#subnet_ids MedialiveChannel#subnet_ids}.'''
        result = self._values.get("subnet_ids")
        assert result is not None, "Required property 'subnet_ids' is missing"
        return typing.cast(typing.List[builtins.str], result)

    @builtins.property
    def security_group_ids(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel#security_group_ids MedialiveChannel#security_group_ids}.'''
        result = self._values.get("security_group_ids")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelVpc(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelVpcOutputReference(
    cdktf.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelVpcOutputReference",
):
    def __init__(
        self,
        terraform_resource: cdktf.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            def stub(
                terraform_resource: cdktf.IInterpolatingParent,
                terraform_attribute: builtins.str,
            ) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetSecurityGroupIds")
    def reset_security_group_ids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSecurityGroupIds", []))

    @builtins.property
    @jsii.member(jsii_name="availabilityZones")
    def availability_zones(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "availabilityZones"))

    @builtins.property
    @jsii.member(jsii_name="publicAddressAllocationIdsInput")
    def public_address_allocation_ids_input(
        self,
    ) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "publicAddressAllocationIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="securityGroupIdsInput")
    def security_group_ids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "securityGroupIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="subnetIdsInput")
    def subnet_ids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "subnetIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="publicAddressAllocationIds")
    def public_address_allocation_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "publicAddressAllocationIds"))

    @public_address_allocation_ids.setter
    def public_address_allocation_ids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "publicAddressAllocationIds", value)

    @builtins.property
    @jsii.member(jsii_name="securityGroupIds")
    def security_group_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "securityGroupIds"))

    @security_group_ids.setter
    def security_group_ids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "securityGroupIds", value)

    @builtins.property
    @jsii.member(jsii_name="subnetIds")
    def subnet_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "subnetIds"))

    @subnet_ids.setter
    def subnet_ids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            def stub(value: typing.List[builtins.str]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "subnetIds", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelVpc]:
        return typing.cast(typing.Optional[MedialiveChannelVpc], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(self, value: typing.Optional[MedialiveChannelVpc]) -> None:
        if __debug__:
            def stub(value: typing.Optional[MedialiveChannelVpc]) -> None:
                ...
            type_hints = typing.get_type_hints(stub)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


__all__ = [
    "MedialiveChannel",
    "MedialiveChannelCdiInputSpecification",
    "MedialiveChannelCdiInputSpecificationOutputReference",
    "MedialiveChannelConfig",
    "MedialiveChannelDestinations",
    "MedialiveChannelDestinationsList",
    "MedialiveChannelDestinationsMediaPackageSettings",
    "MedialiveChannelDestinationsMediaPackageSettingsList",
    "MedialiveChannelDestinationsMediaPackageSettingsOutputReference",
    "MedialiveChannelDestinationsMultiplexSettings",
    "MedialiveChannelDestinationsMultiplexSettingsOutputReference",
    "MedialiveChannelDestinationsOutputReference",
    "MedialiveChannelDestinationsSettings",
    "MedialiveChannelDestinationsSettingsList",
    "MedialiveChannelDestinationsSettingsOutputReference",
    "MedialiveChannelEncoderSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptions",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAvailBlanking",
    "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage",
    "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference",
    "MedialiveChannelEncoderSettingsAvailBlankingOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroups",
    "MedialiveChannelEncoderSettingsOutputGroupsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputs",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputReference",
    "MedialiveChannelEncoderSettingsTimecodeConfig",
    "MedialiveChannelEncoderSettingsTimecodeConfigOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptions",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsList",
    "MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference",
    "MedialiveChannelInputAttachments",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettings",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelector",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelector",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsVideoSelector",
    "MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference",
    "MedialiveChannelInputAttachmentsList",
    "MedialiveChannelInputAttachmentsOutputReference",
    "MedialiveChannelInputSpecification",
    "MedialiveChannelInputSpecificationOutputReference",
    "MedialiveChannelMaintenance",
    "MedialiveChannelMaintenanceOutputReference",
    "MedialiveChannelTimeouts",
    "MedialiveChannelTimeoutsOutputReference",
    "MedialiveChannelVpc",
    "MedialiveChannelVpcOutputReference",
]

publication.publish()
