{"version":3,"file":"7ce15bdd.js","mappings":";AA0BA;;;;AAqEA;;;AAGA;;AAEA;;;AAKA;AAzGA;;;;;;;AAiHA;;;;;AAOA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;;;;AAIA;AACA;;;;;;AAMA;;;;AAMA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;AAOA;;;;AAIA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;AAMA;AACA;AACA;;;;AAIA;;;AAIA;AACA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;;;;AAKA;AACA;;AAEA;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwMA","sources":["webpack://home-assistant-frontend/./src/panels/calendar/dialog-calendar-event-editor.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { mdiClose } from \"@mdi/js\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { addDays, addHours, startOfHour } from \"date-fns/esm\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isDate } from \"../../common/string/is_date\";\nimport \"../../components/ha-date-input\";\nimport \"../../components/ha-time-input\";\nimport {\n  Calendar,\n  CalendarEventMutableParams,\n  createCalendarEvent,\n  deleteCalendarEvent,\n} from \"../../data/calendar\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../lovelace/components/hui-generic-entity-row\";\nimport \"./ha-recurrence-rule-editor\";\nimport { showConfirmEventDialog } from \"./show-confirm-event-dialog-box\";\nimport { CalendarEventDetailDialogParams } from \"./show-dialog-calendar-event-detail\";\nimport { CalendarEventEditDialogParams } from \"./show-dialog-calendar-event-editor\";\n\nconst rowRenderer: ComboBoxLitRenderer<Calendar> = (\n  item\n) => html`<mwc-list-item>\n  <span>${item.name}</span>\n</mwc-list-item>`;\n\n@customElement(\"dialog-calendar-event-editor\")\nclass DialogCalendarEventEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _params?: CalendarEventDetailDialogParams;\n\n  @state() private _calendars: Calendar[] = [];\n\n  @state() private _calendarId?: string;\n\n  @state() private _data?: CalendarEventMutableParams;\n\n  @state() private _allDay = false;\n\n  @state() private _dtstart?: Date; // In sync with _data.dtstart\n\n  @state() private _dtend?: Date; // Inclusive for display, in sync with _data.dtend (exclusive)\n\n  @state() private _submitting = false;\n\n  public async showDialog(\n    params: CalendarEventEditDialogParams\n  ): Promise<void> {\n    this._error = undefined;\n    this._params = params;\n    this._calendars = params.calendars;\n    this._calendarId = params.calendarId || this._calendars[0].entity_id;\n    if (params.entry) {\n      const entry = params.entry!;\n      this._data = entry;\n      this._allDay = isDate(entry.dtstart);\n      if (this._allDay) {\n        this._dtstart = new Date(entry.dtstart);\n        // Calendar event end dates are exclusive, but not shown that way in the UI. The\n        // reverse happens when persisting the event.\n        this._dtend = new Date(entry.dtend);\n        this._dtend.setDate(this._dtend.getDate() - 1);\n      } else {\n        this._dtstart = new Date(entry.dtstart);\n        this._dtend = new Date(entry.dtend);\n      }\n    } else {\n      this._data = {\n        summary: \"\",\n        // Dates are set in _dateChanged()\n        dtstart: \"\",\n        dtend: \"\",\n      };\n      this._allDay = false;\n      this._dtstart = startOfHour(new Date());\n      this._dtend = addHours(this._dtstart, 1);\n      this._dateChanged();\n    }\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const isCreate = this._params.entry === undefined;\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${html`\n          <div class=\"header_title\">\n            ${isCreate\n              ? this.hass.localize(\"ui.components.calendar.event.add\")\n              : this._data!.summary}\n          </div>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.dialogs.generic.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n            class=\"header_button\"\n          ></ha-icon-button>\n        `}\n      >\n        <div class=\"content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n\n          <ha-textfield\n            class=\"summary\"\n            name=\"summary\"\n            .label=${this.hass.localize(\"ui.components.calendar.event.summary\")}\n            required\n            @change=${this._handleSummaryChanged}\n            error-message=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n          ></ha-textfield>\n          <ha-combo-box\n            name=\"calendar\"\n            .hass=${this.hass}\n            .label=${this.hass.localize(\"ui.components.calendar.label\")}\n            .value=${this._calendarId!}\n            .renderer=${rowRenderer}\n            .items=${this._calendars}\n            item-id-path=\"entity_id\"\n            item-value-path=\"entity_id\"\n            item-label-path=\"name\"\n            required\n            @value-changed=${this._handleCalendarChanged}\n          ></ha-combo-box>\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.components.calendar.event.all_day\")}\n          >\n            <ha-switch\n              id=\"all_day\"\n              .checked=${this._allDay}\n              @change=${this._allDayToggleChanged}\n            ></ha-switch>\n          </ha-formfield>\n\n          <div>\n            <span class=\"label\"\n              >${this.hass.localize(\n                \"ui.components.calendar.event.start\"\n              )}:</span\n            >\n            <div class=\"flex\">\n              <ha-date-input\n                .value=${this._data!.dtstart}\n                .locale=${this.hass.locale}\n                @value-changed=${this._startDateChanged}\n              ></ha-date-input>\n              ${!this._allDay\n                ? html`<ha-time-input\n                    .value=${this._data!.dtstart.split(\"T\")[1]}\n                    .locale=${this.hass.locale}\n                    @value-changed=${this._startTimeChanged}\n                  ></ha-time-input>`\n                : \"\"}\n            </div>\n          </div>\n          <div>\n            <span class=\"label\"\n              >${this.hass.localize(\"ui.components.calendar.event.end\")}:</span\n            >\n            <div class=\"flex\">\n              <ha-date-input\n                .value=${this._data!.dtend}\n                .min=${this._data!.dtstart}\n                .locale=${this.hass.locale}\n                @value-changed=${this._endDateChanged}\n              ></ha-date-input>\n              ${!this._allDay\n                ? html`<ha-time-input\n                    .value=${this._data!.dtend.split(\"T\")[1]}\n                    .locale=${this.hass.locale}\n                    @value-changed=${this._endTimeChanged}\n                  ></ha-time-input>`\n                : \"\"}\n            </div>\n          </div>\n          <ha-recurrence-rule-editor\n            .locale=${this.hass.locale}\n            .value=${this._data!.rrule || \"\"}\n            @value-changed=${this._handleRRuleChanged}\n          >\n          </ha-recurrence-rule-editor>\n        </div>\n        ${isCreate\n          ? html`\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._createEvent}\n                .disabled=${this._submitting}\n              >\n                ${this.hass.localize(\"ui.components.calendar.event.add\")}\n              </mwc-button>\n            `\n          : html` <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._saveEvent}\n                .disabled=${this._submitting}\n              >\n                ${this.hass.localize(\"ui.components.calendar.event.save\")}\n              </mwc-button>\n              ${this._params.canDelete\n                ? html`\n                    <mwc-button\n                      slot=\"secondaryAction\"\n                      class=\"warning\"\n                      @click=${this._deleteEvent}\n                      .disabled=${this._submitting}\n                    >\n                      ${this.hass.localize(\n                        \"ui.components.calendar.event.delete\"\n                      )}\n                    </mwc-button>\n                  `\n                : \"\"}`}\n      </ha-dialog>\n    `;\n  }\n\n  private _handleSummaryChanged(ev) {\n    this._data!.summary = ev.target.value;\n  }\n\n  private _handleRRuleChanged(ev) {\n    this._data!.rrule = ev.detail.value;\n    this.requestUpdate();\n  }\n\n  private _allDayToggleChanged(ev) {\n    this._allDay = ev.target.checked;\n    this._dateChanged();\n  }\n\n  private _startDateChanged(ev: CustomEvent) {\n    this._dtstart = new Date(\n      ev.detail.value + \"T\" + this._dtstart!.toISOString().split(\"T\")[1]\n    );\n    this._dateChanged();\n  }\n\n  private _endDateChanged(ev: CustomEvent) {\n    this._dtend = new Date(\n      ev.detail.value + \"T\" + this._dtend!.toISOString().split(\"T\")[1]\n    );\n    this._dateChanged();\n  }\n\n  private _startTimeChanged(ev: CustomEvent) {\n    this._dtstart = new Date(\n      this._dtstart!.toISOString().split(\"T\")[0] + \"T\" + ev.detail.value\n    );\n    this._dateChanged();\n  }\n\n  private _endTimeChanged(ev: CustomEvent) {\n    this._dtend = new Date(\n      this._dtend!.toISOString().split(\"T\")[0] + \"T\" + ev.detail.value\n    );\n    this._dateChanged();\n  }\n\n  private _dateChanged() {\n    if (this._allDay) {\n      this._data!.dtstart = this._dtstart!.toISOString();\n      // End date/time is exclusive when persisted\n      this._data!.dtend = addDays(new Date(this._dtend!), 1).toISOString();\n    } else {\n      this._data!.dtstart = this._dtstart!.toISOString();\n      this._data!.dtend = this._dtend!.toISOString();\n    }\n  }\n\n  private _handleCalendarChanged(ev: CustomEvent) {\n    this._calendarId = ev.detail.value;\n  }\n\n  private async _createEvent() {\n    this._submitting = true;\n    try {\n      await createCalendarEvent(this.hass!, this._calendarId!, this._data!);\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n    await this._params!.updated();\n    this._params = undefined;\n  }\n\n  private async _saveEvent() {\n    // to be implemented\n  }\n\n  private async _deleteEvent() {\n    this._submitting = true;\n    const entry = this._params!.entry!;\n    const range = await showConfirmEventDialog(this, {\n      title: this.hass.localize(\n        \"ui.components.calendar.event.confirm_delete.delete\"\n      ),\n      text: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.recurring_prompt\"\n          )\n        : this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.prompt\"\n          ),\n      confirmText: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete_this\"\n          )\n        : this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete\"\n          ),\n      confirmFutureText: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete_future\"\n          )\n        : undefined,\n    });\n    if (range === undefined) {\n      // Cancel\n      this._submitting = false;\n      return;\n    }\n    try {\n      await deleteCalendarEvent(\n        this.hass!,\n        this._calendarId!,\n        entry.uid!,\n        entry.recurrence_id || \"\",\n        range!\n      );\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n      return;\n    } finally {\n      this._submitting = false;\n    }\n    await this._params!.updated();\n    this._close();\n  }\n\n  private _close(): void {\n    this._calendars = [];\n    this._calendarId = undefined;\n    this._params = undefined;\n    this._data = undefined;\n    this._dtstart = undefined;\n    this._dtend = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        state-info {\n          line-height: 40px;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 24px;\n        }\n        ha-formfield {\n          display: block;\n          padding: 16px 0;\n        }\n        ha-date-input {\n          flex-grow: 1;\n        }\n        ha-time-input {\n          margin-left: 16px;\n        }\n        ha-recurrence-rule-editor {\n          display: block;\n          margin-top: 16px;\n        }\n        .flex {\n          display: flex;\n          justify-content: space-between;\n        }\n        .label {\n          font-size: 12px;\n          font-weight: 500;\n          color: var(--input-label-ink-color);\n        }\n        .date-range-details-content {\n          display: inline-block;\n        }\n        ha-rrule {\n          display: block;\n        }\n        ha-combo-box {\n          display: block;\n          margin-bottom: 24px;\n        }\n        ha-svg-icon {\n          width: 40px;\n          margin-right: 8px;\n          margin-inline-end: 8px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n          vertical-align: top;\n        }\n        ha-rrule {\n          display: inline-block;\n        }\n        .key {\n          display: inline-block;\n          vertical-align: top;\n        }\n        .value {\n          display: inline-block;\n          vertical-align: top;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-calendar-event-editor\": DialogCalendarEventEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}