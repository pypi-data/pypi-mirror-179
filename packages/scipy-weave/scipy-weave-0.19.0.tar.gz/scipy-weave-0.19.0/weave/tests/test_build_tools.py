

# still needed
# tests for MingW32Compiler
# don't know how to test gcc_exists() and msvc_exists()...

import os
import sys
import tempfile
import warnings

from numpy.testing import TestCase, assert_, run_module_suite

from weave import build_tools


# filter warnings generated by checking for bad paths
warnings.filterwarnings('ignore',
                        message="specified build_dir",
                        module='weave')


def is_writable(val):
    return os.access(val,os.W_OK)


class TestConfigureBuildDir(TestCase):

    def test_default(self):
        # default behavior is to return current directory
        d = build_tools.configure_build_dir()
        if is_writable('.'):
            assert_(d == os.path.abspath('.'))
        assert_(is_writable(d))

    def test_curdir(self):
        # make sure it handles relative values.
        d = build_tools.configure_build_dir('.')
        if is_writable('.'):
            assert_(d == os.path.abspath('.'))
        assert_(is_writable(d))

    def test_pardir(self):
        # make sure it handles relative values
        d = build_tools.configure_build_dir('..')
        if is_writable('..'):
            assert_(d == os.path.abspath('..'))
        assert_(is_writable(d))

    def test_bad_path(self):
        # bad path should return same as default (and warn)
        d = build_tools.configure_build_dir('_bad_path_')
        d2 = build_tools.configure_build_dir()
        assert_(d == d2)
        assert_(is_writable(d))


class TestConfigureTempDir(TestConfigureBuildDir):

    def test_default(self):
        # default behavior returns tempdir
        # Note: this'll fail if the temp directory isn't writable.
        d = build_tools.configure_temp_dir()
        assert_(d == tempfile.gettempdir())
        assert_(is_writable(d))


if __name__ == "__main__":
    run_module_suite()
