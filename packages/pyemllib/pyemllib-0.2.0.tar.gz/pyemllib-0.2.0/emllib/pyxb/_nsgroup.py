# ./emllib/eml220/_nsgroup.py
# -*- coding: utf-8 -*-
# PyXB bindings for NGM:86da125609ac75cf4b0fd249dee5cfa20d6d167f
# Generated 2022-06-27 15:56:32.587247 by PyXB version 1.2.6 using Python 3.8.10.final.0
# Group contents:
# Namespace https://eml.ecoinformatics.org/access-2.2.0 [xmlns:acc]
# Namespace https://eml.ecoinformatics.org/attribute-2.2.0 [xmlns:att]
# Namespace https://eml.ecoinformatics.org/constraint-2.2.0 [xmlns:con]
# Namespace https://eml.ecoinformatics.org/coverage-2.2.0 [xmlns:cov]
# Namespace https://eml.ecoinformatics.org/dataTable-2.2.0 [xmlns:dat]
# Namespace https://eml.ecoinformatics.org/dataset-2.2.0 [xmlns:ds]
# Namespace https://eml.ecoinformatics.org/entity-2.2.0 [xmlns:ent]
# Namespace https://eml.ecoinformatics.org/literature-2.2.0 [xmlns:cit]
# Namespace https://eml.ecoinformatics.org/methods-2.2.0 [xmlns:md]
# Namespace https://eml.ecoinformatics.org/party-2.2.0 [xmlns:rp]
# Namespace https://eml.ecoinformatics.org/physical-2.2.0 [xmlns:phys]
# Namespace https://eml.ecoinformatics.org/project-2.2.0 [xmlns:proj]
# Namespace https://eml.ecoinformatics.org/protocol-2.2.0 [xmlns:pro]
# Namespace https://eml.ecoinformatics.org/resource-2.2.0 [xmlns:res]
# Namespace https://eml.ecoinformatics.org/semantics-2.2.0 [xmlns:sem]
# Namespace https://eml.ecoinformatics.org/software-2.2.0 [xmlns:sw]
# Namespace https://eml.ecoinformatics.org/spatialRaster-2.2.0 [xmlns:sr]
# Namespace https://eml.ecoinformatics.org/spatialReference-2.2.0 [xmlns:spref]
# Namespace https://eml.ecoinformatics.org/spatialVector-2.2.0 [xmlns:sv]
# Namespace https://eml.ecoinformatics.org/storedProcedure-2.2.0 [xmlns:sp]
# Namespace https://eml.ecoinformatics.org/text-2.2.0 [xmlns:txt]
# Namespace https://eml.ecoinformatics.org/view-2.2.0 [xmlns:v]


from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.utils.utility
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:f2f05a8a-f620-11ec-ae48-6d7493702e64')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import emllib.eml220._unit as _ImportedBinding_emllib_eml220__unit
import pyxb.binding.xml_

# NOTE: All namespace declarations are reserved within the binding
_Namespace_acc = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/access-2.2.0', create_if_missing=True)
_Namespace_acc.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_att = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/attribute-2.2.0', create_if_missing=True)
_Namespace_att.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_con = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/constraint-2.2.0', create_if_missing=True)
_Namespace_con.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_cov = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/coverage-2.2.0', create_if_missing=True)
_Namespace_cov.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_dat = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/dataTable-2.2.0', create_if_missing=True)
_Namespace_dat.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_ds = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/dataset-2.2.0', create_if_missing=True)
_Namespace_ds.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_rp = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/party-2.2.0', create_if_missing=True)
_Namespace_rp.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_phys = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/physical-2.2.0', create_if_missing=True)
_Namespace_phys.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_proj = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/project-2.2.0', create_if_missing=True)
_Namespace_proj.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_res = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/resource-2.2.0', create_if_missing=True)
_Namespace_res.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_sw = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/software-2.2.0', create_if_missing=True)
_Namespace_sw.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_sr = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/spatialRaster-2.2.0', create_if_missing=True)
_Namespace_sr.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_spref = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/spatialReference-2.2.0', create_if_missing=True)
_Namespace_spref.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_sv = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/spatialVector-2.2.0', create_if_missing=True)
_Namespace_sv.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_cit = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/literature-2.2.0', create_if_missing=True)
_Namespace_cit.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_md = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/methods-2.2.0', create_if_missing=True)
_Namespace_md.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_sem = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/semantics-2.2.0', create_if_missing=True)
_Namespace_sem.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_sp = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/storedProcedure-2.2.0', create_if_missing=True)
_Namespace_sp.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_txt = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/text-2.2.0', create_if_missing=True)
_Namespace_txt.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_ent = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/entity-2.2.0', create_if_missing=True)
_Namespace_ent.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_pro = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/protocol-2.2.0', create_if_missing=True)
_Namespace_pro.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_v = pyxb.namespace.NamespaceForURI('https://eml.ecoinformatics.org/view-2.2.0', create_if_missing=True)
_Namespace_v.configureCategories(['typeBinding', 'elementBinding'])

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 143, 6)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.allowFirst = STD_ANON._CF_enumeration.addEnumeration(unicode_value='allowFirst', tag='allowFirst')
STD_ANON.denyFirst = STD_ANON._CF_enumeration.addEnumeration(unicode_value='denyFirst', tag='denyFirst')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 229, 12)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.read = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='read', tag='read')
STD_ANON_.write = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='write', tag='write')
STD_ANON_.changePermission = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='changePermission', tag='changePermission')
STD_ANON_.all = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='all', tag='all')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 237, 12)
    _Documentation = None
STD_ANON_2._InitializeFacetMap()
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1159, 14)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.yes = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
STD_ANON_3.no = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: {https://eml.ecoinformatics.org/attribute-2.2.0}NumberType
class NumberType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'NumberType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1576, 2)
    _Documentation = ''
NumberType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NumberType, enum_prefix=None)
NumberType.natural = NumberType._CF_enumeration.addEnumeration(unicode_value='natural', tag='natural')
NumberType.whole = NumberType._CF_enumeration.addEnumeration(unicode_value='whole', tag='whole')
NumberType.integer = NumberType._CF_enumeration.addEnumeration(unicode_value='integer', tag='integer')
NumberType.real = NumberType._CF_enumeration.addEnumeration(unicode_value='real', tag='real')
NumberType._InitializeFacetMap(NumberType._CF_enumeration)
_Namespace_att.addCategoryObject('typeBinding', 'NumberType', NumberType)
_module_typeBindings.NumberType = NumberType

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 390, 6)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.many = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='many', tag='many')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 503, 8)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.identifying = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='identifying', tag='identifying')
STD_ANON_5.non_identifying = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='non-identifying', tag='non_identifying')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 550, 14)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='0', tag=None)
STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 476, 16)
    _Documentation = None
STD_ANON_7._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_7, value=pyxb.binding.datatypes.decimal('-180.0'))
STD_ANON_7._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_7, value=pyxb.binding.datatypes.decimal('180.0'))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_minInclusive,
   STD_ANON_7._CF_maxInclusive)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 509, 16)
    _Documentation = None
STD_ANON_8._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_8, value=pyxb.binding.datatypes.decimal('-180.0'))
STD_ANON_8._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_8, value=pyxb.binding.datatypes.decimal('180.0'))
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_minInclusive,
   STD_ANON_8._CF_maxInclusive)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 538, 16)
    _Documentation = None
STD_ANON_9._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_9, value=pyxb.binding.datatypes.decimal('-90.0'))
STD_ANON_9._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_9, value=pyxb.binding.datatypes.decimal('90.0'))
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_minInclusive,
   STD_ANON_9._CF_maxInclusive)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 567, 16)
    _Documentation = None
STD_ANON_10._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_10, value=pyxb.binding.datatypes.decimal('-90.0'))
STD_ANON_10._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_10, value=pyxb.binding.datatypes.decimal('90.0'))
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_minInclusive,
   STD_ANON_10._CF_maxInclusive)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 800, 8)
    _Documentation = None
STD_ANON_11._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_11, value=pyxb.binding.datatypes.decimal('-90.0'))
STD_ANON_11._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_11, value=pyxb.binding.datatypes.decimal('90.0'))
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_minInclusive,
   STD_ANON_11._CF_maxInclusive)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 824, 8)
    _Documentation = None
STD_ANON_12._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_12, value=pyxb.binding.datatypes.decimal('-180.0'))
STD_ANON_12._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_12, value=pyxb.binding.datatypes.decimal('180.0'))
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_minInclusive,
   STD_ANON_12._CF_maxInclusive)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: {https://eml.ecoinformatics.org/coverage-2.2.0}GRingType
class GRingType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'GRingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 833, 2)
    _Documentation = ''
GRingType._InitializeFacetMap()
_Namespace_cov.addCategoryObject('typeBinding', 'GRingType', GRingType)
_module_typeBindings.GRingType = GRingType

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 132, 10)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.yes = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
STD_ANON_13.no = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: {https://eml.ecoinformatics.org/dataset-2.2.0}MaintUpFreqType
class MaintUpFreqType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_ds, 'MaintUpFreqType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 497, 2)
    _Documentation = None
MaintUpFreqType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MaintUpFreqType, enum_prefix=None)
MaintUpFreqType.annually = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='annually', tag='annually')
MaintUpFreqType.asNeeded = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='asNeeded', tag='asNeeded')
MaintUpFreqType.biannually = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='biannually', tag='biannually')
MaintUpFreqType.continually = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='continually', tag='continually')
MaintUpFreqType.daily = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='daily', tag='daily')
MaintUpFreqType.irregular = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='irregular', tag='irregular')
MaintUpFreqType.monthly = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='monthly', tag='monthly')
MaintUpFreqType.notPlanned = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='notPlanned', tag='notPlanned')
MaintUpFreqType.weekly = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='weekly', tag='weekly')
MaintUpFreqType.unknown = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
MaintUpFreqType.unkown = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='unkown', tag='unkown')
MaintUpFreqType.otherMaintenancePeriod = MaintUpFreqType._CF_enumeration.addEnumeration(unicode_value='otherMaintenancePeriod', tag='otherMaintenancePeriod')
MaintUpFreqType._InitializeFacetMap(MaintUpFreqType._CF_enumeration)
_Namespace_ds.addCategoryObject('typeBinding', 'MaintUpFreqType', MaintUpFreqType)
_module_typeBindings.MaintUpFreqType = MaintUpFreqType

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 531, 6)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.contentProvider = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='contentProvider', tag='contentProvider')
STD_ANON_14.custodianSteward = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='custodianSteward', tag='custodianSteward')
STD_ANON_14.owner = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='owner', tag='owner')
STD_ANON_14.user = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='user', tag='user')
STD_ANON_14.distributor = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='distributor', tag='distributor')
STD_ANON_14.metadataProvider = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='metadataProvider', tag='metadataProvider')
STD_ANON_14.originator = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='originator', tag='originator')
STD_ANON_14.pointOfContact = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='pointOfContact', tag='pointOfContact')
STD_ANON_14.principalInvestigator = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='principalInvestigator', tag='principalInvestigator')
STD_ANON_14.processor = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='processor', tag='processor')
STD_ANON_14.publisher = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='publisher', tag='publisher')
STD_ANON_14.author = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='author', tag='author')
STD_ANON_14.editor = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='editor', tag='editor')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 548, 6)
    _Documentation = None
STD_ANON_15._InitializeFacetMap()
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 426, 22)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.column = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='column', tag='column')
STD_ANON_16.row = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='row', tag='row')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 518, 30)
    _Documentation = None
STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.yes = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
STD_ANON_17.no = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 790, 36)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.yes = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
STD_ANON_18.no = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)
_module_typeBindings.STD_ANON_18 = STD_ANON_18

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 992, 22)
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.column = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='column', tag='column')
STD_ANON_19.row = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='row', tag='row')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)
_module_typeBindings.STD_ANON_19 = STD_ANON_19

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 552, 6)
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.climate = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='climate', tag='climate')
STD_ANON_20.hydrology = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='hydrology', tag='hydrology')
STD_ANON_20.soils = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='soils', tag='soils')
STD_ANON_20.geology = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='geology', tag='geology')
STD_ANON_20.disturbance = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='disturbance', tag='disturbance')
STD_ANON_20.bailey = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='bailey', tag='bailey')
STD_ANON_20.biome = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='biome', tag='biome')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)
_module_typeBindings.STD_ANON_20 = STD_ANON_20

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 563, 6)
    _Documentation = None
STD_ANON_21._InitializeFacetMap()
_module_typeBindings.STD_ANON_21 = STD_ANON_21

# Atomic simple type: {https://eml.ecoinformatics.org/resource-2.2.0}KeyTypeCode
class KeyTypeCode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'KeyTypeCode')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 495, 2)
    _Documentation = ''
KeyTypeCode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=KeyTypeCode, enum_prefix=None)
KeyTypeCode.place = KeyTypeCode._CF_enumeration.addEnumeration(unicode_value='place', tag='place')
KeyTypeCode.stratum = KeyTypeCode._CF_enumeration.addEnumeration(unicode_value='stratum', tag='stratum')
KeyTypeCode.temporal = KeyTypeCode._CF_enumeration.addEnumeration(unicode_value='temporal', tag='temporal')
KeyTypeCode.theme = KeyTypeCode._CF_enumeration.addEnumeration(unicode_value='theme', tag='theme')
KeyTypeCode.taxonomic = KeyTypeCode._CF_enumeration.addEnumeration(unicode_value='taxonomic', tag='taxonomic')
KeyTypeCode._InitializeFacetMap(KeyTypeCode._CF_enumeration)
_Namespace_res.addCategoryObject('typeBinding', 'KeyTypeCode', KeyTypeCode)
_module_typeBindings.KeyTypeCode = KeyTypeCode

# Union simple type: {https://eml.ecoinformatics.org/resource-2.2.0}yearDate
# superclasses pyxb.binding.datatypes.anySimpleType
class yearDate (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.binding.datatypes.gYear, pyxb.binding.datatypes.date."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'yearDate')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 560, 2)
    _Documentation = ''

    _MemberTypes = ( pyxb.binding.datatypes.gYear, pyxb.binding.datatypes.date, )
yearDate._InitializeFacetMap()
_Namespace_res.addCategoryObject('typeBinding', 'yearDate', yearDate)
_module_typeBindings.yearDate = yearDate

# List simple type: {https://eml.ecoinformatics.org/resource-2.2.0}IDType
# superclasses pyxb.binding.datatypes.anySimpleType
class IDType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'IDType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 572, 2)
    _Documentation = ''

    _ItemType = pyxb.binding.datatypes.string
IDType._InitializeFacetMap()
_Namespace_res.addCategoryObject('typeBinding', 'IDType', IDType)
_module_typeBindings.IDType = IDType

# List simple type: {https://eml.ecoinformatics.org/resource-2.2.0}SystemType
# superclasses pyxb.binding.datatypes.anySimpleType
class SystemType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'SystemType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 591, 2)
    _Documentation = ''

    _ItemType = pyxb.binding.datatypes.string
SystemType._InitializeFacetMap()
_Namespace_res.addCategoryObject('typeBinding', 'SystemType', SystemType)
_module_typeBindings.SystemType = SystemType

# Atomic simple type: {https://eml.ecoinformatics.org/resource-2.2.0}ScopeType
class ScopeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'ScopeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 611, 2)
    _Documentation = ''
ScopeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ScopeType, enum_prefix=None)
ScopeType.system = ScopeType._CF_enumeration.addEnumeration(unicode_value='system', tag='system')
ScopeType.document = ScopeType._CF_enumeration.addEnumeration(unicode_value='document', tag='document')
ScopeType._InitializeFacetMap(ScopeType._CF_enumeration)
_Namespace_res.addCategoryObject('typeBinding', 'ScopeType', ScopeType)
_module_typeBindings.ScopeType = ScopeType

# Atomic simple type: {https://eml.ecoinformatics.org/resource-2.2.0}FunctionType
class FunctionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'FunctionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 631, 2)
    _Documentation = None
FunctionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FunctionType, enum_prefix=None)
FunctionType.download = FunctionType._CF_enumeration.addEnumeration(unicode_value='download', tag='download')
FunctionType.information = FunctionType._CF_enumeration.addEnumeration(unicode_value='information', tag='information')
FunctionType._InitializeFacetMap(FunctionType._CF_enumeration)
_Namespace_res.addCategoryObject('typeBinding', 'FunctionType', FunctionType)
_module_typeBindings.FunctionType = FunctionType

# Atomic simple type: {https://eml.ecoinformatics.org/resource-2.2.0}NonEmptyStringType
class NonEmptyStringType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'NonEmptyStringType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1216, 2)
    _Documentation = ''
NonEmptyStringType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
NonEmptyStringType._CF_pattern = pyxb.binding.facets.CF_pattern()
NonEmptyStringType._CF_pattern.addPattern(pattern='[\\s]*[\\S][\\s\\S]*')
NonEmptyStringType._InitializeFacetMap(NonEmptyStringType._CF_minLength,
   NonEmptyStringType._CF_pattern)
_Namespace_res.addCategoryObject('typeBinding', 'NonEmptyStringType', NonEmptyStringType)
_module_typeBindings.NonEmptyStringType = NonEmptyStringType

# Atomic simple type: {https://eml.ecoinformatics.org/software-2.2.0}Action
class Action (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sw, 'Action')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 346, 2)
    _Documentation = ''
Action._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Action, enum_prefix=None)
Action.install = Action._CF_enumeration.addEnumeration(unicode_value='install', tag='install')
Action.assert_ = Action._CF_enumeration.addEnumeration(unicode_value='assert', tag='assert_')
Action._InitializeFacetMap(Action._CF_enumeration)
_Namespace_sw.addCategoryObject('typeBinding', 'Action', Action)
_module_typeBindings.Action = Action

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 194, 22)
    _Documentation = None
STD_ANON_22._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_22, enum_prefix=None)
STD_ANON_22.upperLeft = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='upperLeft', tag='upperLeft')
STD_ANON_22.upperRight = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='upperRight', tag='upperRight')
STD_ANON_22.lowerRight = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='lowerRight', tag='lowerRight')
STD_ANON_22.lowerLeft = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='lowerLeft', tag='lowerLeft')
STD_ANON_22.center = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='center', tag='center')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_enumeration)
_module_typeBindings.STD_ANON_22 = STD_ANON_22

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 291, 22)
    _Documentation = None
STD_ANON_23._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_23, enum_prefix=None)
STD_ANON_23.upperLeft = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='upperLeft', tag='upperLeft')
STD_ANON_23.upperRight = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='upperRight', tag='upperRight')
STD_ANON_23.lowerRight = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='lowerRight', tag='lowerRight')
STD_ANON_23.lowerLeft = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='lowerLeft', tag='lowerLeft')
STD_ANON_23.center = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='center', tag='center')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_enumeration)
_module_typeBindings.STD_ANON_23 = STD_ANON_23

# Atomic simple type: {https://eml.ecoinformatics.org/spatialRaster-2.2.0}CellValueType
class CellValueType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'CellValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 807, 2)
    _Documentation = ''
CellValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CellValueType, enum_prefix=None)
CellValueType.Values = CellValueType._CF_enumeration.addEnumeration(unicode_value='Values', tag='Values')
CellValueType.Coded = CellValueType._CF_enumeration.addEnumeration(unicode_value='Coded', tag='Coded')
CellValueType.RGB = CellValueType._CF_enumeration.addEnumeration(unicode_value='RGB', tag='RGB')
CellValueType.Codes = CellValueType._CF_enumeration.addEnumeration(unicode_value='Codes', tag='Codes')
CellValueType.HIS = CellValueType._CF_enumeration.addEnumeration(unicode_value='HIS', tag='HIS')
CellValueType.HLS = CellValueType._CF_enumeration.addEnumeration(unicode_value='HLS', tag='HLS')
CellValueType.tekHVC = CellValueType._CF_enumeration.addEnumeration(unicode_value='tekHVC', tag='tekHVC')
CellValueType._InitializeFacetMap(CellValueType._CF_enumeration)
_Namespace_sr.addCategoryObject('typeBinding', 'CellValueType', CellValueType)
_module_typeBindings.CellValueType = CellValueType

# Atomic simple type: {https://eml.ecoinformatics.org/spatialRaster-2.2.0}ImagingConditionCode
class ImagingConditionCode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'ImagingConditionCode')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 825, 2)
    _Documentation = ''
ImagingConditionCode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ImagingConditionCode, enum_prefix=None)
ImagingConditionCode.blurredimage = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='blurredimage', tag='blurredimage')
ImagingConditionCode.cloud = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='cloud', tag='cloud')
ImagingConditionCode.degradingObliquity = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='degradingObliquity', tag='degradingObliquity')
ImagingConditionCode.fog = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='fog', tag='fog')
ImagingConditionCode.heavySmokeorDust = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='heavySmokeorDust', tag='heavySmokeorDust')
ImagingConditionCode.night = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='night', tag='night')
ImagingConditionCode.rain = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='rain', tag='rain')
ImagingConditionCode.semiDarkness = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='semiDarkness', tag='semiDarkness')
ImagingConditionCode.shadow = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='shadow', tag='shadow')
ImagingConditionCode.snow = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='snow', tag='snow')
ImagingConditionCode.terrainMasking = ImagingConditionCode._CF_enumeration.addEnumeration(unicode_value='terrainMasking', tag='terrainMasking')
ImagingConditionCode._InitializeFacetMap(ImagingConditionCode._CF_enumeration)
_Namespace_sr.addCategoryObject('typeBinding', 'ImagingConditionCode', ImagingConditionCode)
_module_typeBindings.ImagingConditionCode = ImagingConditionCode

# Atomic simple type: {https://eml.ecoinformatics.org/spatialRaster-2.2.0}rasterOriginType
class rasterOriginType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'rasterOriginType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 847, 2)
    _Documentation = ''
rasterOriginType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=rasterOriginType, enum_prefix=None)
rasterOriginType.Upper_Left = rasterOriginType._CF_enumeration.addEnumeration(unicode_value='Upper Left', tag='Upper_Left')
rasterOriginType.Lower_Left = rasterOriginType._CF_enumeration.addEnumeration(unicode_value='Lower Left', tag='Lower_Left')
rasterOriginType.Upper_Right = rasterOriginType._CF_enumeration.addEnumeration(unicode_value='Upper Right', tag='Upper_Right')
rasterOriginType.Lower_Right = rasterOriginType._CF_enumeration.addEnumeration(unicode_value='Lower Right', tag='Lower_Right')
rasterOriginType._InitializeFacetMap(rasterOriginType._CF_enumeration)
_Namespace_sr.addCategoryObject('typeBinding', 'rasterOriginType', rasterOriginType)
_module_typeBindings.rasterOriginType = rasterOriginType

# Atomic simple type: {https://eml.ecoinformatics.org/spatialRaster-2.2.0}CellGeometryType
class CellGeometryType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'CellGeometryType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 862, 2)
    _Documentation = ''
CellGeometryType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CellGeometryType, enum_prefix=None)
CellGeometryType.pixel = CellGeometryType._CF_enumeration.addEnumeration(unicode_value='pixel', tag='pixel')
CellGeometryType.matrix = CellGeometryType._CF_enumeration.addEnumeration(unicode_value='matrix', tag='matrix')
CellGeometryType._InitializeFacetMap(CellGeometryType._CF_enumeration)
_Namespace_sr.addCategoryObject('typeBinding', 'CellGeometryType', CellGeometryType)
_module_typeBindings.CellGeometryType = CellGeometryType

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 87, 12)
    _Documentation = None
STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.GCS_Abidjan_1987 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Abidjan_1987', tag='GCS_Abidjan_1987')
STD_ANON_24.GCS_Accra = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Accra', tag='GCS_Accra')
STD_ANON_24.GCS_Adindan = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Adindan', tag='GCS_Adindan')
STD_ANON_24.GCS_Afgooye = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Afgooye', tag='GCS_Afgooye')
STD_ANON_24.GCS_Agadez = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Agadez', tag='GCS_Agadez')
STD_ANON_24.GCS_Ain_el_Abd_1970 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Ain_el_Abd_1970', tag='GCS_Ain_el_Abd_1970')
STD_ANON_24.GCS_Arc_1950 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Arc_1950', tag='GCS_Arc_1950')
STD_ANON_24.GCS_Arc_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Arc_1960', tag='GCS_Arc_1960')
STD_ANON_24.GCS_Ayabelle = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Ayabelle', tag='GCS_Ayabelle')
STD_ANON_24.GCS_Beduaram = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Beduaram', tag='GCS_Beduaram')
STD_ANON_24.GCS_Bissau = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bissau', tag='GCS_Bissau')
STD_ANON_24.GCS_Camacupa = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Camacupa', tag='GCS_Camacupa')
STD_ANON_24.GCS_Cape = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Cape', tag='GCS_Cape')
STD_ANON_24.GCS_Carthage_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Carthage_Degree', tag='GCS_Carthage_Degree')
STD_ANON_24.GCS_Carthage_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Carthage_Paris', tag='GCS_Carthage_Paris')
STD_ANON_24.GCS_Carthage = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Carthage', tag='GCS_Carthage')
STD_ANON_24.GCS_Conakry_1905 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Conakry_1905', tag='GCS_Conakry_1905')
STD_ANON_24.GCS_Cote_d_Ivoire = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Cote_d_Ivoire', tag='GCS_Cote_d_Ivoire')
STD_ANON_24.GCS_Dabola = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Dabola', tag='GCS_Dabola')
STD_ANON_24.GCS_Douala = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Douala', tag='GCS_Douala')
STD_ANON_24.GCS_Egypt_1907 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Egypt_1907', tag='GCS_Egypt_1907')
STD_ANON_24.GCS_European_1950 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_1950', tag='GCS_European_1950')
STD_ANON_24.GCS_European_Libyan_Datum_1979 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_Libyan_Datum_1979', tag='GCS_European_Libyan_Datum_1979')
STD_ANON_24.GCS_Garoua = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Garoua', tag='GCS_Garoua')
STD_ANON_24.GCS_Hartebeesthoek_1994 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hartebeesthoek_1994', tag='GCS_Hartebeesthoek_1994')
STD_ANON_24.GCS_Kuwait_Oil_Company = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kuwait_Oil_Company', tag='GCS_Kuwait_Oil_Company')
STD_ANON_24.GCS_KUDAMS = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_KUDAMS', tag='GCS_KUDAMS')
STD_ANON_24.GCS_Leigon = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Leigon', tag='GCS_Leigon')
STD_ANON_24.GCS_Liberia_1964 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Liberia_1964', tag='GCS_Liberia_1964')
STD_ANON_24.GCS_Locodjo_1965 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Locodjo_1965', tag='GCS_Locodjo_1965')
STD_ANON_24.GCS_Lome = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Lome', tag='GCS_Lome')
STD_ANON_24.GCS_Mporaloko = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Mporaloko', tag='GCS_Mporaloko')
STD_ANON_24.GCS_Madzansua = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Madzansua', tag='GCS_Madzansua')
STD_ANON_24.GCS_Mahe_1971 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Mahe_1971', tag='GCS_Mahe_1971')
STD_ANON_24.GCS_Malongo_1987 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Malongo_1987', tag='GCS_Malongo_1987')
STD_ANON_24.GCS_Manoca = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Manoca', tag='GCS_Manoca')
STD_ANON_24.GCS_Massawa = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Massawa', tag='GCS_Massawa')
STD_ANON_24.GCS_Merchich_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Merchich_Degree', tag='GCS_Merchich_Degree')
STD_ANON_24.GCS_Merchich = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Merchich', tag='GCS_Merchich')
STD_ANON_24.GCS_Mhast = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Mhast', tag='GCS_Mhast')
STD_ANON_24.GCS_Minna = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Minna', tag='GCS_Minna')
STD_ANON_24.GCS_Moznet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Moznet', tag='GCS_Moznet')
STD_ANON_24.GCS_Nahrwan_1967 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Nahrwan_1967', tag='GCS_Nahrwan_1967')
STD_ANON_24.GCS_NGN = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NGN', tag='GCS_NGN')
STD_ANON_24.GCS_Nord_Sahara_1959 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Nord_Sahara_1959', tag='GCS_Nord_Sahara_1959')
STD_ANON_24.GCS_Observatario = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Observatario', tag='GCS_Observatario')
STD_ANON_24.GCS_Oman = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Oman', tag='GCS_Oman')
STD_ANON_24.GCS_Palestine_1923 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Palestine_1923', tag='GCS_Palestine_1923')
STD_ANON_24.GCS_PDO_1993 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_PDO_1993', tag='GCS_PDO_1993')
STD_ANON_24.GCS_Point_58 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Point_58', tag='GCS_Point_58')
STD_ANON_24.GCS_Pointe_Noire = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pointe_Noire', tag='GCS_Pointe_Noire')
STD_ANON_24.GCS_Qatar_1948 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Qatar_1948', tag='GCS_Qatar_1948')
STD_ANON_24.GCS_Qatar = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Qatar', tag='GCS_Qatar')
STD_ANON_24.GCS_Schwarzeck = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Schwarzeck', tag='GCS_Schwarzeck')
STD_ANON_24.GCS_Sierra_Leone_1924 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sierra_Leone_1924', tag='GCS_Sierra_Leone_1924')
STD_ANON_24.GCS_Sierra_Leone_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sierra_Leone_1960', tag='GCS_Sierra_Leone_1960')
STD_ANON_24.GCS_Sierra_Leone_1968 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sierra_Leone_1968', tag='GCS_Sierra_Leone_1968')
STD_ANON_24.GCS_South_Yemen = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_South_Yemen', tag='GCS_South_Yemen')
STD_ANON_24.GCS_Sudan = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sudan', tag='GCS_Sudan')
STD_ANON_24.GCS_Tananarive_1925_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Tananarive_1925_Paris', tag='GCS_Tananarive_1925_Paris')
STD_ANON_24.GCS_Tananarive_1925 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Tananarive_1925', tag='GCS_Tananarive_1925')
STD_ANON_24.GCS_Tete = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Tete', tag='GCS_Tete')
STD_ANON_24.GCS_Trucial_Coast_1948 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Trucial_Coast_1948', tag='GCS_Trucial_Coast_1948')
STD_ANON_24.GCS_Voirol_1875_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Voirol_1875_Degree', tag='GCS_Voirol_1875_Degree')
STD_ANON_24.GCS_Voirol_1875_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Voirol_1875_Paris', tag='GCS_Voirol_1875_Paris')
STD_ANON_24.GCS_Voirol_1875 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Voirol_1875', tag='GCS_Voirol_1875')
STD_ANON_24.GCS_Voirol_Unifie_1960_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Voirol_Unifie_1960_Degree', tag='GCS_Voirol_Unifie_1960_Degree')
STD_ANON_24.GCS_Voirol_Unifie_1960_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Voirol_Unifie_1960_Paris', tag='GCS_Voirol_Unifie_1960_Paris')
STD_ANON_24.GCS_Voirol_Unifie_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Voirol_Unifie_1960', tag='GCS_Voirol_Unifie_1960')
STD_ANON_24.GCS_Yemen_NGN_1996 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Yemen_NGN_1996', tag='GCS_Yemen_NGN_1996')
STD_ANON_24.GCS_Yoff = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Yoff', tag='GCS_Yoff')
STD_ANON_24.GCS_Camp_Area = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Camp_Area', tag='GCS_Camp_Area')
STD_ANON_24.GCS_Deception_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Deception_Island', tag='GCS_Deception_Island')
STD_ANON_24.GCS_Ain_el_Abd_1970_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Ain_el_Abd_1970', tag='GCS_Ain_el_Abd_1970_')
STD_ANON_24.GCS_Batavia_Jakarta = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Batavia_Jakarta', tag='GCS_Batavia_Jakarta')
STD_ANON_24.GCS_Batavia = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Batavia', tag='GCS_Batavia')
STD_ANON_24.GCS_Beijing_1954 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Beijing_1954', tag='GCS_Beijing_1954')
STD_ANON_24.GCS_Bukit_Rimpah = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bukit_Rimpah', tag='GCS_Bukit_Rimpah')
STD_ANON_24.GCS_Deir_ez_Zor = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Deir_ez_Zor', tag='GCS_Deir_ez_Zor')
STD_ANON_24.GCS_European_1950_ED77 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_1950_ED77', tag='GCS_European_1950_ED77')
STD_ANON_24.GCS_European_1950_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_1950', tag='GCS_European_1950_')
STD_ANON_24.GCS_Everest_def_1962 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_def_1962', tag='GCS_Everest_def_1962')
STD_ANON_24.GCS_Everest_def_1967 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_def_1967', tag='GCS_Everest_def_1967')
STD_ANON_24.GCS_Everest_def_1975 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_def_1975', tag='GCS_Everest_def_1975')
STD_ANON_24.GCS_Everest_Bangladesh = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_Bangladesh', tag='GCS_Everest_Bangladesh')
STD_ANON_24.GCS_Everest_India_Nepal = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_India_Nepal', tag='GCS_Everest_India_Nepal')
STD_ANON_24.GCS_Everest_1830 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_1830', tag='GCS_Everest_1830')
STD_ANON_24.GCS_Everest_Modified = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_Modified', tag='GCS_Everest_Modified')
STD_ANON_24.GCS_Fahud = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Fahud', tag='GCS_Fahud')
STD_ANON_24.GCS_FD_1958 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_FD_1958', tag='GCS_FD_1958')
STD_ANON_24.GCS_Gandajika_1970 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Gandajika_1970', tag='GCS_Gandajika_1970')
STD_ANON_24.GCS_Gunung_Segara = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Gunung_Segara', tag='GCS_Gunung_Segara')
STD_ANON_24.GCS_Hanoi_1972 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hanoi_1972', tag='GCS_Hanoi_1972')
STD_ANON_24.GCS_Herat_North = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Herat_North', tag='GCS_Herat_North')
STD_ANON_24.GCS_Hong_Kong_1963 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hong_Kong_1963', tag='GCS_Hong_Kong_1963')
STD_ANON_24.GCS_Hong_Kong_1980 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hong_Kong_1980', tag='GCS_Hong_Kong_1980')
STD_ANON_24.GCS_Hu_Tzu_Shan = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hu_Tzu_Shan', tag='GCS_Hu_Tzu_Shan')
STD_ANON_24.GCS_Indian_1954 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Indian_1954', tag='GCS_Indian_1954')
STD_ANON_24.GCS_Indian_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Indian_1960', tag='GCS_Indian_1960')
STD_ANON_24.GCS_Indian_1975 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Indian_1975', tag='GCS_Indian_1975')
STD_ANON_24.GCS_Indonesian_1974 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Indonesian_1974', tag='GCS_Indonesian_1974')
STD_ANON_24.GCS_Israel = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Israel', tag='GCS_Israel')
STD_ANON_24.GCS_JGD_2000 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_JGD_2000', tag='GCS_JGD_2000')
STD_ANON_24.GCS_Kalianpur_1880 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kalianpur_1880', tag='GCS_Kalianpur_1880')
STD_ANON_24.GCS_Kalianpur_1937 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kalianpur_1937', tag='GCS_Kalianpur_1937')
STD_ANON_24.GCS_Kalianpur_1962 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kalianpur_1962', tag='GCS_Kalianpur_1962')
STD_ANON_24.GCS_Kalianpur_1975 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kalianpur_1975', tag='GCS_Kalianpur_1975')
STD_ANON_24.GCS_Kandawala = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kandawala', tag='GCS_Kandawala')
STD_ANON_24.GCS_Kertau = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kertau', tag='GCS_Kertau')
STD_ANON_24.GCS_Korean_Datum_1985 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Korean_Datum_1985', tag='GCS_Korean_Datum_1985')
STD_ANON_24.GCS_Korean_Datum_1995 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Korean_Datum_1995', tag='GCS_Korean_Datum_1995')
STD_ANON_24.GCS_Kuwait_Oil_Company_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kuwait_Oil_Company', tag='GCS_Kuwait_Oil_Company_')
STD_ANON_24.GCS_KUDAMS_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_KUDAMS', tag='GCS_KUDAMS_')
STD_ANON_24.GCS_Luzon_1911 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Luzon_1911', tag='GCS_Luzon_1911')
STD_ANON_24.GCS_Makassar_Jakarta = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Makassar_Jakarta', tag='GCS_Makassar_Jakarta')
STD_ANON_24.GCS_Makassar = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Makassar', tag='GCS_Makassar')
STD_ANON_24.GCS_Nahrwan_1967_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Nahrwan_1967', tag='GCS_Nahrwan_1967_')
STD_ANON_24.GCS_NGN_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NGN', tag='GCS_NGN_')
STD_ANON_24.GCS_Oman_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Oman', tag='GCS_Oman_')
STD_ANON_24.GCS_Padang_1884_Jakarta = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Padang_1884_Jakarta', tag='GCS_Padang_1884_Jakarta')
STD_ANON_24.GCS_Padang_1884 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Padang_1884', tag='GCS_Padang_1884')
STD_ANON_24.GCS_Palestine_1923_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Palestine_1923', tag='GCS_Palestine_1923_')
STD_ANON_24.GCS_Pulkovo_1942 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pulkovo_1942', tag='GCS_Pulkovo_1942')
STD_ANON_24.GCS_Pulkovo_1995 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pulkovo_1995', tag='GCS_Pulkovo_1995')
STD_ANON_24.GCS_Qatar_1948_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Qatar_1948', tag='GCS_Qatar_1948_')
STD_ANON_24.GCS_Qatar_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Qatar', tag='GCS_Qatar_')
STD_ANON_24.GCS_Rassadiran = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Rassadiran', tag='GCS_Rassadiran')
STD_ANON_24.GCS_Samboja = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Samboja', tag='GCS_Samboja')
STD_ANON_24.GCS_Segora = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Segora', tag='GCS_Segora')
STD_ANON_24.GCS_Serindung = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Serindung', tag='GCS_Serindung')
STD_ANON_24.GCS_South_Asia_Singapore = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_South_Asia_Singapore', tag='GCS_South_Asia_Singapore')
STD_ANON_24.GCS_Timbalai_1948 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Timbalai_1948', tag='GCS_Timbalai_1948')
STD_ANON_24.GCS_Tokyo = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Tokyo', tag='GCS_Tokyo')
STD_ANON_24.GCS_Trucial_Coast_1948_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Trucial_Coast_1948', tag='GCS_Trucial_Coast_1948_')
STD_ANON_24.GCS_Australian_1966 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Australian_1966', tag='GCS_Australian_1966')
STD_ANON_24.GCS_Australian_1984 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Australian_1984', tag='GCS_Australian_1984')
STD_ANON_24.GCS_GDA_1994 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_GDA_1994', tag='GCS_GDA_1994')
STD_ANON_24.GCS_New_Zealand_1949 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_New_Zealand_1949', tag='GCS_New_Zealand_1949')
STD_ANON_24.GCS_NZGD_2000 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NZGD_2000', tag='GCS_NZGD_2000')
STD_ANON_24.GCS_Amersfoort = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Amersfoort', tag='GCS_Amersfoort')
STD_ANON_24.GCS_ATF_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_ATF_Paris', tag='GCS_ATF_Paris')
STD_ANON_24.GCS_Belge_1950_Brussels = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Belge_1950_Brussels', tag='GCS_Belge_1950_Brussels')
STD_ANON_24.GCS_Belge_1972 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Belge_1972', tag='GCS_Belge_1972')
STD_ANON_24.GCS_Bern_1898_Bern = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bern_1898_Bern', tag='GCS_Bern_1898_Bern')
STD_ANON_24.GCS_Bern_1898 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bern_1898', tag='GCS_Bern_1898')
STD_ANON_24.GCS_Bern_1938 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bern_1938', tag='GCS_Bern_1938')
STD_ANON_24.GCS_CH1903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_CH1903+', tag='GCS_CH1903')
STD_ANON_24.GCS_CH1903_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_CH1903', tag='GCS_CH1903_')
STD_ANON_24.GCS_Datum_73 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Datum_73', tag='GCS_Datum_73')
STD_ANON_24.GCS_Datum_Lisboa_Bessel = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Datum_Lisboa_Bessel', tag='GCS_Datum_Lisboa_Bessel')
STD_ANON_24.GCS_Datum_Lisboa_Bessel_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Datum_Lisboa_Bessel', tag='GCS_Datum_Lisboa_Bessel_')
STD_ANON_24.GCS_Dealul_Piscului_1933 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Dealul_Piscului_1933', tag='GCS_Dealul_Piscului_1933')
STD_ANON_24.GCS_Dealul_Piscului_1970 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Dealul_Piscului_1970', tag='GCS_Dealul_Piscului_1970')
STD_ANON_24.GCS_Deutsche_Hauptdreiecksnetz = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Deutsche_Hauptdreiecksnetz', tag='GCS_Deutsche_Hauptdreiecksnetz')
STD_ANON_24.GCS_Estonia_1937 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Estonia_1937', tag='GCS_Estonia_1937')
STD_ANON_24.GCS_Estonia_1992 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Estonia_1992', tag='GCS_Estonia_1992')
STD_ANON_24.GCS_ETRF_1989 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_ETRF_1989', tag='GCS_ETRF_1989')
STD_ANON_24.GCS_European_1979 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_1979', tag='GCS_European_1979')
STD_ANON_24.GCS_European_1950_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_1950', tag='GCS_European_1950_2')
STD_ANON_24.GCS_European_1987 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_European_1987', tag='GCS_European_1987')
STD_ANON_24.GCS_Greek_Athens = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Greek_Athens', tag='GCS_Greek_Athens')
STD_ANON_24.GCS_Greek = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Greek', tag='GCS_Greek')
STD_ANON_24.GCS_Hermannskogel = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hermannskogel', tag='GCS_Hermannskogel')
STD_ANON_24.GCS_Hjorsey_1955 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hjorsey_1955', tag='GCS_Hjorsey_1955')
STD_ANON_24.GCS_Hungarian_1972 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hungarian_1972', tag='GCS_Hungarian_1972')
STD_ANON_24.GCS_IRENET95 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_IRENET95', tag='GCS_IRENET95')
STD_ANON_24.GCS_KKJ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_KKJ', tag='GCS_KKJ')
STD_ANON_24.GCS_Lisbon_Lisbon = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Lisbon_Lisbon', tag='GCS_Lisbon_Lisbon')
STD_ANON_24.GCS_Lisbon = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Lisbon', tag='GCS_Lisbon')
STD_ANON_24.GCS_LKS_1994 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_LKS_1994', tag='GCS_LKS_1994')
STD_ANON_24.GCS_Madrid_1870_Madrid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Madrid_1870_Madrid', tag='GCS_Madrid_1870_Madrid')
STD_ANON_24.GCS_MGI_Ferro = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_MGI_Ferro', tag='GCS_MGI_Ferro')
STD_ANON_24.GCS_MGI = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_MGI', tag='GCS_MGI')
STD_ANON_24.GCS_Monte_Mario_Rome = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Monte_Mario_Rome', tag='GCS_Monte_Mario_Rome')
STD_ANON_24.GCS_Monte_Mario = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Monte_Mario', tag='GCS_Monte_Mario')
STD_ANON_24.GCS_NGO_1948_Oslo = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NGO_1948_Oslo', tag='GCS_NGO_1948_Oslo')
STD_ANON_24.GCS_NGO_1948 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NGO_1948', tag='GCS_NGO_1948')
STD_ANON_24.GCS_Nord_de_Guerre_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Nord_de_Guerre_Paris', tag='GCS_Nord_de_Guerre_Paris')
STD_ANON_24.GCS_NTF = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NTF', tag='GCS_NTF')
STD_ANON_24.GCS_NTF_Paris = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NTF_Paris', tag='GCS_NTF_Paris')
STD_ANON_24.GCS_OS_SN_1980 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_OS_SN_1980', tag='GCS_OS_SN_1980')
STD_ANON_24.GCS_OSGB_1936 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_OSGB_1936', tag='GCS_OSGB_1936')
STD_ANON_24.GCS_OSGB_1970_SN = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_OSGB_1970_SN', tag='GCS_OSGB_1970_SN')
STD_ANON_24.GCS_Pulkovo_1942_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pulkovo_1942', tag='GCS_Pulkovo_1942_')
STD_ANON_24.GCS_Pulkovo_1995_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pulkovo_1995', tag='GCS_Pulkovo_1995_')
STD_ANON_24.GCS_Qornoq = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Qornoq', tag='GCS_Qornoq')
STD_ANON_24.GCS_Belge_1950 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Belge_1950', tag='GCS_Belge_1950')
STD_ANON_24.GCS_Belge_1972_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Belge_1972', tag='GCS_Belge_1972_')
STD_ANON_24.GCS_RGF_1993 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_RGF_1993', tag='GCS_RGF_1993')
STD_ANON_24.GCS_RT_1990 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_RT_1990', tag='GCS_RT_1990')
STD_ANON_24.GCS_RT38_Stockholm = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_RT38_Stockholm', tag='GCS_RT38_Stockholm')
STD_ANON_24.GCS_RT38 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_RT38', tag='GCS_RT38')
STD_ANON_24.GCS_S42_Hungary = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_S42_Hungary', tag='GCS_S42_Hungary')
STD_ANON_24.GCS_S_JTSK = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_S_JTSK', tag='GCS_S_JTSK')
STD_ANON_24.GCS_Swiss_TRF_1995 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Swiss_TRF_1995', tag='GCS_Swiss_TRF_1995')
STD_ANON_24.GCS_TM65 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_TM65', tag='GCS_TM65')
STD_ANON_24.GCS_TM75 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_TM75', tag='GCS_TM75')
STD_ANON_24.GCS_Alaskan_Islands = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Alaskan_Islands', tag='GCS_Alaskan_Islands')
STD_ANON_24.GCS_American_Samoa_1962 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_American_Samoa_1962', tag='GCS_American_Samoa_1962')
STD_ANON_24.GCS_ATS_1977 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_ATS_1977', tag='GCS_ATS_1977')
STD_ANON_24.GCS_Barbados = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Barbados', tag='GCS_Barbados')
STD_ANON_24.GCS_Bermuda_1957 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bermuda_1957', tag='GCS_Bermuda_1957')
STD_ANON_24.GCS_Cape_Canaveral = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Cape_Canaveral', tag='GCS_Cape_Canaveral')
STD_ANON_24.GCS_Guam_1963 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Guam_1963', tag='GCS_Guam_1963')
STD_ANON_24.GCS_Jamaica_1875 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Jamaica_1875', tag='GCS_Jamaica_1875')
STD_ANON_24.GCS_Jamaica_1969 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Jamaica_1969', tag='GCS_Jamaica_1969')
STD_ANON_24.GCS_NAD_1927_CGQ77 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NAD_1927_CGQ77', tag='GCS_NAD_1927_CGQ77')
STD_ANON_24.GCS_NAD_1927_Definition_1976 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NAD_1927_Definition_1976', tag='GCS_NAD_1927_Definition_1976')
STD_ANON_24.GCS_North_American_Michigan = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_North_American_Michigan', tag='GCS_North_American_Michigan')
STD_ANON_24.GCS_North_American_1983_CSRS98 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_North_American_1983_CSRS98', tag='GCS_North_American_1983_CSRS98')
STD_ANON_24.GCS_North_American_1983_HARN = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_North_American_1983_HARN', tag='GCS_North_American_1983_HARN')
STD_ANON_24.GCS_North_American_1927 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_North_American_1927', tag='GCS_North_American_1927')
STD_ANON_24.GCS_North_American_1983 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_North_American_1983', tag='GCS_North_American_1983')
STD_ANON_24.GCS_Old_Hawaiian = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Old_Hawaiian', tag='GCS_Old_Hawaiian')
STD_ANON_24.GCS_Puerto_Rico = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Puerto_Rico', tag='GCS_Puerto_Rico')
STD_ANON_24.GCS_Qornoq_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Qornoq', tag='GCS_Qornoq_')
STD_ANON_24.GCS_St_George_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_St_George_Island', tag='GCS_St_George_Island')
STD_ANON_24.GCS_St_Lawrence_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_St_Lawrence_Island', tag='GCS_St_Lawrence_Island')
STD_ANON_24.GCS_St_Paul_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_St_Paul_Island', tag='GCS_St_Paul_Island')
STD_ANON_24.GCS_Alaskan_Islands_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Alaskan_Islands', tag='GCS_Alaskan_Islands_')
STD_ANON_24.GCS_American_Samoa_1962_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_American_Samoa_1962', tag='GCS_American_Samoa_1962_')
STD_ANON_24.GCS_Anguilla_1957 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Anguilla_1957', tag='GCS_Anguilla_1957')
STD_ANON_24.GCS_Anna_1_1965 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Anna_1_1965', tag='GCS_Anna_1_1965')
STD_ANON_24.GCS_Antigua_1943 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Antigua_1943', tag='GCS_Antigua_1943')
STD_ANON_24.GCS_Ascension_Island_1958 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Ascension_Island_1958', tag='GCS_Ascension_Island_1958')
STD_ANON_24.GCS_Beacon_E_1945 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Beacon_E_1945', tag='GCS_Beacon_E_1945')
STD_ANON_24.GCS_DOS_71_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_DOS_71_4', tag='GCS_DOS_71_4')
STD_ANON_24.GCS_Astro_1952 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Astro_1952', tag='GCS_Astro_1952')
STD_ANON_24.GCS_Bab_South = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bab_South', tag='GCS_Bab_South')
STD_ANON_24.GCS_Barbados_1938 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Barbados_1938', tag='GCS_Barbados_1938')
STD_ANON_24.GCS_Barbados_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Barbados', tag='GCS_Barbados_')
STD_ANON_24.GCS_Bellevue_IGN = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bellevue_IGN', tag='GCS_Bellevue_IGN')
STD_ANON_24.GCS_Bermuda_1957_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bermuda_1957', tag='GCS_Bermuda_1957_')
STD_ANON_24.GCS_Canton_1966 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Canton_1966', tag='GCS_Canton_1966')
STD_ANON_24.GCS_Chatham_Island_1971 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Chatham_Island_1971', tag='GCS_Chatham_Island_1971')
STD_ANON_24.GCS_Dominica_1945 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Dominica_1945', tag='GCS_Dominica_1945')
STD_ANON_24.GCS_DOS_1968 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_DOS_1968', tag='GCS_DOS_1968')
STD_ANON_24.GCS_Easter_Island_1967 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Easter_Island_1967', tag='GCS_Easter_Island_1967')
STD_ANON_24.GCS_Fort_Thomas_1955 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Fort_Thomas_1955', tag='GCS_Fort_Thomas_1955')
STD_ANON_24.GCS_Gan_1970 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Gan_1970', tag='GCS_Gan_1970')
STD_ANON_24.GCS_Graciosa_Base_SW_1948 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Graciosa_Base_SW_1948', tag='GCS_Graciosa_Base_SW_1948')
STD_ANON_24.GCS_Grenada_1953 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Grenada_1953', tag='GCS_Grenada_1953')
STD_ANON_24.GCS_Guam_1963_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Guam_1963', tag='GCS_Guam_1963_')
STD_ANON_24.GCS_GUX_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_GUX_1', tag='GCS_GUX_1')
STD_ANON_24.GCS_Hjorsey_1955_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hjorsey_1955', tag='GCS_Hjorsey_1955_')
STD_ANON_24.GCS_ISTS_061_1968 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_ISTS_061_1968', tag='GCS_ISTS_061_1968')
STD_ANON_24.GCS_ISTS_073_1969 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_ISTS_073_1969', tag='GCS_ISTS_073_1969')
STD_ANON_24.GCS_Jamaica_1875_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Jamaica_1875', tag='GCS_Jamaica_1875_')
STD_ANON_24.GCS_Jamaica_1969_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Jamaica_1969', tag='GCS_Jamaica_1969_')
STD_ANON_24.GCS_Johnston_Island_1961 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Johnston_Island_1961', tag='GCS_Johnston_Island_1961')
STD_ANON_24.GCS_Kerguelen_Island_1949 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kerguelen_Island_1949', tag='GCS_Kerguelen_Island_1949')
STD_ANON_24.GCS_Kusaie_1951 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Kusaie_1951', tag='GCS_Kusaie_1951')
STD_ANON_24.GCS_LC5_1961 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_LC5_1961', tag='GCS_LC5_1961')
STD_ANON_24.GCS_Mahe_1971_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Mahe_1971', tag='GCS_Mahe_1971_')
STD_ANON_24.GCS_Majuro = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Majuro', tag='GCS_Majuro')
STD_ANON_24.GCS_Midway_1961 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Midway_1961', tag='GCS_Midway_1961')
STD_ANON_24.GCS_Montserrat_1958 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Montserrat_1958', tag='GCS_Montserrat_1958')
STD_ANON_24.GCS_Observ_Meteorologico_1939 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Observ_Meteorologico_1939', tag='GCS_Observ_Meteorologico_1939')
STD_ANON_24.GCS_Old_Hawaiian_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Old_Hawaiian', tag='GCS_Old_Hawaiian_')
STD_ANON_24.GCS_Pico_de_Las_Nieves = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pico_de_Las_Nieves', tag='GCS_Pico_de_Las_Nieves')
STD_ANON_24.GCS_Pitcairn_1967 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pitcairn_1967', tag='GCS_Pitcairn_1967')
STD_ANON_24.GCS_Pohnpei = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pohnpei', tag='GCS_Pohnpei')
STD_ANON_24.GCS_Porto_Santo_1936 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Porto_Santo_1936', tag='GCS_Porto_Santo_1936')
STD_ANON_24.GCS_Puerto_Rico_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Puerto_Rico', tag='GCS_Puerto_Rico_')
STD_ANON_24.GCS_Reunion = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Reunion', tag='GCS_Reunion')
STD_ANON_24.GCS_Santo_DOS_1965 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Santo_DOS_1965', tag='GCS_Santo_DOS_1965')
STD_ANON_24.GCS_Sao_Braz = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sao_Braz', tag='GCS_Sao_Braz')
STD_ANON_24.GCS_Sapper_Hill_1943 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sapper_Hill_1943', tag='GCS_Sapper_Hill_1943')
STD_ANON_24.GCS_Selvagem_Grande_1938 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Selvagem_Grande_1938', tag='GCS_Selvagem_Grande_1938')
STD_ANON_24.GCS_St_Kitts_1955 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_St_Kitts_1955', tag='GCS_St_Kitts_1955')
STD_ANON_24.GCS_St_Lucia_1955 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_St_Lucia_1955', tag='GCS_St_Lucia_1955')
STD_ANON_24.GCS_St_Vincent_1945 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_St_Vincent_1945', tag='GCS_St_Vincent_1945')
STD_ANON_24.GCS_Tern_Island_1961 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Tern_Island_1961', tag='GCS_Tern_Island_1961')
STD_ANON_24.GCS_Tristan_1968 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Tristan_1968', tag='GCS_Tristan_1968')
STD_ANON_24.GCS_Viti_Levu_1916 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Viti_Levu_1916', tag='GCS_Viti_Levu_1916')
STD_ANON_24.GCS_Wake_Island_1952 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Wake_Island_1952', tag='GCS_Wake_Island_1952')
STD_ANON_24.GCS_Wake_Eniwetok_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Wake_Eniwetok_1960', tag='GCS_Wake_Eniwetok_1960')
STD_ANON_24.GCS_Aratu = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Aratu', tag='GCS_Aratu')
STD_ANON_24.GCS_Bogota_Bogota = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bogota_Bogota', tag='GCS_Bogota_Bogota')
STD_ANON_24.GCS_Bogota = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bogota', tag='GCS_Bogota')
STD_ANON_24.GCS_Campo_Inchauspe = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Campo_Inchauspe', tag='GCS_Campo_Inchauspe')
STD_ANON_24.GCS_Chos_Malal_1914 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Chos_Malal_1914', tag='GCS_Chos_Malal_1914')
STD_ANON_24.GCS_Chua = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Chua', tag='GCS_Chua')
STD_ANON_24.GCS_Corrego_Alegre = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Corrego_Alegre', tag='GCS_Corrego_Alegre')
STD_ANON_24.GCS_Guyane_Francaise = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Guyane_Francaise', tag='GCS_Guyane_Francaise')
STD_ANON_24.GCS_Hito_XVIII_1963 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hito_XVIII_1963', tag='GCS_Hito_XVIII_1963')
STD_ANON_24.GCS_La_Canoa = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_La_Canoa', tag='GCS_La_Canoa')
STD_ANON_24.GCS_Lake = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Lake', tag='GCS_Lake')
STD_ANON_24.GCS_Loma_Quintana = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Loma_Quintana', tag='GCS_Loma_Quintana')
STD_ANON_24.GCS_Mount_Dillon = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Mount_Dillon', tag='GCS_Mount_Dillon')
STD_ANON_24.GCS_Naparima_1955 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Naparima_1955', tag='GCS_Naparima_1955')
STD_ANON_24.GCS_Naparima_1972 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Naparima_1972', tag='GCS_Naparima_1972')
STD_ANON_24.GCS_Pampa_del_Castillo = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Pampa_del_Castillo', tag='GCS_Pampa_del_Castillo')
STD_ANON_24.GCS_POSGAR = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_POSGAR', tag='GCS_POSGAR')
STD_ANON_24.GCS_REGVEN = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_REGVEN', tag='GCS_REGVEN')
STD_ANON_24.GCS_Sapper_Hill_1943_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sapper_Hill_1943', tag='GCS_Sapper_Hill_1943_')
STD_ANON_24.GCS_SIRGAS = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_SIRGAS', tag='GCS_SIRGAS')
STD_ANON_24.GCS_South_American_1969 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_South_American_1969', tag='GCS_South_American_1969')
STD_ANON_24.GCS_Trinidad_1903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Trinidad_1903', tag='GCS_Trinidad_1903')
STD_ANON_24.GCS_Yacare = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Yacare', tag='GCS_Yacare')
STD_ANON_24.GCS_Zanderij = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Zanderij', tag='GCS_Zanderij')
STD_ANON_24.GCS_Airy_1830 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Airy_1830', tag='GCS_Airy_1830')
STD_ANON_24.GCS_Airy_Modified = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Airy_Modified', tag='GCS_Airy_Modified')
STD_ANON_24.GCS_Australian = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Australian', tag='GCS_Australian')
STD_ANON_24.GCS_Sphere_ARC_INFO = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sphere_ARC_INFO', tag='GCS_Sphere_ARC_INFO')
STD_ANON_24.GCS_Sphere = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Sphere', tag='GCS_Sphere')
STD_ANON_24.GCS_ATS_1977_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_ATS_1977', tag='GCS_ATS_1977_')
STD_ANON_24.GCS_Bessel_1841 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bessel_1841', tag='GCS_Bessel_1841')
STD_ANON_24.GCS_Bessel_Modified = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bessel_Modified', tag='GCS_Bessel_Modified')
STD_ANON_24.GCS_Bessel_Namibia = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Bessel_Namibia', tag='GCS_Bessel_Namibia')
STD_ANON_24.GCS_Clarke_1858 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1858', tag='GCS_Clarke_1858')
STD_ANON_24.GCS_Clarke_1866_Michigan = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1866_Michigan', tag='GCS_Clarke_1866_Michigan')
STD_ANON_24.GCS_Clarke_1866 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1866', tag='GCS_Clarke_1866')
STD_ANON_24.GCS_Clarke_1880_Arc = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1880_Arc', tag='GCS_Clarke_1880_Arc')
STD_ANON_24.GCS_Clarke_1880_Benoit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1880_Benoit', tag='GCS_Clarke_1880_Benoit')
STD_ANON_24.GCS_Clarke_1880_IGN = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1880_IGN', tag='GCS_Clarke_1880_IGN')
STD_ANON_24.GCS_Clarke_1880_RGS = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1880_RGS', tag='GCS_Clarke_1880_RGS')
STD_ANON_24.GCS_Clarke_1880_SGA = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1880_SGA', tag='GCS_Clarke_1880_SGA')
STD_ANON_24.GCS_Clarke_1880 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Clarke_1880', tag='GCS_Clarke_1880')
STD_ANON_24.GCS_Everest_def_1967_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_def_1967', tag='GCS_Everest_def_1967_')
STD_ANON_24.GCS_Everest_def_1975_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_def_1975', tag='GCS_Everest_def_1975_')
STD_ANON_24.GCS_Everest_1830_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_1830', tag='GCS_Everest_1830_')
STD_ANON_24.GCS_Everest_Modified_1969 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_Modified_1969', tag='GCS_Everest_Modified_1969')
STD_ANON_24.GCS_Everest_Modified_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Everest_Modified', tag='GCS_Everest_Modified_')
STD_ANON_24.GCS_Fischer_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Fischer_1960', tag='GCS_Fischer_1960')
STD_ANON_24.GCS_Fischer_1968 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Fischer_1968', tag='GCS_Fischer_1968')
STD_ANON_24.GCS_Fischer_Modified = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Fischer_Modified', tag='GCS_Fischer_Modified')
STD_ANON_24.GCS_GEM_10C = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_GEM_10C', tag='GCS_GEM_10C')
STD_ANON_24.GCS_GRS_1967 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_GRS_1967', tag='GCS_GRS_1967')
STD_ANON_24.GCS_GRS_1980 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_GRS_1980', tag='GCS_GRS_1980')
STD_ANON_24.GCS_Helmert_1906 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Helmert_1906', tag='GCS_Helmert_1906')
STD_ANON_24.GCS_Hough_1960 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Hough_1960', tag='GCS_Hough_1960')
STD_ANON_24.GCS_Indonesian = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Indonesian', tag='GCS_Indonesian')
STD_ANON_24.GCS_International_1924 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_International_1924', tag='GCS_International_1924')
STD_ANON_24.GCS_International_1967 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_International_1967', tag='GCS_International_1967')
STD_ANON_24.GCS_Krasovsky_1940 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Krasovsky_1940', tag='GCS_Krasovsky_1940')
STD_ANON_24.GCS_OSU_86F = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_OSU_86F', tag='GCS_OSU_86F')
STD_ANON_24.GCS_OSU_91A = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_OSU_91A', tag='GCS_OSU_91A')
STD_ANON_24.GCS_Plessis_1817 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Plessis_1817', tag='GCS_Plessis_1817')
STD_ANON_24.GCS_Struve_1860 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Struve_1860', tag='GCS_Struve_1860')
STD_ANON_24.GCS_NWL_9D = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NWL_9D', tag='GCS_NWL_9D')
STD_ANON_24.GCS_Walbeck = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_Walbeck', tag='GCS_Walbeck')
STD_ANON_24.GCS_War_Office = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_War_Office', tag='GCS_War_Office')
STD_ANON_24.GCS_WGS_1966 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_WGS_1966', tag='GCS_WGS_1966')
STD_ANON_24.GCS_NSWC_9Z_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_NSWC_9Z_2', tag='GCS_NSWC_9Z_2')
STD_ANON_24.GCS_WGS_1966_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_WGS_1966', tag='GCS_WGS_1966_')
STD_ANON_24.GCS_WGS_1972_BE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_WGS_1972_BE', tag='GCS_WGS_1972_BE')
STD_ANON_24.GCS_WGS_1972 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_WGS_1972', tag='GCS_WGS_1972')
STD_ANON_24.GCS_WGS_1984 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GCS_WGS_1984', tag='GCS_WGS_1984')
STD_ANON_24.Africa_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Africa_Albers_Equal_Area_Conic', tag='Africa_Albers_Equal_Area_Conic')
STD_ANON_24.Africa_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Africa_Equidistant_Conic', tag='Africa_Equidistant_Conic')
STD_ANON_24.Africa_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Africa_Lambert_Conformal_Conic', tag='Africa_Lambert_Conformal_Conic')
STD_ANON_24.Africa_Sinusoidal = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Africa_Sinusoidal', tag='Africa_Sinusoidal')
STD_ANON_24.Asia_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_Lambert_Conformal_Conic', tag='Asia_Lambert_Conformal_Conic')
STD_ANON_24.Asia_North_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_North_Albers_Equal_Area_Conic', tag='Asia_North_Albers_Equal_Area_Conic')
STD_ANON_24.Asia_North_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_North_Equidistant_Conic', tag='Asia_North_Equidistant_Conic')
STD_ANON_24.Asia_North_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_North_Lambert_Conformal_Conic', tag='Asia_North_Lambert_Conformal_Conic')
STD_ANON_24.Asia_South_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_South_Albers_Equal_Area_Conic', tag='Asia_South_Albers_Equal_Area_Conic')
STD_ANON_24.Asia_South_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_South_Equidistant_Conic', tag='Asia_South_Equidistant_Conic')
STD_ANON_24.Asia_South_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Asia_South_Lambert_Conformal_Conic', tag='Asia_South_Lambert_Conformal_Conic')
STD_ANON_24.Europe_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Europe_Albers_Equal_Area_Conic', tag='Europe_Albers_Equal_Area_Conic')
STD_ANON_24.Europe_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Europe_Equidistant_Conic', tag='Europe_Equidistant_Conic')
STD_ANON_24.Europe_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Europe_Lambert_Conformal_Conic', tag='Europe_Lambert_Conformal_Conic')
STD_ANON_24.Alaska_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Alaska_Albers_Equal_Area_Conic', tag='Alaska_Albers_Equal_Area_Conic')
STD_ANON_24.Canada_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Canada_Albers_Equal_Area_Conic', tag='Canada_Albers_Equal_Area_Conic')
STD_ANON_24.Canada_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Canada_Lambert_Conformal_Conic', tag='Canada_Lambert_Conformal_Conic')
STD_ANON_24.Hawaii_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hawaii_Albers_Equal_Area_Conic', tag='Hawaii_Albers_Equal_Area_Conic')
STD_ANON_24.North_America_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_America_Albers_Equal_Area_Conic', tag='North_America_Albers_Equal_Area_Conic')
STD_ANON_24.North_America_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_America_Equidistant_Conic', tag='North_America_Equidistant_Conic')
STD_ANON_24.North_America_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_America_Lambert_Conformal_Conic', tag='North_America_Lambert_Conformal_Conic')
STD_ANON_24.USA_Contiguous_Albers_Equal_Area_Conic_USGS_version = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='USA_Contiguous_Albers_Equal_Area_Conic_USGS_version', tag='USA_Contiguous_Albers_Equal_Area_Conic_USGS_version')
STD_ANON_24.USA_Contiguous_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='USA_Contiguous_Albers_Equal_Area_Conic', tag='USA_Contiguous_Albers_Equal_Area_Conic')
STD_ANON_24.USA_Contiguous_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='USA_Contiguous_Equidistant_Conic', tag='USA_Contiguous_Equidistant_Conic')
STD_ANON_24.USA_Contiguous_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='USA_Contiguous_Lambert_Conformal_Conic', tag='USA_Contiguous_Lambert_Conformal_Conic')
STD_ANON_24.South_America_Albers_Equal_Area_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_America_Albers_Equal_Area_Conic', tag='South_America_Albers_Equal_Area_Conic')
STD_ANON_24.South_America_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_America_Equidistant_Conic', tag='South_America_Equidistant_Conic')
STD_ANON_24.South_America_Lambert_Conformal_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_America_Lambert_Conformal_Conic', tag='South_America_Lambert_Conformal_Conic')
STD_ANON_24.Beijing_1954_GK_Zone_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_13', tag='Beijing_1954_GK_Zone_13')
STD_ANON_24.Beijing_1954_GK_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_13N', tag='Beijing_1954_GK_Zone_13N')
STD_ANON_24.Beijing_1954_GK_Zone_14 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_14', tag='Beijing_1954_GK_Zone_14')
STD_ANON_24.Beijing_1954_GK_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_14N', tag='Beijing_1954_GK_Zone_14N')
STD_ANON_24.Beijing_1954_GK_Zone_15 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_15', tag='Beijing_1954_GK_Zone_15')
STD_ANON_24.Beijing_1954_GK_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_15N', tag='Beijing_1954_GK_Zone_15N')
STD_ANON_24.Beijing_1954_GK_Zone_16 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_16', tag='Beijing_1954_GK_Zone_16')
STD_ANON_24.Beijing_1954_GK_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_16N', tag='Beijing_1954_GK_Zone_16N')
STD_ANON_24.Beijing_1954_GK_Zone_17 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_17', tag='Beijing_1954_GK_Zone_17')
STD_ANON_24.Beijing_1954_GK_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_17N', tag='Beijing_1954_GK_Zone_17N')
STD_ANON_24.Beijing_1954_GK_Zone_18 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_18', tag='Beijing_1954_GK_Zone_18')
STD_ANON_24.Beijing_1954_GK_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_18N', tag='Beijing_1954_GK_Zone_18N')
STD_ANON_24.Beijing_1954_GK_Zone_19 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_19', tag='Beijing_1954_GK_Zone_19')
STD_ANON_24.Beijing_1954_GK_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_19N', tag='Beijing_1954_GK_Zone_19N')
STD_ANON_24.Beijing_1954_GK_Zone_20 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_20', tag='Beijing_1954_GK_Zone_20')
STD_ANON_24.Beijing_1954_GK_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_20N', tag='Beijing_1954_GK_Zone_20N')
STD_ANON_24.Beijing_1954_GK_Zone_21 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_21', tag='Beijing_1954_GK_Zone_21')
STD_ANON_24.Beijing_1954_GK_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_21N', tag='Beijing_1954_GK_Zone_21N')
STD_ANON_24.Beijing_1954_GK_Zone_22 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_22', tag='Beijing_1954_GK_Zone_22')
STD_ANON_24.Beijing_1954_GK_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_22N', tag='Beijing_1954_GK_Zone_22N')
STD_ANON_24.Beijing_1954_GK_Zone_23 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_23', tag='Beijing_1954_GK_Zone_23')
STD_ANON_24.Beijing_1954_GK_Zone_23N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Beijing_1954_GK_Zone_23N', tag='Beijing_1954_GK_Zone_23N')
STD_ANON_24.Hanoi_1972_GK_Zone_18 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hanoi_1972_GK_Zone_18', tag='Hanoi_1972_GK_Zone_18')
STD_ANON_24.Hanoi_1972_GK_Zone_19 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hanoi_1972_GK_Zone_19', tag='Hanoi_1972_GK_Zone_19')
STD_ANON_24.South_Yemen_GK_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Yemen_GK_Zone_8', tag='South_Yemen_GK_Zone_8')
STD_ANON_24.South_Yemen_GK_Zone_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Yemen_GK_Zone_9', tag='South_Yemen_GK_Zone_9')
STD_ANON_24.Pulkovo_1942_GK_Zone_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_10', tag='Pulkovo_1942_GK_Zone_10')
STD_ANON_24.Pulkovo_1942_GK_Zone_10N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_10N', tag='Pulkovo_1942_GK_Zone_10N')
STD_ANON_24.Pulkovo_1942_GK_Zone_11 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_11', tag='Pulkovo_1942_GK_Zone_11')
STD_ANON_24.Pulkovo_1942_GK_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_11N', tag='Pulkovo_1942_GK_Zone_11N')
STD_ANON_24.Pulkovo_1942_GK_Zone_12 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_12', tag='Pulkovo_1942_GK_Zone_12')
STD_ANON_24.Pulkovo_1942_GK_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_12N', tag='Pulkovo_1942_GK_Zone_12N')
STD_ANON_24.Pulkovo_1942_GK_Zone_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_13', tag='Pulkovo_1942_GK_Zone_13')
STD_ANON_24.Pulkovo_1942_GK_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_13N', tag='Pulkovo_1942_GK_Zone_13N')
STD_ANON_24.Pulkovo_1942_GK_Zone_14 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_14', tag='Pulkovo_1942_GK_Zone_14')
STD_ANON_24.Pulkovo_1942_GK_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_14N', tag='Pulkovo_1942_GK_Zone_14N')
STD_ANON_24.Pulkovo_1942_GK_Zone_15 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_15', tag='Pulkovo_1942_GK_Zone_15')
STD_ANON_24.Pulkovo_1942_GK_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_15N', tag='Pulkovo_1942_GK_Zone_15N')
STD_ANON_24.Pulkovo_1942_GK_Zone_16 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_16', tag='Pulkovo_1942_GK_Zone_16')
STD_ANON_24.Pulkovo_1942_GK_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_16N', tag='Pulkovo_1942_GK_Zone_16N')
STD_ANON_24.Pulkovo_1942_GK_Zone_17 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_17', tag='Pulkovo_1942_GK_Zone_17')
STD_ANON_24.Pulkovo_1942_GK_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_17N', tag='Pulkovo_1942_GK_Zone_17N')
STD_ANON_24.Pulkovo_1942_GK_Zone_18 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_18', tag='Pulkovo_1942_GK_Zone_18')
STD_ANON_24.Pulkovo_1942_GK_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_18N', tag='Pulkovo_1942_GK_Zone_18N')
STD_ANON_24.Pulkovo_1942_GK_Zone_19 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_19', tag='Pulkovo_1942_GK_Zone_19')
STD_ANON_24.Pulkovo_1942_GK_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_19N', tag='Pulkovo_1942_GK_Zone_19N')
STD_ANON_24.Pulkovo_1942_GK_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_2', tag='Pulkovo_1942_GK_Zone_2')
STD_ANON_24.Pulkovo_1942_GK_Zone_20 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_20', tag='Pulkovo_1942_GK_Zone_20')
STD_ANON_24.Pulkovo_1942_GK_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_20N', tag='Pulkovo_1942_GK_Zone_20N')
STD_ANON_24.Pulkovo_1942_GK_Zone_21 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_21', tag='Pulkovo_1942_GK_Zone_21')
STD_ANON_24.Pulkovo_1942_GK_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_21N', tag='Pulkovo_1942_GK_Zone_21N')
STD_ANON_24.Pulkovo_1942_GK_Zone_22 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_22', tag='Pulkovo_1942_GK_Zone_22')
STD_ANON_24.Pulkovo_1942_GK_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_22N', tag='Pulkovo_1942_GK_Zone_22N')
STD_ANON_24.Pulkovo_1942_GK_Zone_23 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_23', tag='Pulkovo_1942_GK_Zone_23')
STD_ANON_24.Pulkovo_1942_GK_Zone_23N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_23N', tag='Pulkovo_1942_GK_Zone_23N')
STD_ANON_24.Pulkovo_1942_GK_Zone_24 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_24', tag='Pulkovo_1942_GK_Zone_24')
STD_ANON_24.Pulkovo_1942_GK_Zone_24N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_24N', tag='Pulkovo_1942_GK_Zone_24N')
STD_ANON_24.Pulkovo_1942_GK_Zone_25 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_25', tag='Pulkovo_1942_GK_Zone_25')
STD_ANON_24.Pulkovo_1942_GK_Zone_25N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_25N', tag='Pulkovo_1942_GK_Zone_25N')
STD_ANON_24.Pulkovo_1942_GK_Zone_26 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_26', tag='Pulkovo_1942_GK_Zone_26')
STD_ANON_24.Pulkovo_1942_GK_Zone_26N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_26N', tag='Pulkovo_1942_GK_Zone_26N')
STD_ANON_24.Pulkovo_1942_GK_Zone_27 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_27', tag='Pulkovo_1942_GK_Zone_27')
STD_ANON_24.Pulkovo_1942_GK_Zone_27N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_27N', tag='Pulkovo_1942_GK_Zone_27N')
STD_ANON_24.Pulkovo_1942_GK_Zone_28 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_28', tag='Pulkovo_1942_GK_Zone_28')
STD_ANON_24.Pulkovo_1942_GK_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_28N', tag='Pulkovo_1942_GK_Zone_28N')
STD_ANON_24.Pulkovo_1942_GK_Zone_29 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_29', tag='Pulkovo_1942_GK_Zone_29')
STD_ANON_24.Pulkovo_1942_GK_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_29N', tag='Pulkovo_1942_GK_Zone_29N')
STD_ANON_24.Pulkovo_1942_GK_Zone_2N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_2N', tag='Pulkovo_1942_GK_Zone_2N')
STD_ANON_24.Pulkovo_1942_GK_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_3', tag='Pulkovo_1942_GK_Zone_3')
STD_ANON_24.Pulkovo_1942_GK_Zone_30 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_30', tag='Pulkovo_1942_GK_Zone_30')
STD_ANON_24.Pulkovo_1942_GK_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_30N', tag='Pulkovo_1942_GK_Zone_30N')
STD_ANON_24.Pulkovo_1942_GK_Zone_31 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_31', tag='Pulkovo_1942_GK_Zone_31')
STD_ANON_24.Pulkovo_1942_GK_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_31N', tag='Pulkovo_1942_GK_Zone_31N')
STD_ANON_24.Pulkovo_1942_GK_Zone_32 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_32', tag='Pulkovo_1942_GK_Zone_32')
STD_ANON_24.Pulkovo_1942_GK_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_32N', tag='Pulkovo_1942_GK_Zone_32N')
STD_ANON_24.Pulkovo_1942_GK_Zone_3N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_3N', tag='Pulkovo_1942_GK_Zone_3N')
STD_ANON_24.Pulkovo_1942_GK_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_4', tag='Pulkovo_1942_GK_Zone_4')
STD_ANON_24.Pulkovo_1942_GK_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_4N', tag='Pulkovo_1942_GK_Zone_4N')
STD_ANON_24.Pulkovo_1942_GK_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_5', tag='Pulkovo_1942_GK_Zone_5')
STD_ANON_24.Pulkovo_1942_GK_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_5N', tag='Pulkovo_1942_GK_Zone_5N')
STD_ANON_24.Pulkovo_1942_GK_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_6', tag='Pulkovo_1942_GK_Zone_6')
STD_ANON_24.Pulkovo_1942_GK_Zone_6N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_6N', tag='Pulkovo_1942_GK_Zone_6N')
STD_ANON_24.Pulkovo_1942_GK_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_7', tag='Pulkovo_1942_GK_Zone_7')
STD_ANON_24.Pulkovo_1942_GK_Zone_7N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_7N', tag='Pulkovo_1942_GK_Zone_7N')
STD_ANON_24.Pulkovo_1942_GK_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_8', tag='Pulkovo_1942_GK_Zone_8')
STD_ANON_24.Pulkovo_1942_GK_Zone_8N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_8N', tag='Pulkovo_1942_GK_Zone_8N')
STD_ANON_24.Pulkovo_1942_GK_Zone_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_9', tag='Pulkovo_1942_GK_Zone_9')
STD_ANON_24.Pulkovo_1942_GK_Zone_9N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1942_GK_Zone_9N', tag='Pulkovo_1942_GK_Zone_9N')
STD_ANON_24.Pulkovo_1995_GK_Zone_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_10', tag='Pulkovo_1995_GK_Zone_10')
STD_ANON_24.Pulkovo_1995_GK_Zone_10N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_10N', tag='Pulkovo_1995_GK_Zone_10N')
STD_ANON_24.Pulkovo_1995_GK_Zone_11 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_11', tag='Pulkovo_1995_GK_Zone_11')
STD_ANON_24.Pulkovo_1995_GK_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_11N', tag='Pulkovo_1995_GK_Zone_11N')
STD_ANON_24.Pulkovo_1995_GK_Zone_12 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_12', tag='Pulkovo_1995_GK_Zone_12')
STD_ANON_24.Pulkovo_1995_GK_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_12N', tag='Pulkovo_1995_GK_Zone_12N')
STD_ANON_24.Pulkovo_1995_GK_Zone_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_13', tag='Pulkovo_1995_GK_Zone_13')
STD_ANON_24.Pulkovo_1995_GK_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_13N', tag='Pulkovo_1995_GK_Zone_13N')
STD_ANON_24.Pulkovo_1995_GK_Zone_14 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_14', tag='Pulkovo_1995_GK_Zone_14')
STD_ANON_24.Pulkovo_1995_GK_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_14N', tag='Pulkovo_1995_GK_Zone_14N')
STD_ANON_24.Pulkovo_1995_GK_Zone_15 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_15', tag='Pulkovo_1995_GK_Zone_15')
STD_ANON_24.Pulkovo_1995_GK_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_15N', tag='Pulkovo_1995_GK_Zone_15N')
STD_ANON_24.Pulkovo_1995_GK_Zone_16 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_16', tag='Pulkovo_1995_GK_Zone_16')
STD_ANON_24.Pulkovo_1995_GK_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_16N', tag='Pulkovo_1995_GK_Zone_16N')
STD_ANON_24.Pulkovo_1995_GK_Zone_17 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_17', tag='Pulkovo_1995_GK_Zone_17')
STD_ANON_24.Pulkovo_1995_GK_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_17N', tag='Pulkovo_1995_GK_Zone_17N')
STD_ANON_24.Pulkovo_1995_GK_Zone_18 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_18', tag='Pulkovo_1995_GK_Zone_18')
STD_ANON_24.Pulkovo_1995_GK_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_18N', tag='Pulkovo_1995_GK_Zone_18N')
STD_ANON_24.Pulkovo_1995_GK_Zone_19 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_19', tag='Pulkovo_1995_GK_Zone_19')
STD_ANON_24.Pulkovo_1995_GK_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_19N', tag='Pulkovo_1995_GK_Zone_19N')
STD_ANON_24.Pulkovo_1995_GK_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_2', tag='Pulkovo_1995_GK_Zone_2')
STD_ANON_24.Pulkovo_1995_GK_Zone_20 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_20', tag='Pulkovo_1995_GK_Zone_20')
STD_ANON_24.Pulkovo_1995_GK_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_20N', tag='Pulkovo_1995_GK_Zone_20N')
STD_ANON_24.Pulkovo_1995_GK_Zone_21 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_21', tag='Pulkovo_1995_GK_Zone_21')
STD_ANON_24.Pulkovo_1995_GK_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_21N', tag='Pulkovo_1995_GK_Zone_21N')
STD_ANON_24.Pulkovo_1995_GK_Zone_22 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_22', tag='Pulkovo_1995_GK_Zone_22')
STD_ANON_24.Pulkovo_1995_GK_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_22N', tag='Pulkovo_1995_GK_Zone_22N')
STD_ANON_24.Pulkovo_1995_GK_Zone_23 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_23', tag='Pulkovo_1995_GK_Zone_23')
STD_ANON_24.Pulkovo_1995_GK_Zone_23N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_23N', tag='Pulkovo_1995_GK_Zone_23N')
STD_ANON_24.Pulkovo_1995_GK_Zone_24 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_24', tag='Pulkovo_1995_GK_Zone_24')
STD_ANON_24.Pulkovo_1995_GK_Zone_24N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_24N', tag='Pulkovo_1995_GK_Zone_24N')
STD_ANON_24.Pulkovo_1995_GK_Zone_25 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_25', tag='Pulkovo_1995_GK_Zone_25')
STD_ANON_24.Pulkovo_1995_GK_Zone_25N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_25N', tag='Pulkovo_1995_GK_Zone_25N')
STD_ANON_24.Pulkovo_1995_GK_Zone_26 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_26', tag='Pulkovo_1995_GK_Zone_26')
STD_ANON_24.Pulkovo_1995_GK_Zone_26N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_26N', tag='Pulkovo_1995_GK_Zone_26N')
STD_ANON_24.Pulkovo_1995_GK_Zone_27 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_27', tag='Pulkovo_1995_GK_Zone_27')
STD_ANON_24.Pulkovo_1995_GK_Zone_27N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_27N', tag='Pulkovo_1995_GK_Zone_27N')
STD_ANON_24.Pulkovo_1995_GK_Zone_28 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_28', tag='Pulkovo_1995_GK_Zone_28')
STD_ANON_24.Pulkovo_1995_GK_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_28N', tag='Pulkovo_1995_GK_Zone_28N')
STD_ANON_24.Pulkovo_1995_GK_Zone_29 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_29', tag='Pulkovo_1995_GK_Zone_29')
STD_ANON_24.Pulkovo_1995_GK_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_29N', tag='Pulkovo_1995_GK_Zone_29N')
STD_ANON_24.Pulkovo_1995_GK_Zone_2N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_2N', tag='Pulkovo_1995_GK_Zone_2N')
STD_ANON_24.Pulkovo_1995_GK_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_3', tag='Pulkovo_1995_GK_Zone_3')
STD_ANON_24.Pulkovo_1995_GK_Zone_30 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_30', tag='Pulkovo_1995_GK_Zone_30')
STD_ANON_24.Pulkovo_1995_GK_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_30N', tag='Pulkovo_1995_GK_Zone_30N')
STD_ANON_24.Pulkovo_1995_GK_Zone_31 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_31', tag='Pulkovo_1995_GK_Zone_31')
STD_ANON_24.Pulkovo_1995_GK_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_31N', tag='Pulkovo_1995_GK_Zone_31N')
STD_ANON_24.Pulkovo_1995_GK_Zone_32 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_32', tag='Pulkovo_1995_GK_Zone_32')
STD_ANON_24.Pulkovo_1995_GK_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_32N', tag='Pulkovo_1995_GK_Zone_32N')
STD_ANON_24.Pulkovo_1995_GK_Zone_3N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_3N', tag='Pulkovo_1995_GK_Zone_3N')
STD_ANON_24.Pulkovo_1995_GK_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_4', tag='Pulkovo_1995_GK_Zone_4')
STD_ANON_24.Pulkovo_1995_GK_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_4N', tag='Pulkovo_1995_GK_Zone_4N')
STD_ANON_24.Pulkovo_1995_GK_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_5', tag='Pulkovo_1995_GK_Zone_5')
STD_ANON_24.Pulkovo_1995_GK_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_5N', tag='Pulkovo_1995_GK_Zone_5N')
STD_ANON_24.Pulkovo_1995_GK_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_6', tag='Pulkovo_1995_GK_Zone_6')
STD_ANON_24.Pulkovo_1995_GK_Zone_6N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_6N', tag='Pulkovo_1995_GK_Zone_6N')
STD_ANON_24.Pulkovo_1995_GK_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_7', tag='Pulkovo_1995_GK_Zone_7')
STD_ANON_24.Pulkovo_1995_GK_Zone_7N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_7N', tag='Pulkovo_1995_GK_Zone_7N')
STD_ANON_24.Pulkovo_1995_GK_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_8', tag='Pulkovo_1995_GK_Zone_8')
STD_ANON_24.Pulkovo_1995_GK_Zone_8N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_8N', tag='Pulkovo_1995_GK_Zone_8N')
STD_ANON_24.Pulkovo_1995_GK_Zone_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_9', tag='Pulkovo_1995_GK_Zone_9')
STD_ANON_24.Pulkovo_1995_GK_Zone_9N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pulkovo_1995_GK_Zone_9N', tag='Pulkovo_1995_GK_Zone_9N')
STD_ANON_24.Abidjan_1987_TM_5_NW = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Abidjan_1987_TM_5_NW', tag='Abidjan_1987_TM_5_NW')
STD_ANON_24.Accra_Ghana_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Accra_Ghana_Grid', tag='Accra_Ghana_Grid')
STD_ANON_24.Accra_TM_1_NW = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Accra_TM_1_NW', tag='Accra_TM_1_NW')
STD_ANON_24.Samoa_1962_Samoa_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Samoa_1962_Samoa_Lambert', tag='Samoa_1962_Samoa_Lambert')
STD_ANON_24.Anguilla_1957_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Anguilla_1957_British_West_Indies_Grid', tag='Anguilla_1957_British_West_Indies_Grid')
STD_ANON_24.Antigua_1943_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Antigua_1943_British_West_Indies_Grid', tag='Antigua_1943_British_West_Indies_Grid')
STD_ANON_24.Argentina_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_1', tag='Argentina_Zone_1')
STD_ANON_24.Argentina_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_2', tag='Argentina_Zone_2')
STD_ANON_24.Argentina_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_3', tag='Argentina_Zone_3')
STD_ANON_24.Argentina_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_4', tag='Argentina_Zone_4')
STD_ANON_24.Argentina_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_5', tag='Argentina_Zone_5')
STD_ANON_24.Argentina_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_6', tag='Argentina_Zone_6')
STD_ANON_24.Argentina_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Argentina_Zone_7', tag='Argentina_Zone_7')
STD_ANON_24.AGD_1966_AMG_Zone_48 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_48', tag='AGD_1966_AMG_Zone_48')
STD_ANON_24.AGD_1966_AMG_Zone_49 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_49', tag='AGD_1966_AMG_Zone_49')
STD_ANON_24.AGD_1966_AMG_Zone_50 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_50', tag='AGD_1966_AMG_Zone_50')
STD_ANON_24.AGD_1966_AMG_Zone_51 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_51', tag='AGD_1966_AMG_Zone_51')
STD_ANON_24.AGD_1966_AMG_Zone_52 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_52', tag='AGD_1966_AMG_Zone_52')
STD_ANON_24.AGD_1966_AMG_Zone_53 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_53', tag='AGD_1966_AMG_Zone_53')
STD_ANON_24.AGD_1966_AMG_Zone_54 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_54', tag='AGD_1966_AMG_Zone_54')
STD_ANON_24.AGD_1966_AMG_Zone_55 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_55', tag='AGD_1966_AMG_Zone_55')
STD_ANON_24.AGD_1966_AMG_Zone_56 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_56', tag='AGD_1966_AMG_Zone_56')
STD_ANON_24.AGD_1966_AMG_Zone_57 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_57', tag='AGD_1966_AMG_Zone_57')
STD_ANON_24.AGD_1966_AMG_Zone_58 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_AMG_Zone_58', tag='AGD_1966_AMG_Zone_58')
STD_ANON_24.AGD_1966_VICGRID = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1966_VICGRID', tag='AGD_1966_VICGRID')
STD_ANON_24.AGD_1984_AMG_Zone_48 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_48', tag='AGD_1984_AMG_Zone_48')
STD_ANON_24.AGD_1984_AMG_Zone_49 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_49', tag='AGD_1984_AMG_Zone_49')
STD_ANON_24.AGD_1984_AMG_Zone_50 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_50', tag='AGD_1984_AMG_Zone_50')
STD_ANON_24.AGD_1984_AMG_Zone_51 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_51', tag='AGD_1984_AMG_Zone_51')
STD_ANON_24.AGD_1984_AMG_Zone_52 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_52', tag='AGD_1984_AMG_Zone_52')
STD_ANON_24.AGD_1984_AMG_Zone_53 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_53', tag='AGD_1984_AMG_Zone_53')
STD_ANON_24.AGD_1984_AMG_Zone_54 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_54', tag='AGD_1984_AMG_Zone_54')
STD_ANON_24.AGD_1984_AMG_Zone_55 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_55', tag='AGD_1984_AMG_Zone_55')
STD_ANON_24.AGD_1984_AMG_Zone_56 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_56', tag='AGD_1984_AMG_Zone_56')
STD_ANON_24.AGD_1984_AMG_Zone_57 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_57', tag='AGD_1984_AMG_Zone_57')
STD_ANON_24.AGD_1984_AMG_Zone_58 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='AGD_1984_AMG_Zone_58', tag='AGD_1984_AMG_Zone_58')
STD_ANON_24.GDA_1994_MGA_Zone_48 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_48', tag='GDA_1994_MGA_Zone_48')
STD_ANON_24.GDA_1994_MGA_Zone_49 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_49', tag='GDA_1994_MGA_Zone_49')
STD_ANON_24.GDA_1994_MGA_Zone_50 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_50', tag='GDA_1994_MGA_Zone_50')
STD_ANON_24.GDA_1994_MGA_Zone_51 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_51', tag='GDA_1994_MGA_Zone_51')
STD_ANON_24.GDA_1994_MGA_Zone_52 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_52', tag='GDA_1994_MGA_Zone_52')
STD_ANON_24.GDA_1994_MGA_Zone_53 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_53', tag='GDA_1994_MGA_Zone_53')
STD_ANON_24.GDA_1994_MGA_Zone_54 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_54', tag='GDA_1994_MGA_Zone_54')
STD_ANON_24.GDA_1994_MGA_Zone_55 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_55', tag='GDA_1994_MGA_Zone_55')
STD_ANON_24.GDA_1994_MGA_Zone_56 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_56', tag='GDA_1994_MGA_Zone_56')
STD_ANON_24.GDA_1994_MGA_Zone_57 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_57', tag='GDA_1994_MGA_Zone_57')
STD_ANON_24.GDA_1994_MGA_Zone_58 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_MGA_Zone_58', tag='GDA_1994_MGA_Zone_58')
STD_ANON_24.GDA_1994_South_Australia_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_South_Australia_Lambert', tag='GDA_1994_South_Australia_Lambert')
STD_ANON_24.GDA_1994_VICGRID94 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GDA_1994_VICGRID94', tag='GDA_1994_VICGRID94')
STD_ANON_24.Austria_Central_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Austria_Central_Zone', tag='Austria_Central_Zone')
STD_ANON_24.Austria_East_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Austria_East_Zone', tag='Austria_East_Zone')
STD_ANON_24.Austria_West_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Austria_West_Zone', tag='Austria_West_Zone')
STD_ANON_24.Bahrain_State_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Bahrain_State_Grid', tag='Bahrain_State_Grid')
STD_ANON_24.Barbados_1938_Barbados_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Barbados_1938_Barbados_Grid', tag='Barbados_1938_Barbados_Grid')
STD_ANON_24.Barbados_1938_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Barbados_1938_British_West_Indies_Grid', tag='Barbados_1938_British_West_Indies_Grid')
STD_ANON_24.Belge_Lambert_1950 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Belge_Lambert_1950', tag='Belge_Lambert_1950')
STD_ANON_24.Belge_Lambert_1972 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Belge_Lambert_1972', tag='Belge_Lambert_1972')
STD_ANON_24.Bern_1898_Bern_LV03C = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Bern_1898_Bern_LV03C', tag='Bern_1898_Bern_LV03C')
STD_ANON_24.British_National_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='British_National_Grid', tag='British_National_Grid')
STD_ANON_24.Camacupa_TM_11_30_SE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Camacupa_TM_11_30_SE', tag='Camacupa_TM_11_30_SE')
STD_ANON_24.Camacupa_TM_12_SE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Camacupa_TM_12_SE', tag='Camacupa_TM_12_SE')
STD_ANON_24.ATS_1977_MTM_4_Nova_Scotia = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ATS_1977_MTM_4_Nova_Scotia', tag='ATS_1977_MTM_4_Nova_Scotia')
STD_ANON_24.ATS_1977_MTM_5_Nova_Scotia = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ATS_1977_MTM_5_Nova_Scotia', tag='ATS_1977_MTM_5_Nova_Scotia')
STD_ANON_24.ATS_1977_New_Brunswick_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ATS_1977_New_Brunswick_Stereographic', tag='ATS_1977_New_Brunswick_Stereographic')
STD_ANON_24.NAD_1927_10TM_AEP_Forest = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_10TM_AEP_Forest', tag='NAD_1927_10TM_AEP_Forest')
STD_ANON_24.NAD_1927_10TM_AEP_Resource = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_10TM_AEP_Resource', tag='NAD_1927_10TM_AEP_Resource')
STD_ANON_24.NAD_1927_3TM_111 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_3TM_111', tag='NAD_1927_3TM_111')
STD_ANON_24.NAD_1927_3TM_114 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_3TM_114', tag='NAD_1927_3TM_114')
STD_ANON_24.NAD_1927_3TM_117 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_3TM_117', tag='NAD_1927_3TM_117')
STD_ANON_24.NAD_1927_3TM_120 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_3TM_120', tag='NAD_1927_3TM_120')
STD_ANON_24.NAD_1927_CGQ77_MTM_10_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_10_SCoPQ', tag='NAD_1927_CGQ77_MTM_10_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_2_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_2_SCoPQ', tag='NAD_1927_CGQ77_MTM_2_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_3_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_3_SCoPQ', tag='NAD_1927_CGQ77_MTM_3_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_4_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_4_SCoPQ', tag='NAD_1927_CGQ77_MTM_4_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_5_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_5_SCoPQ', tag='NAD_1927_CGQ77_MTM_5_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_6_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_6_SCoPQ', tag='NAD_1927_CGQ77_MTM_6_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_7_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_7_SCoPQ', tag='NAD_1927_CGQ77_MTM_7_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_8_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_8_SCoPQ', tag='NAD_1927_CGQ77_MTM_8_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_MTM_9_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_MTM_9_SCoPQ', tag='NAD_1927_CGQ77_MTM_9_SCoPQ')
STD_ANON_24.NAD_1927_CGQ77_Quebec_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_Quebec_Lambert', tag='NAD_1927_CGQ77_Quebec_Lambert')
STD_ANON_24.NAD_1927_CGQ77_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_UTM_Zone_17N', tag='NAD_1927_CGQ77_UTM_Zone_17N')
STD_ANON_24.NAD_1927_CGQ77_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_UTM_Zone_18N', tag='NAD_1927_CGQ77_UTM_Zone_18N')
STD_ANON_24.NAD_1927_CGQ77_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_UTM_Zone_19N', tag='NAD_1927_CGQ77_UTM_Zone_19N')
STD_ANON_24.NAD_1927_CGQ77_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_UTM_Zone_20N', tag='NAD_1927_CGQ77_UTM_Zone_20N')
STD_ANON_24.NAD_1927_CGQ77_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_CGQ77_UTM_Zone_21N', tag='NAD_1927_CGQ77_UTM_Zone_21N')
STD_ANON_24.NAD_1927_DEF_1976_MTM_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_10', tag='NAD_1927_DEF_1976_MTM_10')
STD_ANON_24.NAD_1927_DEF_1976_MTM_11 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_11', tag='NAD_1927_DEF_1976_MTM_11')
STD_ANON_24.NAD_1927_DEF_1976_MTM_12 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_12', tag='NAD_1927_DEF_1976_MTM_12')
STD_ANON_24.NAD_1927_DEF_1976_MTM_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_13', tag='NAD_1927_DEF_1976_MTM_13')
STD_ANON_24.NAD_1927_DEF_1976_MTM_14 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_14', tag='NAD_1927_DEF_1976_MTM_14')
STD_ANON_24.NAD_1927_DEF_1976_MTM_15 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_15', tag='NAD_1927_DEF_1976_MTM_15')
STD_ANON_24.NAD_1927_DEF_1976_MTM_16 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_16', tag='NAD_1927_DEF_1976_MTM_16')
STD_ANON_24.NAD_1927_DEF_1976_MTM_17 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_17', tag='NAD_1927_DEF_1976_MTM_17')
STD_ANON_24.NAD_1927_DEF_1976_MTM_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_8', tag='NAD_1927_DEF_1976_MTM_8')
STD_ANON_24.NAD_1927_DEF_1976_MTM_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_MTM_9', tag='NAD_1927_DEF_1976_MTM_9')
STD_ANON_24.NAD_1927_DEF_1976_UTM_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_UTM_Zone_15N', tag='NAD_1927_DEF_1976_UTM_Zone_15N')
STD_ANON_24.NAD_1927_DEF_1976_UTM_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_UTM_Zone_16N', tag='NAD_1927_DEF_1976_UTM_Zone_16N')
STD_ANON_24.NAD_1927_DEF_1976_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_UTM_Zone_17N', tag='NAD_1927_DEF_1976_UTM_Zone_17N')
STD_ANON_24.NAD_1927_DEF_1976_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_DEF_1976_UTM_Zone_18N', tag='NAD_1927_DEF_1976_UTM_Zone_18N')
STD_ANON_24.NAD_1927_MTM_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_MTM_1', tag='NAD_1927_MTM_1')
STD_ANON_24.NAD_1927_MTM_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_MTM_2', tag='NAD_1927_MTM_2')
STD_ANON_24.NAD_1927_MTM_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_MTM_3', tag='NAD_1927_MTM_3')
STD_ANON_24.NAD_1927_MTM_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_MTM_4', tag='NAD_1927_MTM_4')
STD_ANON_24.NAD_1927_MTM_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_MTM_5', tag='NAD_1927_MTM_5')
STD_ANON_24.NAD_1927_MTM_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_MTM_6', tag='NAD_1927_MTM_6')
STD_ANON_24.NAD_1927_Quebec_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Quebec_Lambert', tag='NAD_1927_Quebec_Lambert')
STD_ANON_24.NAD_1983_10TM_AEP_Forest = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_10TM_AEP_Forest', tag='NAD_1983_10TM_AEP_Forest')
STD_ANON_24.NAD_1983_10TM_AEP_Resource = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_10TM_AEP_Resource', tag='NAD_1983_10TM_AEP_Resource')
STD_ANON_24.NAD_1983_3TM_111 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_3TM_111', tag='NAD_1983_3TM_111')
STD_ANON_24.NAD_1983_3TM_114 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_3TM_114', tag='NAD_1983_3TM_114')
STD_ANON_24.NAD_1983_3TM_117 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_3TM_117', tag='NAD_1983_3TM_117')
STD_ANON_24.NAD_1983_3TM_120 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_3TM_120', tag='NAD_1983_3TM_120')
STD_ANON_24.NAD_1983_BC_Environment_Albers = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_BC_Environment_Albers', tag='NAD_1983_BC_Environment_Albers')
STD_ANON_24.NAD_1983_CRS98_MTM_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_10', tag='NAD_1983_CRS98_MTM_10')
STD_ANON_24.NAD_1983_CSRS98_MTM_2_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_MTM_2_SCoPQ', tag='NAD_1983_CSRS98_MTM_2_SCoPQ')
STD_ANON_24.NAD_1983_CRS98_MTM_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_3', tag='NAD_1983_CRS98_MTM_3')
STD_ANON_24.NAD_1983_CRS98_MTM_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_4', tag='NAD_1983_CRS98_MTM_4')
STD_ANON_24.NAD_1983_CRS98_MTM_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_5', tag='NAD_1983_CRS98_MTM_5')
STD_ANON_24.NAD_1983_CRS98_MTM_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_6', tag='NAD_1983_CRS98_MTM_6')
STD_ANON_24.NAD_1983_CRS98_MTM_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_7', tag='NAD_1983_CRS98_MTM_7')
STD_ANON_24.NAD_1983_CRS98_MTM_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_8', tag='NAD_1983_CRS98_MTM_8')
STD_ANON_24.NAD_1983_CRS98_MTM_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CRS98_MTM_9', tag='NAD_1983_CRS98_MTM_9')
STD_ANON_24.NAD_1983_CSRS98_New_Brunswick_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_New_Brunswick_Stereographic', tag='NAD_1983_CSRS98_New_Brunswick_Stereographic')
STD_ANON_24.NAD_1983_CSRS98_Prince_Edward_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_Prince_Edward_Island', tag='NAD_1983_CSRS98_Prince_Edward_Island')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_21N', tag='NAD_1983_CSRS98_UTM_Zone_21N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_11N', tag='NAD_1983_CSRS98_UTM_Zone_11N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_12N', tag='NAD_1983_CSRS98_UTM_Zone_12N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_13N', tag='NAD_1983_CSRS98_UTM_Zone_13N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_17N', tag='NAD_1983_CSRS98_UTM_Zone_17N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_18N', tag='NAD_1983_CSRS98_UTM_Zone_18N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_19N', tag='NAD_1983_CSRS98_UTM_Zone_19N')
STD_ANON_24.NAD_1983_CSRS98_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_CSRS98_UTM_Zone_20N', tag='NAD_1983_CSRS98_UTM_Zone_20N')
STD_ANON_24.NAD_1983_MTM_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_1', tag='NAD_1983_MTM_1')
STD_ANON_24.NAD_1983_MTM_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_10', tag='NAD_1983_MTM_10')
STD_ANON_24.NAD_1983_MTM_11 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_11', tag='NAD_1983_MTM_11')
STD_ANON_24.NAD_1983_MTM_12 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_12', tag='NAD_1983_MTM_12')
STD_ANON_24.NAD_1983_MTM_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_13', tag='NAD_1983_MTM_13')
STD_ANON_24.NAD_1983_MTM_14 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_14', tag='NAD_1983_MTM_14')
STD_ANON_24.NAD_1983_MTM_15 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_15', tag='NAD_1983_MTM_15')
STD_ANON_24.NAD_1983_MTM_16 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_16', tag='NAD_1983_MTM_16')
STD_ANON_24.NAD_1983_MTM_17 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_17', tag='NAD_1983_MTM_17')
STD_ANON_24.NAD_1983_MTM_2_SCoPQ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_2_SCoPQ', tag='NAD_1983_MTM_2_SCoPQ')
STD_ANON_24.NAD_1983_MTM_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_2', tag='NAD_1983_MTM_2')
STD_ANON_24.NAD_1983_MTM_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_3', tag='NAD_1983_MTM_3')
STD_ANON_24.NAD_1983_MTM_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_4', tag='NAD_1983_MTM_4')
STD_ANON_24.NAD_1983_MTM_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_5', tag='NAD_1983_MTM_5')
STD_ANON_24.NAD_1983_MTM_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_6', tag='NAD_1983_MTM_6')
STD_ANON_24.NAD_1983_MTM_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_7', tag='NAD_1983_MTM_7')
STD_ANON_24.NAD_1983_MTM_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_8', tag='NAD_1983_MTM_8')
STD_ANON_24.NAD_1983_MTM_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_MTM_9', tag='NAD_1983_MTM_9')
STD_ANON_24.NAD_1983_Quebec_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_Quebec_Lambert', tag='NAD_1983_Quebec_Lambert')
STD_ANON_24.Prince_Edward_Island_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Prince_Edward_Island_Stereographic', tag='Prince_Edward_Island_Stereographic')
STD_ANON_24.Carthage_TM_11_NE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Carthage_TM_11_NE', tag='Carthage_TM_11_NE')
STD_ANON_24.Centre_France = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Centre_France', tag='Centre_France')
STD_ANON_24.CH1903_LV03 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='CH1903_LV03', tag='CH1903_LV03')
STD_ANON_24.CH1903_LV95 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='CH1903+_LV95', tag='CH1903_LV95')
STD_ANON_24.Chos_Malal_1914_Argentina_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Chos_Malal_1914_Argentina_2', tag='Chos_Malal_1914_Argentina_2')
STD_ANON_24.Colombia_Bogota_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Colombia_Bogota_Zone', tag='Colombia_Bogota_Zone')
STD_ANON_24.Colombia_East_Central_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Colombia_East_Central_Zone', tag='Colombia_East_Central_Zone')
STD_ANON_24.Colombia_East_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Colombia_East_Zone', tag='Colombia_East_Zone')
STD_ANON_24.Colombia_West_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Colombia_West_Zone', tag='Colombia_West_Zone')
STD_ANON_24.Corse = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Corse', tag='Corse')
STD_ANON_24.Datum_73_Hayford_Gauss_IGeoE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Datum_73_Hayford_Gauss_IGeoE', tag='Datum_73_Hayford_Gauss_IGeoE')
STD_ANON_24.Datum_73_Hayford_Gauss_IPCC = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Datum_73_Hayford_Gauss_IPCC', tag='Datum_73_Hayford_Gauss_IPCC')
STD_ANON_24.Deir_ez_Zor_Levant_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Deir_ez_Zor_Levant_Stereographic', tag='Deir_ez_Zor_Levant_Stereographic')
STD_ANON_24.Deir_ez_Zor_Levant_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Deir_ez_Zor_Levant_Zone', tag='Deir_ez_Zor_Levant_Zone')
STD_ANON_24.Deir_ez_Zor_Syria_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Deir_ez_Zor_Syria_Lambert', tag='Deir_ez_Zor_Syria_Lambert')
STD_ANON_24.DHDN_3_Degree_Gauss_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='DHDN_3_Degree_Gauss_Zone_1', tag='DHDN_3_Degree_Gauss_Zone_1')
STD_ANON_24.DHDN_3_Degree_Gauss_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='DHDN_3_Degree_Gauss_Zone_2', tag='DHDN_3_Degree_Gauss_Zone_2')
STD_ANON_24.DHDN_3_Degree_Gauss_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='DHDN_3_Degree_Gauss_Zone_3', tag='DHDN_3_Degree_Gauss_Zone_3')
STD_ANON_24.DHDN_3_Degree_Gauss_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='DHDN_3_Degree_Gauss_Zone_4', tag='DHDN_3_Degree_Gauss_Zone_4')
STD_ANON_24.DHDN_3_Degree_Gauss_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='DHDN_3_Degree_Gauss_Zone_5', tag='DHDN_3_Degree_Gauss_Zone_5')
STD_ANON_24.Dominica_1945_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Dominica_1945_British_West_Indies_Grid', tag='Dominica_1945_British_West_Indies_Grid')
STD_ANON_24.ED_1950_TM_0_N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_TM_0_N', tag='ED_1950_TM_0_N')
STD_ANON_24.ED_1950_TM_5_NE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_TM_5_NE', tag='ED_1950_TM_5_NE')
STD_ANON_24.Egypt_Blue_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Egypt_Blue_Belt', tag='Egypt_Blue_Belt')
STD_ANON_24.Egypt_Extended_Purple_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Egypt_Extended_Purple_Belt', tag='Egypt_Extended_Purple_Belt')
STD_ANON_24.Egypt_Purple_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Egypt_Purple_Belt', tag='Egypt_Purple_Belt')
STD_ANON_24.Egypt_Red_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Egypt_Red_Belt', tag='Egypt_Red_Belt')
STD_ANON_24.ELD_1979_Libya_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_10', tag='ELD_1979_Libya_10')
STD_ANON_24.ELD_1979_Libya_11 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_11', tag='ELD_1979_Libya_11')
STD_ANON_24.ELD_1979_Libya_12 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_12', tag='ELD_1979_Libya_12')
STD_ANON_24.ELD_1979_Libya_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_13', tag='ELD_1979_Libya_13')
STD_ANON_24.ELD_1979_Libya_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_5', tag='ELD_1979_Libya_5')
STD_ANON_24.ELD_1979_Libya_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_6', tag='ELD_1979_Libya_6')
STD_ANON_24.ELD_1979_Libya_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_7', tag='ELD_1979_Libya_7')
STD_ANON_24.ELD_1979_Libya_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_8', tag='ELD_1979_Libya_8')
STD_ANON_24.ELD_1979_Libya_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_Libya_9', tag='ELD_1979_Libya_9')
STD_ANON_24.ELD_1979_TM_12_NE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_TM_12_NE', tag='ELD_1979_TM_12_NE')
STD_ANON_24.Estonian_Coordinate_System_of_1992 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Estonian_Coordinate_System_of_1992', tag='Estonian_Coordinate_System_of_1992')
STD_ANON_24.ETRF_1989_TM_Baltic_1993 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_TM_Baltic_1993', tag='ETRF_1989_TM_Baltic_1993')
STD_ANON_24.FD_1958_Iraq = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='FD_1958_Iraq', tag='FD_1958_Iraq')
STD_ANON_24.Finland_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Finland_Zone_1', tag='Finland_Zone_1')
STD_ANON_24.Finland_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Finland_Zone_2', tag='Finland_Zone_2')
STD_ANON_24.Finland_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Finland_Zone_3', tag='Finland_Zone_3')
STD_ANON_24.Finland_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Finland_Zone_4', tag='Finland_Zone_4')
STD_ANON_24.France_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='France_I', tag='France_I')
STD_ANON_24.France_II = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='France_II', tag='France_II')
STD_ANON_24.France_III = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='France_III', tag='France_III')
STD_ANON_24.France_IV = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='France_IV', tag='France_IV')
STD_ANON_24.Germany_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Germany_Zone_1', tag='Germany_Zone_1')
STD_ANON_24.Germany_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Germany_Zone_2', tag='Germany_Zone_2')
STD_ANON_24.Germany_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Germany_Zone_3', tag='Germany_Zone_3')
STD_ANON_24.Germany_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Germany_Zone_4', tag='Germany_Zone_4')
STD_ANON_24.Germany_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Germany_Zone_5', tag='Germany_Zone_5')
STD_ANON_24.Ghana_Metre_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Ghana_Metre_Grid', tag='Ghana_Metre_Grid')
STD_ANON_24.Greek_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Greek_Grid', tag='Greek_Grid')
STD_ANON_24.Grenada_1953_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Grenada_1953_British_West_Indies_Grid', tag='Grenada_1953_British_West_Indies_Grid')
STD_ANON_24.Hanoi_1972_GK_106_NE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hanoi_1972_GK_106_NE', tag='Hanoi_1972_GK_106_NE')
STD_ANON_24.HD_1972_Egyseges_Orszagos_Vetuleti = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='HD_1972_Egyseges_Orszagos_Vetuleti', tag='HD_1972_Egyseges_Orszagos_Vetuleti')
STD_ANON_24.Hito_XVIII_1963_Argentina_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hito_XVIII_1963_Argentina_2', tag='Hito_XVIII_1963_Argentina_2')
STD_ANON_24.Hong_Kong_1980_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hong_Kong_1980_Grid', tag='Hong_Kong_1980_Grid')
STD_ANON_24.Indian_1960_TM_106NE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1960_TM_106NE', tag='Indian_1960_TM_106NE')
STD_ANON_24.Kalianpur_1880_India_Zone_0 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1880_India_Zone_0', tag='Kalianpur_1880_India_Zone_0')
STD_ANON_24.Kalianpur_1880_India_Zone_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1880_India_Zone_I', tag='Kalianpur_1880_India_Zone_I')
STD_ANON_24.Kalianpur_1880_India_Zone_IIa = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1880_India_Zone_IIa', tag='Kalianpur_1880_India_Zone_IIa')
STD_ANON_24.Kalianpur_1880_India_Zone_IIb = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1880_India_Zone_IIb', tag='Kalianpur_1880_India_Zone_IIb')
STD_ANON_24.Kalianpur_1880_India_Zone_III = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1880_India_Zone_III', tag='Kalianpur_1880_India_Zone_III')
STD_ANON_24.Kalianpur_1880_India_Zone_IV = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1880_India_Zone_IV', tag='Kalianpur_1880_India_Zone_IV')
STD_ANON_24.Kalianpur_1937_India_Zone_IIb = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1937_India_Zone_IIb', tag='Kalianpur_1937_India_Zone_IIb')
STD_ANON_24.Kalianpur_1937_UTM_Zone_45N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1937_UTM_Zone_45N', tag='Kalianpur_1937_UTM_Zone_45N')
STD_ANON_24.Kalianpur_1937_UTM_Zone_46N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1937_UTM_Zone_46N', tag='Kalianpur_1937_UTM_Zone_46N')
STD_ANON_24.Kalianpur_1962_India_Zone_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1962_India_Zone_I', tag='Kalianpur_1962_India_Zone_I')
STD_ANON_24.Kalianpur_1962_India_Zone_IIa = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1962_India_Zone_IIa', tag='Kalianpur_1962_India_Zone_IIa')
STD_ANON_24.Kalianpur_1962_UTM_Zone_41N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1962_UTM_Zone_41N', tag='Kalianpur_1962_UTM_Zone_41N')
STD_ANON_24.Kalianpur_1962_UTM_Zone_42N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1962_UTM_Zone_42N', tag='Kalianpur_1962_UTM_Zone_42N')
STD_ANON_24.Kalianpur_1962_UTM_Zone_43N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1962_UTM_Zone_43N', tag='Kalianpur_1962_UTM_Zone_43N')
STD_ANON_24.Kalianpur_1975_India_Zone_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_India_Zone_I', tag='Kalianpur_1975_India_Zone_I')
STD_ANON_24.Kalianpur_1975_India_Zone_IIa = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_India_Zone_IIa', tag='Kalianpur_1975_India_Zone_IIa')
STD_ANON_24.Kalianpur_1975_India_Zone_IIb = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_India_Zone_IIb', tag='Kalianpur_1975_India_Zone_IIb')
STD_ANON_24.Kalianpur_1975_India_Zone_III = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_India_Zone_III', tag='Kalianpur_1975_India_Zone_III')
STD_ANON_24.Kalianpur_1975_India_Zone_IV = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_India_Zone_IV', tag='Kalianpur_1975_India_Zone_IV')
STD_ANON_24.Kalianpur_1975_UTM_Zone_42N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_UTM_Zone_42N', tag='Kalianpur_1975_UTM_Zone_42N')
STD_ANON_24.Kalianpur_1975_UTM_Zone_43N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_UTM_Zone_43N', tag='Kalianpur_1975_UTM_Zone_43N')
STD_ANON_24.Kalianpur_1975_UTM_Zone_44N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_UTM_Zone_44N', tag='Kalianpur_1975_UTM_Zone_44N')
STD_ANON_24.Kalianpur_1975_UTM_Zone_45N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_UTM_Zone_45N', tag='Kalianpur_1975_UTM_Zone_45N')
STD_ANON_24.Kalianpur_1975_UTM_Zone_46N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_UTM_Zone_46N', tag='Kalianpur_1975_UTM_Zone_46N')
STD_ANON_24.Kalianpur_1975_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kalianpur_1975_UTM_Zone_47N', tag='Kalianpur_1975_UTM_Zone_47N')
STD_ANON_24.IRENET95_IRISH_Transverse_Mercator = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='IRENET95_IRISH_Transverse_Mercator', tag='IRENET95_IRISH_Transverse_Mercator')
STD_ANON_24.Irish_National_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Irish_National_Grid', tag='Irish_National_Grid')
STD_ANON_24.Israel_TM_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Israel_TM_Grid', tag='Israel_TM_Grid')
STD_ANON_24.Jamaica_1875_Old_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Jamaica_1875_Old_Grid', tag='Jamaica_1875_Old_Grid')
STD_ANON_24.Jamaica_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Jamaica_Grid', tag='Jamaica_Grid')
STD_ANON_24.Japan_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_1', tag='Japan_Zone_1')
STD_ANON_24.Japan_Zone_10 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_10', tag='Japan_Zone_10')
STD_ANON_24.Japan_Zone_11 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_11', tag='Japan_Zone_11')
STD_ANON_24.Japan_Zone_12 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_12', tag='Japan_Zone_12')
STD_ANON_24.Japan_Zone_13 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_13', tag='Japan_Zone_13')
STD_ANON_24.Japan_Zone_14 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_14', tag='Japan_Zone_14')
STD_ANON_24.Japan_Zone_15 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_15', tag='Japan_Zone_15')
STD_ANON_24.Japan_Zone_16 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_16', tag='Japan_Zone_16')
STD_ANON_24.Japan_Zone_17 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_17', tag='Japan_Zone_17')
STD_ANON_24.Japan_Zone_18 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_18', tag='Japan_Zone_18')
STD_ANON_24.Japan_Zone_19 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_19', tag='Japan_Zone_19')
STD_ANON_24.Japan_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_2', tag='Japan_Zone_2')
STD_ANON_24.Japan_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_3', tag='Japan_Zone_3')
STD_ANON_24.Japan_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_4', tag='Japan_Zone_4')
STD_ANON_24.Japan_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_5', tag='Japan_Zone_5')
STD_ANON_24.Japan_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_6', tag='Japan_Zone_6')
STD_ANON_24.Japan_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_7', tag='Japan_Zone_7')
STD_ANON_24.Japan_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_8', tag='Japan_Zone_8')
STD_ANON_24.Japan_Zone_9 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Japan_Zone_9', tag='Japan_Zone_9')
STD_ANON_24.Kertau_Singapore_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kertau_Singapore_Grid', tag='Kertau_Singapore_Grid')
STD_ANON_24.KOC_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='KOC_Lambert', tag='KOC_Lambert')
STD_ANON_24.Korean_1985_Korea_Central_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Korean_1985_Korea_Central_Belt', tag='Korean_1985_Korea_Central_Belt')
STD_ANON_24.Korean_1985_Korea_East_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Korean_1985_Korea_East_Belt', tag='Korean_1985_Korea_East_Belt')
STD_ANON_24.Korean_1985_Korea_West_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Korean_1985_Korea_West_Belt', tag='Korean_1985_Korea_West_Belt')
STD_ANON_24.KUDAMS_KTM = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='KUDAMS_KTM', tag='KUDAMS_KTM')
STD_ANON_24.KOC_Lambert_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='KOC_Lambert', tag='KOC_Lambert_')
STD_ANON_24.KUDAMS_KTM_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='KUDAMS_KTM', tag='KUDAMS_KTM_')
STD_ANON_24.Lake_Maracaibo_Grid_M1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lake_Maracaibo_Grid_M1', tag='Lake_Maracaibo_Grid_M1')
STD_ANON_24.Lake_Maracaibo_Grid_M3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lake_Maracaibo_Grid_M3', tag='Lake_Maracaibo_Grid_M3')
STD_ANON_24.Lake_Maracaibo_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lake_Maracaibo_Grid', tag='Lake_Maracaibo_Grid')
STD_ANON_24.Lake_Maracaibo_La_Rosa_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lake_Maracaibo_La_Rosa_Grid', tag='Lake_Maracaibo_La_Rosa_Grid')
STD_ANON_24.Lietuvos_Koordinaciu_Sistema = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lietuvos_Koordinaciu_Sistema', tag='Lietuvos_Koordinaciu_Sistema')
STD_ANON_24.Lisboa_Bessel_Bonne = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lisboa_Bessel_Bonne', tag='Lisboa_Bessel_Bonne')
STD_ANON_24.Lisboa_Hayford_Gauss_IGeoE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lisboa_Hayford_Gauss_IGeoE', tag='Lisboa_Hayford_Gauss_IGeoE')
STD_ANON_24.Lisboa_Hayford_Gauss_IPCC = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lisboa_Hayford_Gauss_IPCC', tag='Lisboa_Hayford_Gauss_IPCC')
STD_ANON_24.Locodjo_1965_TM_5_NW = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Locodjo_1965_TM_5_NW', tag='Locodjo_1965_TM_5_NW')
STD_ANON_24.Madrid_1870_Madrid_Spain = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Madrid_1870_Madrid_Spain', tag='Madrid_1870_Madrid_Spain')
STD_ANON_24.MGI_3_Degree_Gauss_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_3_Degree_Gauss_Zone_5', tag='MGI_3_Degree_Gauss_Zone_5')
STD_ANON_24.MGI_3_Degree_Gauss_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_3_Degree_Gauss_Zone_6', tag='MGI_3_Degree_Gauss_Zone_6')
STD_ANON_24.MGI_3_Degree_Gauss_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_3_Degree_Gauss_Zone_7', tag='MGI_3_Degree_Gauss_Zone_7')
STD_ANON_24.MGI_3_Degree_Gauss_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_3_Degree_Gauss_Zone_8', tag='MGI_3_Degree_Gauss_Zone_8')
STD_ANON_24.MGI_Austria_Lambert = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_Austria_Lambert', tag='MGI_Austria_Lambert')
STD_ANON_24.MGI_Balkans_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_Balkans_5', tag='MGI_Balkans_5')
STD_ANON_24.MGI_Balkans_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_Balkans_6', tag='MGI_Balkans_6')
STD_ANON_24.MGI_Balkans_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_Balkans_8', tag='MGI_Balkans_8')
STD_ANON_24.MGI_Balkans_8_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_Balkans_8', tag='MGI_Balkans_8_')
STD_ANON_24.MGI_M28 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_M28', tag='MGI_M28')
STD_ANON_24.MGI_M31 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_M31', tag='MGI_M31')
STD_ANON_24.MGI_M34 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='MGI_M34', tag='MGI_M34')
STD_ANON_24.Monte_Mario_Rome_Italy_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Monte_Mario_Rome_Italy_1', tag='Monte_Mario_Rome_Italy_1')
STD_ANON_24.Monte_Mario_Rome_Italy_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Monte_Mario_Rome_Italy_2', tag='Monte_Mario_Rome_Italy_2')
STD_ANON_24.Monte_Mario_Italy_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Monte_Mario_Italy_1', tag='Monte_Mario_Italy_1')
STD_ANON_24.Monte_Mario_Italy_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Monte_Mario_Italy_2', tag='Monte_Mario_Italy_2')
STD_ANON_24.Montserrat_1958_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Montserrat_1958_British_West_Indies_Grid', tag='Montserrat_1958_British_West_Indies_Grid')
STD_ANON_24.Mount_Dillon_Tobago_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Mount_Dillon_Tobago_Grid', tag='Mount_Dillon_Tobago_Grid')
STD_ANON_24.NAD_1927_Cuba_Norte = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Cuba_Norte', tag='NAD_1927_Cuba_Norte')
STD_ANON_24.NAD_1927_Cuba_Sur = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Cuba_Sur', tag='NAD_1927_Cuba_Sur')
STD_ANON_24.NAD_1927_Guatemala_Norte = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Guatemala_Norte', tag='NAD_1927_Guatemala_Norte')
STD_ANON_24.NAD_1927_Guatemala_Sur = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Guatemala_Sur', tag='NAD_1927_Guatemala_Sur')
STD_ANON_24.NAD_1927_Michigan_GeoRef_Meters = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Michigan_GeoRef_Meters', tag='NAD_1927_Michigan_GeoRef_Meters')
STD_ANON_24.NAD_1927_Michigan_GeoRef_Feet_US = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_Michigan_GeoRef_Feet_US', tag='NAD_1927_Michigan_GeoRef_Feet_US')
STD_ANON_24.NAD_1983_HARN_Guam_Map_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_Guam_Map_Grid', tag='NAD_1983_HARN_Guam_Map_Grid')
STD_ANON_24.NAD_1983_Michigan_GeoRef_Meters = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_Michigan_GeoRef_Meters', tag='NAD_1983_Michigan_GeoRef_Meters')
STD_ANON_24.NAD_1983_Michigan_GeoRef_Feet_US = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_Michigan_GeoRef_Feet_US', tag='NAD_1983_Michigan_GeoRef_Feet_US')
STD_ANON_24.GD_1949_New_Zealand_Map_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GD_1949_New_Zealand_Map_Grid', tag='GD_1949_New_Zealand_Map_Grid')
STD_ANON_24.New_Zealand_North_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='New_Zealand_North_Island', tag='New_Zealand_North_Island')
STD_ANON_24.New_Zealand_South_Island = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='New_Zealand_South_Island', tag='New_Zealand_South_Island')
STD_ANON_24.NZGD_1949_Amuri_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Amuri_Circuit', tag='NZGD_1949_Amuri_Circuit')
STD_ANON_24.NZGD_1949_Bay_of_Plenty_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Bay_of_Plenty_Circuit', tag='NZGD_1949_Bay_of_Plenty_Circuit')
STD_ANON_24.NZGD_1949_Bluff_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Bluff_Circuit', tag='NZGD_1949_Bluff_Circuit')
STD_ANON_24.NZGD_1949_Buller_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Buller_Circuit', tag='NZGD_1949_Buller_Circuit')
STD_ANON_24.NZGD_1949_Collingwood_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Collingwood_Circuit', tag='NZGD_1949_Collingwood_Circuit')
STD_ANON_24.NZGD_1949_Gawler_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Gawler_Circuit', tag='NZGD_1949_Gawler_Circuit')
STD_ANON_24.NZGD_1949_Grey_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Grey_Circuit', tag='NZGD_1949_Grey_Circuit')
STD_ANON_24.NZGD_1949_Hawkes_Bay_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Hawkes_Bay_Circuit', tag='NZGD_1949_Hawkes_Bay_Circuit')
STD_ANON_24.NZGD_1949_Hokitika_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Hokitika_Circuit', tag='NZGD_1949_Hokitika_Circuit')
STD_ANON_24.NZGD_1949_Jacksons_Bay_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Jacksons_Bay_Circuit', tag='NZGD_1949_Jacksons_Bay_Circuit')
STD_ANON_24.NZGD_1949_Karamea_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Karamea_Circuit', tag='NZGD_1949_Karamea_Circuit')
STD_ANON_24.NZGD_1949_Lindis_Peak_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Lindis_Peak_Circuit', tag='NZGD_1949_Lindis_Peak_Circuit')
STD_ANON_24.NZGD_1949_Marlborough_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Marlborough_Circuit', tag='NZGD_1949_Marlborough_Circuit')
STD_ANON_24.NZGD_1949_Mount_Eden_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Mount_Eden_Circuit', tag='NZGD_1949_Mount_Eden_Circuit')
STD_ANON_24.NZGD_1949_Mount_Nicholas_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Mount_Nicholas_Circuit', tag='NZGD_1949_Mount_Nicholas_Circuit')
STD_ANON_24.NZGD_1949_Mount_Pleasant_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Mount_Pleasant_Circuit', tag='NZGD_1949_Mount_Pleasant_Circuit')
STD_ANON_24.NZGD_1949_Mount_York_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Mount_York_Circuit', tag='NZGD_1949_Mount_York_Circuit')
STD_ANON_24.NZGD_1949_Nelson_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Nelson_Circuit', tag='NZGD_1949_Nelson_Circuit')
STD_ANON_24.NZGD_1949_North_Taieri_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_North_Taieri_Circuit', tag='NZGD_1949_North_Taieri_Circuit')
STD_ANON_24.NZGD_1949_Observation_Point_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Observation_Point_Circuit', tag='NZGD_1949_Observation_Point_Circuit')
STD_ANON_24.NZGD_1949_Okarito_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Okarito_Circuit', tag='NZGD_1949_Okarito_Circuit')
STD_ANON_24.NZGD_1949_Poverty_Bay_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Poverty_Bay_Circuit', tag='NZGD_1949_Poverty_Bay_Circuit')
STD_ANON_24.NZGD_1949_Taranaki_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Taranaki_Circuit', tag='NZGD_1949_Taranaki_Circuit')
STD_ANON_24.NZGD_1949_Timaru_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Timaru_Circuit', tag='NZGD_1949_Timaru_Circuit')
STD_ANON_24.NZGD_1949_Tuhirangi_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Tuhirangi_Circuit', tag='NZGD_1949_Tuhirangi_Circuit')
STD_ANON_24.NZGD_1949_UTM_Zone_58S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_UTM_Zone_58S', tag='NZGD_1949_UTM_Zone_58S')
STD_ANON_24.NZGD_1949_UTM_Zone_59S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_UTM_Zone_59S', tag='NZGD_1949_UTM_Zone_59S')
STD_ANON_24.NZGD_1949_UTM_Zone_60S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_UTM_Zone_60S', tag='NZGD_1949_UTM_Zone_60S')
STD_ANON_24.NZGD_1949_Wairarapa_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Wairarapa_Circuit', tag='NZGD_1949_Wairarapa_Circuit')
STD_ANON_24.NZGD_1949_Wanganui_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Wanganui_Circuit', tag='NZGD_1949_Wanganui_Circuit')
STD_ANON_24.NZGD_1949_Wellington_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_Wellington_Circuit', tag='NZGD_1949_Wellington_Circuit')
STD_ANON_24.NZGD_2000_Amuri_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Amuri_Circuit', tag='NZGD_2000_Amuri_Circuit')
STD_ANON_24.NZGD_2000_Bay_of_Plenty_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Bay_of_Plenty_Circuit', tag='NZGD_2000_Bay_of_Plenty_Circuit')
STD_ANON_24.NZGD_2000_Bluff_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Bluff_Circuit', tag='NZGD_2000_Bluff_Circuit')
STD_ANON_24.NZGD_2000_Buller_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Buller_Circuit', tag='NZGD_2000_Buller_Circuit')
STD_ANON_24.NZGD_2000_Collingwood_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Collingwood_Circuit', tag='NZGD_2000_Collingwood_Circuit')
STD_ANON_24.NZGD_2000_Gawler_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Gawler_Circuit', tag='NZGD_2000_Gawler_Circuit')
STD_ANON_24.NZGD_2000_Grey_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Grey_Circuit', tag='NZGD_2000_Grey_Circuit')
STD_ANON_24.NZGD_2000_Hawkes_Bay_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Hawkes_Bay_Circuit', tag='NZGD_2000_Hawkes_Bay_Circuit')
STD_ANON_24.NZGD_2000_Hokitika_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Hokitika_Circuit', tag='NZGD_2000_Hokitika_Circuit')
STD_ANON_24.NZGD_2000_Jacksons_Bay_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Jacksons_Bay_Circuit', tag='NZGD_2000_Jacksons_Bay_Circuit')
STD_ANON_24.NZGD_2000_Karamea_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Karamea_Circuit', tag='NZGD_2000_Karamea_Circuit')
STD_ANON_24.NZGD_2000_Lindis_Peak_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Lindis_Peak_Circuit', tag='NZGD_2000_Lindis_Peak_Circuit')
STD_ANON_24.NZGD_2000_Marlborough_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Marlborough_Circuit', tag='NZGD_2000_Marlborough_Circuit')
STD_ANON_24.NZGD_2000_Mount_Eden_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Mount_Eden_Circuit', tag='NZGD_2000_Mount_Eden_Circuit')
STD_ANON_24.NZGD_2000_Mount_Nicholas_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Mount_Nicholas_Circuit', tag='NZGD_2000_Mount_Nicholas_Circuit')
STD_ANON_24.NZGD_2000_Mount_Pleasant_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Mount_Pleasant_Circuit', tag='NZGD_2000_Mount_Pleasant_Circuit')
STD_ANON_24.NZGD_2000_Mount_York_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Mount_York_Circuit', tag='NZGD_2000_Mount_York_Circuit')
STD_ANON_24.NZGD_2000_Nelson_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Nelson_Circuit', tag='NZGD_2000_Nelson_Circuit')
STD_ANON_24.NZGD_2000_North_Taieri_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_North_Taieri_Circuit', tag='NZGD_2000_North_Taieri_Circuit')
STD_ANON_24.NZGD_2000_Observation_Point_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Observation_Point_Circuit', tag='NZGD_2000_Observation_Point_Circuit')
STD_ANON_24.NZGD_2000_Okarito_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Okarito_Circuit', tag='NZGD_2000_Okarito_Circuit')
STD_ANON_24.NZGD_2000_Poverty_Bay_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Poverty_Bay_Circuit', tag='NZGD_2000_Poverty_Bay_Circuit')
STD_ANON_24.NZGD_2000_Taranaki_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Taranaki_Circuit', tag='NZGD_2000_Taranaki_Circuit')
STD_ANON_24.NZGD_2000_Timaru_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Timaru_Circuit', tag='NZGD_2000_Timaru_Circuit')
STD_ANON_24.NZGD_2000_Tuhirangi_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Tuhirangi_Circuit', tag='NZGD_2000_Tuhirangi_Circuit')
STD_ANON_24.NZGD_2000_UTM_Zone_58S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_UTM_Zone_58S', tag='NZGD_2000_UTM_Zone_58S')
STD_ANON_24.NZGD_2000_UTM_Zone_59S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_UTM_Zone_59S', tag='NZGD_2000_UTM_Zone_59S')
STD_ANON_24.NZGD_2000_UTM_Zone_60S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_UTM_Zone_60S', tag='NZGD_2000_UTM_Zone_60S')
STD_ANON_24.NZGD_2000_Wairarapa_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Wairarapa_Circuit', tag='NZGD_2000_Wairarapa_Circuit')
STD_ANON_24.NZGD_2000_Wanganui_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Wanganui_Circuit', tag='NZGD_2000_Wanganui_Circuit')
STD_ANON_24.NZGD_2000_Wellington_Circuit = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_Wellington_Circuit', tag='NZGD_2000_Wellington_Circuit')
STD_ANON_24.GD_1949_New_Zealand_Map_Grid_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='GD_1949_New_Zealand_Map_Grid', tag='GD_1949_New_Zealand_Map_Grid_')
STD_ANON_24.New_Zealand_North_Island_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='New_Zealand_North_Island', tag='New_Zealand_North_Island_')
STD_ANON_24.New_Zealand_South_Island_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='New_Zealand_South_Island', tag='New_Zealand_South_Island_')
STD_ANON_24.Nigeria_East_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nigeria_East_Belt', tag='Nigeria_East_Belt')
STD_ANON_24.Nigeria_Mid_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nigeria_Mid_Belt', tag='Nigeria_Mid_Belt')
STD_ANON_24.Nigeria_West_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nigeria_West_Belt', tag='Nigeria_West_Belt')
STD_ANON_24.Nord_Algerie_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Algerie_Degree', tag='Nord_Algerie_Degree')
STD_ANON_24.Nord_Algerie_Ancienne_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Algerie_Ancienne_Degree', tag='Nord_Algerie_Ancienne_Degree')
STD_ANON_24.Sud_Algerie_Ancienne = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Algerie_Ancienne', tag='Sud_Algerie_Ancienne')
STD_ANON_24.Nord_Algerie = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Algerie', tag='Nord_Algerie')
STD_ANON_24.Nord_de_Guerre = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_de_Guerre', tag='Nord_de_Guerre')
STD_ANON_24.Nord_France = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_France', tag='Nord_France')
STD_ANON_24.Nord_Maroc_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Maroc_Degree', tag='Nord_Maroc_Degree')
STD_ANON_24.Nord_Maroc = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Maroc', tag='Nord_Maroc')
STD_ANON_24.Nord_Tunisie = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Tunisie', tag='Nord_Tunisie')
STD_ANON_24.NGO_1948_Baerum_Kommune = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Baerum_Kommune', tag='NGO_1948_Baerum_Kommune')
STD_ANON_24.NGO_1948_Bergenhalvoen = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Bergenhalvoen', tag='NGO_1948_Bergenhalvoen')
STD_ANON_24.NGO_1948_Norway_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_1', tag='NGO_1948_Norway_Zone_1')
STD_ANON_24.NGO_1948_Norway_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_2', tag='NGO_1948_Norway_Zone_2')
STD_ANON_24.NGO_1948_Norway_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_3', tag='NGO_1948_Norway_Zone_3')
STD_ANON_24.NGO_1948_Norway_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_4', tag='NGO_1948_Norway_Zone_4')
STD_ANON_24.NGO_1948_Norway_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_5', tag='NGO_1948_Norway_Zone_5')
STD_ANON_24.NGO_1948_Norway_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_6', tag='NGO_1948_Norway_Zone_6')
STD_ANON_24.NGO_1948_Norway_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_7', tag='NGO_1948_Norway_Zone_7')
STD_ANON_24.NGO_1948_Norway_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Norway_Zone_8', tag='NGO_1948_Norway_Zone_8')
STD_ANON_24.NGO_1948_Oslo_Kommune = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Kommune', tag='NGO_1948_Oslo_Kommune')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_1 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_1', tag='NGO_1948_Oslo_Norway_Zone_1')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_2', tag='NGO_1948_Oslo_Norway_Zone_2')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_3 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_3', tag='NGO_1948_Oslo_Norway_Zone_3')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_4 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_4', tag='NGO_1948_Oslo_Norway_Zone_4')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_5', tag='NGO_1948_Oslo_Norway_Zone_5')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_6', tag='NGO_1948_Oslo_Norway_Zone_6')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_7', tag='NGO_1948_Oslo_Norway_Zone_7')
STD_ANON_24.NGO_1948_Oslo_Norway_Zone_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_Oslo_Norway_Zone_8', tag='NGO_1948_Oslo_Norway_Zone_8')
STD_ANON_24.NTF_France_I_degrees = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NTF_France_I_degrees', tag='NTF_France_I_degrees')
STD_ANON_24.NTF_France_II_degrees = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NTF_France_II_degrees', tag='NTF_France_II_degrees')
STD_ANON_24.NTF_France_III_degrees = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NTF_France_III_degrees', tag='NTF_France_III_degrees')
STD_ANON_24.NTF_France_IV_degrees = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NTF_France_IV_degrees', tag='NTF_France_IV_degrees')
STD_ANON_24.Palestine_1923_Israel_CS_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Palestine_1923_Israel_CS_Grid', tag='Palestine_1923_Israel_CS_Grid')
STD_ANON_24.Palestine_1923_Palestine_Belt = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Palestine_1923_Palestine_Belt', tag='Palestine_1923_Palestine_Belt')
STD_ANON_24.Palestine_1923_Palestine_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Palestine_1923_Palestine_Grid', tag='Palestine_1923_Palestine_Grid')
STD_ANON_24.Pampa_del_Castillo_Argentina_2 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pampa_del_Castillo_Argentina_2', tag='Pampa_del_Castillo_Argentina_2')
STD_ANON_24.Peru_Central_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Peru_Central_Zone', tag='Peru_Central_Zone')
STD_ANON_24.Peru_East_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Peru_East_Zone', tag='Peru_East_Zone')
STD_ANON_24.Peru_West_Zone = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Peru_West_Zone', tag='Peru_West_Zone')
STD_ANON_24.Philippines_Zone_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Philippines_Zone_I', tag='Philippines_Zone_I')
STD_ANON_24.Philippines_Zone_II = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Philippines_Zone_II', tag='Philippines_Zone_II')
STD_ANON_24.Philippines_Zone_III = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Philippines_Zone_III', tag='Philippines_Zone_III')
STD_ANON_24.Philippines_Zone_IV = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Philippines_Zone_IV', tag='Philippines_Zone_IV')
STD_ANON_24.Philippines_Zone_V = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Philippines_Zone_V', tag='Philippines_Zone_V')
STD_ANON_24.Portuguese_National_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Portuguese_National_Grid', tag='Portuguese_National_Grid')
STD_ANON_24.Qatar_1948_Qatar_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Qatar_1948_Qatar_Grid', tag='Qatar_1948_Qatar_Grid')
STD_ANON_24.Qatar_National_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Qatar_National_Grid', tag='Qatar_National_Grid')
STD_ANON_24.RD_Old = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='RD_Old', tag='RD_Old')
STD_ANON_24.RGF_1993_Lambert_93 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='RGF_1993_Lambert_93', tag='RGF_1993_Lambert_93')
STD_ANON_24.Rijksdriehoekstelsel_New = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Rijksdriehoekstelsel_New', tag='Rijksdriehoekstelsel_New')
STD_ANON_24.RT90_25_gon_W = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='RT90_25_gon_W', tag='RT90_25_gon_W')
STD_ANON_24.S_JTSK_Ferro_Krovak_East_North = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='S-JTSK_Ferro_Krovak_East_North', tag='S_JTSK_Ferro_Krovak_East_North')
STD_ANON_24.S_JTSK_Ferro_Krovak = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='S-JTSK_Ferro_Krovak', tag='S_JTSK_Ferro_Krovak')
STD_ANON_24.S_JTSK_Krovak_East_North = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='S-JTSK_Krovak_East_North', tag='S_JTSK_Krovak_East_North')
STD_ANON_24.S_JTSK_Krovak = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='S-JTSK_Krovak', tag='S_JTSK_Krovak')
STD_ANON_24.SAD_1969_Brazil_Polyconic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_Brazil_Polyconic', tag='SAD_1969_Brazil_Polyconic')
STD_ANON_24.Sahara_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sahara_Degree', tag='Sahara_Degree')
STD_ANON_24.Sahara = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sahara', tag='Sahara')
STD_ANON_24.Sierra_Leone_1924_New_Colony_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sierra_Leone_1924_New_Colony_Grid', tag='Sierra_Leone_1924_New_Colony_Grid')
STD_ANON_24.Sierra_Leone_1924_New_War_Office_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sierra_Leone_1924_New_War_Office_Grid', tag='Sierra_Leone_1924_New_War_Office_Grid')
STD_ANON_24.St_Kitts_1955_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='St_Kitts_1955_British_West_Indies_Grid', tag='St_Kitts_1955_British_West_Indies_Grid')
STD_ANON_24.St_Lucia_1955_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='St_Lucia_1955_British_West_Indies_Grid', tag='St_Lucia_1955_British_West_Indies_Grid')
STD_ANON_24.St_Vincent_1945_British_West_Indies_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='St_Vincent_1945_British_West_Indies_Grid', tag='St_Vincent_1945_British_West_Indies_Grid')
STD_ANON_24.Stereo_33 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Stereo_33', tag='Stereo_33')
STD_ANON_24.Stereo_70 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Stereo_70', tag='Stereo_70')
STD_ANON_24.Sud_Algerie_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Algerie_Degree', tag='Sud_Algerie_Degree')
STD_ANON_24.Sud_Algerie_Ancienne_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Algerie_Ancienne_Degree', tag='Sud_Algerie_Ancienne_Degree')
STD_ANON_24.Sud_Algerie = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Algerie', tag='Sud_Algerie')
STD_ANON_24.Sud_France = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_France', tag='Sud_France')
STD_ANON_24.Sud_Maroc_Degree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Maroc_Degree', tag='Sud_Maroc_Degree')
STD_ANON_24.Sud_Maroc = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Maroc', tag='Sud_Maroc')
STD_ANON_24.Sud_Tunisie = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sud_Tunisie', tag='Sud_Tunisie')
STD_ANON_24.Swedish_National_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Swedish_National_Grid', tag='Swedish_National_Grid')
STD_ANON_24.Trinidad_1903_Trinidad_Grid = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Trinidad_1903_Trinidad_Grid', tag='Trinidad_1903_Trinidad_Grid')
STD_ANON_24.UWPP_1992 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UWPP_1992', tag='UWPP_1992')
STD_ANON_24.UWPP_2000_pas_5 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UWPP_2000_pas_5', tag='UWPP_2000_pas_5')
STD_ANON_24.UWPP_2000_pas_6 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UWPP_2000_pas_6', tag='UWPP_2000_pas_6')
STD_ANON_24.UWPP_2000_pas_7 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UWPP_2000_pas_7', tag='UWPP_2000_pas_7')
STD_ANON_24.UWPP_2000_pas_8 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UWPP_2000_pas_8', tag='UWPP_2000_pas_8')
STD_ANON_24.WGS_1972_BE_TM_106_NE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_BE_TM_106_NE', tag='WGS_1972_BE_TM_106_NE')
STD_ANON_24.WGS_1984_TM_36_SE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_TM_36_SE', tag='WGS_1984_TM_36_SE')
STD_ANON_24.Zanderij_Suriname_Old_TM = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Zanderij_Suriname_Old_TM', tag='Zanderij_Suriname_Old_TM')
STD_ANON_24.Zanderij_Suriname_TM = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Zanderij_Suriname_TM', tag='Zanderij_Suriname_TM')
STD_ANON_24.Zanderij_TM_54_NW = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Zanderij_TM_54_NW', tag='Zanderij_TM_54_NW')
STD_ANON_24.North_Pole_Azimuthal_Equidistant = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_Pole_Azimuthal_Equidistant', tag='North_Pole_Azimuthal_Equidistant')
STD_ANON_24.North_Pole_Gnomonic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_Pole_Gnomonic', tag='North_Pole_Gnomonic')
STD_ANON_24.North_Pole_Lambert_Azimuthal_Equal_Area = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_Pole_Lambert_Azimuthal_Equal_Area', tag='North_Pole_Lambert_Azimuthal_Equal_Area')
STD_ANON_24.North_Pole_Orthographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_Pole_Orthographic', tag='North_Pole_Orthographic')
STD_ANON_24.North_Pole_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='North_Pole_Stereographic', tag='North_Pole_Stereographic')
STD_ANON_24.South_Pole_Azimuthal_Equidistant = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Pole_Azimuthal_Equidistant', tag='South_Pole_Azimuthal_Equidistant')
STD_ANON_24.South_Pole_Gnomonic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Pole_Gnomonic', tag='South_Pole_Gnomonic')
STD_ANON_24.South_Pole_Lambert_Azimuthal_Equal_Area = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Pole_Lambert_Azimuthal_Equal_Area', tag='South_Pole_Lambert_Azimuthal_Equal_Area')
STD_ANON_24.South_Pole_Orthographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Pole_Orthographic', tag='South_Pole_Orthographic')
STD_ANON_24.South_Pole_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='South_Pole_Stereographic', tag='South_Pole_Stereographic')
STD_ANON_24.UPS_North = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UPS_North', tag='UPS_North')
STD_ANON_24.UPS_South = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UPS_South', tag='UPS_South')
STD_ANON_24.NAD_1927_StatePlane_Alabama_East_FIPS_0101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alabama_East_FIPS_0101', tag='NAD_1927_StatePlane_Alabama_East_FIPS_0101')
STD_ANON_24.NAD_1927_StatePlane_Alabama_West_FIPS_0102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alabama_West_FIPS_0102', tag='NAD_1927_StatePlane_Alabama_West_FIPS_0102')
STD_ANON_24.NAD_1927_StatePlane_Alaska_1_FIPS_5001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_1_FIPS_5001', tag='NAD_1927_StatePlane_Alaska_1_FIPS_5001')
STD_ANON_24.NAD_1927_StatePlane_Alaska_10_FIPS_5010 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_10_FIPS_5010', tag='NAD_1927_StatePlane_Alaska_10_FIPS_5010')
STD_ANON_24.NAD_1927_StatePlane_Alaska_2_FIPS_5002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_2_FIPS_5002', tag='NAD_1927_StatePlane_Alaska_2_FIPS_5002')
STD_ANON_24.NAD_1927_StatePlane_Alaska_3_FIPS_5003 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_3_FIPS_5003', tag='NAD_1927_StatePlane_Alaska_3_FIPS_5003')
STD_ANON_24.NAD_1927_StatePlane_Alaska_4_FIPS_5004 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_4_FIPS_5004', tag='NAD_1927_StatePlane_Alaska_4_FIPS_5004')
STD_ANON_24.NAD_1927_StatePlane_Alaska_5_FIPS_5005 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_5_FIPS_5005', tag='NAD_1927_StatePlane_Alaska_5_FIPS_5005')
STD_ANON_24.NAD_1927_StatePlane_Alaska_6_FIPS_5006 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_6_FIPS_5006', tag='NAD_1927_StatePlane_Alaska_6_FIPS_5006')
STD_ANON_24.NAD_1927_StatePlane_Alaska_7_FIPS_5007 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_7_FIPS_5007', tag='NAD_1927_StatePlane_Alaska_7_FIPS_5007')
STD_ANON_24.NAD_1927_StatePlane_Alaska_8_FIPS_5008 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_8_FIPS_5008', tag='NAD_1927_StatePlane_Alaska_8_FIPS_5008')
STD_ANON_24.NAD_1927_StatePlane_Alaska_9_FIPS_5009 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Alaska_9_FIPS_5009', tag='NAD_1927_StatePlane_Alaska_9_FIPS_5009')
STD_ANON_24.NAD_1927_StatePlane_Arizona_Central_FIPS_0202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Arizona_Central_FIPS_0202', tag='NAD_1927_StatePlane_Arizona_Central_FIPS_0202')
STD_ANON_24.NAD_1927_StatePlane_Arizona_East_FIPS_0201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Arizona_East_FIPS_0201', tag='NAD_1927_StatePlane_Arizona_East_FIPS_0201')
STD_ANON_24.NAD_1927_StatePlane_Arizona_West_FIPS_0203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Arizona_West_FIPS_0203', tag='NAD_1927_StatePlane_Arizona_West_FIPS_0203')
STD_ANON_24.NAD_1927_StatePlane_Arkansas_North_FIPS_0301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Arkansas_North_FIPS_0301', tag='NAD_1927_StatePlane_Arkansas_North_FIPS_0301')
STD_ANON_24.NAD_1927_StatePlane_Arkansas_South_FIPS_0302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Arkansas_South_FIPS_0302', tag='NAD_1927_StatePlane_Arkansas_South_FIPS_0302')
STD_ANON_24.NAD_1927_StatePlane_California_I_FIPS_0401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_I_FIPS_0401', tag='NAD_1927_StatePlane_California_I_FIPS_0401')
STD_ANON_24.NAD_1927_StatePlane_California_II_FIPS_0402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_II_FIPS_0402', tag='NAD_1927_StatePlane_California_II_FIPS_0402')
STD_ANON_24.NAD_1927_StatePlane_California_III_FIPS_0403 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_III_FIPS_0403', tag='NAD_1927_StatePlane_California_III_FIPS_0403')
STD_ANON_24.NAD_1927_StatePlane_California_IV_FIPS_0404 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_IV_FIPS_0404', tag='NAD_1927_StatePlane_California_IV_FIPS_0404')
STD_ANON_24.NAD_1927_StatePlane_California_V_FIPS_0405 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_V_FIPS_0405', tag='NAD_1927_StatePlane_California_V_FIPS_0405')
STD_ANON_24.NAD_1927_StatePlane_California_VI_FIPS_0406 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_VI_FIPS_0406', tag='NAD_1927_StatePlane_California_VI_FIPS_0406')
STD_ANON_24.NAD_1927_StatePlane_California_VII_FIPS_0407 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_California_VII_FIPS_0407', tag='NAD_1927_StatePlane_California_VII_FIPS_0407')
STD_ANON_24.NAD_1927_StatePlane_Colorado_Central_FIPS_0502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Colorado_Central_FIPS_0502', tag='NAD_1927_StatePlane_Colorado_Central_FIPS_0502')
STD_ANON_24.NAD_1927_StatePlane_Colorado_North_FIPS_0501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Colorado_North_FIPS_0501', tag='NAD_1927_StatePlane_Colorado_North_FIPS_0501')
STD_ANON_24.NAD_1927_StatePlane_Colorado_South_FIPS_0503 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Colorado_South_FIPS_0503', tag='NAD_1927_StatePlane_Colorado_South_FIPS_0503')
STD_ANON_24.NAD_1927_StatePlane_Connecticut_FIPS_0600 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Connecticut_FIPS_0600', tag='NAD_1927_StatePlane_Connecticut_FIPS_0600')
STD_ANON_24.NAD_1927_StatePlane_Delaware_FIPS_0700 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Delaware_FIPS_0700', tag='NAD_1927_StatePlane_Delaware_FIPS_0700')
STD_ANON_24.NAD_1927_StatePlane_Florida_East_FIPS_0901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Florida_East_FIPS_0901', tag='NAD_1927_StatePlane_Florida_East_FIPS_0901')
STD_ANON_24.NAD_1927_StatePlane_Florida_North_FIPS_0903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Florida_North_FIPS_0903', tag='NAD_1927_StatePlane_Florida_North_FIPS_0903')
STD_ANON_24.NAD_1927_StatePlane_Florida_West_FIPS_0902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Florida_West_FIPS_0902', tag='NAD_1927_StatePlane_Florida_West_FIPS_0902')
STD_ANON_24.NAD_1927_StatePlane_Georgia_East_FIPS_1001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Georgia_East_FIPS_1001', tag='NAD_1927_StatePlane_Georgia_East_FIPS_1001')
STD_ANON_24.NAD_1927_StatePlane_Georgia_West_FIPS_1002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Georgia_West_FIPS_1002', tag='NAD_1927_StatePlane_Georgia_West_FIPS_1002')
STD_ANON_24.NAD_1927_StatePlane_Guam_FIPS_5400 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Guam_FIPS_5400', tag='NAD_1927_StatePlane_Guam_FIPS_5400')
STD_ANON_24.NAD_1927_StatePlane_Idaho_Central_FIPS_1102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Idaho_Central_FIPS_1102', tag='NAD_1927_StatePlane_Idaho_Central_FIPS_1102')
STD_ANON_24.NAD_1927_StatePlane_Idaho_East_FIPS_1101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Idaho_East_FIPS_1101', tag='NAD_1927_StatePlane_Idaho_East_FIPS_1101')
STD_ANON_24.NAD_1927_StatePlane_Idaho_West_FIPS_1103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Idaho_West_FIPS_1103', tag='NAD_1927_StatePlane_Idaho_West_FIPS_1103')
STD_ANON_24.NAD_1927_StatePlane_Illinois_East_FIPS_1201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Illinois_East_FIPS_1201', tag='NAD_1927_StatePlane_Illinois_East_FIPS_1201')
STD_ANON_24.NAD_1927_StatePlane_Illinois_West_FIPS_1202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Illinois_West_FIPS_1202', tag='NAD_1927_StatePlane_Illinois_West_FIPS_1202')
STD_ANON_24.NAD_1927_StatePlane_Indiana_East_FIPS_1301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Indiana_East_FIPS_1301', tag='NAD_1927_StatePlane_Indiana_East_FIPS_1301')
STD_ANON_24.NAD_1927_StatePlane_Indiana_West_FIPS_1302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Indiana_West_FIPS_1302', tag='NAD_1927_StatePlane_Indiana_West_FIPS_1302')
STD_ANON_24.NAD_1927_StatePlane_Iowa_North_FIPS_1401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Iowa_North_FIPS_1401', tag='NAD_1927_StatePlane_Iowa_North_FIPS_1401')
STD_ANON_24.NAD_1927_StatePlane_Iowa_South_FIPS_1402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Iowa_South_FIPS_1402', tag='NAD_1927_StatePlane_Iowa_South_FIPS_1402')
STD_ANON_24.NAD_1927_StatePlane_Kansas_North_FIPS_1501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Kansas_North_FIPS_1501', tag='NAD_1927_StatePlane_Kansas_North_FIPS_1501')
STD_ANON_24.NAD_1927_StatePlane_Kansas_South_FIPS_1502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Kansas_South_FIPS_1502', tag='NAD_1927_StatePlane_Kansas_South_FIPS_1502')
STD_ANON_24.NAD_1927_StatePlane_Kentucky_North_FIPS_1601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Kentucky_North_FIPS_1601', tag='NAD_1927_StatePlane_Kentucky_North_FIPS_1601')
STD_ANON_24.NAD_1927_StatePlane_Kentucky_South_FIPS_1602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Kentucky_South_FIPS_1602', tag='NAD_1927_StatePlane_Kentucky_South_FIPS_1602')
STD_ANON_24.NAD_1927_StatePlane_Louisiana_North_FIPS_1701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Louisiana_North_FIPS_1701', tag='NAD_1927_StatePlane_Louisiana_North_FIPS_1701')
STD_ANON_24.NAD_1927_StatePlane_Louisiana_South_FIPS_1702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Louisiana_South_FIPS_1702', tag='NAD_1927_StatePlane_Louisiana_South_FIPS_1702')
STD_ANON_24.NAD_1927_StatePlane_Maine_East_FIPS_1801 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Maine_East_FIPS_1801', tag='NAD_1927_StatePlane_Maine_East_FIPS_1801')
STD_ANON_24.NAD_1927_StatePlane_Maine_West_FIPS_1802 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Maine_West_FIPS_1802', tag='NAD_1927_StatePlane_Maine_West_FIPS_1802')
STD_ANON_24.NAD_1927_StatePlane_Maryland_FIPS_1900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Maryland_FIPS_1900', tag='NAD_1927_StatePlane_Maryland_FIPS_1900')
STD_ANON_24.NAD_1927_StatePlane_Massachusetts_Island_FIPS_2002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Massachusetts_Island_FIPS_2002', tag='NAD_1927_StatePlane_Massachusetts_Island_FIPS_2002')
STD_ANON_24.NAD_1927_StatePlane_Massachusetts_Mainland_FIPS_2001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Massachusetts_Mainland_FIPS_2001', tag='NAD_1927_StatePlane_Massachusetts_Mainland_FIPS_2001')
STD_ANON_24.NAD_1927_StatePlane_Michigan_Central_FIPS_2112 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Michigan_Central_FIPS_2112', tag='NAD_1927_StatePlane_Michigan_Central_FIPS_2112')
STD_ANON_24.NAD_1927_StatePlane_Michigan_North_FIPS_2111 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Michigan_North_FIPS_2111', tag='NAD_1927_StatePlane_Michigan_North_FIPS_2111')
STD_ANON_24.NAD_1927_StatePlane_Michigan_South_FIPS_2113 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Michigan_South_FIPS_2113', tag='NAD_1927_StatePlane_Michigan_South_FIPS_2113')
STD_ANON_24.NAD_1927_StatePlane_Minnesota_Central_FIPS_2202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Minnesota_Central_FIPS_2202', tag='NAD_1927_StatePlane_Minnesota_Central_FIPS_2202')
STD_ANON_24.NAD_1927_StatePlane_Minnesota_North_FIPS_2201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Minnesota_North_FIPS_2201', tag='NAD_1927_StatePlane_Minnesota_North_FIPS_2201')
STD_ANON_24.NAD_1927_StatePlane_Minnesota_South_FIPS_2203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Minnesota_South_FIPS_2203', tag='NAD_1927_StatePlane_Minnesota_South_FIPS_2203')
STD_ANON_24.NAD_1927_StatePlane_Mississippi_East_FIPS_2301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Mississippi_East_FIPS_2301', tag='NAD_1927_StatePlane_Mississippi_East_FIPS_2301')
STD_ANON_24.NAD_1927_StatePlane_Mississippi_West_FIPS_2302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Mississippi_West_FIPS_2302', tag='NAD_1927_StatePlane_Mississippi_West_FIPS_2302')
STD_ANON_24.NAD_1927_StatePlane_Missouri_Central_FIPS_2402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Missouri_Central_FIPS_2402', tag='NAD_1927_StatePlane_Missouri_Central_FIPS_2402')
STD_ANON_24.NAD_1927_StatePlane_Missouri_East_FIPS_2401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Missouri_East_FIPS_2401', tag='NAD_1927_StatePlane_Missouri_East_FIPS_2401')
STD_ANON_24.NAD_1927_StatePlane_Missouri_West_FIPS_2403 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Missouri_West_FIPS_2403', tag='NAD_1927_StatePlane_Missouri_West_FIPS_2403')
STD_ANON_24.NAD_1927_StatePlane_Montana_Central_FIPS_2502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Montana_Central_FIPS_2502', tag='NAD_1927_StatePlane_Montana_Central_FIPS_2502')
STD_ANON_24.NAD_1927_StatePlane_Montana_North_FIPS_2501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Montana_North_FIPS_2501', tag='NAD_1927_StatePlane_Montana_North_FIPS_2501')
STD_ANON_24.NAD_1927_StatePlane_Montana_South_FIPS_2503 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Montana_South_FIPS_2503', tag='NAD_1927_StatePlane_Montana_South_FIPS_2503')
STD_ANON_24.NAD_1927_StatePlane_Nebraska_North_FIPS_2601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Nebraska_North_FIPS_2601', tag='NAD_1927_StatePlane_Nebraska_North_FIPS_2601')
STD_ANON_24.NAD_1927_StatePlane_Nebraska_South_FIPS_2602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Nebraska_South_FIPS_2602', tag='NAD_1927_StatePlane_Nebraska_South_FIPS_2602')
STD_ANON_24.NAD_1927_StatePlane_Nevada_Central_FIPS_2702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Nevada_Central_FIPS_2702', tag='NAD_1927_StatePlane_Nevada_Central_FIPS_2702')
STD_ANON_24.NAD_1927_StatePlane_Nevada_East_FIPS_2701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Nevada_East_FIPS_2701', tag='NAD_1927_StatePlane_Nevada_East_FIPS_2701')
STD_ANON_24.NAD_1927_StatePlane_Nevada_West_FIPS_2703 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Nevada_West_FIPS_2703', tag='NAD_1927_StatePlane_Nevada_West_FIPS_2703')
STD_ANON_24.NAD_1927_StatePlane_New_Hampshire_FIPS_2800 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_Hampshire_FIPS_2800', tag='NAD_1927_StatePlane_New_Hampshire_FIPS_2800')
STD_ANON_24.NAD_1927_StatePlane_New_Jersey_FIPS_2900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_Jersey_FIPS_2900', tag='NAD_1927_StatePlane_New_Jersey_FIPS_2900')
STD_ANON_24.NAD_1927_StatePlane_New_Mexico_Central_FIPS_3002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_Mexico_Central_FIPS_3002', tag='NAD_1927_StatePlane_New_Mexico_Central_FIPS_3002')
STD_ANON_24.NAD_1927_StatePlane_New_Mexico_East_FIPS_3001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_Mexico_East_FIPS_3001', tag='NAD_1927_StatePlane_New_Mexico_East_FIPS_3001')
STD_ANON_24.NAD_1927_StatePlane_New_Mexico_West_FIPS_3003 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_Mexico_West_FIPS_3003', tag='NAD_1927_StatePlane_New_Mexico_West_FIPS_3003')
STD_ANON_24.NAD_1927_StatePlane_New_York_Central_FIPS_3102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_York_Central_FIPS_3102', tag='NAD_1927_StatePlane_New_York_Central_FIPS_3102')
STD_ANON_24.NAD_1927_StatePlane_New_York_East_FIPS_3101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_York_East_FIPS_3101', tag='NAD_1927_StatePlane_New_York_East_FIPS_3101')
STD_ANON_24.NAD_1927_StatePlane_New_York_Long_Island_FIPS_3104 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_York_Long_Island_FIPS_3104', tag='NAD_1927_StatePlane_New_York_Long_Island_FIPS_3104')
STD_ANON_24.NAD_1927_StatePlane_New_York_West_FIPS_3103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_New_York_West_FIPS_3103', tag='NAD_1927_StatePlane_New_York_West_FIPS_3103')
STD_ANON_24.NAD_1927_StatePlane_North_Carolina_FIPS_3200 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_North_Carolina_FIPS_3200', tag='NAD_1927_StatePlane_North_Carolina_FIPS_3200')
STD_ANON_24.NAD_1927_StatePlane_North_Dakota_North_FIPS_3301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_North_Dakota_North_FIPS_3301', tag='NAD_1927_StatePlane_North_Dakota_North_FIPS_3301')
STD_ANON_24.NAD_1927_StatePlane_North_Dakota_South_FIPS_3302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_North_Dakota_South_FIPS_3302', tag='NAD_1927_StatePlane_North_Dakota_South_FIPS_3302')
STD_ANON_24.NAD_1927_StatePlane_Ohio_North_FIPS_3401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Ohio_North_FIPS_3401', tag='NAD_1927_StatePlane_Ohio_North_FIPS_3401')
STD_ANON_24.NAD_1927_StatePlane_Ohio_South_FIPS_3402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Ohio_South_FIPS_3402', tag='NAD_1927_StatePlane_Ohio_South_FIPS_3402')
STD_ANON_24.NAD_1927_StatePlane_Oklahoma_North_FIPS_3501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Oklahoma_North_FIPS_3501', tag='NAD_1927_StatePlane_Oklahoma_North_FIPS_3501')
STD_ANON_24.NAD_1927_StatePlane_Oklahoma_South_FIPS_3502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Oklahoma_South_FIPS_3502', tag='NAD_1927_StatePlane_Oklahoma_South_FIPS_3502')
STD_ANON_24.NAD_1927_StatePlane_Oregon_North_FIPS_3601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Oregon_North_FIPS_3601', tag='NAD_1927_StatePlane_Oregon_North_FIPS_3601')
STD_ANON_24.NAD_1927_StatePlane_Oregon_South_FIPS_3602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Oregon_South_FIPS_3602', tag='NAD_1927_StatePlane_Oregon_South_FIPS_3602')
STD_ANON_24.NAD_1927_StatePlane_Pennsylvania_North_FIPS_3701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Pennsylvania_North_FIPS_3701', tag='NAD_1927_StatePlane_Pennsylvania_North_FIPS_3701')
STD_ANON_24.NAD_1927_StatePlane_Pennsylvania_South_FIPS_3702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Pennsylvania_South_FIPS_3702', tag='NAD_1927_StatePlane_Pennsylvania_South_FIPS_3702')
STD_ANON_24.NAD_1927_StatePlane_Puerto_Rico_FIPS_5201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Puerto_Rico_FIPS_5201', tag='NAD_1927_StatePlane_Puerto_Rico_FIPS_5201')
STD_ANON_24.NAD_1927_StatePlane_Rhode_Island_FIPS_3800 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Rhode_Island_FIPS_3800', tag='NAD_1927_StatePlane_Rhode_Island_FIPS_3800')
STD_ANON_24.NAD_1927_StatePlane_South_Carolina_North_FIPS_3901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_South_Carolina_North_FIPS_3901', tag='NAD_1927_StatePlane_South_Carolina_North_FIPS_3901')
STD_ANON_24.NAD_1927_StatePlane_South_Carolina_South_FIPS_3902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_South_Carolina_South_FIPS_3902', tag='NAD_1927_StatePlane_South_Carolina_South_FIPS_3902')
STD_ANON_24.NAD_1927_StatePlane_South_Dakota_North_FIPS_4001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_South_Dakota_North_FIPS_4001', tag='NAD_1927_StatePlane_South_Dakota_North_FIPS_4001')
STD_ANON_24.NAD_1927_StatePlane_South_Dakota_South_FIPS_4002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_South_Dakota_South_FIPS_4002', tag='NAD_1927_StatePlane_South_Dakota_South_FIPS_4002')
STD_ANON_24.NAD_1927_StatePlane_Tennessee_FIPS_4100 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Tennessee_FIPS_4100', tag='NAD_1927_StatePlane_Tennessee_FIPS_4100')
STD_ANON_24.NAD_1927_StatePlane_Texas_Central_FIPS_4203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Texas_Central_FIPS_4203', tag='NAD_1927_StatePlane_Texas_Central_FIPS_4203')
STD_ANON_24.NAD_1927_StatePlane_Texas_North_Central_FIPS_4202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Texas_North_Central_FIPS_4202', tag='NAD_1927_StatePlane_Texas_North_Central_FIPS_4202')
STD_ANON_24.NAD_1927_StatePlane_Texas_North_FIPS_4201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Texas_North_FIPS_4201', tag='NAD_1927_StatePlane_Texas_North_FIPS_4201')
STD_ANON_24.NAD_1927_StatePlane_Texas_South_Central_FIPS_4204 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Texas_South_Central_FIPS_4204', tag='NAD_1927_StatePlane_Texas_South_Central_FIPS_4204')
STD_ANON_24.NAD_1927_StatePlane_Texas_South_FIPS_4205 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Texas_South_FIPS_4205', tag='NAD_1927_StatePlane_Texas_South_FIPS_4205')
STD_ANON_24.NAD_1927_StatePlane_Utah_Central_FIPS_4302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Utah_Central_FIPS_4302', tag='NAD_1927_StatePlane_Utah_Central_FIPS_4302')
STD_ANON_24.NAD_1927_StatePlane_Utah_North_FIPS_4301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Utah_North_FIPS_4301', tag='NAD_1927_StatePlane_Utah_North_FIPS_4301')
STD_ANON_24.NAD_1927_StatePlane_Utah_South_FIPS_4303 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Utah_South_FIPS_4303', tag='NAD_1927_StatePlane_Utah_South_FIPS_4303')
STD_ANON_24.NAD_1927_StatePlane_Vermont_FIPS_3400 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Vermont_FIPS_3400', tag='NAD_1927_StatePlane_Vermont_FIPS_3400')
STD_ANON_24.NAD_1927_StatePlane_Virginia_North_FIPS_4501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Virginia_North_FIPS_4501', tag='NAD_1927_StatePlane_Virginia_North_FIPS_4501')
STD_ANON_24.NAD_1927_StatePlane_Virginia_South_FIPS_4502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Virginia_South_FIPS_4502', tag='NAD_1927_StatePlane_Virginia_South_FIPS_4502')
STD_ANON_24.NAD_1927_StatePlane_Washington_North_FIPS_4601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Washington_North_FIPS_4601', tag='NAD_1927_StatePlane_Washington_North_FIPS_4601')
STD_ANON_24.NAD_1927_StatePlane_Washington_South_FIPS_4602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Washington_South_FIPS_4602', tag='NAD_1927_StatePlane_Washington_South_FIPS_4602')
STD_ANON_24.NAD_1927_StatePlane_West_Virginia_North_FIPS_4701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_West_Virginia_North_FIPS_4701', tag='NAD_1927_StatePlane_West_Virginia_North_FIPS_4701')
STD_ANON_24.NAD_1927_StatePlane_West_Virginia_South_FIPS_4702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_West_Virginia_South_FIPS_4702', tag='NAD_1927_StatePlane_West_Virginia_South_FIPS_4702')
STD_ANON_24.NAD_1927_StatePlane_Wisconsin_Central_FIPS_4802 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wisconsin_Central_FIPS_4802', tag='NAD_1927_StatePlane_Wisconsin_Central_FIPS_4802')
STD_ANON_24.NAD_1927_StatePlane_Wisconsin_North_FIPS_4801 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wisconsin_North_FIPS_4801', tag='NAD_1927_StatePlane_Wisconsin_North_FIPS_4801')
STD_ANON_24.NAD_1927_StatePlane_Wisconsin_South_FIPS_4803 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wisconsin_South_FIPS_4803', tag='NAD_1927_StatePlane_Wisconsin_South_FIPS_4803')
STD_ANON_24.NAD_1927_StatePlane_Wyoming_East_Central_FIPS_4902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wyoming_East_Central_FIPS_4902', tag='NAD_1927_StatePlane_Wyoming_East_Central_FIPS_4902')
STD_ANON_24.NAD_1927_StatePlane_Wyoming_East_FIPS_4901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wyoming_East_FIPS_4901', tag='NAD_1927_StatePlane_Wyoming_East_FIPS_4901')
STD_ANON_24.NAD_1927_StatePlane_Wyoming_West_Central_FIPS_4903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wyoming_West_Central_FIPS_4903', tag='NAD_1927_StatePlane_Wyoming_West_Central_FIPS_4903')
STD_ANON_24.NAD_1927_StatePlane_Wyoming_West_FIPS_4904 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_StatePlane_Wyoming_West_FIPS_4904', tag='NAD_1927_StatePlane_Wyoming_West_FIPS_4904')
STD_ANON_24.NAD_1983_StatePlane_Alabama_East_FIPS_0101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alabama_East_FIPS_0101', tag='NAD_1983_StatePlane_Alabama_East_FIPS_0101')
STD_ANON_24.NAD_1983_StatePlane_Alabama_West_FIPS_0102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alabama_West_FIPS_0102', tag='NAD_1983_StatePlane_Alabama_West_FIPS_0102')
STD_ANON_24.NAD_1983_StatePlane_Alaska_1_FIPS_5001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_1_FIPS_5001', tag='NAD_1983_StatePlane_Alaska_1_FIPS_5001')
STD_ANON_24.NAD_1983_StatePlane_Alaska_10_FIPS_5010 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_10_FIPS_5010', tag='NAD_1983_StatePlane_Alaska_10_FIPS_5010')
STD_ANON_24.NAD_1983_StatePlane_Alaska_2_FIPS_5002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_2_FIPS_5002', tag='NAD_1983_StatePlane_Alaska_2_FIPS_5002')
STD_ANON_24.NAD_1983_StatePlane_Alaska_3_FIPS_5003 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_3_FIPS_5003', tag='NAD_1983_StatePlane_Alaska_3_FIPS_5003')
STD_ANON_24.NAD_1983_StatePlane_Alaska_4_FIPS_5004 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_4_FIPS_5004', tag='NAD_1983_StatePlane_Alaska_4_FIPS_5004')
STD_ANON_24.NAD_1983_StatePlane_Alaska_5_FIPS_5005 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_5_FIPS_5005', tag='NAD_1983_StatePlane_Alaska_5_FIPS_5005')
STD_ANON_24.NAD_1983_StatePlane_Alaska_6_FIPS_5006 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_6_FIPS_5006', tag='NAD_1983_StatePlane_Alaska_6_FIPS_5006')
STD_ANON_24.NAD_1983_StatePlane_Alaska_7_FIPS_5007 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_7_FIPS_5007', tag='NAD_1983_StatePlane_Alaska_7_FIPS_5007')
STD_ANON_24.NAD_1983_StatePlane_Alaska_8_FIPS_5008 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_8_FIPS_5008', tag='NAD_1983_StatePlane_Alaska_8_FIPS_5008')
STD_ANON_24.NAD_1983_StatePlane_Alaska_9_FIPS_5009 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_9_FIPS_5009', tag='NAD_1983_StatePlane_Alaska_9_FIPS_5009')
STD_ANON_24.NAD_1983_StatePlane_Arizona_Central_FIPS_0202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arizona_Central_FIPS_0202', tag='NAD_1983_StatePlane_Arizona_Central_FIPS_0202')
STD_ANON_24.NAD_1983_StatePlane_Arizona_East_FIPS_0201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arizona_East_FIPS_0201', tag='NAD_1983_StatePlane_Arizona_East_FIPS_0201')
STD_ANON_24.NAD_1983_StatePlane_Arizona_West_FIPS_0203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arizona_West_FIPS_0203', tag='NAD_1983_StatePlane_Arizona_West_FIPS_0203')
STD_ANON_24.NAD_1983_StatePlane_Arkansas_North_FIPS_0301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arkansas_North_FIPS_0301', tag='NAD_1983_StatePlane_Arkansas_North_FIPS_0301')
STD_ANON_24.NAD_1983_StatePlane_Arkansas_South_FIPS_0302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arkansas_South_FIPS_0302', tag='NAD_1983_StatePlane_Arkansas_South_FIPS_0302')
STD_ANON_24.NAD_1983_StatePlane_California_I_FIPS_0401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_I_FIPS_0401', tag='NAD_1983_StatePlane_California_I_FIPS_0401')
STD_ANON_24.NAD_1983_StatePlane_California_II_FIPS_0402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_II_FIPS_0402', tag='NAD_1983_StatePlane_California_II_FIPS_0402')
STD_ANON_24.NAD_1983_StatePlane_California_III_FIPS_0403 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_III_FIPS_0403', tag='NAD_1983_StatePlane_California_III_FIPS_0403')
STD_ANON_24.NAD_1983_StatePlane_California_IV_FIPS_0404 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_IV_FIPS_0404', tag='NAD_1983_StatePlane_California_IV_FIPS_0404')
STD_ANON_24.NAD_1983_StatePlane_California_V_FIPS_0405 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_V_FIPS_0405', tag='NAD_1983_StatePlane_California_V_FIPS_0405')
STD_ANON_24.NAD_1983_StatePlane_California_VI_FIPS_0406 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_VI_FIPS_0406', tag='NAD_1983_StatePlane_California_VI_FIPS_0406')
STD_ANON_24.NAD_1983_StatePlane_Colorado_Central_FIPS_0502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Colorado_Central_FIPS_0502', tag='NAD_1983_StatePlane_Colorado_Central_FIPS_0502')
STD_ANON_24.NAD_1983_StatePlane_Colorado_North_FIPS_0501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Colorado_North_FIPS_0501', tag='NAD_1983_StatePlane_Colorado_North_FIPS_0501')
STD_ANON_24.NAD_1983_StatePlane_Colorado_South_FIPS_0503 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Colorado_South_FIPS_0503', tag='NAD_1983_StatePlane_Colorado_South_FIPS_0503')
STD_ANON_24.NAD_1983_StatePlane_Connecticut_FIPS_0600 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Connecticut_FIPS_0600', tag='NAD_1983_StatePlane_Connecticut_FIPS_0600')
STD_ANON_24.NAD_1983_StatePlane_Delaware_FIPS_0700 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Delaware_FIPS_0700', tag='NAD_1983_StatePlane_Delaware_FIPS_0700')
STD_ANON_24.NAD_1983_StatePlane_Florida_East_FIPS_0901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Florida_East_FIPS_0901', tag='NAD_1983_StatePlane_Florida_East_FIPS_0901')
STD_ANON_24.NAD_1983_StatePlane_Florida_North_FIPS_0903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Florida_North_FIPS_0903', tag='NAD_1983_StatePlane_Florida_North_FIPS_0903')
STD_ANON_24.NAD_1983_StatePlane_Florida_West_FIPS_0902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Florida_West_FIPS_0902', tag='NAD_1983_StatePlane_Florida_West_FIPS_0902')
STD_ANON_24.NAD_1983_StatePlane_Georgia_East_FIPS_1001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Georgia_East_FIPS_1001', tag='NAD_1983_StatePlane_Georgia_East_FIPS_1001')
STD_ANON_24.NAD_1983_StatePlane_Georgia_West_FIPS_1002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Georgia_West_FIPS_1002', tag='NAD_1983_StatePlane_Georgia_West_FIPS_1002')
STD_ANON_24.NAD_1983_StatePlane_Guam_FIPS_5400 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Guam_FIPS_5400', tag='NAD_1983_StatePlane_Guam_FIPS_5400')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_1_FIPS_5101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_1_FIPS_5101', tag='NAD_1983_StatePlane_Hawaii_1_FIPS_5101')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_2_FIPS_5102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_2_FIPS_5102', tag='NAD_1983_StatePlane_Hawaii_2_FIPS_5102')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_3_FIPS_5103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_3_FIPS_5103', tag='NAD_1983_StatePlane_Hawaii_3_FIPS_5103')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_4_FIPS_5104 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_4_FIPS_5104', tag='NAD_1983_StatePlane_Hawaii_4_FIPS_5104')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_5_FIPS_5105 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_5_FIPS_5105', tag='NAD_1983_StatePlane_Hawaii_5_FIPS_5105')
STD_ANON_24.NAD_1983_StatePlane_Idaho_Central_FIPS_1102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Idaho_Central_FIPS_1102', tag='NAD_1983_StatePlane_Idaho_Central_FIPS_1102')
STD_ANON_24.NAD_1983_StatePlane_Idaho_East_FIPS_1101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Idaho_East_FIPS_1101', tag='NAD_1983_StatePlane_Idaho_East_FIPS_1101')
STD_ANON_24.NAD_1983_StatePlane_Idaho_West_FIPS_1103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Idaho_West_FIPS_1103', tag='NAD_1983_StatePlane_Idaho_West_FIPS_1103')
STD_ANON_24.NAD_1983_StatePlane_Illinois_East_FIPS_1201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Illinois_East_FIPS_1201', tag='NAD_1983_StatePlane_Illinois_East_FIPS_1201')
STD_ANON_24.NAD_1983_StatePlane_Illinois_West_FIPS_1202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Illinois_West_FIPS_1202', tag='NAD_1983_StatePlane_Illinois_West_FIPS_1202')
STD_ANON_24.NAD_1983_StatePlane_Indiana_East_FIPS_1301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Indiana_East_FIPS_1301', tag='NAD_1983_StatePlane_Indiana_East_FIPS_1301')
STD_ANON_24.NAD_1983_StatePlane_Indiana_West_FIPS_1302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Indiana_West_FIPS_1302', tag='NAD_1983_StatePlane_Indiana_West_FIPS_1302')
STD_ANON_24.NAD_1983_StatePlane_Iowa_North_FIPS_1401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Iowa_North_FIPS_1401', tag='NAD_1983_StatePlane_Iowa_North_FIPS_1401')
STD_ANON_24.NAD_1983_StatePlane_Iowa_South_FIPS_1402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Iowa_South_FIPS_1402', tag='NAD_1983_StatePlane_Iowa_South_FIPS_1402')
STD_ANON_24.NAD_1983_StatePlane_Kansas_North_FIPS_1501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kansas_North_FIPS_1501', tag='NAD_1983_StatePlane_Kansas_North_FIPS_1501')
STD_ANON_24.NAD_1983_StatePlane_Kansas_South_FIPS_1502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kansas_South_FIPS_1502', tag='NAD_1983_StatePlane_Kansas_South_FIPS_1502')
STD_ANON_24.NAD_1983_StatePlane_Kentucky_FIPS_1600 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kentucky_FIPS_1600', tag='NAD_1983_StatePlane_Kentucky_FIPS_1600')
STD_ANON_24.NAD_1983_StatePlane_Kentucky_North_FIPS_1601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kentucky_North_FIPS_1601', tag='NAD_1983_StatePlane_Kentucky_North_FIPS_1601')
STD_ANON_24.NAD_1983_StatePlane_Kentucky_South_FIPS_1602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kentucky_South_FIPS_1602', tag='NAD_1983_StatePlane_Kentucky_South_FIPS_1602')
STD_ANON_24.NAD_1983_StatePlane_Louisiana_North_FIPS_1701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Louisiana_North_FIPS_1701', tag='NAD_1983_StatePlane_Louisiana_North_FIPS_1701')
STD_ANON_24.NAD_1983_StatePlane_Louisiana_South_FIPS_1702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Louisiana_South_FIPS_1702', tag='NAD_1983_StatePlane_Louisiana_South_FIPS_1702')
STD_ANON_24.NAD_1983_StatePlane_Maine_East_FIPS_1801 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Maine_East_FIPS_1801', tag='NAD_1983_StatePlane_Maine_East_FIPS_1801')
STD_ANON_24.NAD_1983_StatePlane_Maine_West_FIPS_1802 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Maine_West_FIPS_1802', tag='NAD_1983_StatePlane_Maine_West_FIPS_1802')
STD_ANON_24.NAD_1983_StatePlane_Maryland_FIPS_1900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Maryland_FIPS_1900', tag='NAD_1983_StatePlane_Maryland_FIPS_1900')
STD_ANON_24.NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002', tag='NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002')
STD_ANON_24.NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001', tag='NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001')
STD_ANON_24.NAD_1983_StatePlane_Michigan_Central_FIPS_2202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Michigan_Central_FIPS_2202', tag='NAD_1983_StatePlane_Michigan_Central_FIPS_2202')
STD_ANON_24.NAD_1983_StatePlane_Michigan_North_FIPS_2111 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Michigan_North_FIPS_2111', tag='NAD_1983_StatePlane_Michigan_North_FIPS_2111')
STD_ANON_24.NAD_1983_StatePlane_Michigan_South_FIPS_2113 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Michigan_South_FIPS_2113', tag='NAD_1983_StatePlane_Michigan_South_FIPS_2113')
STD_ANON_24.NAD_1983_StatePlane_Minnesota_Central_FIPS_2202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Minnesota_Central_FIPS_2202', tag='NAD_1983_StatePlane_Minnesota_Central_FIPS_2202')
STD_ANON_24.NAD_1983_StatePlane_Minnesota_North_FIPS_2201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Minnesota_North_FIPS_2201', tag='NAD_1983_StatePlane_Minnesota_North_FIPS_2201')
STD_ANON_24.NAD_1983_StatePlane_Minnesota_South_FIPS_2203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Minnesota_South_FIPS_2203', tag='NAD_1983_StatePlane_Minnesota_South_FIPS_2203')
STD_ANON_24.NAD_1983_StatePlane_Mississippi_East_FIPS_2301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Mississippi_East_FIPS_2301', tag='NAD_1983_StatePlane_Mississippi_East_FIPS_2301')
STD_ANON_24.NAD_1983_StatePlane_Mississippi_West_FIPS_2302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Mississippi_West_FIPS_2302', tag='NAD_1983_StatePlane_Mississippi_West_FIPS_2302')
STD_ANON_24.NAD_1983_StatePlane_Missouri_Central_FIPS_2402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Missouri_Central_FIPS_2402', tag='NAD_1983_StatePlane_Missouri_Central_FIPS_2402')
STD_ANON_24.NAD_1983_StatePlane_Missouri_East_FIPS_2401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Missouri_East_FIPS_2401', tag='NAD_1983_StatePlane_Missouri_East_FIPS_2401')
STD_ANON_24.NAD_1983_StatePlane_Missouri_West_FIPS_2403 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Missouri_West_FIPS_2403', tag='NAD_1983_StatePlane_Missouri_West_FIPS_2403')
STD_ANON_24.NAD_1983_StatePlane_Montana_FIPS_2500 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Montana_FIPS_2500', tag='NAD_1983_StatePlane_Montana_FIPS_2500')
STD_ANON_24.NAD_1983_StatePlane_Nebraska_FIPS_2600 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nebraska_FIPS_2600', tag='NAD_1983_StatePlane_Nebraska_FIPS_2600')
STD_ANON_24.NAD_1983_StatePlane_Nevada_Central_FIPS_2702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nevada_Central_FIPS_2702', tag='NAD_1983_StatePlane_Nevada_Central_FIPS_2702')
STD_ANON_24.NAD_1983_StatePlane_Nevada_East_FIPS_2701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nevada_East_FIPS_2701', tag='NAD_1983_StatePlane_Nevada_East_FIPS_2701')
STD_ANON_24.NAD_1983_StatePlane_Nevada_West_FIPS_2703 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nevada_West_FIPS_2703', tag='NAD_1983_StatePlane_Nevada_West_FIPS_2703')
STD_ANON_24.NAD_1983_StatePlane_New_Hampshire_FIPS_2800 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Hampshire_FIPS_2800', tag='NAD_1983_StatePlane_New_Hampshire_FIPS_2800')
STD_ANON_24.NAD_1983_StatePlane_New_Jersey_FIPS_2900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Jersey_FIPS_2900', tag='NAD_1983_StatePlane_New_Jersey_FIPS_2900')
STD_ANON_24.NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002', tag='NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002')
STD_ANON_24.NAD_1983_StatePlane_New_Mexico_East_FIPS_3001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Mexico_East_FIPS_3001', tag='NAD_1983_StatePlane_New_Mexico_East_FIPS_3001')
STD_ANON_24.NAD_1983_StatePlane_New_Mexico_West_FIPS_3003 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Mexico_West_FIPS_3003', tag='NAD_1983_StatePlane_New_Mexico_West_FIPS_3003')
STD_ANON_24.NAD_1983_StatePlane_New_York_Central_FIPS_3102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_Central_FIPS_3102', tag='NAD_1983_StatePlane_New_York_Central_FIPS_3102')
STD_ANON_24.NAD_1983_StatePlane_New_York_East_FIPS_3101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_East_FIPS_3101', tag='NAD_1983_StatePlane_New_York_East_FIPS_3101')
STD_ANON_24.NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104', tag='NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104')
STD_ANON_24.NAD_1983_StatePlane_New_York_West_FIPS_3103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_West_FIPS_3103', tag='NAD_1983_StatePlane_New_York_West_FIPS_3103')
STD_ANON_24.NAD_1983_StatePlane_North_Carolina_FIPS_3200 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_North_Carolina_FIPS_3200', tag='NAD_1983_StatePlane_North_Carolina_FIPS_3200')
STD_ANON_24.NAD_1983_StatePlane_North_Dakota_North_FIPS_3301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_North_Dakota_North_FIPS_3301', tag='NAD_1983_StatePlane_North_Dakota_North_FIPS_3301')
STD_ANON_24.NAD_1983_StatePlane_North_Dakota_South_FIPS_3302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_North_Dakota_South_FIPS_3302', tag='NAD_1983_StatePlane_North_Dakota_South_FIPS_3302')
STD_ANON_24.NAD_1983_StatePlane_Ohio_North_FIPS_3401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Ohio_North_FIPS_3401', tag='NAD_1983_StatePlane_Ohio_North_FIPS_3401')
STD_ANON_24.NAD_1983_StatePlane_Ohio_South_FIPS_3402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Ohio_South_FIPS_3402', tag='NAD_1983_StatePlane_Ohio_South_FIPS_3402')
STD_ANON_24.NAD_1983_StatePlane_Oklahoma_North_FIPS_3501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oklahoma_North_FIPS_3501', tag='NAD_1983_StatePlane_Oklahoma_North_FIPS_3501')
STD_ANON_24.NAD_1983_StatePlane_Oklahoma_South_FIPS_3502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oklahoma_South_FIPS_3502', tag='NAD_1983_StatePlane_Oklahoma_South_FIPS_3502')
STD_ANON_24.NAD_1983_StatePlane_Oregon_North_FIPS_3601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oregon_North_FIPS_3601', tag='NAD_1983_StatePlane_Oregon_North_FIPS_3601')
STD_ANON_24.NAD_1983_StatePlane_Oregon_South_FIPS_3602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oregon_South_FIPS_3602', tag='NAD_1983_StatePlane_Oregon_South_FIPS_3602')
STD_ANON_24.NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701', tag='NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701')
STD_ANON_24.NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702', tag='NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702')
STD_ANON_24.NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200', tag='NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200')
STD_ANON_24.NAD_1983_StatePlane_Rhode_Island_FIPS_3800 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Rhode_Island_FIPS_3800', tag='NAD_1983_StatePlane_Rhode_Island_FIPS_3800')
STD_ANON_24.NAD_1983_StatePlane_South_Carolina_FIPS_3900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_South_Carolina_FIPS_3900', tag='NAD_1983_StatePlane_South_Carolina_FIPS_3900')
STD_ANON_24.NAD_1983_StatePlane_South_Dakota_North_FIPS_4001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_South_Dakota_North_FIPS_4001', tag='NAD_1983_StatePlane_South_Dakota_North_FIPS_4001')
STD_ANON_24.NAD_1983_StatePlane_South_Dakota_South_FIPS_4002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_South_Dakota_South_FIPS_4002', tag='NAD_1983_StatePlane_South_Dakota_South_FIPS_4002')
STD_ANON_24.NAD_1983_StatePlane_Tennessee_FIPS_4100 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Tennessee_FIPS_4100', tag='NAD_1983_StatePlane_Tennessee_FIPS_4100')
STD_ANON_24.NAD_1983_StatePlane_Texas_Central_FIPS_4203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_Central_FIPS_4203', tag='NAD_1983_StatePlane_Texas_Central_FIPS_4203')
STD_ANON_24.NAD_1983_StatePlane_Texas_North_Central_FIPS_4202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_North_Central_FIPS_4202', tag='NAD_1983_StatePlane_Texas_North_Central_FIPS_4202')
STD_ANON_24.NAD_1983_StatePlane_Texas_North_FIPS_4201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_North_FIPS_4201', tag='NAD_1983_StatePlane_Texas_North_FIPS_4201')
STD_ANON_24.NAD_1983_StatePlane_Texas_South_Central_FIPS_4204 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_South_Central_FIPS_4204', tag='NAD_1983_StatePlane_Texas_South_Central_FIPS_4204')
STD_ANON_24.NAD_1983_StatePlane_Texas_South_FIPS_4205 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_South_FIPS_4205', tag='NAD_1983_StatePlane_Texas_South_FIPS_4205')
STD_ANON_24.NAD_1983_StatePlane_Utah_Central_FIPS_4302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Utah_Central_FIPS_4302', tag='NAD_1983_StatePlane_Utah_Central_FIPS_4302')
STD_ANON_24.NAD_1983_StatePlane_Utah_North_FIPS_4301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Utah_North_FIPS_4301', tag='NAD_1983_StatePlane_Utah_North_FIPS_4301')
STD_ANON_24.NAD_1983_StatePlane_Utah_South_FIPS_4303 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Utah_South_FIPS_4303', tag='NAD_1983_StatePlane_Utah_South_FIPS_4303')
STD_ANON_24.NAD_1983_StatePlane_Vermont_FIPS_4400 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Vermont_FIPS_4400', tag='NAD_1983_StatePlane_Vermont_FIPS_4400')
STD_ANON_24.NAD_1983_StatePlane_Virginia_North_FIPS_4501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Virginia_North_FIPS_4501', tag='NAD_1983_StatePlane_Virginia_North_FIPS_4501')
STD_ANON_24.NAD_1983_StatePlane_Virginia_South_FIPS_4502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Virginia_South_FIPS_4502', tag='NAD_1983_StatePlane_Virginia_South_FIPS_4502')
STD_ANON_24.NAD_1983_StatePlane_Washington_North_FIPS_4601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Washington_North_FIPS_4601', tag='NAD_1983_StatePlane_Washington_North_FIPS_4601')
STD_ANON_24.NAD_1983_StatePlane_Washington_South_FIPS_4602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Washington_South_FIPS_4602', tag='NAD_1983_StatePlane_Washington_South_FIPS_4602')
STD_ANON_24.NAD_1983_StatePlane_West_Virginia_North_FIPS_4701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_West_Virginia_North_FIPS_4701', tag='NAD_1983_StatePlane_West_Virginia_North_FIPS_4701')
STD_ANON_24.NAD_1983_StatePlane_West_Virginia_South_FIPS_4702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_West_Virginia_South_FIPS_4702', tag='NAD_1983_StatePlane_West_Virginia_South_FIPS_4702')
STD_ANON_24.NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802', tag='NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802')
STD_ANON_24.NAD_1983_StatePlane_Wisconsin_North_FIPS_4801 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wisconsin_North_FIPS_4801', tag='NAD_1983_StatePlane_Wisconsin_North_FIPS_4801')
STD_ANON_24.NAD_1983_StatePlane_Wisconsin_South_FIPS_4803 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wisconsin_South_FIPS_4803', tag='NAD_1983_StatePlane_Wisconsin_South_FIPS_4803')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902', tag='NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_East_FIPS_4901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_East_FIPS_4901', tag='NAD_1983_StatePlane_Wyoming_East_FIPS_4901')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903', tag='NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_West_FIPS_4904 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_West_FIPS_4904', tag='NAD_1983_StatePlane_Wyoming_West_FIPS_4904')
STD_ANON_24.NAD_1983_StatePlane_Alabama_East_FIPS_0101_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alabama_East_FIPS_0101_Feet', tag='NAD_1983_StatePlane_Alabama_East_FIPS_0101_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alabama_West_FIPS_0102_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alabama_West_FIPS_0102_Feet', tag='NAD_1983_StatePlane_Alabama_West_FIPS_0102_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_1_FIPS_5001_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_1_FIPS_5001_Feet', tag='NAD_1983_StatePlane_Alaska_1_FIPS_5001_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_10_FIPS_5010_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_10_FIPS_5010_Feet', tag='NAD_1983_StatePlane_Alaska_10_FIPS_5010_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_2_FIPS_5002_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_2_FIPS_5002_Feet', tag='NAD_1983_StatePlane_Alaska_2_FIPS_5002_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_3_FIPS_5003_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_3_FIPS_5003_Feet', tag='NAD_1983_StatePlane_Alaska_3_FIPS_5003_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_4_FIPS_5004_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_4_FIPS_5004_Feet', tag='NAD_1983_StatePlane_Alaska_4_FIPS_5004_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_5_FIPS_5005_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_5_FIPS_5005_Feet', tag='NAD_1983_StatePlane_Alaska_5_FIPS_5005_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_6_FIPS_5006_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_6_FIPS_5006_Feet', tag='NAD_1983_StatePlane_Alaska_6_FIPS_5006_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_7_FIPS_5007_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_7_FIPS_5007_Feet', tag='NAD_1983_StatePlane_Alaska_7_FIPS_5007_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_8_FIPS_5008_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_8_FIPS_5008_Feet', tag='NAD_1983_StatePlane_Alaska_8_FIPS_5008_Feet')
STD_ANON_24.NAD_1983_StatePlane_Alaska_9_FIPS_5009_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Alaska_9_FIPS_5009_Feet', tag='NAD_1983_StatePlane_Alaska_9_FIPS_5009_Feet')
STD_ANON_24.NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet', tag='NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet')
STD_ANON_24.NAD_1983_StatePlane_Arizona_East_FIPS_0201_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arizona_East_FIPS_0201_Feet', tag='NAD_1983_StatePlane_Arizona_East_FIPS_0201_Feet')
STD_ANON_24.NAD_1983_StatePlane_Arizona_West_FIPS_0203_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arizona_West_FIPS_0203_Feet', tag='NAD_1983_StatePlane_Arizona_West_FIPS_0203_Feet')
STD_ANON_24.NAD_1983_StatePlane_Arkansas_North_FIPS_0301_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arkansas_North_FIPS_0301_Feet', tag='NAD_1983_StatePlane_Arkansas_North_FIPS_0301_Feet')
STD_ANON_24.NAD_1983_StatePlane_Arkansas_South_FIPS_0302_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Arkansas_South_FIPS_0302_Feet', tag='NAD_1983_StatePlane_Arkansas_South_FIPS_0302_Feet')
STD_ANON_24.NAD_1983_StatePlane_California_I_FIPS_0401_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_I_FIPS_0401_Feet', tag='NAD_1983_StatePlane_California_I_FIPS_0401_Feet')
STD_ANON_24.NAD_1983_StatePlane_California_II_FIPS_0402_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_II_FIPS_0402_Feet', tag='NAD_1983_StatePlane_California_II_FIPS_0402_Feet')
STD_ANON_24.NAD_1983_StatePlane_California_III_FIPS_0403_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_III_FIPS_0403_Feet', tag='NAD_1983_StatePlane_California_III_FIPS_0403_Feet')
STD_ANON_24.NAD_1983_StatePlane_California_IV_FIPS_0404_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_IV_FIPS_0404_Feet', tag='NAD_1983_StatePlane_California_IV_FIPS_0404_Feet')
STD_ANON_24.NAD_1983_StatePlane_California_V_FIPS_0405_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_V_FIPS_0405_Feet', tag='NAD_1983_StatePlane_California_V_FIPS_0405_Feet')
STD_ANON_24.NAD_1983_StatePlane_California_VI_FIPS_0406_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_California_VI_FIPS_0406_Feet', tag='NAD_1983_StatePlane_California_VI_FIPS_0406_Feet')
STD_ANON_24.NAD_1983_StatePlane_Colorado_Central_FIPS_0502_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Colorado_Central_FIPS_0502_Feet', tag='NAD_1983_StatePlane_Colorado_Central_FIPS_0502_Feet')
STD_ANON_24.NAD_1983_StatePlane_Colorado_North_FIPS_0501_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Colorado_North_FIPS_0501_Feet', tag='NAD_1983_StatePlane_Colorado_North_FIPS_0501_Feet')
STD_ANON_24.NAD_1983_StatePlane_Colorado_South_FIPS_0503_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Colorado_South_FIPS_0503_Feet', tag='NAD_1983_StatePlane_Colorado_South_FIPS_0503_Feet')
STD_ANON_24.NAD_1983_StatePlane_Connecticut_FIPS_0600_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Connecticut_FIPS_0600_Feet', tag='NAD_1983_StatePlane_Connecticut_FIPS_0600_Feet')
STD_ANON_24.NAD_1983_StatePlane_Delaware_FIPS_0700_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Delaware_FIPS_0700_Feet', tag='NAD_1983_StatePlane_Delaware_FIPS_0700_Feet')
STD_ANON_24.NAD_1983_StatePlane_Florida_East_FIPS_0901_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Florida_East_FIPS_0901_Feet', tag='NAD_1983_StatePlane_Florida_East_FIPS_0901_Feet')
STD_ANON_24.NAD_1983_StatePlane_Florida_North_FIPS_0903_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Florida_North_FIPS_0903_Feet', tag='NAD_1983_StatePlane_Florida_North_FIPS_0903_Feet')
STD_ANON_24.NAD_1983_StatePlane_Florida_West_FIPS_0902_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Florida_West_FIPS_0902_Feet', tag='NAD_1983_StatePlane_Florida_West_FIPS_0902_Feet')
STD_ANON_24.NAD_1983_StatePlane_Georgia_East_FIPS_1001_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Georgia_East_FIPS_1001_Feet', tag='NAD_1983_StatePlane_Georgia_East_FIPS_1001_Feet')
STD_ANON_24.NAD_1983_StatePlane_Georgia_West_FIPS_1002_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Georgia_West_FIPS_1002_Feet', tag='NAD_1983_StatePlane_Georgia_West_FIPS_1002_Feet')
STD_ANON_24.NAD_1983_StatePlane_Guam_FIPS_5400_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Guam_FIPS_5400_Feet', tag='NAD_1983_StatePlane_Guam_FIPS_5400_Feet')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_1_FIPS_5101_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_1_FIPS_5101_Feet', tag='NAD_1983_StatePlane_Hawaii_1_FIPS_5101_Feet')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_2_FIPS_5102_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_2_FIPS_5102_Feet', tag='NAD_1983_StatePlane_Hawaii_2_FIPS_5102_Feet')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_3_FIPS_5103_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_3_FIPS_5103_Feet', tag='NAD_1983_StatePlane_Hawaii_3_FIPS_5103_Feet')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_4_FIPS_5104_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_4_FIPS_5104_Feet', tag='NAD_1983_StatePlane_Hawaii_4_FIPS_5104_Feet')
STD_ANON_24.NAD_1983_StatePlane_Hawaii_5_FIPS_5105_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Hawaii_5_FIPS_5105_Feet', tag='NAD_1983_StatePlane_Hawaii_5_FIPS_5105_Feet')
STD_ANON_24.NAD_1983_StatePlane_Idaho_Central_FIPS_1102_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Idaho_Central_FIPS_1102_Feet', tag='NAD_1983_StatePlane_Idaho_Central_FIPS_1102_Feet')
STD_ANON_24.NAD_1983_StatePlane_Idaho_East_FIPS_1101_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Idaho_East_FIPS_1101_Feet', tag='NAD_1983_StatePlane_Idaho_East_FIPS_1101_Feet')
STD_ANON_24.NAD_1983_StatePlane_Idaho_West_FIPS_1103_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Idaho_West_FIPS_1103_Feet', tag='NAD_1983_StatePlane_Idaho_West_FIPS_1103_Feet')
STD_ANON_24.NAD_1983_StatePlane_Illinois_East_FIPS_1201_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Illinois_East_FIPS_1201_Feet', tag='NAD_1983_StatePlane_Illinois_East_FIPS_1201_Feet')
STD_ANON_24.NAD_1983_StatePlane_Illinois_West_FIPS_1202_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Illinois_West_FIPS_1202_Feet', tag='NAD_1983_StatePlane_Illinois_West_FIPS_1202_Feet')
STD_ANON_24.NAD_1983_StatePlane_Indiana_East_FIPS_1301_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Indiana_East_FIPS_1301_Feet', tag='NAD_1983_StatePlane_Indiana_East_FIPS_1301_Feet')
STD_ANON_24.NAD_1983_StatePlane_Indiana_West_FIPS_1302_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Indiana_West_FIPS_1302_Feet', tag='NAD_1983_StatePlane_Indiana_West_FIPS_1302_Feet')
STD_ANON_24.NAD_1983_StatePlane_Iowa_North_FIPS_1401_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Iowa_North_FIPS_1401_Feet', tag='NAD_1983_StatePlane_Iowa_North_FIPS_1401_Feet')
STD_ANON_24.NAD_1983_StatePlane_Iowa_South_FIPS_1402_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Iowa_South_FIPS_1402_Feet', tag='NAD_1983_StatePlane_Iowa_South_FIPS_1402_Feet')
STD_ANON_24.NAD_1983_StatePlane_Kansas_North_FIPS_1501_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kansas_North_FIPS_1501_Feet', tag='NAD_1983_StatePlane_Kansas_North_FIPS_1501_Feet')
STD_ANON_24.NAD_1983_StatePlane_Kansas_South_FIPS_1502_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kansas_South_FIPS_1502_Feet', tag='NAD_1983_StatePlane_Kansas_South_FIPS_1502_Feet')
STD_ANON_24.NAD_1983_StatePlane_Kentucky_FIPS_1600_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kentucky_FIPS_1600_Feet', tag='NAD_1983_StatePlane_Kentucky_FIPS_1600_Feet')
STD_ANON_24.NAD_1983_StatePlane_Kentucky_North_FIPS_1601_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kentucky_North_FIPS_1601_Feet', tag='NAD_1983_StatePlane_Kentucky_North_FIPS_1601_Feet')
STD_ANON_24.NAD_1983_StatePlane_Kentucky_South_FIPS_1602_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Kentucky_South_FIPS_1602_Feet', tag='NAD_1983_StatePlane_Kentucky_South_FIPS_1602_Feet')
STD_ANON_24.NAD_1983_StatePlane_Louisiana_North_FIPS_1701_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Louisiana_North_FIPS_1701_Feet', tag='NAD_1983_StatePlane_Louisiana_North_FIPS_1701_Feet')
STD_ANON_24.NAD_1983_StatePlane_Louisiana_South_FIPS_1702_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Louisiana_South_FIPS_1702_Feet', tag='NAD_1983_StatePlane_Louisiana_South_FIPS_1702_Feet')
STD_ANON_24.NAD_1983_StatePlane_Maine_East_FIPS_1801_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Maine_East_FIPS_1801_Feet', tag='NAD_1983_StatePlane_Maine_East_FIPS_1801_Feet')
STD_ANON_24.NAD_1983_StatePlane_Maine_West_FIPS_1802_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Maine_West_FIPS_1802_Feet', tag='NAD_1983_StatePlane_Maine_West_FIPS_1802_Feet')
STD_ANON_24.NAD_1983_StatePlane_Maryland_FIPS_1900_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Maryland_FIPS_1900_Feet', tag='NAD_1983_StatePlane_Maryland_FIPS_1900_Feet')
STD_ANON_24.NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002_Feet', tag='NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002_Feet')
STD_ANON_24.NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001_Feet', tag='NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001_Feet')
STD_ANON_24.NAD_1983_StatePlane_Michigan_Central_FIPS_2202_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Michigan_Central_FIPS_2202_Feet', tag='NAD_1983_StatePlane_Michigan_Central_FIPS_2202_Feet')
STD_ANON_24.NAD_1983_StatePlane_Michigan_North_FIPS_2111_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Michigan_North_FIPS_2111_Feet', tag='NAD_1983_StatePlane_Michigan_North_FIPS_2111_Feet')
STD_ANON_24.NAD_1983_StatePlane_Michigan_South_FIPS_2113_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Michigan_South_FIPS_2113_Feet', tag='NAD_1983_StatePlane_Michigan_South_FIPS_2113_Feet')
STD_ANON_24.NAD_1983_StatePlane_Minnesota_Central_FIPS_2202_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Minnesota_Central_FIPS_2202_Feet', tag='NAD_1983_StatePlane_Minnesota_Central_FIPS_2202_Feet')
STD_ANON_24.NAD_1983_StatePlane_Minnesota_North_FIPS_2201_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Minnesota_North_FIPS_2201_Feet', tag='NAD_1983_StatePlane_Minnesota_North_FIPS_2201_Feet')
STD_ANON_24.NAD_1983_StatePlane_Minnesota_South_FIPS_2203_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Minnesota_South_FIPS_2203_Feet', tag='NAD_1983_StatePlane_Minnesota_South_FIPS_2203_Feet')
STD_ANON_24.NAD_1983_StatePlane_Mississippi_East_FIPS_2301_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Mississippi_East_FIPS_2301_Feet', tag='NAD_1983_StatePlane_Mississippi_East_FIPS_2301_Feet')
STD_ANON_24.NAD_1983_StatePlane_Mississippi_West_FIPS_2302_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Mississippi_West_FIPS_2302_Feet', tag='NAD_1983_StatePlane_Mississippi_West_FIPS_2302_Feet')
STD_ANON_24.NAD_1983_StatePlane_Missouri_Central_FIPS_2402_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Missouri_Central_FIPS_2402_Feet', tag='NAD_1983_StatePlane_Missouri_Central_FIPS_2402_Feet')
STD_ANON_24.NAD_1983_StatePlane_Missouri_East_FIPS_2401_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Missouri_East_FIPS_2401_Feet', tag='NAD_1983_StatePlane_Missouri_East_FIPS_2401_Feet')
STD_ANON_24.NAD_1983_StatePlane_Missouri_West_FIPS_2403_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Missouri_West_FIPS_2403_Feet', tag='NAD_1983_StatePlane_Missouri_West_FIPS_2403_Feet')
STD_ANON_24.NAD_1983_StatePlane_Montana_FIPS_2500_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Montana_FIPS_2500_Feet', tag='NAD_1983_StatePlane_Montana_FIPS_2500_Feet')
STD_ANON_24.NAD_1983_StatePlane_Nebraska_FIPS_2600_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nebraska_FIPS_2600_Feet', tag='NAD_1983_StatePlane_Nebraska_FIPS_2600_Feet')
STD_ANON_24.NAD_1983_StatePlane_Nevada_Central_FIPS_2702_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nevada_Central_FIPS_2702_Feet', tag='NAD_1983_StatePlane_Nevada_Central_FIPS_2702_Feet')
STD_ANON_24.NAD_1983_StatePlane_Nevada_East_FIPS_2701_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nevada_East_FIPS_2701_Feet', tag='NAD_1983_StatePlane_Nevada_East_FIPS_2701_Feet')
STD_ANON_24.NAD_1983_StatePlane_Nevada_West_FIPS_2703_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Nevada_West_FIPS_2703_Feet', tag='NAD_1983_StatePlane_Nevada_West_FIPS_2703_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_Hampshire_FIPS_2800_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Hampshire_FIPS_2800_Feet', tag='NAD_1983_StatePlane_New_Hampshire_FIPS_2800_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_Jersey_FIPS_2900_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Jersey_FIPS_2900_Feet', tag='NAD_1983_StatePlane_New_Jersey_FIPS_2900_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002_Feet', tag='NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_Mexico_East_FIPS_3001_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Mexico_East_FIPS_3001_Feet', tag='NAD_1983_StatePlane_New_Mexico_East_FIPS_3001_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_Mexico_West_FIPS_3003_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_Mexico_West_FIPS_3003_Feet', tag='NAD_1983_StatePlane_New_Mexico_West_FIPS_3003_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_York_Central_FIPS_3102_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_Central_FIPS_3102_Feet', tag='NAD_1983_StatePlane_New_York_Central_FIPS_3102_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_York_East_FIPS_3101_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_East_FIPS_3101_Feet', tag='NAD_1983_StatePlane_New_York_East_FIPS_3101_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104_Feet', tag='NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104_Feet')
STD_ANON_24.NAD_1983_StatePlane_New_York_West_FIPS_3103_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_New_York_West_FIPS_3103_Feet', tag='NAD_1983_StatePlane_New_York_West_FIPS_3103_Feet')
STD_ANON_24.NAD_1983_StatePlane_North_Carolina_FIPS_3200_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_North_Carolina_FIPS_3200_Feet', tag='NAD_1983_StatePlane_North_Carolina_FIPS_3200_Feet')
STD_ANON_24.NAD_1983_StatePlane_North_Dakota_North_FIPS_3301_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_North_Dakota_North_FIPS_3301_Feet', tag='NAD_1983_StatePlane_North_Dakota_North_FIPS_3301_Feet')
STD_ANON_24.NAD_1983_StatePlane_North_Dakota_South_FIPS_3302_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_North_Dakota_South_FIPS_3302_Feet', tag='NAD_1983_StatePlane_North_Dakota_South_FIPS_3302_Feet')
STD_ANON_24.NAD_1983_StatePlane_Ohio_North_FIPS_3401_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Ohio_North_FIPS_3401_Feet', tag='NAD_1983_StatePlane_Ohio_North_FIPS_3401_Feet')
STD_ANON_24.NAD_1983_StatePlane_Ohio_South_FIPS_3402_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Ohio_South_FIPS_3402_Feet', tag='NAD_1983_StatePlane_Ohio_South_FIPS_3402_Feet')
STD_ANON_24.NAD_1983_StatePlane_Oklahoma_North_FIPS_3501_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oklahoma_North_FIPS_3501_Feet', tag='NAD_1983_StatePlane_Oklahoma_North_FIPS_3501_Feet')
STD_ANON_24.NAD_1983_StatePlane_Oklahoma_South_FIPS_3502_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oklahoma_South_FIPS_3502_Feet', tag='NAD_1983_StatePlane_Oklahoma_South_FIPS_3502_Feet')
STD_ANON_24.NAD_1983_StatePlane_Oregon_North_FIPS_3601_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oregon_North_FIPS_3601_Feet', tag='NAD_1983_StatePlane_Oregon_North_FIPS_3601_Feet')
STD_ANON_24.NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet', tag='NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet')
STD_ANON_24.NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet', tag='NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet')
STD_ANON_24.NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702_Feet', tag='NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702_Feet')
STD_ANON_24.NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200_Feet', tag='NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200_Feet')
STD_ANON_24.NAD_1983_StatePlane_Rhode_Island_FIPS_3800_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Rhode_Island_FIPS_3800_Feet', tag='NAD_1983_StatePlane_Rhode_Island_FIPS_3800_Feet')
STD_ANON_24.NAD_1983_StatePlane_South_Carolina_FIPS_3900_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_South_Carolina_FIPS_3900_Feet', tag='NAD_1983_StatePlane_South_Carolina_FIPS_3900_Feet')
STD_ANON_24.NAD_1983_StatePlane_South_Dakota_North_FIPS_4001_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_South_Dakota_North_FIPS_4001_Feet', tag='NAD_1983_StatePlane_South_Dakota_North_FIPS_4001_Feet')
STD_ANON_24.NAD_1983_StatePlane_South_Dakota_South_FIPS_4002_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_South_Dakota_South_FIPS_4002_Feet', tag='NAD_1983_StatePlane_South_Dakota_South_FIPS_4002_Feet')
STD_ANON_24.NAD_1983_StatePlane_Tennessee_FIPS_4100_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Tennessee_FIPS_4100_Feet', tag='NAD_1983_StatePlane_Tennessee_FIPS_4100_Feet')
STD_ANON_24.NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet', tag='NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet')
STD_ANON_24.NAD_1983_StatePlane_Texas_North_Central_FIPS_4202_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_North_Central_FIPS_4202_Feet', tag='NAD_1983_StatePlane_Texas_North_Central_FIPS_4202_Feet')
STD_ANON_24.NAD_1983_StatePlane_Texas_North_FIPS_4201_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_North_FIPS_4201_Feet', tag='NAD_1983_StatePlane_Texas_North_FIPS_4201_Feet')
STD_ANON_24.NAD_1983_StatePlane_Texas_South_Central_FIPS_4204_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_South_Central_FIPS_4204_Feet', tag='NAD_1983_StatePlane_Texas_South_Central_FIPS_4204_Feet')
STD_ANON_24.NAD_1983_StatePlane_Texas_South_FIPS_4205_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Texas_South_FIPS_4205_Feet', tag='NAD_1983_StatePlane_Texas_South_FIPS_4205_Feet')
STD_ANON_24.NAD_1983_StatePlane_Utah_Central_FIPS_4302_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Utah_Central_FIPS_4302_Feet', tag='NAD_1983_StatePlane_Utah_Central_FIPS_4302_Feet')
STD_ANON_24.NAD_1983_StatePlane_Utah_North_FIPS_4301_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Utah_North_FIPS_4301_Feet', tag='NAD_1983_StatePlane_Utah_North_FIPS_4301_Feet')
STD_ANON_24.NAD_1983_StatePlane_Utah_South_FIPS_4303_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Utah_South_FIPS_4303_Feet', tag='NAD_1983_StatePlane_Utah_South_FIPS_4303_Feet')
STD_ANON_24.NAD_1983_StatePlane_Vermont_FIPS_4400_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Vermont_FIPS_4400_Feet', tag='NAD_1983_StatePlane_Vermont_FIPS_4400_Feet')
STD_ANON_24.NAD_1983_StatePlane_Virginia_North_FIPS_4501_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Virginia_North_FIPS_4501_Feet', tag='NAD_1983_StatePlane_Virginia_North_FIPS_4501_Feet')
STD_ANON_24.NAD_1983_StatePlane_Virginia_South_FIPS_4502_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Virginia_South_FIPS_4502_Feet', tag='NAD_1983_StatePlane_Virginia_South_FIPS_4502_Feet')
STD_ANON_24.NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet', tag='NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet')
STD_ANON_24.NAD_1983_StatePlane_Washington_South_FIPS_4602_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Washington_South_FIPS_4602_Feet', tag='NAD_1983_StatePlane_Washington_South_FIPS_4602_Feet')
STD_ANON_24.NAD_1983_StatePlane_West_Virginia_North_FIPS_4701_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_West_Virginia_North_FIPS_4701_Feet', tag='NAD_1983_StatePlane_West_Virginia_North_FIPS_4701_Feet')
STD_ANON_24.NAD_1983_StatePlane_West_Virginia_South_FIPS_4702_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_West_Virginia_South_FIPS_4702_Feet', tag='NAD_1983_StatePlane_West_Virginia_South_FIPS_4702_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802_Feet', tag='NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wisconsin_North_FIPS_4801_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wisconsin_North_FIPS_4801_Feet', tag='NAD_1983_StatePlane_Wisconsin_North_FIPS_4801_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wisconsin_South_FIPS_4803_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wisconsin_South_FIPS_4803_Feet', tag='NAD_1983_StatePlane_Wisconsin_South_FIPS_4803_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902_Feet', tag='NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_East_FIPS_4901_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_East_FIPS_4901_Feet', tag='NAD_1983_StatePlane_Wyoming_East_FIPS_4901_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903_Feet', tag='NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903_Feet')
STD_ANON_24.NAD_1983_StatePlane_Wyoming_West_FIPS_4904_Feet = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_StatePlane_Wyoming_West_FIPS_4904_Feet', tag='NAD_1983_StatePlane_Wyoming_West_FIPS_4904_Feet')
STD_ANON_24.NAD_1983_HARN_StatePlane_Alabama_East_FIPS_0101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Alabama_East_FIPS_0101', tag='NAD_1983_HARN_StatePlane_Alabama_East_FIPS_0101')
STD_ANON_24.NAD_1983_HARN_StatePlane_Alabama_West_FIPS_0102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Alabama_West_FIPS_0102', tag='NAD_1983_HARN_StatePlane_Alabama_West_FIPS_0102')
STD_ANON_24.NAD_1983_HARN_StatePlane_Arizona_Central_FIPS_0202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Arizona_Central_FIPS_0202', tag='NAD_1983_HARN_StatePlane_Arizona_Central_FIPS_0202')
STD_ANON_24.NAD_1983_HARN_StatePlane_Arizona_East_FIPS_0201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Arizona_East_FIPS_0201', tag='NAD_1983_HARN_StatePlane_Arizona_East_FIPS_0201')
STD_ANON_24.NAD_1983_HARN_StatePlane_Arizona_West_FIPS_0203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Arizona_West_FIPS_0203', tag='NAD_1983_HARN_StatePlane_Arizona_West_FIPS_0203')
STD_ANON_24.NAD_1983_HARN_StatePlane_California_I_FIPS_0401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_California_I_FIPS_0401', tag='NAD_1983_HARN_StatePlane_California_I_FIPS_0401')
STD_ANON_24.NAD_1983_HARN_StatePlane_California_II_FIPS_0402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_California_II_FIPS_0402', tag='NAD_1983_HARN_StatePlane_California_II_FIPS_0402')
STD_ANON_24.NAD_1983_HARN_StatePlane_California_III_FIPS_0403 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_California_III_FIPS_0403', tag='NAD_1983_HARN_StatePlane_California_III_FIPS_0403')
STD_ANON_24.NAD_1983_HARN_StatePlane_California_IV_FIPS_0404 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_California_IV_FIPS_0404', tag='NAD_1983_HARN_StatePlane_California_IV_FIPS_0404')
STD_ANON_24.NAD_1983_HARN_StatePlane_California_V_FIPS_0405 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_California_V_FIPS_0405', tag='NAD_1983_HARN_StatePlane_California_V_FIPS_0405')
STD_ANON_24.NAD_1983_HARN_StatePlane_California_VI_FIPS_0406 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_California_VI_FIPS_0406', tag='NAD_1983_HARN_StatePlane_California_VI_FIPS_0406')
STD_ANON_24.NAD_1983_HARN_StatePlane_Colorado_Central_FIPS_0502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Colorado_Central_FIPS_0502', tag='NAD_1983_HARN_StatePlane_Colorado_Central_FIPS_0502')
STD_ANON_24.NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501', tag='NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501')
STD_ANON_24.NAD_1983_HARN_StatePlane_Colorado_South_FIPS_0503 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Colorado_South_FIPS_0503', tag='NAD_1983_HARN_StatePlane_Colorado_South_FIPS_0503')
STD_ANON_24.NAD_1983_HARN_StatePlane_Connecticut_FIPS_0600 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Connecticut_FIPS_0600', tag='NAD_1983_HARN_StatePlane_Connecticut_FIPS_0600')
STD_ANON_24.NAD_1983_HARN_StatePlane_Delaware_FIPS_0700 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Delaware_FIPS_0700', tag='NAD_1983_HARN_StatePlane_Delaware_FIPS_0700')
STD_ANON_24.NAD_1983_HARN_StatePlane_Florida_East_FIPS_0901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Florida_East_FIPS_0901', tag='NAD_1983_HARN_StatePlane_Florida_East_FIPS_0901')
STD_ANON_24.NAD_1983_HARN_StatePlane_Florida_North_FIPS_0903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Florida_North_FIPS_0903', tag='NAD_1983_HARN_StatePlane_Florida_North_FIPS_0903')
STD_ANON_24.NAD_1983_HARN_StatePlane_Florida_West_FIPS_0902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Florida_West_FIPS_0902', tag='NAD_1983_HARN_StatePlane_Florida_West_FIPS_0902')
STD_ANON_24.NAD_1983_HARN_StatePlane_Georgia_East_FIPS_1001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Georgia_East_FIPS_1001', tag='NAD_1983_HARN_StatePlane_Georgia_East_FIPS_1001')
STD_ANON_24.NAD_1983_HARN_StatePlane_Georgia_West_FIPS_1002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Georgia_West_FIPS_1002', tag='NAD_1983_HARN_StatePlane_Georgia_West_FIPS_1002')
STD_ANON_24.NAD_1983_HARN_StatePlane_Hawaii_1_FIPS_5101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Hawaii_1_FIPS_5101', tag='NAD_1983_HARN_StatePlane_Hawaii_1_FIPS_5101')
STD_ANON_24.NAD_1983_HARN_StatePlane_Hawaii_2_FIPS_5102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Hawaii_2_FIPS_5102', tag='NAD_1983_HARN_StatePlane_Hawaii_2_FIPS_5102')
STD_ANON_24.NAD_1983_HARN_StatePlane_Hawaii_3_FIPS_5103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Hawaii_3_FIPS_5103', tag='NAD_1983_HARN_StatePlane_Hawaii_3_FIPS_5103')
STD_ANON_24.NAD_1983_HARN_StatePlane_Hawaii_4_FIPS_5104 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Hawaii_4_FIPS_5104', tag='NAD_1983_HARN_StatePlane_Hawaii_4_FIPS_5104')
STD_ANON_24.NAD_1983_HARN_StatePlane_Hawaii_5_FIPS_5105 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Hawaii_5_FIPS_5105', tag='NAD_1983_HARN_StatePlane_Hawaii_5_FIPS_5105')
STD_ANON_24.NAD_1983_HARN_StatePlane_Idaho_Central_FIPS_1102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Idaho_Central_FIPS_1102', tag='NAD_1983_HARN_StatePlane_Idaho_Central_FIPS_1102')
STD_ANON_24.NAD_1983_HARN_StatePlane_Idaho_East_FIPS_1101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Idaho_East_FIPS_1101', tag='NAD_1983_HARN_StatePlane_Idaho_East_FIPS_1101')
STD_ANON_24.NAD_1983_HARN_StatePlane_Idaho_West_FIPS_1103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Idaho_West_FIPS_1103', tag='NAD_1983_HARN_StatePlane_Idaho_West_FIPS_1103')
STD_ANON_24.NAD_1983_HARN_StatePlane_Illinois_East_FIPS_1201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Illinois_East_FIPS_1201', tag='NAD_1983_HARN_StatePlane_Illinois_East_FIPS_1201')
STD_ANON_24.NAD_1983_HARN_StatePlane_Illinois_West_FIPS_1202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Illinois_West_FIPS_1202', tag='NAD_1983_HARN_StatePlane_Illinois_West_FIPS_1202')
STD_ANON_24.NAD_1983_HARN_StatePlane_Indiana_East_FIPS_1301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Indiana_East_FIPS_1301', tag='NAD_1983_HARN_StatePlane_Indiana_East_FIPS_1301')
STD_ANON_24.NAD_1983_HARN_StatePlane_Indiana_West_FIPS_1302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Indiana_West_FIPS_1302', tag='NAD_1983_HARN_StatePlane_Indiana_West_FIPS_1302')
STD_ANON_24.NAD_1983_HARN_StatePlane_Kansas_North_FIPS_1501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Kansas_North_FIPS_1501', tag='NAD_1983_HARN_StatePlane_Kansas_North_FIPS_1501')
STD_ANON_24.NAD_1983_HARN_StatePlane_Kansas_South_FIPS_1502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Kansas_South_FIPS_1502', tag='NAD_1983_HARN_StatePlane_Kansas_South_FIPS_1502')
STD_ANON_24.NAD_1983_HARN_StatePlane_Kentucky_North_FIPS_1601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Kentucky_North_FIPS_1601', tag='NAD_1983_HARN_StatePlane_Kentucky_North_FIPS_1601')
STD_ANON_24.NAD_1983_HARN_StatePlane_Kentucky_South_FIPS_1602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Kentucky_South_FIPS_1602', tag='NAD_1983_HARN_StatePlane_Kentucky_South_FIPS_1602')
STD_ANON_24.NAD_1983_HARN_StatePlane_Louisiana_North_FIPS_1701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Louisiana_North_FIPS_1701', tag='NAD_1983_HARN_StatePlane_Louisiana_North_FIPS_1701')
STD_ANON_24.NAD_1983_HARN_StatePlane_Louisiana_South_FIPS_1702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Louisiana_South_FIPS_1702', tag='NAD_1983_HARN_StatePlane_Louisiana_South_FIPS_1702')
STD_ANON_24.NAD_1983_HARN_StatePlane_Maine_East_FIPS_1801 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Maine_East_FIPS_1801', tag='NAD_1983_HARN_StatePlane_Maine_East_FIPS_1801')
STD_ANON_24.NAD_1983_HARN_StatePlane_Maine_West_FIPS_1802 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Maine_West_FIPS_1802', tag='NAD_1983_HARN_StatePlane_Maine_West_FIPS_1802')
STD_ANON_24.NAD_1983_HARN_StatePlane_Maryland_FIPS_1900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Maryland_FIPS_1900', tag='NAD_1983_HARN_StatePlane_Maryland_FIPS_1900')
STD_ANON_24.NAD_1983_HARN_StatePlane_Massachusetts_Island_FIPS_2002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Massachusetts_Island_FIPS_2002', tag='NAD_1983_HARN_StatePlane_Massachusetts_Island_FIPS_2002')
STD_ANON_24.NAD_1983_HARN_StatePlane_Massachusetts_Mainland_FIPS_2001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Massachusetts_Mainland_FIPS_2001', tag='NAD_1983_HARN_StatePlane_Massachusetts_Mainland_FIPS_2001')
STD_ANON_24.NAD_1983_HARN_StatePlane_Michigan_Central_FIPS_2202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Michigan_Central_FIPS_2202', tag='NAD_1983_HARN_StatePlane_Michigan_Central_FIPS_2202')
STD_ANON_24.NAD_1983_HARN_StatePlane_Michigan_North_FIPS_2111 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Michigan_North_FIPS_2111', tag='NAD_1983_HARN_StatePlane_Michigan_North_FIPS_2111')
STD_ANON_24.NAD_1983_HARN_StatePlane_Michigan_South_FIPS_2113 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Michigan_South_FIPS_2113', tag='NAD_1983_HARN_StatePlane_Michigan_South_FIPS_2113')
STD_ANON_24.NAD_1983_HARN_StatePlane_Mississippi_East_FIPS_2301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Mississippi_East_FIPS_2301', tag='NAD_1983_HARN_StatePlane_Mississippi_East_FIPS_2301')
STD_ANON_24.NAD_1983_HARN_StatePlane_Mississippi_West_FIPS_2302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Mississippi_West_FIPS_2302', tag='NAD_1983_HARN_StatePlane_Mississippi_West_FIPS_2302')
STD_ANON_24.NAD_1983_HARN_StatePlane_Montana_FIPS_2500 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Montana_FIPS_2500', tag='NAD_1983_HARN_StatePlane_Montana_FIPS_2500')
STD_ANON_24.NAD_1983_HARN_StatePlane_Nebraska_FIPS_2600 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Nebraska_FIPS_2600', tag='NAD_1983_HARN_StatePlane_Nebraska_FIPS_2600')
STD_ANON_24.NAD_1983_HARN_StatePlane_Nevada_Central_FIPS_2702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Nevada_Central_FIPS_2702', tag='NAD_1983_HARN_StatePlane_Nevada_Central_FIPS_2702')
STD_ANON_24.NAD_1983_HARN_StatePlane_Nevada_East_FIPS_2701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Nevada_East_FIPS_2701', tag='NAD_1983_HARN_StatePlane_Nevada_East_FIPS_2701')
STD_ANON_24.NAD_1983_HARN_StatePlane_Nevada_West_FIPS_2703 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Nevada_West_FIPS_2703', tag='NAD_1983_HARN_StatePlane_Nevada_West_FIPS_2703')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_Hampshire_FIPS_2800 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_Hampshire_FIPS_2800', tag='NAD_1983_HARN_StatePlane_New_Hampshire_FIPS_2800')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_Jersey_FIPS_2900 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_Jersey_FIPS_2900', tag='NAD_1983_HARN_StatePlane_New_Jersey_FIPS_2900')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_Mexico_Central_FIPS_3002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_Mexico_Central_FIPS_3002', tag='NAD_1983_HARN_StatePlane_New_Mexico_Central_FIPS_3002')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_Mexico_East_FIPS_3001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_Mexico_East_FIPS_3001', tag='NAD_1983_HARN_StatePlane_New_Mexico_East_FIPS_3001')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_Mexico_West_FIPS_3003 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_Mexico_West_FIPS_3003', tag='NAD_1983_HARN_StatePlane_New_Mexico_West_FIPS_3003')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_York_Central_FIPS_3102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_York_Central_FIPS_3102', tag='NAD_1983_HARN_StatePlane_New_York_Central_FIPS_3102')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_York_East_FIPS_3101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_York_East_FIPS_3101', tag='NAD_1983_HARN_StatePlane_New_York_East_FIPS_3101')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_York_Long_Island_FIPS_3104 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_York_Long_Island_FIPS_3104', tag='NAD_1983_HARN_StatePlane_New_York_Long_Island_FIPS_3104')
STD_ANON_24.NAD_1983_HARN_StatePlane_New_York_West_FIPS_3103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_New_York_West_FIPS_3103', tag='NAD_1983_HARN_StatePlane_New_York_West_FIPS_3103')
STD_ANON_24.NAD_1983_HARN_StatePlane_North_Dakota_North_FIPS_3301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_North_Dakota_North_FIPS_3301', tag='NAD_1983_HARN_StatePlane_North_Dakota_North_FIPS_3301')
STD_ANON_24.NAD_1983_HARN_StatePlane_North_Dakota_South_FIPS_3302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_North_Dakota_South_FIPS_3302', tag='NAD_1983_HARN_StatePlane_North_Dakota_South_FIPS_3302')
STD_ANON_24.NAD_1983_HARN_StatePlane_Ohio_North_FIPS_3401 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Ohio_North_FIPS_3401', tag='NAD_1983_HARN_StatePlane_Ohio_North_FIPS_3401')
STD_ANON_24.NAD_1983_HARN_StatePlane_Ohio_South_FIPS_3402 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Ohio_South_FIPS_3402', tag='NAD_1983_HARN_StatePlane_Ohio_South_FIPS_3402')
STD_ANON_24.NAD_1983_HARN_StatePlane_Oklahoma_North_FIPS_3501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Oklahoma_North_FIPS_3501', tag='NAD_1983_HARN_StatePlane_Oklahoma_North_FIPS_3501')
STD_ANON_24.NAD_1983_HARN_StatePlane_Oklahoma_South_FIPS_3502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Oklahoma_South_FIPS_3502', tag='NAD_1983_HARN_StatePlane_Oklahoma_South_FIPS_3502')
STD_ANON_24.NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601', tag='NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601')
STD_ANON_24.NAD_1983_HARN_StatePlane_Oregon_South_FIPS_3602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Oregon_South_FIPS_3602', tag='NAD_1983_HARN_StatePlane_Oregon_South_FIPS_3602')
STD_ANON_24.NAD_1983_HARN_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200', tag='NAD_1983_HARN_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200')
STD_ANON_24.NAD_1983_HARN_StatePlane_Rhode_Island_FIPS_3800 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Rhode_Island_FIPS_3800', tag='NAD_1983_HARN_StatePlane_Rhode_Island_FIPS_3800')
STD_ANON_24.NAD_1983_HARN_StatePlane_South_Dakota_North_FIPS_4001 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_South_Dakota_North_FIPS_4001', tag='NAD_1983_HARN_StatePlane_South_Dakota_North_FIPS_4001')
STD_ANON_24.NAD_1983_HARN_StatePlane_South_Dakota_South_FIPS_4002 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_South_Dakota_South_FIPS_4002', tag='NAD_1983_HARN_StatePlane_South_Dakota_South_FIPS_4002')
STD_ANON_24.NAD_1983_HARN_StatePlane_Tennessee_FIPS_4100 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Tennessee_FIPS_4100', tag='NAD_1983_HARN_StatePlane_Tennessee_FIPS_4100')
STD_ANON_24.NAD_1983_HARN_StatePlane_Texas_Central_FIPS_4203 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Texas_Central_FIPS_4203', tag='NAD_1983_HARN_StatePlane_Texas_Central_FIPS_4203')
STD_ANON_24.NAD_1983_HARN_StatePlane_Texas_North_Central_FIPS_4202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Texas_North_Central_FIPS_4202', tag='NAD_1983_HARN_StatePlane_Texas_North_Central_FIPS_4202')
STD_ANON_24.NAD_1983_HARN_StatePlane_Texas_North_FIPS_4201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Texas_North_FIPS_4201', tag='NAD_1983_HARN_StatePlane_Texas_North_FIPS_4201')
STD_ANON_24.NAD_1983_HARN_StatePlane_Texas_South_Central_FIPS_4204 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Texas_South_Central_FIPS_4204', tag='NAD_1983_HARN_StatePlane_Texas_South_Central_FIPS_4204')
STD_ANON_24.NAD_1983_HARN_StatePlane_Texas_South_FIPS_4205 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Texas_South_FIPS_4205', tag='NAD_1983_HARN_StatePlane_Texas_South_FIPS_4205')
STD_ANON_24.NAD_1983_HARN_StatePlane_Utah_Central_FIPS_4302 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Utah_Central_FIPS_4302', tag='NAD_1983_HARN_StatePlane_Utah_Central_FIPS_4302')
STD_ANON_24.NAD_1983_HARN_StatePlane_Utah_North_FIPS_4301 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Utah_North_FIPS_4301', tag='NAD_1983_HARN_StatePlane_Utah_North_FIPS_4301')
STD_ANON_24.NAD_1983_HARN_StatePlane_Utah_South_FIPS_4303 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Utah_South_FIPS_4303', tag='NAD_1983_HARN_StatePlane_Utah_South_FIPS_4303')
STD_ANON_24.NAD_1983_HARN_StatePlane_Vermont_FIPS_4400 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Vermont_FIPS_4400', tag='NAD_1983_HARN_StatePlane_Vermont_FIPS_4400')
STD_ANON_24.NAD_1983_HARN_StatePlane_Virginia_North_FIPS_4501 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Virginia_North_FIPS_4501', tag='NAD_1983_HARN_StatePlane_Virginia_North_FIPS_4501')
STD_ANON_24.NAD_1983_HARN_StatePlane_Virginia_South_FIPS_4502 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Virginia_South_FIPS_4502', tag='NAD_1983_HARN_StatePlane_Virginia_South_FIPS_4502')
STD_ANON_24.NAD_1983_HARN_StatePlane_Washington_North_FIPS_4601 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Washington_North_FIPS_4601', tag='NAD_1983_HARN_StatePlane_Washington_North_FIPS_4601')
STD_ANON_24.NAD_1983_HARN_StatePlane_Washington_South_FIPS_4602 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Washington_South_FIPS_4602', tag='NAD_1983_HARN_StatePlane_Washington_South_FIPS_4602')
STD_ANON_24.NAD_1983_HARN_StatePlane_West_Virginia_North_FIPS_4701 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_West_Virginia_North_FIPS_4701', tag='NAD_1983_HARN_StatePlane_West_Virginia_North_FIPS_4701')
STD_ANON_24.NAD_1983_HARN_StatePlane_West_Virginia_South_FIPS_4702 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_West_Virginia_South_FIPS_4702', tag='NAD_1983_HARN_StatePlane_West_Virginia_South_FIPS_4702')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wisconsin_Central_FIPS_4802 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wisconsin_Central_FIPS_4802', tag='NAD_1983_HARN_StatePlane_Wisconsin_Central_FIPS_4802')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wisconsin_North_FIPS_4801 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wisconsin_North_FIPS_4801', tag='NAD_1983_HARN_StatePlane_Wisconsin_North_FIPS_4801')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wisconsin_South_FIPS_4803 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wisconsin_South_FIPS_4803', tag='NAD_1983_HARN_StatePlane_Wisconsin_South_FIPS_4803')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wyoming_East_FIPS_4901 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wyoming_East_FIPS_4901', tag='NAD_1983_HARN_StatePlane_Wyoming_East_FIPS_4901')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wyoming_East_Central_FIPS_4902 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wyoming_East_Central_FIPS_4902', tag='NAD_1983_HARN_StatePlane_Wyoming_East_Central_FIPS_4902')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wyoming_West_Central_FIPS_4903 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wyoming_West_Central_FIPS_4903', tag='NAD_1983_HARN_StatePlane_Wyoming_West_Central_FIPS_4903')
STD_ANON_24.NAD_1983_HARN_StatePlane_Wyoming_West_FIPS_4904 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_StatePlane_Wyoming_West_FIPS_4904', tag='NAD_1983_HARN_StatePlane_Wyoming_West_FIPS_4904')
STD_ANON_24.American_Samoa_1962_StatePlane_American_Samoa_FIPS_5300 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='American_Samoa_1962_StatePlane_American_Samoa_FIPS_5300', tag='American_Samoa_1962_StatePlane_American_Samoa_FIPS_5300')
STD_ANON_24.NAD_1983_HARN_Guam_Map_Grid_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_Guam_Map_Grid', tag='NAD_1983_HARN_Guam_Map_Grid_')
STD_ANON_24.NAD_1983_HARN_UTM_Zone_2S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_UTM_Zone_2S', tag='NAD_1983_HARN_UTM_Zone_2S')
STD_ANON_24.NAD_Michigan_StatePlane_Michigan_Central_FIPS_2112 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_Michigan_StatePlane_Michigan_Central_FIPS_2112', tag='NAD_Michigan_StatePlane_Michigan_Central_FIPS_2112')
STD_ANON_24.NAD_Michigan_StatePlane_Michigan_Central_Old_FIPS_2102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_Michigan_StatePlane_Michigan_Central_Old_FIPS_2102', tag='NAD_Michigan_StatePlane_Michigan_Central_Old_FIPS_2102')
STD_ANON_24.NAD_Michigan_StatePlane_Michigan_East_Old_FIPS_2101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_Michigan_StatePlane_Michigan_East_Old_FIPS_2101', tag='NAD_Michigan_StatePlane_Michigan_East_Old_FIPS_2101')
STD_ANON_24.NAD_Michigan_StatePlane_Michigan_North_FIPS_2111 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_Michigan_StatePlane_Michigan_North_FIPS_2111', tag='NAD_Michigan_StatePlane_Michigan_North_FIPS_2111')
STD_ANON_24.NAD_Michigan_StatePlane_Michigan_South_FIPS_2113 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_Michigan_StatePlane_Michigan_South_FIPS_2113', tag='NAD_Michigan_StatePlane_Michigan_South_FIPS_2113')
STD_ANON_24.NAD_Michigan_StatePlane_Michigan_West_Old_FIPS_2103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_Michigan_StatePlane_Michigan_West_Old_FIPS_2103', tag='NAD_Michigan_StatePlane_Michigan_West_Old_FIPS_2103')
STD_ANON_24.Old_Hawaiian_StatePlane_Hawaii_1_FIPS_5101 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_StatePlane_Hawaii_1_FIPS_5101', tag='Old_Hawaiian_StatePlane_Hawaii_1_FIPS_5101')
STD_ANON_24.Old_Hawaiian_StatePlane_Hawaii_2_FIPS_5102 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_StatePlane_Hawaii_2_FIPS_5102', tag='Old_Hawaiian_StatePlane_Hawaii_2_FIPS_5102')
STD_ANON_24.Old_Hawaiian_StatePlane_Hawaii_3_FIPS_5103 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_StatePlane_Hawaii_3_FIPS_5103', tag='Old_Hawaiian_StatePlane_Hawaii_3_FIPS_5103')
STD_ANON_24.Old_Hawaiian_StatePlane_Hawaii_4_FIPS_5104 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_StatePlane_Hawaii_4_FIPS_5104', tag='Old_Hawaiian_StatePlane_Hawaii_4_FIPS_5104')
STD_ANON_24.Old_Hawaiian_StatePlane_Hawaii_5_FIPS_5105 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_StatePlane_Hawaii_5_FIPS_5105', tag='Old_Hawaiian_StatePlane_Hawaii_5_FIPS_5105')
STD_ANON_24.Puerto_Rico_StatePlane_Puerto_Rico_FIPS_5201 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Puerto_Rico_StatePlane_Puerto_Rico_FIPS_5201', tag='Puerto_Rico_StatePlane_Puerto_Rico_FIPS_5201')
STD_ANON_24.Puerto_Rico_StatePlane_Virgin_Islands_St_Croix_FIPS_5202 = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Puerto_Rico_StatePlane_Virgin_Islands_St_Croix_FIPS_5202', tag='Puerto_Rico_StatePlane_Virgin_Islands_St_Croix_FIPS_5202')
STD_ANON_24.NAD_1927_UTM_Zone_10N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_10N', tag='NAD_1927_UTM_Zone_10N')
STD_ANON_24.NAD_1927_UTM_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_11N', tag='NAD_1927_UTM_Zone_11N')
STD_ANON_24.NAD_1927_UTM_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_12N', tag='NAD_1927_UTM_Zone_12N')
STD_ANON_24.NAD_1927_UTM_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_13N', tag='NAD_1927_UTM_Zone_13N')
STD_ANON_24.NAD_1927_UTM_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_14N', tag='NAD_1927_UTM_Zone_14N')
STD_ANON_24.NAD_1927_UTM_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_15N', tag='NAD_1927_UTM_Zone_15N')
STD_ANON_24.NAD_1927_UTM_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_16N', tag='NAD_1927_UTM_Zone_16N')
STD_ANON_24.NAD_1927_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_17N', tag='NAD_1927_UTM_Zone_17N')
STD_ANON_24.NAD_1927_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_18N', tag='NAD_1927_UTM_Zone_18N')
STD_ANON_24.NAD_1927_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_19N', tag='NAD_1927_UTM_Zone_19N')
STD_ANON_24.NAD_1927_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_20N', tag='NAD_1927_UTM_Zone_20N')
STD_ANON_24.NAD_1927_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_21N', tag='NAD_1927_UTM_Zone_21N')
STD_ANON_24.NAD_1927_UTM_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_22N', tag='NAD_1927_UTM_Zone_22N')
STD_ANON_24.NAD_1927_UTM_Zone_3N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_3N', tag='NAD_1927_UTM_Zone_3N')
STD_ANON_24.NAD_1927_UTM_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_4N', tag='NAD_1927_UTM_Zone_4N')
STD_ANON_24.NAD_1927_UTM_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_5N', tag='NAD_1927_UTM_Zone_5N')
STD_ANON_24.NAD_1927_UTM_Zone_6N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_6N', tag='NAD_1927_UTM_Zone_6N')
STD_ANON_24.NAD_1927_UTM_Zone_7N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_7N', tag='NAD_1927_UTM_Zone_7N')
STD_ANON_24.NAD_1927_UTM_Zone_8N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_8N', tag='NAD_1927_UTM_Zone_8N')
STD_ANON_24.NAD_1927_UTM_Zone_9N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_UTM_Zone_9N', tag='NAD_1927_UTM_Zone_9N')
STD_ANON_24.NAD_1983_UTM_Zone_10N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_10N', tag='NAD_1983_UTM_Zone_10N')
STD_ANON_24.NAD_1983_UTM_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_11N', tag='NAD_1983_UTM_Zone_11N')
STD_ANON_24.NAD_1983_UTM_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_12N', tag='NAD_1983_UTM_Zone_12N')
STD_ANON_24.NAD_1983_UTM_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_13N', tag='NAD_1983_UTM_Zone_13N')
STD_ANON_24.NAD_1983_UTM_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_14N', tag='NAD_1983_UTM_Zone_14N')
STD_ANON_24.NAD_1983_UTM_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_15N', tag='NAD_1983_UTM_Zone_15N')
STD_ANON_24.NAD_1983_UTM_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_16N', tag='NAD_1983_UTM_Zone_16N')
STD_ANON_24.NAD_1983_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_17N', tag='NAD_1983_UTM_Zone_17N')
STD_ANON_24.NAD_1983_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_18N', tag='NAD_1983_UTM_Zone_18N')
STD_ANON_24.NAD_1983_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_19N', tag='NAD_1983_UTM_Zone_19N')
STD_ANON_24.NAD_1983_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_20N', tag='NAD_1983_UTM_Zone_20N')
STD_ANON_24.NAD_1983_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_21N', tag='NAD_1983_UTM_Zone_21N')
STD_ANON_24.NAD_1983_UTM_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_22N', tag='NAD_1983_UTM_Zone_22N')
STD_ANON_24.NAD_1983_UTM_Zone_23N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_23N', tag='NAD_1983_UTM_Zone_23N')
STD_ANON_24.NAD_1983_UTM_Zone_3N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_3N', tag='NAD_1983_UTM_Zone_3N')
STD_ANON_24.NAD_1983_UTM_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_4N', tag='NAD_1983_UTM_Zone_4N')
STD_ANON_24.NAD_1983_UTM_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_5N', tag='NAD_1983_UTM_Zone_5N')
STD_ANON_24.NAD_1983_UTM_Zone_6N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_6N', tag='NAD_1983_UTM_Zone_6N')
STD_ANON_24.NAD_1983_UTM_Zone_7N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_7N', tag='NAD_1983_UTM_Zone_7N')
STD_ANON_24.NAD_1983_UTM_Zone_8N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_8N', tag='NAD_1983_UTM_Zone_8N')
STD_ANON_24.NAD_1983_UTM_Zone_9N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_UTM_Zone_9N', tag='NAD_1983_UTM_Zone_9N')
STD_ANON_24.Abidjan_1987_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Abidjan_1987_UTM_Zone_29N', tag='Abidjan_1987_UTM_Zone_29N')
STD_ANON_24.Abidjan_1987_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Abidjan_1987_UTM_Zone_30N', tag='Abidjan_1987_UTM_Zone_30N')
STD_ANON_24.Adindan_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Adindan_UTM_Zone_37N', tag='Adindan_UTM_Zone_37N')
STD_ANON_24.Adindan_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Adindan_UTM_Zone_38N', tag='Adindan_UTM_Zone_38N')
STD_ANON_24.Afgooye_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Afgooye_UTM_Zone_38N', tag='Afgooye_UTM_Zone_38N')
STD_ANON_24.Afgooye_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Afgooye_UTM_Zone_39N', tag='Afgooye_UTM_Zone_39N')
STD_ANON_24.Ain_el_Abd_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Ain_el_Abd_UTM_Zone_37N', tag='Ain_el_Abd_UTM_Zone_37N')
STD_ANON_24.Ain_el_Abd_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Ain_el_Abd_UTM_Zone_38N', tag='Ain_el_Abd_UTM_Zone_38N')
STD_ANON_24.Ain_el_Abd_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Ain_el_Abd_UTM_Zone_39N', tag='Ain_el_Abd_UTM_Zone_39N')
STD_ANON_24.Aratu_UTM_Zone_22S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Aratu_UTM_Zone_22S', tag='Aratu_UTM_Zone_22S')
STD_ANON_24.Aratu_UTM_Zone_23S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Aratu_UTM_Zone_23S', tag='Aratu_UTM_Zone_23S')
STD_ANON_24.Aratu_UTM_Zone_24S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Aratu_UTM_Zone_24S', tag='Aratu_UTM_Zone_24S')
STD_ANON_24.Arc_1950_UTM_Zone_34S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1950_UTM_Zone_34S', tag='Arc_1950_UTM_Zone_34S')
STD_ANON_24.Arc_1950_UTM_Zone_35S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1950_UTM_Zone_35S', tag='Arc_1950_UTM_Zone_35S')
STD_ANON_24.Arc_1950_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1950_UTM_Zone_36S', tag='Arc_1950_UTM_Zone_36S')
STD_ANON_24.Arc_1960_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1960_UTM_Zone_35N', tag='Arc_1960_UTM_Zone_35N')
STD_ANON_24.Arc_1960_UTM_Zone_35S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1960_UTM_Zone_35S', tag='Arc_1960_UTM_Zone_35S')
STD_ANON_24.Arc_1960_UTM_Zone_36N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1960_UTM_Zone_36N', tag='Arc_1960_UTM_Zone_36N')
STD_ANON_24.Arc_1960_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1960_UTM_Zone_36S', tag='Arc_1960_UTM_Zone_36S')
STD_ANON_24.Arc_1960_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1960_UTM_Zone_37N', tag='Arc_1960_UTM_Zone_37N')
STD_ANON_24.Arc_1960_UTM_Zone_37S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Arc_1960_UTM_Zone_37S', tag='Arc_1960_UTM_Zone_37S')
STD_ANON_24.ATS_1977_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ATS_1977_UTM_Zone_19N', tag='ATS_1977_UTM_Zone_19N')
STD_ANON_24.ATS_1977_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ATS_1977_UTM_Zone_20N', tag='ATS_1977_UTM_Zone_20N')
STD_ANON_24.Batavia_UTM_Zone_48S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Batavia_UTM_Zone_48S', tag='Batavia_UTM_Zone_48S')
STD_ANON_24.Batavia_UTM_Zone_49S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Batavia_UTM_Zone_49S', tag='Batavia_UTM_Zone_49S')
STD_ANON_24.Batavia_UTM_Zone_50S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Batavia_UTM_Zone_50S', tag='Batavia_UTM_Zone_50S')
STD_ANON_24.Bissau_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Bissau_UTM_Zone_28N', tag='Bissau_UTM_Zone_28N')
STD_ANON_24.Bogota_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Bogota_UTM_Zone_17N', tag='Bogota_UTM_Zone_17N')
STD_ANON_24.Bogota_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Bogota_UTM_Zone_18N', tag='Bogota_UTM_Zone_18N')
STD_ANON_24.Camacupa_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Camacupa_UTM_Zone_32S', tag='Camacupa_UTM_Zone_32S')
STD_ANON_24.Camacupa_UTM_Zone_33S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Camacupa_UTM_Zone_33S', tag='Camacupa_UTM_Zone_33S')
STD_ANON_24.Cape_UTM_Zone_34S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Cape_UTM_Zone_34S', tag='Cape_UTM_Zone_34S')
STD_ANON_24.Cape_UTM_Zone_35S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Cape_UTM_Zone_35S', tag='Cape_UTM_Zone_35S')
STD_ANON_24.Cape_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Cape_UTM_Zone_36S', tag='Cape_UTM_Zone_36S')
STD_ANON_24.Carthage_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Carthage_UTM_Zone_32N', tag='Carthage_UTM_Zone_32N')
STD_ANON_24.Conakry_1905_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Conakry_1905_UTM_Zone_28N', tag='Conakry_1905_UTM_Zone_28N')
STD_ANON_24.Conakry_1905_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Conakry_1905_UTM_Zone_29N', tag='Conakry_1905_UTM_Zone_29N')
STD_ANON_24.Corrego_Alegre_UTM_Zone_23S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Corrego_Alegre_UTM_Zone_23S', tag='Corrego_Alegre_UTM_Zone_23S')
STD_ANON_24.Corrego_Alegre_UTM_Zone_24S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Corrego_Alegre_UTM_Zone_24S', tag='Corrego_Alegre_UTM_Zone_24S')
STD_ANON_24.Dabola_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Dabola_UTM_Zone_28N', tag='Dabola_UTM_Zone_28N')
STD_ANON_24.Dabola_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Dabola_UTM_Zone_29N', tag='Dabola_UTM_Zone_29N')
STD_ANON_24.Datum_73_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Datum_73_UTM_Zone_29N', tag='Datum_73_UTM_Zone_29N')
STD_ANON_24.Douala_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Douala_UTM_Zone_32N', tag='Douala_UTM_Zone_32N')
STD_ANON_24.ED_1950_ED77_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_ED77_UTM_Zone_38N', tag='ED_1950_ED77_UTM_Zone_38N')
STD_ANON_24.ED_1950_ED77_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_ED77_UTM_Zone_39N', tag='ED_1950_ED77_UTM_Zone_39N')
STD_ANON_24.ED_1950_ED77_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_ED77_UTM_Zone_40N', tag='ED_1950_ED77_UTM_Zone_40N')
STD_ANON_24.ED_1950_ED77_UTM_Zone_41N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_ED77_UTM_Zone_41N', tag='ED_1950_ED77_UTM_Zone_41N')
STD_ANON_24.ELD_1979_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_UTM_Zone_32N', tag='ELD_1979_UTM_Zone_32N')
STD_ANON_24.ELD_1979_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_UTM_Zone_33N', tag='ELD_1979_UTM_Zone_33N')
STD_ANON_24.ELD_1979_UTM_Zone_34N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_UTM_Zone_34N', tag='ELD_1979_UTM_Zone_34N')
STD_ANON_24.ELD_1979_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ELD_1979_UTM_Zone_35N', tag='ELD_1979_UTM_Zone_35N')
STD_ANON_24.ETRF_1989_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_28N', tag='ETRF_1989_UTM_Zone_28N')
STD_ANON_24.ETRF_1989_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_29N', tag='ETRF_1989_UTM_Zone_29N')
STD_ANON_24.ETRF_1989_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_30N', tag='ETRF_1989_UTM_Zone_30N')
STD_ANON_24.ETRF_1989_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_31N', tag='ETRF_1989_UTM_Zone_31N')
STD_ANON_24.ETRF_1989_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_32N', tag='ETRF_1989_UTM_Zone_32N')
STD_ANON_24.ETRF_1989_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_33N', tag='ETRF_1989_UTM_Zone_33N')
STD_ANON_24.ETRF_1989_UTM_Zone_34N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_34N', tag='ETRF_1989_UTM_Zone_34N')
STD_ANON_24.ETRF_1989_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_35N', tag='ETRF_1989_UTM_Zone_35N')
STD_ANON_24.ETRF_1989_UTM_Zone_36N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_36N', tag='ETRF_1989_UTM_Zone_36N')
STD_ANON_24.ETRF_1989_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_37N', tag='ETRF_1989_UTM_Zone_37N')
STD_ANON_24.ETRF_1989_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ETRF_1989_UTM_Zone_38N', tag='ETRF_1989_UTM_Zone_38N')
STD_ANON_24.ED_1950_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_28N', tag='ED_1950_UTM_Zone_28N')
STD_ANON_24.ED_1950_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_29N', tag='ED_1950_UTM_Zone_29N')
STD_ANON_24.ED_1950_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_30N', tag='ED_1950_UTM_Zone_30N')
STD_ANON_24.ED_1950_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_31N', tag='ED_1950_UTM_Zone_31N')
STD_ANON_24.ED_1950_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_32N', tag='ED_1950_UTM_Zone_32N')
STD_ANON_24.ED_1950_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_33N', tag='ED_1950_UTM_Zone_33N')
STD_ANON_24.ED_1950_UTM_Zone_34N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_34N', tag='ED_1950_UTM_Zone_34N')
STD_ANON_24.ED_1950_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_35N', tag='ED_1950_UTM_Zone_35N')
STD_ANON_24.ED_1950_UTM_Zone_36N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_36N', tag='ED_1950_UTM_Zone_36N')
STD_ANON_24.ED_1950_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_37N', tag='ED_1950_UTM_Zone_37N')
STD_ANON_24.ED_1950_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ED_1950_UTM_Zone_38N', tag='ED_1950_UTM_Zone_38N')
STD_ANON_24.Fahud_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Fahud_UTM_Zone_39N', tag='Fahud_UTM_Zone_39N')
STD_ANON_24.Fahud_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Fahud_UTM_Zone_40N', tag='Fahud_UTM_Zone_40N')
STD_ANON_24.Garoua_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Garoua_UTM_Zone_33N', tag='Garoua_UTM_Zone_33N')
STD_ANON_24.Graciosa_Base_SW_1948_UTM_Zone_26N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Graciosa_Base_SW_1948_UTM_Zone_26N', tag='Graciosa_Base_SW_1948_UTM_Zone_26N')
STD_ANON_24.Hito_XVIII_1963_UTM_19S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hito_XVIII_1963_UTM_19S', tag='Hito_XVIII_1963_UTM_19S')
STD_ANON_24.Hong_Kong_1980_UTM_Zone_49N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hong_Kong_1980_UTM_Zone_49N', tag='Hong_Kong_1980_UTM_Zone_49N')
STD_ANON_24.Hong_Kong_1980_UTM_Zone_50N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Hong_Kong_1980_UTM_Zone_50N', tag='Hong_Kong_1980_UTM_Zone_50N')
STD_ANON_24.Indian_1954_UTM_Zone_46N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1954_UTM_Zone_46N', tag='Indian_1954_UTM_Zone_46N')
STD_ANON_24.Indian_1954_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1954_UTM_Zone_47N', tag='Indian_1954_UTM_Zone_47N')
STD_ANON_24.Indian_1954_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1954_UTM_Zone_48N', tag='Indian_1954_UTM_Zone_48N')
STD_ANON_24.Indian_1960_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1960_UTM_Zone_48N', tag='Indian_1960_UTM_Zone_48N')
STD_ANON_24.Indian_1960_UTM_Zone_49N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1960_UTM_Zone_49N', tag='Indian_1960_UTM_Zone_49N')
STD_ANON_24.Indian_1975_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1975_UTM_Zone_47N', tag='Indian_1975_UTM_Zone_47N')
STD_ANON_24.Indian_1975_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indian_1975_UTM_Zone_48N', tag='Indian_1975_UTM_Zone_48N')
STD_ANON_24.Indonesian_1974_UTM_Zone_46N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_46N', tag='Indonesian_1974_UTM_Zone_46N')
STD_ANON_24.Indonesian_1974_UTM_Zone_46S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_46S', tag='Indonesian_1974_UTM_Zone_46S')
STD_ANON_24.Indonesian_1974_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_47N', tag='Indonesian_1974_UTM_Zone_47N')
STD_ANON_24.Indonesian_1974_UTM_Zone_47S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_47S', tag='Indonesian_1974_UTM_Zone_47S')
STD_ANON_24.Indonesian_1974_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_48N', tag='Indonesian_1974_UTM_Zone_48N')
STD_ANON_24.Indonesian_1974_UTM_Zone_48S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_48S', tag='Indonesian_1974_UTM_Zone_48S')
STD_ANON_24.Indonesian_1974_UTM_Zone_49N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_49N', tag='Indonesian_1974_UTM_Zone_49N')
STD_ANON_24.Indonesian_1974_UTM_Zone_49S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_49S', tag='Indonesian_1974_UTM_Zone_49S')
STD_ANON_24.Indonesian_1974_UTM_Zone_50N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_50N', tag='Indonesian_1974_UTM_Zone_50N')
STD_ANON_24.Indonesian_1974_UTM_Zone_50S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_50S', tag='Indonesian_1974_UTM_Zone_50S')
STD_ANON_24.Indonesian_1974_UTM_Zone_51N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_51N', tag='Indonesian_1974_UTM_Zone_51N')
STD_ANON_24.Indonesian_1974_UTM_Zone_51S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_51S', tag='Indonesian_1974_UTM_Zone_51S')
STD_ANON_24.Indonesian_1974_UTM_Zone_52N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_52N', tag='Indonesian_1974_UTM_Zone_52N')
STD_ANON_24.Indonesian_1974_UTM_Zone_52S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_52S', tag='Indonesian_1974_UTM_Zone_52S')
STD_ANON_24.Indonesian_1974_UTM_Zone_53N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_53N', tag='Indonesian_1974_UTM_Zone_53N')
STD_ANON_24.Indonesian_1974_UTM_Zone_53S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_53S', tag='Indonesian_1974_UTM_Zone_53S')
STD_ANON_24.Indonesian_1974_UTM_Zone_54S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Indonesian_1974_UTM_Zone_54S', tag='Indonesian_1974_UTM_Zone_54S')
STD_ANON_24.IRENET95_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='IRENET95_UTM_Zone_29N', tag='IRENET95_UTM_Zone_29N')
STD_ANON_24.Kertau_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kertau_UTM_Zone_47N', tag='Kertau_UTM_Zone_47N')
STD_ANON_24.Kertau_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Kertau_UTM_Zone_48N', tag='Kertau_UTM_Zone_48N')
STD_ANON_24.La_Canoa_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='La_Canoa_UTM_Zone_18N', tag='La_Canoa_UTM_Zone_18N')
STD_ANON_24.La_Canoa_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='La_Canoa_UTM_Zone_19N', tag='La_Canoa_UTM_Zone_19N')
STD_ANON_24.La_Canoa_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='La_Canoa_UTM_Zone_20N', tag='La_Canoa_UTM_Zone_20N')
STD_ANON_24.La_Canoa_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='La_Canoa_UTM_Zone_21N', tag='La_Canoa_UTM_Zone_21N')
STD_ANON_24.Locodjo_1965_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Locodjo_1965_UTM_Zone_29N', tag='Locodjo_1965_UTM_Zone_29N')
STD_ANON_24.Locodjo_1965_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Locodjo_1965_UTM_Zone_30N', tag='Locodjo_1965_UTM_Zone_30N')
STD_ANON_24.Lome_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Lome_UTM_Zone_31N', tag='Lome_UTM_Zone_31N')
STD_ANON_24.Mporaloko_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Mporaloko_UTM_Zone_32N', tag='Mporaloko_UTM_Zone_32N')
STD_ANON_24.Mporaloko_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Mporaloko_UTM_Zone_32S', tag='Mporaloko_UTM_Zone_32S')
STD_ANON_24.Malongo_1987_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Malongo_1987_UTM_Zone_32S', tag='Malongo_1987_UTM_Zone_32S')
STD_ANON_24.Massawa_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Massawa_UTM_Zone_37N', tag='Massawa_UTM_Zone_37N')
STD_ANON_24.Mhast_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Mhast_UTM_Zone_32S', tag='Mhast_UTM_Zone_32S')
STD_ANON_24.Minna_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Minna_UTM_Zone_31N', tag='Minna_UTM_Zone_31N')
STD_ANON_24.Minna_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Minna_UTM_Zone_32N', tag='Minna_UTM_Zone_32N')
STD_ANON_24.Moznet_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Moznet_UTM_Zone_36S', tag='Moznet_UTM_Zone_36S')
STD_ANON_24.Moznet_UTM_Zone_37S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Moznet_UTM_Zone_37S', tag='Moznet_UTM_Zone_37S')
STD_ANON_24.NAD_1927_BLM_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_BLM_Zone_14N', tag='NAD_1927_BLM_Zone_14N')
STD_ANON_24.NAD_1927_BLM_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_BLM_Zone_15N', tag='NAD_1927_BLM_Zone_15N')
STD_ANON_24.NAD_1927_BLM_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_BLM_Zone_16N', tag='NAD_1927_BLM_Zone_16N')
STD_ANON_24.NAD_1927_BLM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1927_BLM_Zone_17N', tag='NAD_1927_BLM_Zone_17N')
STD_ANON_24.NAD_1983_HARN_UTM_Zone_2S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NAD_1983_HARN_UTM_Zone_2S', tag='NAD_1983_HARN_UTM_Zone_2S_')
STD_ANON_24.Nahrwan_1967_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nahrwan_1967_UTM_Zone_38N', tag='Nahrwan_1967_UTM_Zone_38N')
STD_ANON_24.Nahrwan_1967_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nahrwan_1967_UTM_Zone_39N', tag='Nahrwan_1967_UTM_Zone_39N')
STD_ANON_24.Nahrwan_1967_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nahrwan_1967_UTM_Zone_40N', tag='Nahrwan_1967_UTM_Zone_40N')
STD_ANON_24.Naparima_1955_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Naparima_1955_UTM_Zone_20N', tag='Naparima_1955_UTM_Zone_20N')
STD_ANON_24.Naparima_1972_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Naparima_1972_UTM_Zone_20N', tag='Naparima_1972_UTM_Zone_20N')
STD_ANON_24.NGN_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGN_UTM_Zone_38N', tag='NGN_UTM_Zone_38N')
STD_ANON_24.NGN_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGN_UTM_Zone_39N', tag='NGN_UTM_Zone_39N')
STD_ANON_24.NGO_1948_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_UTM_Zone_32N', tag='NGO_1948_UTM_Zone_32N')
STD_ANON_24.NGO_1948_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_UTM_Zone_33N', tag='NGO_1948_UTM_Zone_33N')
STD_ANON_24.NGO_1948_UTM_Zone_34N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_UTM_Zone_34N', tag='NGO_1948_UTM_Zone_34N')
STD_ANON_24.NGO_1948_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NGO_1948_UTM_Zone_35N', tag='NGO_1948_UTM_Zone_35N')
STD_ANON_24.Nord_Sahara_1959_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Sahara_1959_UTM_Zone_29N', tag='Nord_Sahara_1959_UTM_Zone_29N')
STD_ANON_24.Nord_Sahara_1959_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Sahara_1959_UTM_Zone_30N', tag='Nord_Sahara_1959_UTM_Zone_30N')
STD_ANON_24.Nord_Sahara_1959_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Sahara_1959_UTM_Zone_31N', tag='Nord_Sahara_1959_UTM_Zone_31N')
STD_ANON_24.Nord_Sahara_1959_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Nord_Sahara_1959_UTM_Zone_32N', tag='Nord_Sahara_1959_UTM_Zone_32N')
STD_ANON_24.NZGD_1949_UTM_Zone_58S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_UTM_Zone_58S', tag='NZGD_1949_UTM_Zone_58S_')
STD_ANON_24.NZGD_1949_UTM_Zone_59S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_UTM_Zone_59S', tag='NZGD_1949_UTM_Zone_59S_')
STD_ANON_24.NZGD_1949_UTM_Zone_60S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_1949_UTM_Zone_60S', tag='NZGD_1949_UTM_Zone_60S_')
STD_ANON_24.NZGD_2000_UTM_Zone_58S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_UTM_Zone_58S', tag='NZGD_2000_UTM_Zone_58S_')
STD_ANON_24.NZGD_2000_UTM_Zone_59S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_UTM_Zone_59S', tag='NZGD_2000_UTM_Zone_59S_')
STD_ANON_24.NZGD_2000_UTM_Zone_60S_ = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NZGD_2000_UTM_Zone_60S', tag='NZGD_2000_UTM_Zone_60S_')
STD_ANON_24.Observ_Meteorologico_1939_UTM_Zone_25N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Observ_Meteorologico_1939_UTM_Zone_25N', tag='Observ_Meteorologico_1939_UTM_Zone_25N')
STD_ANON_24.Old_Hawaiian_UTM_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_UTM_Zone_4N', tag='Old_Hawaiian_UTM_Zone_4N')
STD_ANON_24.Old_Hawaiian_UTM_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Old_Hawaiian_UTM_Zone_5N', tag='Old_Hawaiian_UTM_Zone_5N')
STD_ANON_24.PDO_1993_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PDO_1993_UTM_Zone_39N', tag='PDO_1993_UTM_Zone_39N')
STD_ANON_24.PDO_1993_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PDO_1993_UTM_Zone_40N', tag='PDO_1993_UTM_Zone_40N')
STD_ANON_24.Pointe_Noire_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Pointe_Noire_UTM_Zone_32S', tag='Pointe_Noire_UTM_Zone_32S')
STD_ANON_24.Porto_Santo_1936_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Porto_Santo_1936_UTM_Zone_28N', tag='Porto_Santo_1936_UTM_Zone_28N')
STD_ANON_24.PSAD_1956_UTM_Zone_17S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_17S', tag='PSAD_1956_UTM_Zone_17S')
STD_ANON_24.PSAD_1956_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_18N', tag='PSAD_1956_UTM_Zone_18N')
STD_ANON_24.PSAD_1956_UTM_Zone_18S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_18S', tag='PSAD_1956_UTM_Zone_18S')
STD_ANON_24.PSAD_1956_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_19N', tag='PSAD_1956_UTM_Zone_19N')
STD_ANON_24.PSAD_1956_UTM_Zone_19S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_19S', tag='PSAD_1956_UTM_Zone_19S')
STD_ANON_24.PSAD_1956_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_20N', tag='PSAD_1956_UTM_Zone_20N')
STD_ANON_24.PSAD_1956_UTM_Zone_20S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_20S', tag='PSAD_1956_UTM_Zone_20S')
STD_ANON_24.PSAD_1956_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_21N', tag='PSAD_1956_UTM_Zone_21N')
STD_ANON_24.PSAD_1956_UTM_Zone_22S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PSAD_1956_UTM_Zone_22S', tag='PSAD_1956_UTM_Zone_22S')
STD_ANON_24.Puerto_Rico_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Puerto_Rico_UTM_Zone_20N', tag='Puerto_Rico_UTM_Zone_20N')
STD_ANON_24.Samboja_UTM_Zone_50S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Samboja_UTM_Zone_50S', tag='Samboja_UTM_Zone_50S')
STD_ANON_24.Sao_Braz_UTM_Zone_26N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sao_Braz_UTM_Zone_26N', tag='Sao_Braz_UTM_Zone_26N')
STD_ANON_24.Sapper_Hill_1943_UTM_Zone_20S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sapper_Hill_1943_UTM_Zone_20S', tag='Sapper_Hill_1943_UTM_Zone_20S')
STD_ANON_24.Sapper_Hill_1943_UTM_Zone_21S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sapper_Hill_1943_UTM_Zone_21S', tag='Sapper_Hill_1943_UTM_Zone_21S')
STD_ANON_24.Schwarzeck_UTM_Zone_33S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Schwarzeck_UTM_Zone_33S', tag='Schwarzeck_UTM_Zone_33S')
STD_ANON_24.Selvagem_Grande_1938_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Selvagem_Grande_1938_UTM_Zone_28N', tag='Selvagem_Grande_1938_UTM_Zone_28N')
STD_ANON_24.Sierra_Leone_1968_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sierra_Leone_1968_UTM_Zone_28N', tag='Sierra_Leone_1968_UTM_Zone_28N')
STD_ANON_24.Sierra_Leone_1968_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sierra_Leone_1968_UTM_Zone_29N', tag='Sierra_Leone_1968_UTM_Zone_29N')
STD_ANON_24.SIRGAS_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_17N', tag='SIRGAS_UTM_Zone_17N')
STD_ANON_24.SIRGAS_UTM_Zone_17S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_17S', tag='SIRGAS_UTM_Zone_17S')
STD_ANON_24.SIRGAS_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_18N', tag='SIRGAS_UTM_Zone_18N')
STD_ANON_24.SIRGAS_UTM_Zone_18S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_18S', tag='SIRGAS_UTM_Zone_18S')
STD_ANON_24.SIRGAS_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_19N', tag='SIRGAS_UTM_Zone_19N')
STD_ANON_24.SIRGAS_UTM_Zone_19S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_19S', tag='SIRGAS_UTM_Zone_19S')
STD_ANON_24.SIRGAS_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_20N', tag='SIRGAS_UTM_Zone_20N')
STD_ANON_24.SIRGAS_UTM_Zone_20S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_20S', tag='SIRGAS_UTM_Zone_20S')
STD_ANON_24.SIRGAS_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_21N', tag='SIRGAS_UTM_Zone_21N')
STD_ANON_24.SIRGAS_UTM_Zone_21S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_21S', tag='SIRGAS_UTM_Zone_21S')
STD_ANON_24.SIRGAS_UTM_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_22N', tag='SIRGAS_UTM_Zone_22N')
STD_ANON_24.SIRGAS_UTM_Zone_22S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_22S', tag='SIRGAS_UTM_Zone_22S')
STD_ANON_24.SIRGAS_UTM_Zone_23S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_23S', tag='SIRGAS_UTM_Zone_23S')
STD_ANON_24.SIRGAS_UTM_Zone_24S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_24S', tag='SIRGAS_UTM_Zone_24S')
STD_ANON_24.SIRGAS_UTM_Zone_25S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SIRGAS_UTM_Zone_25S', tag='SIRGAS_UTM_Zone_25S')
STD_ANON_24.SAD_1969_UTM_Zone_17S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_17S', tag='SAD_1969_UTM_Zone_17S')
STD_ANON_24.SAD_1969_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_18N', tag='SAD_1969_UTM_Zone_18N')
STD_ANON_24.SAD_1969_UTM_Zone_18S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_18S', tag='SAD_1969_UTM_Zone_18S')
STD_ANON_24.SAD_1969_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_19N', tag='SAD_1969_UTM_Zone_19N')
STD_ANON_24.SAD_1969_UTM_Zone_19S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_19S', tag='SAD_1969_UTM_Zone_19S')
STD_ANON_24.SAD_1969_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_20N', tag='SAD_1969_UTM_Zone_20N')
STD_ANON_24.SAD_1969_UTM_Zone_20S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_20S', tag='SAD_1969_UTM_Zone_20S')
STD_ANON_24.SAD_1969_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_21N', tag='SAD_1969_UTM_Zone_21N')
STD_ANON_24.SAD_1969_UTM_Zone_21S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_21S', tag='SAD_1969_UTM_Zone_21S')
STD_ANON_24.SAD_1969_UTM_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_22N', tag='SAD_1969_UTM_Zone_22N')
STD_ANON_24.SAD_1969_UTM_Zone_22S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_22S', tag='SAD_1969_UTM_Zone_22S')
STD_ANON_24.SAD_1969_UTM_Zone_23S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_23S', tag='SAD_1969_UTM_Zone_23S')
STD_ANON_24.SAD_1969_UTM_Zone_24S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_24S', tag='SAD_1969_UTM_Zone_24S')
STD_ANON_24.SAD_1969_UTM_Zone_25S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='SAD_1969_UTM_Zone_25S', tag='SAD_1969_UTM_Zone_25S')
STD_ANON_24.Sudan_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sudan_UTM_Zone_35N', tag='Sudan_UTM_Zone_35N')
STD_ANON_24.Sudan_UTM_Zone_36N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sudan_UTM_Zone_36N', tag='Sudan_UTM_Zone_36N')
STD_ANON_24.Tananarive_1925_UTM_Zone_38S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tananarive_1925_UTM_Zone_38S', tag='Tananarive_1925_UTM_Zone_38S')
STD_ANON_24.Tananarive_1925_UTM_Zone_39S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tananarive_1925_UTM_Zone_39S', tag='Tananarive_1925_UTM_Zone_39S')
STD_ANON_24.Tete_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tete_UTM_Zone_36S', tag='Tete_UTM_Zone_36S')
STD_ANON_24.Tete_UTM_Zone_37S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tete_UTM_Zone_37S', tag='Tete_UTM_Zone_37S')
STD_ANON_24.Timbalai_1948_UTM_Zone_49N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Timbalai_1948_UTM_Zone_49N', tag='Timbalai_1948_UTM_Zone_49N')
STD_ANON_24.Timbalai_1948_UTM_Zone_50N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Timbalai_1948_UTM_Zone_50N', tag='Timbalai_1948_UTM_Zone_50N')
STD_ANON_24.Tokyo_UTM_Zone_51N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tokyo_UTM_Zone_51N', tag='Tokyo_UTM_Zone_51N')
STD_ANON_24.Tokyo_UTM_Zone_52N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tokyo_UTM_Zone_52N', tag='Tokyo_UTM_Zone_52N')
STD_ANON_24.Tokyo_UTM_Zone_53N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tokyo_UTM_Zone_53N', tag='Tokyo_UTM_Zone_53N')
STD_ANON_24.Tokyo_UTM_Zone_54N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tokyo_UTM_Zone_54N', tag='Tokyo_UTM_Zone_54N')
STD_ANON_24.Tokyo_UTM_Zone_55N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tokyo_UTM_Zone_55N', tag='Tokyo_UTM_Zone_55N')
STD_ANON_24.Tokyo_UTM_Zone_56N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Tokyo_UTM_Zone_56N', tag='Tokyo_UTM_Zone_56N')
STD_ANON_24.TC_1948_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='TC_1948_UTM_Zone_39N', tag='TC_1948_UTM_Zone_39N')
STD_ANON_24.TC_1948_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='TC_1948_UTM_Zone_40N', tag='TC_1948_UTM_Zone_40N')
STD_ANON_24.Yemen_NGN_1996_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Yemen_NGN_1996_UTM_Zone_38N', tag='Yemen_NGN_1996_UTM_Zone_38N')
STD_ANON_24.Yemen_NGN_1996_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Yemen_NGN_1996_UTM_Zone_39N', tag='Yemen_NGN_1996_UTM_Zone_39N')
STD_ANON_24.Yoff_1972_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Yoff_1972_UTM_Zone_28N', tag='Yoff_1972_UTM_Zone_28N')
STD_ANON_24.Zanderij_1972_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Zanderij_1972_UTM_Zone_21N', tag='Zanderij_1972_UTM_Zone_21N')
STD_ANON_24.WGS_1972_UTM_Zone_10N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_10N', tag='WGS_1972_UTM_Zone_10N')
STD_ANON_24.WGS_1972_UTM_Zone_10S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_10S', tag='WGS_1972_UTM_Zone_10S')
STD_ANON_24.WGS_1972_UTM_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_11N', tag='WGS_1972_UTM_Zone_11N')
STD_ANON_24.WGS_1972_UTM_Zone_11S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_11S', tag='WGS_1972_UTM_Zone_11S')
STD_ANON_24.WGS_1972_UTM_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_12N', tag='WGS_1972_UTM_Zone_12N')
STD_ANON_24.WGS_1972_UTM_Zone_12S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_12S', tag='WGS_1972_UTM_Zone_12S')
STD_ANON_24.WGS_1972_UTM_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_13N', tag='WGS_1972_UTM_Zone_13N')
STD_ANON_24.WGS_1972_UTM_Zone_13S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_13S', tag='WGS_1972_UTM_Zone_13S')
STD_ANON_24.WGS_1972_UTM_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_14N', tag='WGS_1972_UTM_Zone_14N')
STD_ANON_24.WGS_1972_UTM_Zone_14S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_14S', tag='WGS_1972_UTM_Zone_14S')
STD_ANON_24.WGS_1972_UTM_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_15N', tag='WGS_1972_UTM_Zone_15N')
STD_ANON_24.WGS_1972_UTM_Zone_15S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_15S', tag='WGS_1972_UTM_Zone_15S')
STD_ANON_24.WGS_1972_UTM_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_16N', tag='WGS_1972_UTM_Zone_16N')
STD_ANON_24.WGS_1972_UTM_Zone_16S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_16S', tag='WGS_1972_UTM_Zone_16S')
STD_ANON_24.WGS_1972_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_17N', tag='WGS_1972_UTM_Zone_17N')
STD_ANON_24.WGS_1972_UTM_Zone_17S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_17S', tag='WGS_1972_UTM_Zone_17S')
STD_ANON_24.WGS_1972_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_18N', tag='WGS_1972_UTM_Zone_18N')
STD_ANON_24.WGS_1972_UTM_Zone_18S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_18S', tag='WGS_1972_UTM_Zone_18S')
STD_ANON_24.WGS_1972_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_19N', tag='WGS_1972_UTM_Zone_19N')
STD_ANON_24.WGS_1972_UTM_Zone_19S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_19S', tag='WGS_1972_UTM_Zone_19S')
STD_ANON_24.WGS_1972_UTM_Zone_1N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_1N', tag='WGS_1972_UTM_Zone_1N')
STD_ANON_24.WGS_1972_UTM_Zone_1S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_1S', tag='WGS_1972_UTM_Zone_1S')
STD_ANON_24.WGS_1972_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_20N', tag='WGS_1972_UTM_Zone_20N')
STD_ANON_24.WGS_1972_UTM_Zone_20S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_20S', tag='WGS_1972_UTM_Zone_20S')
STD_ANON_24.WGS_1972_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_21N', tag='WGS_1972_UTM_Zone_21N')
STD_ANON_24.WGS_1972_UTM_Zone_21S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_21S', tag='WGS_1972_UTM_Zone_21S')
STD_ANON_24.WGS_1972_UTM_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_22N', tag='WGS_1972_UTM_Zone_22N')
STD_ANON_24.WGS_1972_UTM_Zone_22S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_22S', tag='WGS_1972_UTM_Zone_22S')
STD_ANON_24.WGS_1972_UTM_Zone_23N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_23N', tag='WGS_1972_UTM_Zone_23N')
STD_ANON_24.WGS_1972_UTM_Zone_23S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_23S', tag='WGS_1972_UTM_Zone_23S')
STD_ANON_24.WGS_1972_UTM_Zone_24N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_24N', tag='WGS_1972_UTM_Zone_24N')
STD_ANON_24.WGS_1972_UTM_Zone_24S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_24S', tag='WGS_1972_UTM_Zone_24S')
STD_ANON_24.WGS_1972_UTM_Zone_25N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_25N', tag='WGS_1972_UTM_Zone_25N')
STD_ANON_24.WGS_1972_UTM_Zone_25S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_25S', tag='WGS_1972_UTM_Zone_25S')
STD_ANON_24.WGS_1972_UTM_Zone_26N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_26N', tag='WGS_1972_UTM_Zone_26N')
STD_ANON_24.WGS_1972_UTM_Zone_26S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_26S', tag='WGS_1972_UTM_Zone_26S')
STD_ANON_24.WGS_1972_UTM_Zone_27N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_27N', tag='WGS_1972_UTM_Zone_27N')
STD_ANON_24.WGS_1972_UTM_Zone_27S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_27S', tag='WGS_1972_UTM_Zone_27S')
STD_ANON_24.WGS_1972_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_28N', tag='WGS_1972_UTM_Zone_28N')
STD_ANON_24.WGS_1972_UTM_Zone_28S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_28S', tag='WGS_1972_UTM_Zone_28S')
STD_ANON_24.WGS_1972_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_29N', tag='WGS_1972_UTM_Zone_29N')
STD_ANON_24.WGS_1972_UTM_Zone_29S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_29S', tag='WGS_1972_UTM_Zone_29S')
STD_ANON_24.WGS_1972_UTM_Zone_2N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_2N', tag='WGS_1972_UTM_Zone_2N')
STD_ANON_24.WGS_1972_UTM_Zone_2S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_2S', tag='WGS_1972_UTM_Zone_2S')
STD_ANON_24.WGS_1972_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_30N', tag='WGS_1972_UTM_Zone_30N')
STD_ANON_24.WGS_1972_UTM_Zone_30S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_30S', tag='WGS_1972_UTM_Zone_30S')
STD_ANON_24.WGS_1972_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_31N', tag='WGS_1972_UTM_Zone_31N')
STD_ANON_24.WGS_1972_UTM_Zone_31S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_31S', tag='WGS_1972_UTM_Zone_31S')
STD_ANON_24.WGS_1972_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_32N', tag='WGS_1972_UTM_Zone_32N')
STD_ANON_24.WGS_1972_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_32S', tag='WGS_1972_UTM_Zone_32S')
STD_ANON_24.WGS_1972_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_33N', tag='WGS_1972_UTM_Zone_33N')
STD_ANON_24.WGS_1972_UTM_Zone_33S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_33S', tag='WGS_1972_UTM_Zone_33S')
STD_ANON_24.WGS_1972_UTM_Zone_34N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_34N', tag='WGS_1972_UTM_Zone_34N')
STD_ANON_24.WGS_1972_UTM_Zone_34S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_34S', tag='WGS_1972_UTM_Zone_34S')
STD_ANON_24.WGS_1972_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_35N', tag='WGS_1972_UTM_Zone_35N')
STD_ANON_24.WGS_1972_UTM_Zone_35S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_35S', tag='WGS_1972_UTM_Zone_35S')
STD_ANON_24.WGS_1972_UTM_Zone_36N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_36N', tag='WGS_1972_UTM_Zone_36N')
STD_ANON_24.WGS_1972_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_36S', tag='WGS_1972_UTM_Zone_36S')
STD_ANON_24.WGS_1972_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_37N', tag='WGS_1972_UTM_Zone_37N')
STD_ANON_24.WGS_1972_UTM_Zone_37S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_37S', tag='WGS_1972_UTM_Zone_37S')
STD_ANON_24.WGS_1972_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_38N', tag='WGS_1972_UTM_Zone_38N')
STD_ANON_24.WGS_1972_UTM_Zone_38S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_38S', tag='WGS_1972_UTM_Zone_38S')
STD_ANON_24.WGS_1972_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_39N', tag='WGS_1972_UTM_Zone_39N')
STD_ANON_24.WGS_1972_UTM_Zone_39S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_39S', tag='WGS_1972_UTM_Zone_39S')
STD_ANON_24.WGS_1972_UTM_Zone_3N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_3N', tag='WGS_1972_UTM_Zone_3N')
STD_ANON_24.WGS_1972_UTM_Zone_3S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_3S', tag='WGS_1972_UTM_Zone_3S')
STD_ANON_24.WGS_1972_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_40N', tag='WGS_1972_UTM_Zone_40N')
STD_ANON_24.WGS_1972_UTM_Zone_40S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_40S', tag='WGS_1972_UTM_Zone_40S')
STD_ANON_24.WGS_1972_UTM_Zone_41N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_41N', tag='WGS_1972_UTM_Zone_41N')
STD_ANON_24.WGS_1972_UTM_Zone_41S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_41S', tag='WGS_1972_UTM_Zone_41S')
STD_ANON_24.WGS_1972_UTM_Zone_42N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_42N', tag='WGS_1972_UTM_Zone_42N')
STD_ANON_24.WGS_1972_UTM_Zone_42S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_42S', tag='WGS_1972_UTM_Zone_42S')
STD_ANON_24.WGS_1972_UTM_Zone_43N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_43N', tag='WGS_1972_UTM_Zone_43N')
STD_ANON_24.WGS_1972_UTM_Zone_43S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_43S', tag='WGS_1972_UTM_Zone_43S')
STD_ANON_24.WGS_1972_UTM_Zone_44N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_44N', tag='WGS_1972_UTM_Zone_44N')
STD_ANON_24.WGS_1972_UTM_Zone_44S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_44S', tag='WGS_1972_UTM_Zone_44S')
STD_ANON_24.WGS_1972_UTM_Zone_45N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_45N', tag='WGS_1972_UTM_Zone_45N')
STD_ANON_24.WGS_1972_UTM_Zone_45S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_45S', tag='WGS_1972_UTM_Zone_45S')
STD_ANON_24.WGS_1972_UTM_Zone_46N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_46N', tag='WGS_1972_UTM_Zone_46N')
STD_ANON_24.WGS_1972_UTM_Zone_46S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_46S', tag='WGS_1972_UTM_Zone_46S')
STD_ANON_24.WGS_1972_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_47N', tag='WGS_1972_UTM_Zone_47N')
STD_ANON_24.WGS_1972_UTM_Zone_47S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_47S', tag='WGS_1972_UTM_Zone_47S')
STD_ANON_24.WGS_1972_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_48N', tag='WGS_1972_UTM_Zone_48N')
STD_ANON_24.WGS_1972_UTM_Zone_48S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_48S', tag='WGS_1972_UTM_Zone_48S')
STD_ANON_24.WGS_1972_UTM_Zone_49N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_49N', tag='WGS_1972_UTM_Zone_49N')
STD_ANON_24.WGS_1972_UTM_Zone_49S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_49S', tag='WGS_1972_UTM_Zone_49S')
STD_ANON_24.WGS_1972_UTM_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_4N', tag='WGS_1972_UTM_Zone_4N')
STD_ANON_24.WGS_1972_UTM_Zone_4S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_4S', tag='WGS_1972_UTM_Zone_4S')
STD_ANON_24.WGS_1972_UTM_Zone_50N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_50N', tag='WGS_1972_UTM_Zone_50N')
STD_ANON_24.WGS_1972_UTM_Zone_50S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_50S', tag='WGS_1972_UTM_Zone_50S')
STD_ANON_24.WGS_1972_UTM_Zone_51N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_51N', tag='WGS_1972_UTM_Zone_51N')
STD_ANON_24.WGS_1972_UTM_Zone_51S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_51S', tag='WGS_1972_UTM_Zone_51S')
STD_ANON_24.WGS_1972_UTM_Zone_52N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_52N', tag='WGS_1972_UTM_Zone_52N')
STD_ANON_24.WGS_1972_UTM_Zone_52S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_52S', tag='WGS_1972_UTM_Zone_52S')
STD_ANON_24.WGS_1972_UTM_Zone_53N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_53N', tag='WGS_1972_UTM_Zone_53N')
STD_ANON_24.WGS_1972_UTM_Zone_53S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_53S', tag='WGS_1972_UTM_Zone_53S')
STD_ANON_24.WGS_1972_UTM_Zone_54N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_54N', tag='WGS_1972_UTM_Zone_54N')
STD_ANON_24.WGS_1972_UTM_Zone_54S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_54S', tag='WGS_1972_UTM_Zone_54S')
STD_ANON_24.WGS_1972_UTM_Zone_55N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_55N', tag='WGS_1972_UTM_Zone_55N')
STD_ANON_24.WGS_1972_UTM_Zone_55S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_55S', tag='WGS_1972_UTM_Zone_55S')
STD_ANON_24.WGS_1972_UTM_Zone_56N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_56N', tag='WGS_1972_UTM_Zone_56N')
STD_ANON_24.WGS_1972_UTM_Zone_56S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_56S', tag='WGS_1972_UTM_Zone_56S')
STD_ANON_24.WGS_1972_UTM_Zone_57N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_57N', tag='WGS_1972_UTM_Zone_57N')
STD_ANON_24.WGS_1972_UTM_Zone_57S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_57S', tag='WGS_1972_UTM_Zone_57S')
STD_ANON_24.WGS_1972_UTM_Zone_58N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_58N', tag='WGS_1972_UTM_Zone_58N')
STD_ANON_24.WGS_1972_UTM_Zone_58S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_58S', tag='WGS_1972_UTM_Zone_58S')
STD_ANON_24.WGS_1972_UTM_Zone_59N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_59N', tag='WGS_1972_UTM_Zone_59N')
STD_ANON_24.WGS_1972_UTM_Zone_59S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_59S', tag='WGS_1972_UTM_Zone_59S')
STD_ANON_24.WGS_1972_UTM_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_5N', tag='WGS_1972_UTM_Zone_5N')
STD_ANON_24.WGS_1972_UTM_Zone_5S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_5S', tag='WGS_1972_UTM_Zone_5S')
STD_ANON_24.WGS_1972_UTM_Zone_60N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_60N', tag='WGS_1972_UTM_Zone_60N')
STD_ANON_24.WGS_1972_UTM_Zone_60S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_60S', tag='WGS_1972_UTM_Zone_60S')
STD_ANON_24.WGS_1972_UTM_Zone_6N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_6N', tag='WGS_1972_UTM_Zone_6N')
STD_ANON_24.WGS_1972_UTM_Zone_6S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_6S', tag='WGS_1972_UTM_Zone_6S')
STD_ANON_24.WGS_1972_UTM_Zone_7N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_7N', tag='WGS_1972_UTM_Zone_7N')
STD_ANON_24.WGS_1972_UTM_Zone_7S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_7S', tag='WGS_1972_UTM_Zone_7S')
STD_ANON_24.WGS_1972_UTM_Zone_8N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_8N', tag='WGS_1972_UTM_Zone_8N')
STD_ANON_24.WGS_1972_UTM_Zone_8S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_8S', tag='WGS_1972_UTM_Zone_8S')
STD_ANON_24.WGS_1972_UTM_Zone_9N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_9N', tag='WGS_1972_UTM_Zone_9N')
STD_ANON_24.WGS_1972_UTM_Zone_9S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1972_UTM_Zone_9S', tag='WGS_1972_UTM_Zone_9S')
STD_ANON_24.WGS_1984_UTM_Zone_10N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_10N', tag='WGS_1984_UTM_Zone_10N')
STD_ANON_24.WGS_1984_UTM_Zone_10S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_10S', tag='WGS_1984_UTM_Zone_10S')
STD_ANON_24.WGS_1984_UTM_Zone_11N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_11N', tag='WGS_1984_UTM_Zone_11N')
STD_ANON_24.WGS_1984_UTM_Zone_11S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_11S', tag='WGS_1984_UTM_Zone_11S')
STD_ANON_24.WGS_1984_UTM_Zone_12N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_12N', tag='WGS_1984_UTM_Zone_12N')
STD_ANON_24.WGS_1984_UTM_Zone_12S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_12S', tag='WGS_1984_UTM_Zone_12S')
STD_ANON_24.WGS_1984_UTM_Zone_13N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_13N', tag='WGS_1984_UTM_Zone_13N')
STD_ANON_24.WGS_1984_UTM_Zone_13S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_13S', tag='WGS_1984_UTM_Zone_13S')
STD_ANON_24.WGS_1984_UTM_Zone_14N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_14N', tag='WGS_1984_UTM_Zone_14N')
STD_ANON_24.WGS_1984_UTM_Zone_14S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_14S', tag='WGS_1984_UTM_Zone_14S')
STD_ANON_24.WGS_1984_UTM_Zone_15N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_15N', tag='WGS_1984_UTM_Zone_15N')
STD_ANON_24.WGS_1984_UTM_Zone_15S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_15S', tag='WGS_1984_UTM_Zone_15S')
STD_ANON_24.WGS_1984_UTM_Zone_16N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_16N', tag='WGS_1984_UTM_Zone_16N')
STD_ANON_24.WGS_1984_UTM_Zone_16S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_16S', tag='WGS_1984_UTM_Zone_16S')
STD_ANON_24.WGS_1984_UTM_Zone_17N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_17N', tag='WGS_1984_UTM_Zone_17N')
STD_ANON_24.WGS_1984_UTM_Zone_17S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_17S', tag='WGS_1984_UTM_Zone_17S')
STD_ANON_24.WGS_1984_UTM_Zone_18N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_18N', tag='WGS_1984_UTM_Zone_18N')
STD_ANON_24.WGS_1984_UTM_Zone_18S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_18S', tag='WGS_1984_UTM_Zone_18S')
STD_ANON_24.WGS_1984_UTM_Zone_19N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_19N', tag='WGS_1984_UTM_Zone_19N')
STD_ANON_24.WGS_1984_UTM_Zone_19S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_19S', tag='WGS_1984_UTM_Zone_19S')
STD_ANON_24.WGS_1984_UTM_Zone_1N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_1N', tag='WGS_1984_UTM_Zone_1N')
STD_ANON_24.WGS_1984_UTM_Zone_1S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_1S', tag='WGS_1984_UTM_Zone_1S')
STD_ANON_24.WGS_1984_UTM_Zone_20N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_20N', tag='WGS_1984_UTM_Zone_20N')
STD_ANON_24.WGS_1984_UTM_Zone_20S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_20S', tag='WGS_1984_UTM_Zone_20S')
STD_ANON_24.WGS_1984_UTM_Zone_21N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_21N', tag='WGS_1984_UTM_Zone_21N')
STD_ANON_24.WGS_1984_UTM_Zone_21S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_21S', tag='WGS_1984_UTM_Zone_21S')
STD_ANON_24.WGS_1984_UTM_Zone_22N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_22N', tag='WGS_1984_UTM_Zone_22N')
STD_ANON_24.WGS_1984_UTM_Zone_22S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_22S', tag='WGS_1984_UTM_Zone_22S')
STD_ANON_24.WGS_1984_UTM_Zone_23N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_23N', tag='WGS_1984_UTM_Zone_23N')
STD_ANON_24.WGS_1984_UTM_Zone_23S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_23S', tag='WGS_1984_UTM_Zone_23S')
STD_ANON_24.WGS_1984_UTM_Zone_24N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_24N', tag='WGS_1984_UTM_Zone_24N')
STD_ANON_24.WGS_1984_UTM_Zone_24S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_24S', tag='WGS_1984_UTM_Zone_24S')
STD_ANON_24.WGS_1984_UTM_Zone_25N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_25N', tag='WGS_1984_UTM_Zone_25N')
STD_ANON_24.WGS_1984_UTM_Zone_25S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_25S', tag='WGS_1984_UTM_Zone_25S')
STD_ANON_24.WGS_1984_UTM_Zone_26N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_26N', tag='WGS_1984_UTM_Zone_26N')
STD_ANON_24.WGS_1984_UTM_Zone_26S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_26S', tag='WGS_1984_UTM_Zone_26S')
STD_ANON_24.WGS_1984_UTM_Zone_27N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_27N', tag='WGS_1984_UTM_Zone_27N')
STD_ANON_24.WGS_1984_UTM_Zone_27S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_27S', tag='WGS_1984_UTM_Zone_27S')
STD_ANON_24.WGS_1984_UTM_Zone_28N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_28N', tag='WGS_1984_UTM_Zone_28N')
STD_ANON_24.WGS_1984_UTM_Zone_28S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_28S', tag='WGS_1984_UTM_Zone_28S')
STD_ANON_24.WGS_1984_UTM_Zone_29N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_29N', tag='WGS_1984_UTM_Zone_29N')
STD_ANON_24.WGS_1984_UTM_Zone_29S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_29S', tag='WGS_1984_UTM_Zone_29S')
STD_ANON_24.WGS_1984_UTM_Zone_2N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_2N', tag='WGS_1984_UTM_Zone_2N')
STD_ANON_24.WGS_1984_UTM_Zone_2S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_2S', tag='WGS_1984_UTM_Zone_2S')
STD_ANON_24.WGS_1984_UTM_Zone_30N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_30N', tag='WGS_1984_UTM_Zone_30N')
STD_ANON_24.WGS_1984_UTM_Zone_30S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_30S', tag='WGS_1984_UTM_Zone_30S')
STD_ANON_24.WGS_1984_UTM_Zone_31N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_31N', tag='WGS_1984_UTM_Zone_31N')
STD_ANON_24.WGS_1984_UTM_Zone_31S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_31S', tag='WGS_1984_UTM_Zone_31S')
STD_ANON_24.WGS_1984_UTM_Zone_32N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_32N', tag='WGS_1984_UTM_Zone_32N')
STD_ANON_24.WGS_1984_UTM_Zone_32S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_32S', tag='WGS_1984_UTM_Zone_32S')
STD_ANON_24.WGS_1984_UTM_Zone_33N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_33N', tag='WGS_1984_UTM_Zone_33N')
STD_ANON_24.WGS_1984_UTM_Zone_33S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_33S', tag='WGS_1984_UTM_Zone_33S')
STD_ANON_24.WGS_1984_UTM_Zone_34N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_34N', tag='WGS_1984_UTM_Zone_34N')
STD_ANON_24.WGS_1984_UTM_Zone_34S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_34S', tag='WGS_1984_UTM_Zone_34S')
STD_ANON_24.WGS_1984_UTM_Zone_35N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_35N', tag='WGS_1984_UTM_Zone_35N')
STD_ANON_24.WGS_1984_UTM_Zone_35S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_35S', tag='WGS_1984_UTM_Zone_35S')
STD_ANON_24.WGS_1984_UTM_Zone_36N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_36N', tag='WGS_1984_UTM_Zone_36N')
STD_ANON_24.WGS_1984_UTM_Zone_36S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_36S', tag='WGS_1984_UTM_Zone_36S')
STD_ANON_24.WGS_1984_UTM_Zone_37N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_37N', tag='WGS_1984_UTM_Zone_37N')
STD_ANON_24.WGS_1984_UTM_Zone_37S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_37S', tag='WGS_1984_UTM_Zone_37S')
STD_ANON_24.WGS_1984_UTM_Zone_38N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_38N', tag='WGS_1984_UTM_Zone_38N')
STD_ANON_24.WGS_1984_UTM_Zone_38S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_38S', tag='WGS_1984_UTM_Zone_38S')
STD_ANON_24.WGS_1984_UTM_Zone_39N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_39N', tag='WGS_1984_UTM_Zone_39N')
STD_ANON_24.WGS_1984_UTM_Zone_39S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_39S', tag='WGS_1984_UTM_Zone_39S')
STD_ANON_24.WGS_1984_UTM_Zone_3N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_3N', tag='WGS_1984_UTM_Zone_3N')
STD_ANON_24.WGS_1984_UTM_Zone_3S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_3S', tag='WGS_1984_UTM_Zone_3S')
STD_ANON_24.WGS_1984_UTM_Zone_40N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_40N', tag='WGS_1984_UTM_Zone_40N')
STD_ANON_24.WGS_1984_UTM_Zone_40S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_40S', tag='WGS_1984_UTM_Zone_40S')
STD_ANON_24.WGS_1984_UTM_Zone_41N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_41N', tag='WGS_1984_UTM_Zone_41N')
STD_ANON_24.WGS_1984_UTM_Zone_41S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_41S', tag='WGS_1984_UTM_Zone_41S')
STD_ANON_24.WGS_1984_UTM_Zone_42N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_42N', tag='WGS_1984_UTM_Zone_42N')
STD_ANON_24.WGS_1984_UTM_Zone_42S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_42S', tag='WGS_1984_UTM_Zone_42S')
STD_ANON_24.WGS_1984_UTM_Zone_43N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_43N', tag='WGS_1984_UTM_Zone_43N')
STD_ANON_24.WGS_1984_UTM_Zone_43S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_43S', tag='WGS_1984_UTM_Zone_43S')
STD_ANON_24.WGS_1984_UTM_Zone_44N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_44N', tag='WGS_1984_UTM_Zone_44N')
STD_ANON_24.WGS_1984_UTM_Zone_44S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_44S', tag='WGS_1984_UTM_Zone_44S')
STD_ANON_24.WGS_1984_UTM_Zone_45N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_45N', tag='WGS_1984_UTM_Zone_45N')
STD_ANON_24.WGS_1984_UTM_Zone_45S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_45S', tag='WGS_1984_UTM_Zone_45S')
STD_ANON_24.WGS_1984_UTM_Zone_46N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_46N', tag='WGS_1984_UTM_Zone_46N')
STD_ANON_24.WGS_1984_UTM_Zone_46S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_46S', tag='WGS_1984_UTM_Zone_46S')
STD_ANON_24.WGS_1984_UTM_Zone_47N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_47N', tag='WGS_1984_UTM_Zone_47N')
STD_ANON_24.WGS_1984_UTM_Zone_47S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_47S', tag='WGS_1984_UTM_Zone_47S')
STD_ANON_24.WGS_1984_UTM_Zone_48N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_48N', tag='WGS_1984_UTM_Zone_48N')
STD_ANON_24.WGS_1984_UTM_Zone_48S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_48S', tag='WGS_1984_UTM_Zone_48S')
STD_ANON_24.WGS_1984_UTM_Zone_49N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_49N', tag='WGS_1984_UTM_Zone_49N')
STD_ANON_24.WGS_1984_UTM_Zone_49S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_49S', tag='WGS_1984_UTM_Zone_49S')
STD_ANON_24.WGS_1984_UTM_Zone_4N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_4N', tag='WGS_1984_UTM_Zone_4N')
STD_ANON_24.WGS_1984_UTM_Zone_4S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_4S', tag='WGS_1984_UTM_Zone_4S')
STD_ANON_24.WGS_1984_UTM_Zone_50N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_50N', tag='WGS_1984_UTM_Zone_50N')
STD_ANON_24.WGS_1984_UTM_Zone_50S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_50S', tag='WGS_1984_UTM_Zone_50S')
STD_ANON_24.WGS_1984_UTM_Zone_51N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_51N', tag='WGS_1984_UTM_Zone_51N')
STD_ANON_24.WGS_1984_UTM_Zone_51S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_51S', tag='WGS_1984_UTM_Zone_51S')
STD_ANON_24.WGS_1984_UTM_Zone_52N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_52N', tag='WGS_1984_UTM_Zone_52N')
STD_ANON_24.WGS_1984_UTM_Zone_52S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_52S', tag='WGS_1984_UTM_Zone_52S')
STD_ANON_24.WGS_1984_UTM_Zone_53N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_53N', tag='WGS_1984_UTM_Zone_53N')
STD_ANON_24.WGS_1984_UTM_Zone_53S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_53S', tag='WGS_1984_UTM_Zone_53S')
STD_ANON_24.WGS_1984_UTM_Zone_54N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_54N', tag='WGS_1984_UTM_Zone_54N')
STD_ANON_24.WGS_1984_UTM_Zone_54S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_54S', tag='WGS_1984_UTM_Zone_54S')
STD_ANON_24.WGS_1984_UTM_Zone_55N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_55N', tag='WGS_1984_UTM_Zone_55N')
STD_ANON_24.WGS_1984_UTM_Zone_55S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_55S', tag='WGS_1984_UTM_Zone_55S')
STD_ANON_24.WGS_1984_UTM_Zone_56N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_56N', tag='WGS_1984_UTM_Zone_56N')
STD_ANON_24.WGS_1984_UTM_Zone_56S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_56S', tag='WGS_1984_UTM_Zone_56S')
STD_ANON_24.WGS_1984_UTM_Zone_57N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_57N', tag='WGS_1984_UTM_Zone_57N')
STD_ANON_24.WGS_1984_UTM_Zone_57S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_57S', tag='WGS_1984_UTM_Zone_57S')
STD_ANON_24.WGS_1984_UTM_Zone_58N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_58N', tag='WGS_1984_UTM_Zone_58N')
STD_ANON_24.WGS_1984_UTM_Zone_58S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_58S', tag='WGS_1984_UTM_Zone_58S')
STD_ANON_24.WGS_1984_UTM_Zone_59N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_59N', tag='WGS_1984_UTM_Zone_59N')
STD_ANON_24.WGS_1984_UTM_Zone_59S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_59S', tag='WGS_1984_UTM_Zone_59S')
STD_ANON_24.WGS_1984_UTM_Zone_5N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_5N', tag='WGS_1984_UTM_Zone_5N')
STD_ANON_24.WGS_1984_UTM_Zone_5S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_5S', tag='WGS_1984_UTM_Zone_5S')
STD_ANON_24.WGS_1984_UTM_Zone_60N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_60N', tag='WGS_1984_UTM_Zone_60N')
STD_ANON_24.WGS_1984_UTM_Zone_60S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_60S', tag='WGS_1984_UTM_Zone_60S')
STD_ANON_24.WGS_1984_UTM_Zone_6N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_6N', tag='WGS_1984_UTM_Zone_6N')
STD_ANON_24.WGS_1984_UTM_Zone_6S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_6S', tag='WGS_1984_UTM_Zone_6S')
STD_ANON_24.WGS_1984_UTM_Zone_7N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_7N', tag='WGS_1984_UTM_Zone_7N')
STD_ANON_24.WGS_1984_UTM_Zone_7S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_7S', tag='WGS_1984_UTM_Zone_7S')
STD_ANON_24.WGS_1984_UTM_Zone_8N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_8N', tag='WGS_1984_UTM_Zone_8N')
STD_ANON_24.WGS_1984_UTM_Zone_8S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_8S', tag='WGS_1984_UTM_Zone_8S')
STD_ANON_24.WGS_1984_UTM_Zone_9N = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_9N', tag='WGS_1984_UTM_Zone_9N')
STD_ANON_24.WGS_1984_UTM_Zone_9S = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='WGS_1984_UTM_Zone_9S', tag='WGS_1984_UTM_Zone_9S')
STD_ANON_24.World_Aitoff = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Aitoff', tag='World_Aitoff')
STD_ANON_24.World_Behrmann = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Behrmann', tag='World_Behrmann')
STD_ANON_24.World_Bonne = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Bonne', tag='World_Bonne')
STD_ANON_24.World_Craster_Parabolic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Craster_Parabolic', tag='World_Craster_Parabolic')
STD_ANON_24.World_Cylindrical_Equal_Area = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Cylindrical_Equal_Area', tag='World_Cylindrical_Equal_Area')
STD_ANON_24.World_Eckert_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Eckert_I', tag='World_Eckert_I')
STD_ANON_24.World_Eckert_II = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Eckert_II', tag='World_Eckert_II')
STD_ANON_24.World_Eckert_III = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Eckert_III', tag='World_Eckert_III')
STD_ANON_24.World_Eckert_IV = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Eckert_IV', tag='World_Eckert_IV')
STD_ANON_24.World_Eckert_V = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Eckert_V', tag='World_Eckert_V')
STD_ANON_24.World_Eckert_VI = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Eckert_VI', tag='World_Eckert_VI')
STD_ANON_24.World_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Equidistant_Conic', tag='World_Equidistant_Conic')
STD_ANON_24.World_Equidistant_Cylindrical = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Equidistant_Cylindrical', tag='World_Equidistant_Cylindrical')
STD_ANON_24.World_Flat_Polar_Quartic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Flat_Polar_Quartic', tag='World_Flat_Polar_Quartic')
STD_ANON_24.World_Gall_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Gall_Stereographic', tag='World_Gall_Stereographic')
STD_ANON_24.World_Hammer_Aitoff = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Hammer_Aitoff', tag='World_Hammer_Aitoff')
STD_ANON_24.World_Loximuthal = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Loximuthal', tag='World_Loximuthal')
STD_ANON_24.World_Mercator = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Mercator', tag='World_Mercator')
STD_ANON_24.World_Miller_Cylindrical = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Miller_Cylindrical', tag='World_Miller_Cylindrical')
STD_ANON_24.World_Mollweide = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Mollweide', tag='World_Mollweide')
STD_ANON_24.World_Plate_Carree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Plate_Carree', tag='World_Plate_Carree')
STD_ANON_24.World_Polyconic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Polyconic', tag='World_Polyconic')
STD_ANON_24.World_Quartic_Authalic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Quartic_Authalic', tag='World_Quartic_Authalic')
STD_ANON_24.World_Robinson = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Robinson', tag='World_Robinson')
STD_ANON_24.World_Sinusoidal = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Sinusoidal', tag='World_Sinusoidal')
STD_ANON_24.Sphere_Aitoff = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Aitoff', tag='Sphere_Aitoff')
STD_ANON_24.Sphere_Behrmann = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Behrmann', tag='Sphere_Behrmann')
STD_ANON_24.Sphere_Bonne = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Bonne', tag='Sphere_Bonne')
STD_ANON_24.Sphere_Craster_Parabolic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Craster_Parabolic', tag='Sphere_Craster_Parabolic')
STD_ANON_24.Sphere_Cylindrical_Equal_Area = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Cylindrical_Equal_Area', tag='Sphere_Cylindrical_Equal_Area')
STD_ANON_24.Sphere_Eckert_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Eckert_I', tag='Sphere_Eckert_I')
STD_ANON_24.Sphere_Eckert_II = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Eckert_II', tag='Sphere_Eckert_II')
STD_ANON_24.Sphere_Eckert_III = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Eckert_III', tag='Sphere_Eckert_III')
STD_ANON_24.Sphere_Eckert_IV = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Eckert_IV', tag='Sphere_Eckert_IV')
STD_ANON_24.Sphere_Eckert_V = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Eckert_V', tag='Sphere_Eckert_V')
STD_ANON_24.Sphere_Eckert_VI = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Eckert_VI', tag='Sphere_Eckert_VI')
STD_ANON_24.Sphere_Equidistant_Conic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Equidistant_Conic', tag='Sphere_Equidistant_Conic')
STD_ANON_24.Sphere_Equidistant_Cylindrical = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Equidistant_Cylindrical', tag='Sphere_Equidistant_Cylindrical')
STD_ANON_24.Sphere_Flat_Polar_Quartic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Flat_Polar_Quartic', tag='Sphere_Flat_Polar_Quartic')
STD_ANON_24.Sphere_Gall_Stereographic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Gall_Stereographic', tag='Sphere_Gall_Stereographic')
STD_ANON_24.Sphere_Hammer_Aitoff = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Hammer_Aitoff', tag='Sphere_Hammer_Aitoff')
STD_ANON_24.Sphere_Loximuthal = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Loximuthal', tag='Sphere_Loximuthal')
STD_ANON_24.Sphere_Mercator = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Mercator', tag='Sphere_Mercator')
STD_ANON_24.Sphere_Miller_Cylindrical = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Miller_Cylindrical', tag='Sphere_Miller_Cylindrical')
STD_ANON_24.Sphere_Mollweide = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Mollweide', tag='Sphere_Mollweide')
STD_ANON_24.Sphere_Plate_Carree = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Plate_Carree', tag='Sphere_Plate_Carree')
STD_ANON_24.Sphere_Polyconic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Polyconic', tag='Sphere_Polyconic')
STD_ANON_24.Sphere_Quartic_Authalic = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Quartic_Authalic', tag='Sphere_Quartic_Authalic')
STD_ANON_24.Sphere_Robinson = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Robinson', tag='Sphere_Robinson')
STD_ANON_24.Sphere_Sinusoidal = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Sinusoidal', tag='Sphere_Sinusoidal')
STD_ANON_24.Sphere_Times = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Times', tag='Sphere_Times')
STD_ANON_24.Sphere_Van_der_Grinten_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Van_der_Grinten_I', tag='Sphere_Van_der_Grinten_I')
STD_ANON_24.Sphere_Vertical_Perspective = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Vertical_Perspective', tag='Sphere_Vertical_Perspective')
STD_ANON_24.Sphere_Winkel_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Winkel_I', tag='Sphere_Winkel_I')
STD_ANON_24.Sphere_Winkel_II = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Winkel_II', tag='Sphere_Winkel_II')
STD_ANON_24.Sphere_Winkel_Tripel_NGS = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='Sphere_Winkel_Tripel_NGS', tag='Sphere_Winkel_Tripel_NGS')
STD_ANON_24.The_World_From_Space = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='The_World_From_Space', tag='The_World_From_Space')
STD_ANON_24.World_Times = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Times', tag='World_Times')
STD_ANON_24.World_Van_der_Grinten_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Van_der_Grinten_I', tag='World_Van_der_Grinten_I')
STD_ANON_24.World_Vertical_Perspective = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Vertical_Perspective', tag='World_Vertical_Perspective')
STD_ANON_24.World_Winkel_I = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Winkel_I', tag='World_Winkel_I')
STD_ANON_24.World_Winkel_II = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Winkel_II', tag='World_Winkel_II')
STD_ANON_24.World_Winkel_Tripel_NGS = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='World_Winkel_Tripel_NGS', tag='World_Winkel_Tripel_NGS')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)
_module_typeBindings.STD_ANON_24 = STD_ANON_24

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.float):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2367, 12)
    _Documentation = None
STD_ANON_25._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_25, value=pyxb.binding.datatypes.float(-180.0))
STD_ANON_25._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_25, value=pyxb.binding.datatypes.float(180.0))
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_minInclusive,
   STD_ANON_25._CF_maxInclusive)
_module_typeBindings.STD_ANON_25 = STD_ANON_25

# Atomic simple type: {https://eml.ecoinformatics.org/spatialReference-2.2.0}lengthUnits
class lengthUnits (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_spref, 'lengthUnits')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2549, 2)
    _Documentation = None
lengthUnits._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=lengthUnits, enum_prefix=None)
lengthUnits.meter = lengthUnits._CF_enumeration.addEnumeration(unicode_value='meter', tag='meter')
lengthUnits.nanometer = lengthUnits._CF_enumeration.addEnumeration(unicode_value='nanometer', tag='nanometer')
lengthUnits.micrometer = lengthUnits._CF_enumeration.addEnumeration(unicode_value='micrometer', tag='micrometer')
lengthUnits.micron = lengthUnits._CF_enumeration.addEnumeration(unicode_value='micron', tag='micron')
lengthUnits.millimeter = lengthUnits._CF_enumeration.addEnumeration(unicode_value='millimeter', tag='millimeter')
lengthUnits.centimeter = lengthUnits._CF_enumeration.addEnumeration(unicode_value='centimeter', tag='centimeter')
lengthUnits.decimeter = lengthUnits._CF_enumeration.addEnumeration(unicode_value='decimeter', tag='decimeter')
lengthUnits.dekameter = lengthUnits._CF_enumeration.addEnumeration(unicode_value='dekameter', tag='dekameter')
lengthUnits.hectometer = lengthUnits._CF_enumeration.addEnumeration(unicode_value='hectometer', tag='hectometer')
lengthUnits.kilometer = lengthUnits._CF_enumeration.addEnumeration(unicode_value='kilometer', tag='kilometer')
lengthUnits.megameter = lengthUnits._CF_enumeration.addEnumeration(unicode_value='megameter', tag='megameter')
lengthUnits.angstrom = lengthUnits._CF_enumeration.addEnumeration(unicode_value='angstrom', tag='angstrom')
lengthUnits.inch = lengthUnits._CF_enumeration.addEnumeration(unicode_value='inch', tag='inch')
lengthUnits.Foot_US = lengthUnits._CF_enumeration.addEnumeration(unicode_value='Foot_US', tag='Foot_US')
lengthUnits.foot = lengthUnits._CF_enumeration.addEnumeration(unicode_value='foot', tag='foot')
lengthUnits.Foot_Gold_Coast = lengthUnits._CF_enumeration.addEnumeration(unicode_value='Foot_Gold_Coast', tag='Foot_Gold_Coast')
lengthUnits.fathom = lengthUnits._CF_enumeration.addEnumeration(unicode_value='fathom', tag='fathom')
lengthUnits.nauticalMile = lengthUnits._CF_enumeration.addEnumeration(unicode_value='nauticalMile', tag='nauticalMile')
lengthUnits.yard = lengthUnits._CF_enumeration.addEnumeration(unicode_value='yard', tag='yard')
lengthUnits.Yard_Indian = lengthUnits._CF_enumeration.addEnumeration(unicode_value='Yard_Indian', tag='Yard_Indian')
lengthUnits.Link_Clarke = lengthUnits._CF_enumeration.addEnumeration(unicode_value='Link_Clarke', tag='Link_Clarke')
lengthUnits.Yard_Sears = lengthUnits._CF_enumeration.addEnumeration(unicode_value='Yard_Sears', tag='Yard_Sears')
lengthUnits.mile = lengthUnits._CF_enumeration.addEnumeration(unicode_value='mile', tag='mile')
lengthUnits._InitializeFacetMap(lengthUnits._CF_enumeration)
_Namespace_spref.addCategoryObject('typeBinding', 'lengthUnits', lengthUnits)
_module_typeBindings.lengthUnits = lengthUnits

# Atomic simple type: {https://eml.ecoinformatics.org/spatialReference-2.2.0}angleUnits
class angleUnits (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_spref, 'angleUnits')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2576, 2)
    _Documentation = None
angleUnits._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=angleUnits, enum_prefix=None)
angleUnits.radian = angleUnits._CF_enumeration.addEnumeration(unicode_value='radian', tag='radian')
angleUnits.degree = angleUnits._CF_enumeration.addEnumeration(unicode_value='degree', tag='degree')
angleUnits.grad = angleUnits._CF_enumeration.addEnumeration(unicode_value='grad', tag='grad')
angleUnits.degree_ = angleUnits._CF_enumeration.addEnumeration(unicode_value='degree', tag='degree_')
angleUnits.grad_ = angleUnits._CF_enumeration.addEnumeration(unicode_value='grad', tag='grad_')
angleUnits._InitializeFacetMap(angleUnits._CF_enumeration)
_Namespace_spref.addCategoryObject('typeBinding', 'angleUnits', angleUnits)
_module_typeBindings.angleUnits = angleUnits

# Atomic simple type: {https://eml.ecoinformatics.org/spatialVector-2.2.0}GeometryType
class GeometryType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sv, 'GeometryType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 197, 2)
    _Documentation = ''
GeometryType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GeometryType, enum_prefix=None)
GeometryType.Point = GeometryType._CF_enumeration.addEnumeration(unicode_value='Point', tag='Point')
GeometryType.LineString = GeometryType._CF_enumeration.addEnumeration(unicode_value='LineString', tag='LineString')
GeometryType.LinearRing = GeometryType._CF_enumeration.addEnumeration(unicode_value='LinearRing', tag='LinearRing')
GeometryType.Polygon = GeometryType._CF_enumeration.addEnumeration(unicode_value='Polygon', tag='Polygon')
GeometryType.MultiPoint = GeometryType._CF_enumeration.addEnumeration(unicode_value='MultiPoint', tag='MultiPoint')
GeometryType.MultiLineString = GeometryType._CF_enumeration.addEnumeration(unicode_value='MultiLineString', tag='MultiLineString')
GeometryType.MultiPolygon = GeometryType._CF_enumeration.addEnumeration(unicode_value='MultiPolygon', tag='MultiPolygon')
GeometryType.MultiGeometry = GeometryType._CF_enumeration.addEnumeration(unicode_value='MultiGeometry', tag='MultiGeometry')
GeometryType._InitializeFacetMap(GeometryType._CF_enumeration)
_Namespace_sv.addCategoryObject('typeBinding', 'GeometryType', GeometryType)
_module_typeBindings.GeometryType = GeometryType

# Atomic simple type: {https://eml.ecoinformatics.org/spatialVector-2.2.0}TopologyLevel
class TopologyLevel (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sv, 'TopologyLevel')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 216, 2)
    _Documentation = ''
TopologyLevel._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TopologyLevel, enum_prefix=None)
TopologyLevel.geometryOnly = TopologyLevel._CF_enumeration.addEnumeration(unicode_value='geometryOnly', tag='geometryOnly')
TopologyLevel.nonPlanarGraph = TopologyLevel._CF_enumeration.addEnumeration(unicode_value='nonPlanarGraph', tag='nonPlanarGraph')
TopologyLevel.planarLineGraph = TopologyLevel._CF_enumeration.addEnumeration(unicode_value='planarLineGraph', tag='planarLineGraph')
TopologyLevel.fullPlanarGraph = TopologyLevel._CF_enumeration.addEnumeration(unicode_value='fullPlanarGraph', tag='fullPlanarGraph')
TopologyLevel.surfaceGraph = TopologyLevel._CF_enumeration.addEnumeration(unicode_value='surfaceGraph', tag='surfaceGraph')
TopologyLevel.fullTopology3D = TopologyLevel._CF_enumeration.addEnumeration(unicode_value='fullTopology3D', tag='fullTopology3D')
TopologyLevel._InitializeFacetMap(TopologyLevel._CF_enumeration)
_Namespace_sv.addCategoryObject('typeBinding', 'TopologyLevel', TopologyLevel)
_module_typeBindings.TopologyLevel = TopologyLevel

# Union simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_26 (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_, STD_ANON_2."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 227, 8)
    _Documentation = None

    _MemberTypes = ( STD_ANON_, STD_ANON_2, )
STD_ANON_26._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_26._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_26)
STD_ANON_26.read = 'read'                         # originally STD_ANON_.read
STD_ANON_26.write = 'write'                       # originally STD_ANON_.write
STD_ANON_26.changePermission = 'changePermission' # originally STD_ANON_.changePermission
STD_ANON_26.all = 'all'                           # originally STD_ANON_.all
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_pattern,
   STD_ANON_26._CF_enumeration)
_module_typeBindings.STD_ANON_26 = STD_ANON_26

# Union simple type: {https://eml.ecoinformatics.org/constraint-2.2.0}CardinalityChildOccurancesType
# superclasses pyxb.binding.datatypes.anySimpleType
class CardinalityChildOccurancesType (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.binding.datatypes.integer, STD_ANON_4."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_con, 'CardinalityChildOccurancesType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 375, 2)
    _Documentation = ''

    _MemberTypes = ( pyxb.binding.datatypes.integer, STD_ANON_4, )
CardinalityChildOccurancesType.many = 'many'      # originally STD_ANON_4.many
CardinalityChildOccurancesType._InitializeFacetMap()
_Namespace_con.addCategoryObject('typeBinding', 'CardinalityChildOccurancesType', CardinalityChildOccurancesType)
_module_typeBindings.CardinalityChildOccurancesType = CardinalityChildOccurancesType

# Union simple type: {https://eml.ecoinformatics.org/party-2.2.0}RoleType
# superclasses pyxb.binding.datatypes.anySimpleType
class RoleType (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_14, STD_ANON_15."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_rp, 'RoleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 513, 2)
    _Documentation = ''

    _MemberTypes = ( STD_ANON_14, STD_ANON_15, )
RoleType.contentProvider = 'contentProvider'      # originally STD_ANON_14.contentProvider
RoleType.custodianSteward = 'custodianSteward'    # originally STD_ANON_14.custodianSteward
RoleType.owner = 'owner'                          # originally STD_ANON_14.owner
RoleType.user = 'user'                            # originally STD_ANON_14.user
RoleType.distributor = 'distributor'              # originally STD_ANON_14.distributor
RoleType.metadataProvider = 'metadataProvider'    # originally STD_ANON_14.metadataProvider
RoleType.originator = 'originator'                # originally STD_ANON_14.originator
RoleType.pointOfContact = 'pointOfContact'        # originally STD_ANON_14.pointOfContact
RoleType.principalInvestigator = 'principalInvestigator'# originally STD_ANON_14.principalInvestigator
RoleType.processor = 'processor'                  # originally STD_ANON_14.processor
RoleType.publisher = 'publisher'                  # originally STD_ANON_14.publisher
RoleType.author = 'author'                        # originally STD_ANON_14.author
RoleType.editor = 'editor'                        # originally STD_ANON_14.editor
RoleType._InitializeFacetMap()
_Namespace_rp.addCategoryObject('typeBinding', 'RoleType', RoleType)
_module_typeBindings.RoleType = RoleType

# Union simple type: {https://eml.ecoinformatics.org/project-2.2.0}DescriptorType
# superclasses pyxb.binding.datatypes.anySimpleType
class DescriptorType (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_20, STD_ANON_21."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_proj, 'DescriptorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 532, 2)
    _Documentation = ''

    _MemberTypes = ( STD_ANON_20, STD_ANON_21, )
DescriptorType.climate = 'climate'                # originally STD_ANON_20.climate
DescriptorType.hydrology = 'hydrology'            # originally STD_ANON_20.hydrology
DescriptorType.soils = 'soils'                    # originally STD_ANON_20.soils
DescriptorType.geology = 'geology'                # originally STD_ANON_20.geology
DescriptorType.disturbance = 'disturbance'        # originally STD_ANON_20.disturbance
DescriptorType.bailey = 'bailey'                  # originally STD_ANON_20.bailey
DescriptorType.biome = 'biome'                    # originally STD_ANON_20.biome
DescriptorType._InitializeFacetMap()
_Namespace_proj.addCategoryObject('typeBinding', 'DescriptorType', DescriptorType)
_module_typeBindings.DescriptorType = DescriptorType

# Complex type {https://eml.ecoinformatics.org/access-2.2.0}AccessRule with content type ELEMENT_ONLY
class AccessRule (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_acc, 'AccessRule')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 170, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element principal uses Python identifier principal
    __principal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'principal'), 'principal', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessRule_principal', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 184, 6), )

    
    principal = property(__principal.value, __principal.set, None, '')

    
    # Element permission uses Python identifier permission
    __permission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'permission'), 'permission', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessRule_permission', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 202, 6), )

    
    permission = property(__permission.value, __permission.set, None, '')

    _ElementMap.update({
        __principal.name() : __principal,
        __permission.name() : __permission
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AccessRule = AccessRule
_Namespace_acc.addCategoryObject('typeBinding', 'AccessRule', AccessRule)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 207, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute typeSystem uses Python identifier typeSystem
    __typeSystem = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'typeSystem'), 'typeSystem', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_typeSystem', pyxb.binding.datatypes.string, unicode_default='http://www.w3.org/2001/XMLSchema-datatypes')
    __typeSystem._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 210, 16)
    __typeSystem._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 210, 16)
    
    typeSystem = property(__typeSystem.value, __typeSystem.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __typeSystem.name() : __typeSystem
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 271, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element nominal uses Python identifier nominal
    __nominal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nominal'), 'nominal', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON__nominal', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 273, 14), )

    
    nominal = property(__nominal.value, __nominal.set, None, '')

    
    # Element ordinal uses Python identifier ordinal
    __ordinal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ordinal'), 'ordinal', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON__ordinal', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 295, 14), )

    
    ordinal = property(__ordinal.value, __ordinal.set, None, '')

    
    # Element interval uses Python identifier interval
    __interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interval'), 'interval', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON__interval', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 320, 14), )

    
    interval = property(__interval.value, __interval.set, None, '')

    
    # Element ratio uses Python identifier ratio
    __ratio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ratio'), 'ratio', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON__ratio', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 346, 14), )

    
    ratio = property(__ratio.value, __ratio.set, None, '')

    
    # Element dateTime uses Python identifier dateTime
    __dateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dateTime'), 'dateTime', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON__dateTime', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 373, 14), )

    
    dateTime = property(__dateTime.value, __dateTime.set, None, '')

    _ElementMap.update({
        __nominal.name() : __nominal,
        __ordinal.name() : __ordinal,
        __interval.name() : __interval,
        __ratio.name() : __ratio,
        __dateTime.name() : __dateTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 289, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element nonNumericDomain uses Python identifier nonNumericDomain
    __nonNumericDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nonNumericDomain'), 'nonNumericDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_2_nonNumericDomain', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 291, 20), )

    
    nonNumericDomain = property(__nonNumericDomain.value, __nonNumericDomain.set, None, None)

    _ElementMap.update({
        __nonNumericDomain.name() : __nonNumericDomain
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 314, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element nonNumericDomain uses Python identifier nonNumericDomain
    __nonNumericDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nonNumericDomain'), 'nonNumericDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_3_nonNumericDomain', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 316, 20), )

    
    nonNumericDomain = property(__nonNumericDomain.value, __nonNumericDomain.set, None, None)

    _ElementMap.update({
        __nonNumericDomain.name() : __nonNumericDomain
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 338, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_4_unit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 340, 20), )

    
    unit = property(__unit.value, __unit.set, None, None)

    
    # Element precision uses Python identifier precision
    __precision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'precision'), 'precision', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_4_precision', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 341, 20), )

    
    precision = property(__precision.value, __precision.set, None, None)

    
    # Element numericDomain uses Python identifier numericDomain
    __numericDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numericDomain'), 'numericDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_4_numericDomain', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 342, 20), )

    
    numericDomain = property(__numericDomain.value, __numericDomain.set, None, None)

    _ElementMap.update({
        __unit.name() : __unit,
        __precision.name() : __precision,
        __numericDomain.name() : __numericDomain
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 365, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_5_unit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 367, 20), )

    
    unit = property(__unit.value, __unit.set, None, None)

    
    # Element precision uses Python identifier precision
    __precision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'precision'), 'precision', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_5_precision', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 368, 20), )

    
    precision = property(__precision.value, __precision.set, None, None)

    
    # Element numericDomain uses Python identifier numericDomain
    __numericDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numericDomain'), 'numericDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_5_numericDomain', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 369, 20), )

    
    numericDomain = property(__numericDomain.value, __numericDomain.set, None, None)

    _ElementMap.update({
        __unit.name() : __unit,
        __precision.name() : __precision,
        __numericDomain.name() : __numericDomain
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 404, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element formatString uses Python identifier formatString
    __formatString = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'formatString'), 'formatString', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_6_formatString', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 406, 20), )

    
    formatString = property(__formatString.value, __formatString.set, None, '')

    
    # Element dateTimePrecision uses Python identifier dateTimePrecision
    __dateTimePrecision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dateTimePrecision'), 'dateTimePrecision', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_6_dateTimePrecision', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 528, 20), )

    
    dateTimePrecision = property(__dateTimePrecision.value, __dateTimePrecision.set, None, '')

    
    # Element dateTimeDomain uses Python identifier dateTimeDomain
    __dateTimeDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dateTimeDomain'), 'dateTimeDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_6_dateTimeDomain', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 551, 20), )

    
    dateTimeDomain = property(__dateTimeDomain.value, __dateTimeDomain.set, None, '')

    _ElementMap.update({
        __formatString.name() : __formatString,
        __dateTimePrecision.name() : __dateTimePrecision,
        __dateTimeDomain.name() : __dateTimeDomain
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 582, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_7_code', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 584, 14), )

    
    code = property(__code.value, __code.set, None, '')

    
    # Element codeExplanation uses Python identifier codeExplanation
    __codeExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'codeExplanation'), 'codeExplanation', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_7_codeExplanation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 601, 14), )

    
    codeExplanation = property(__codeExplanation.value, __codeExplanation.set, None, '')

    _ElementMap.update({
        __code.name() : __code,
        __codeExplanation.name() : __codeExplanation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}Accuracy with content type ELEMENT_ONLY
class Accuracy (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}Accuracy with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'Accuracy')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 705, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeAccuracyReport uses Python identifier attributeAccuracyReport
    __attributeAccuracyReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeAccuracyReport'), 'attributeAccuracyReport', '__httpseml_ecoinformatics_orgattribute_2_2_0_Accuracy_attributeAccuracyReport', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 707, 6), )

    
    attributeAccuracyReport = property(__attributeAccuracyReport.value, __attributeAccuracyReport.set, None, '')

    
    # Element quantitativeAttributeAccuracyAssessment uses Python identifier quantitativeAttributeAccuracyAssessment
    __quantitativeAttributeAccuracyAssessment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAttributeAccuracyAssessment'), 'quantitativeAttributeAccuracyAssessment', '__httpseml_ecoinformatics_orgattribute_2_2_0_Accuracy_quantitativeAttributeAccuracyAssessment', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 722, 6), )

    
    quantitativeAttributeAccuracyAssessment = property(__quantitativeAttributeAccuracyAssessment.value, __quantitativeAttributeAccuracyAssessment.set, None, '')

    _ElementMap.update({
        __attributeAccuracyReport.name() : __attributeAccuracyReport,
        __quantitativeAttributeAccuracyAssessment.name() : __quantitativeAttributeAccuracyAssessment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Accuracy = Accuracy
_Namespace_att.addCategoryObject('typeBinding', 'Accuracy', Accuracy)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 735, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeAccuracyValue uses Python identifier attributeAccuracyValue
    __attributeAccuracyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeAccuracyValue'), 'attributeAccuracyValue', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_8_attributeAccuracyValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 737, 12), )

    
    attributeAccuracyValue = property(__attributeAccuracyValue.value, __attributeAccuracyValue.set, None, '')

    
    # Element attributeAccuracyExplanation uses Python identifier attributeAccuracyExplanation
    __attributeAccuracyExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeAccuracyExplanation'), 'attributeAccuracyExplanation', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_8_attributeAccuracyExplanation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 750, 12), )

    
    attributeAccuracyExplanation = property(__attributeAccuracyExplanation.value, __attributeAccuracyExplanation.set, None, '')

    _ElementMap.update({
        __attributeAccuracyValue.name() : __attributeAccuracyValue,
        __attributeAccuracyExplanation.name() : __attributeAccuracyExplanation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}UnitType with content type ELEMENT_ONLY
class UnitType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'UnitType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 779, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element standardUnit uses Python identifier standardUnit
    __standardUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'standardUnit'), 'standardUnit', '__httpseml_ecoinformatics_orgattribute_2_2_0_UnitType_standardUnit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 797, 6), )

    
    standardUnit = property(__standardUnit.value, __standardUnit.set, None, '')

    
    # Element customUnit uses Python identifier customUnit
    __customUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'customUnit'), 'customUnit', '__httpseml_ecoinformatics_orgattribute_2_2_0_UnitType_customUnit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 816, 6), )

    
    customUnit = property(__customUnit.value, __customUnit.set, None, '')

    _ElementMap.update({
        __standardUnit.name() : __standardUnit,
        __customUnit.name() : __customUnit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UnitType = UnitType
_Namespace_att.addCategoryObject('typeBinding', 'UnitType', UnitType)


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}PrecisionType with content type SIMPLE
class PrecisionType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.float
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'PrecisionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 834, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.float
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PrecisionType = PrecisionType
_Namespace_att.addCategoryObject('typeBinding', 'PrecisionType', PrecisionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 915, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_9_code', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 917, 20), )

    
    code = property(__code.value, __code.set, None, '')

    
    # Element definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'definition'), 'definition', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_9_definition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 933, 20), )

    
    definition = property(__definition.value, __definition.set, None, '')

    
    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_9_source', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 948, 20), )

    
    source = property(__source.value, __source.set, None, '')

    
    # Attribute order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'order'), 'order', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_9_order', pyxb.binding.datatypes.long)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 969, 18)
    __order._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 969, 18)
    
    order = property(__order.value, __order.set, None, '')

    _ElementMap.update({
        __code.name() : __code,
        __definition.name() : __definition,
        __source.name() : __source
    })
    _AttributeMap.update({
        __order.name() : __order
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1007, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element codesetName uses Python identifier codesetName
    __codesetName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'codesetName'), 'codesetName', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_10_codesetName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1009, 20), )

    
    codesetName = property(__codesetName.value, __codesetName.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_10_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1024, 22), )

    
    citation = property(__citation.value, __citation.set, None, '')

    
    # Element codesetURL uses Python identifier codesetURL
    __codesetURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'codesetURL'), 'codesetURL', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_10_codesetURL', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1036, 22), )

    
    codesetURL = property(__codesetURL.value, __codesetURL.set, None, '')

    _ElementMap.update({
        __codesetName.name() : __codesetName,
        __citation.name() : __citation,
        __codesetURL.name() : __codesetURL
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1066, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element entityReference uses Python identifier entityReference
    __entityReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityReference'), 'entityReference', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_11_entityReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1068, 20), )

    
    entityReference = property(__entityReference.value, __entityReference.set, None, '')

    
    # Element valueAttributeReference uses Python identifier valueAttributeReference
    __valueAttributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'valueAttributeReference'), 'valueAttributeReference', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_11_valueAttributeReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1084, 20), )

    
    valueAttributeReference = property(__valueAttributeReference.value, __valueAttributeReference.set, None, '')

    
    # Element definitionAttributeReference uses Python identifier definitionAttributeReference
    __definitionAttributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'definitionAttributeReference'), 'definitionAttributeReference', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_11_definitionAttributeReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1101, 20), )

    
    definitionAttributeReference = property(__definitionAttributeReference.value, __definitionAttributeReference.set, None, '')

    
    # Element orderAttributeReference uses Python identifier orderAttributeReference
    __orderAttributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orderAttributeReference'), 'orderAttributeReference', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_11_orderAttributeReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1119, 20), )

    
    orderAttributeReference = property(__orderAttributeReference.value, __orderAttributeReference.set, None, '')

    _ElementMap.update({
        __entityReference.name() : __entityReference,
        __valueAttributeReference.name() : __valueAttributeReference,
        __definitionAttributeReference.name() : __definitionAttributeReference,
        __orderAttributeReference.name() : __orderAttributeReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1191, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'definition'), 'definition', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_12_definition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1193, 14), )

    
    definition = property(__definition.value, __definition.set, None, '')

    
    # Element pattern uses Python identifier pattern
    __pattern = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pattern'), 'pattern', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_12_pattern', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1213, 14), )

    
    pattern = property(__pattern.value, __pattern.set, None, '')

    
    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_12_source', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1238, 14), )

    
    source = property(__source.value, __source.set, None, '')

    _ElementMap.update({
        __definition.name() : __definition,
        __pattern.name() : __pattern,
        __source.name() : __source
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1364, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'minimum'), 'minimum', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_13_minimum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1366, 12), )

    
    minimum = property(__minimum.value, __minimum.set, None, '')

    
    # Element maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maximum'), 'maximum', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_13_maximum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1406, 12), )

    
    maximum = property(__maximum.value, __maximum.set, None, '')

    _ElementMap.update({
        __minimum.name() : __minimum,
        __maximum.name() : __maximum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.float
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1377, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.float
    
    # Attribute exclusive uses Python identifier exclusive
    __exclusive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'exclusive'), 'exclusive', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_14_exclusive', pyxb.binding.datatypes.boolean, required=True)
    __exclusive._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1380, 20)
    __exclusive._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1380, 20)
    
    exclusive = property(__exclusive.value, __exclusive.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __exclusive.name() : __exclusive
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.float
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1417, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.float
    
    # Attribute exclusive uses Python identifier exclusive
    __exclusive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'exclusive'), 'exclusive', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_15_exclusive', pyxb.binding.datatypes.boolean, required=True)
    __exclusive._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1420, 20)
    __exclusive._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1420, 20)
    
    exclusive = property(__exclusive.value, __exclusive.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __exclusive.name() : __exclusive
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1489, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'minimum'), 'minimum', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_16_minimum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1491, 12), )

    
    minimum = property(__minimum.value, __minimum.set, None, '')

    
    # Element maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maximum'), 'maximum', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_16_maximum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1531, 12), )

    
    maximum = property(__maximum.value, __maximum.set, None, '')

    _ElementMap.update({
        __minimum.name() : __minimum,
        __maximum.name() : __maximum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1502, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute exclusive uses Python identifier exclusive
    __exclusive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'exclusive'), 'exclusive', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_17_exclusive', pyxb.binding.datatypes.boolean, required=True)
    __exclusive._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1505, 20)
    __exclusive._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1505, 20)
    
    exclusive = property(__exclusive.value, __exclusive.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __exclusive.name() : __exclusive
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1542, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute exclusive uses Python identifier exclusive
    __exclusive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'exclusive'), 'exclusive', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_18_exclusive', pyxb.binding.datatypes.boolean, required=True)
    __exclusive._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1545, 20)
    __exclusive._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1545, 20)
    
    exclusive = property(__exclusive.value, __exclusive.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __exclusive.name() : __exclusive
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 90, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'key'), 'key', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_key', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 93, 12), )

    
    key = property(__key.value, __key.set, None, '')

    
    # Element constraintName uses Python identifier constraintName
    __constraintName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintName'), 'constraintName', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_constraintName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6), )

    
    constraintName = property(__constraintName.value, __constraintName.set, None, '')

    
    # Element constraintDescription uses Python identifier constraintDescription
    __constraintDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintDescription'), 'constraintDescription', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_constraintDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6), )

    
    constraintDescription = property(__constraintDescription.value, __constraintDescription.set, None, '')

    _ElementMap.update({
        __key.name() : __key,
        __constraintName.name() : __constraintName,
        __constraintDescription.name() : __constraintDescription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 111, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeReference uses Python identifier attributeReference
    __attributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeReference'), 'attributeReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON__attributeReference', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 113, 18), )

    
    attributeReference = property(__attributeReference.value, __attributeReference.set, None, '')

    _ElementMap.update({
        __attributeReference.name() : __attributeReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 148, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'key'), 'key', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_2_key', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 151, 12), )

    
    key = property(__key.value, __key.set, None, '')

    
    # Element constraintName uses Python identifier constraintName
    __constraintName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintName'), 'constraintName', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_2_constraintName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6), )

    
    constraintName = property(__constraintName.value, __constraintName.set, None, '')

    
    # Element constraintDescription uses Python identifier constraintDescription
    __constraintDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintDescription'), 'constraintDescription', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_2_constraintDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6), )

    
    constraintDescription = property(__constraintDescription.value, __constraintDescription.set, None, '')

    _ElementMap.update({
        __key.name() : __key,
        __constraintName.name() : __constraintName,
        __constraintDescription.name() : __constraintDescription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 168, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeReference uses Python identifier attributeReference
    __attributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeReference'), 'attributeReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_3_attributeReference', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 170, 18), )

    
    attributeReference = property(__attributeReference.value, __attributeReference.set, None, '')

    _ElementMap.update({
        __attributeReference.name() : __attributeReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 204, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element checkCondition uses Python identifier checkCondition
    __checkCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'checkCondition'), 'checkCondition', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_4_checkCondition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 207, 12), )

    
    checkCondition = property(__checkCondition.value, __checkCondition.set, None, '')

    
    # Element constraintName uses Python identifier constraintName
    __constraintName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintName'), 'constraintName', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_4_constraintName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6), )

    
    constraintName = property(__constraintName.value, __constraintName.set, None, '')

    
    # Element constraintDescription uses Python identifier constraintDescription
    __constraintDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintDescription'), 'constraintDescription', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_4_constraintDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6), )

    
    constraintDescription = property(__constraintDescription.value, __constraintDescription.set, None, '')

    
    # Attribute language uses Python identifier language
    __language = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'language'), 'language', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_4_language', pyxb.binding.datatypes.string)
    __language._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 226, 10)
    __language._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 226, 10)
    
    language = property(__language.value, __language.set, None, '')

    _ElementMap.update({
        __checkCondition.name() : __checkCondition,
        __constraintName.name() : __constraintName,
        __constraintDescription.name() : __constraintDescription
    })
    _AttributeMap.update({
        __language.name() : __language
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 258, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element constraintName uses Python identifier constraintName
    __constraintName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintName'), 'constraintName', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_5_constraintName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6), )

    
    constraintName = property(__constraintName.value, __constraintName.set, None, '')

    
    # Element constraintDescription uses Python identifier constraintDescription
    __constraintDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintDescription'), 'constraintDescription', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_5_constraintDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6), )

    
    constraintDescription = property(__constraintDescription.value, __constraintDescription.set, None, '')

    
    # Element key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'key'), 'key', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_5_key', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 436, 6), )

    
    key = property(__key.value, __key.set, None, '')

    
    # Element entityReference uses Python identifier entityReference
    __entityReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityReference'), 'entityReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_5_entityReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 471, 6), )

    
    entityReference = property(__entityReference.value, __entityReference.set, None, '')

    
    # Element relationshipType uses Python identifier relationshipType
    __relationshipType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relationshipType'), 'relationshipType', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_5_relationshipType', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6), )

    
    relationshipType = property(__relationshipType.value, __relationshipType.set, None, '')

    
    # Element cardinality uses Python identifier cardinality
    __cardinality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cardinality'), 'cardinality', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_5_cardinality', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6), )

    
    cardinality = property(__cardinality.value, __cardinality.set, None, '')

    _ElementMap.update({
        __constraintName.name() : __constraintName,
        __constraintDescription.name() : __constraintDescription,
        __key.name() : __key,
        __entityReference.name() : __entityReference,
        __relationshipType.name() : __relationshipType,
        __cardinality.name() : __cardinality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 274, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element referencedKey uses Python identifier referencedKey
    __referencedKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'referencedKey'), 'referencedKey', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_referencedKey', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 277, 12), )

    
    referencedKey = property(__referencedKey.value, __referencedKey.set, None, '')

    
    # Element constraintName uses Python identifier constraintName
    __constraintName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintName'), 'constraintName', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_constraintName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6), )

    
    constraintName = property(__constraintName.value, __constraintName.set, None, '')

    
    # Element constraintDescription uses Python identifier constraintDescription
    __constraintDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintDescription'), 'constraintDescription', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_constraintDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6), )

    
    constraintDescription = property(__constraintDescription.value, __constraintDescription.set, None, '')

    
    # Element key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'key'), 'key', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_key', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 436, 6), )

    
    key = property(__key.value, __key.set, None, '')

    
    # Element entityReference uses Python identifier entityReference
    __entityReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityReference'), 'entityReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_entityReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 471, 6), )

    
    entityReference = property(__entityReference.value, __entityReference.set, None, '')

    
    # Element relationshipType uses Python identifier relationshipType
    __relationshipType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relationshipType'), 'relationshipType', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_relationshipType', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6), )

    
    relationshipType = property(__relationshipType.value, __relationshipType.set, None, '')

    
    # Element cardinality uses Python identifier cardinality
    __cardinality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cardinality'), 'cardinality', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_6_cardinality', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6), )

    
    cardinality = property(__cardinality.value, __cardinality.set, None, '')

    _ElementMap.update({
        __referencedKey.name() : __referencedKey,
        __constraintName.name() : __constraintName,
        __constraintDescription.name() : __constraintDescription,
        __key.name() : __key,
        __entityReference.name() : __entityReference,
        __relationshipType.name() : __relationshipType,
        __cardinality.name() : __cardinality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 293, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeReference uses Python identifier attributeReference
    __attributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeReference'), 'attributeReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_7_attributeReference', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 295, 18), )

    
    attributeReference = property(__attributeReference.value, __attributeReference.set, None, '')

    _ElementMap.update({
        __attributeReference.name() : __attributeReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 328, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'key'), 'key', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_8_key', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 331, 12), )

    
    key = property(__key.value, __key.set, None, '')

    
    # Element constraintName uses Python identifier constraintName
    __constraintName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintName'), 'constraintName', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_8_constraintName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6), )

    
    constraintName = property(__constraintName.value, __constraintName.set, None, '')

    
    # Element constraintDescription uses Python identifier constraintDescription
    __constraintDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraintDescription'), 'constraintDescription', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_8_constraintDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6), )

    
    constraintDescription = property(__constraintDescription.value, __constraintDescription.set, None, '')

    _ElementMap.update({
        __key.name() : __key,
        __constraintName.name() : __constraintName,
        __constraintDescription.name() : __constraintDescription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 347, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeReference uses Python identifier attributeReference
    __attributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeReference'), 'attributeReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_9_attributeReference', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 349, 18), )

    
    attributeReference = property(__attributeReference.value, __attributeReference.set, None, '')

    _ElementMap.update({
        __attributeReference.name() : __attributeReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 451, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeReference uses Python identifier attributeReference
    __attributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeReference'), 'attributeReference', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_10_attributeReference', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 453, 12), )

    
    attributeReference = property(__attributeReference.value, __attributeReference.set, None, '')

    _ElementMap.update({
        __attributeReference.name() : __attributeReference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 531, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element parentOccurences uses Python identifier parentOccurences
    __parentOccurences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentOccurences'), 'parentOccurences', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_11_parentOccurences', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 533, 12), )

    
    parentOccurences = property(__parentOccurences.value, __parentOccurences.set, None, '')

    
    # Element childOccurences uses Python identifier childOccurences
    __childOccurences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'childOccurences'), 'childOccurences', '__httpseml_ecoinformatics_orgconstraint_2_2_0_CTD_ANON_11_childOccurences', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 557, 12), )

    
    childOccurences = property(__childOccurences.value, __childOccurences.set, None, '')

    _ElementMap.update({
        __parentOccurences.name() : __parentOccurences,
        __childOccurences.name() : __childOccurences
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 159, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element beginDate uses Python identifier beginDate
    __beginDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'beginDate'), 'beginDate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_beginDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 161, 14), )

    
    beginDate = property(__beginDate.value, __beginDate.set, None, '')

    
    # Element endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endDate'), 'endDate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_endDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 174, 14), )

    
    endDate = property(__endDate.value, __endDate.set, None, '')

    _ElementMap.update({
        __beginDate.name() : __beginDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}SingleDateTimeType with content type ELEMENT_ONLY
class SingleDateTimeType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'SingleDateTimeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 195, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element calendarDate uses Python identifier calendarDate
    __calendarDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'calendarDate'), 'calendarDate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_SingleDateTimeType_calendarDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 208, 8), )

    
    calendarDate = property(__calendarDate.value, __calendarDate.set, None, '')

    
    # Element time uses Python identifier time
    __time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'time'), 'time', '__httpseml_ecoinformatics_orgcoverage_2_2_0_SingleDateTimeType_time', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 226, 8), )

    
    time = property(__time.value, __time.set, None, '')

    
    # Element alternativeTimeScale uses Python identifier alternativeTimeScale
    __alternativeTimeScale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternativeTimeScale'), 'alternativeTimeScale', '__httpseml_ecoinformatics_orgcoverage_2_2_0_SingleDateTimeType_alternativeTimeScale', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 251, 6), )

    
    alternativeTimeScale = property(__alternativeTimeScale.value, __alternativeTimeScale.set, None, '')

    _ElementMap.update({
        __calendarDate.name() : __calendarDate,
        __time.name() : __time,
        __alternativeTimeScale.name() : __alternativeTimeScale
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SingleDateTimeType = SingleDateTimeType
_Namespace_cov.addCategoryObject('typeBinding', 'SingleDateTimeType', SingleDateTimeType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 275, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element timeScaleName uses Python identifier timeScaleName
    __timeScaleName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeScaleName'), 'timeScaleName', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON__timeScaleName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 277, 12), )

    
    timeScaleName = property(__timeScaleName.value, __timeScaleName.set, None, '')

    
    # Element timeScaleAgeEstimate uses Python identifier timeScaleAgeEstimate
    __timeScaleAgeEstimate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeScaleAgeEstimate'), 'timeScaleAgeEstimate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON__timeScaleAgeEstimate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 291, 12), )

    
    timeScaleAgeEstimate = property(__timeScaleAgeEstimate.value, __timeScaleAgeEstimate.set, None, '')

    
    # Element timeScaleAgeUncertainty uses Python identifier timeScaleAgeUncertainty
    __timeScaleAgeUncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeScaleAgeUncertainty'), 'timeScaleAgeUncertainty', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON__timeScaleAgeUncertainty', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 312, 12), )

    
    timeScaleAgeUncertainty = property(__timeScaleAgeUncertainty.value, __timeScaleAgeUncertainty.set, None, '')

    
    # Element timeScaleAgeExplanation uses Python identifier timeScaleAgeExplanation
    __timeScaleAgeExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeScaleAgeExplanation'), 'timeScaleAgeExplanation', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON__timeScaleAgeExplanation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 324, 12), )

    
    timeScaleAgeExplanation = property(__timeScaleAgeExplanation.value, __timeScaleAgeExplanation.set, None, '')

    
    # Element timeScaleCitation uses Python identifier timeScaleCitation
    __timeScaleCitation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timeScaleCitation'), 'timeScaleCitation', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON__timeScaleCitation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 336, 12), )

    
    timeScaleCitation = property(__timeScaleCitation.value, __timeScaleCitation.set, None, '')

    _ElementMap.update({
        __timeScaleName.name() : __timeScaleName,
        __timeScaleAgeEstimate.name() : __timeScaleAgeEstimate,
        __timeScaleAgeUncertainty.name() : __timeScaleAgeUncertainty,
        __timeScaleAgeExplanation.name() : __timeScaleAgeExplanation,
        __timeScaleCitation.name() : __timeScaleCitation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 448, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element westBoundingCoordinate uses Python identifier westBoundingCoordinate
    __westBoundingCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'westBoundingCoordinate'), 'westBoundingCoordinate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_2_westBoundingCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 450, 14), )

    
    westBoundingCoordinate = property(__westBoundingCoordinate.value, __westBoundingCoordinate.set, None, '')

    
    # Element eastBoundingCoordinate uses Python identifier eastBoundingCoordinate
    __eastBoundingCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eastBoundingCoordinate'), 'eastBoundingCoordinate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_2_eastBoundingCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 483, 14), )

    
    eastBoundingCoordinate = property(__eastBoundingCoordinate.value, __eastBoundingCoordinate.set, None, '')

    
    # Element northBoundingCoordinate uses Python identifier northBoundingCoordinate
    __northBoundingCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'northBoundingCoordinate'), 'northBoundingCoordinate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_2_northBoundingCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 516, 14), )

    
    northBoundingCoordinate = property(__northBoundingCoordinate.value, __northBoundingCoordinate.set, None, '')

    
    # Element southBoundingCoordinate uses Python identifier southBoundingCoordinate
    __southBoundingCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'southBoundingCoordinate'), 'southBoundingCoordinate', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_2_southBoundingCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 545, 14), )

    
    southBoundingCoordinate = property(__southBoundingCoordinate.value, __southBoundingCoordinate.set, None, '')

    
    # Element boundingAltitudes uses Python identifier boundingAltitudes
    __boundingAltitudes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'boundingAltitudes'), 'boundingAltitudes', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_2_boundingAltitudes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 574, 14), )

    
    boundingAltitudes = property(__boundingAltitudes.value, __boundingAltitudes.set, None, '')

    _ElementMap.update({
        __westBoundingCoordinate.name() : __westBoundingCoordinate,
        __eastBoundingCoordinate.name() : __eastBoundingCoordinate,
        __northBoundingCoordinate.name() : __northBoundingCoordinate,
        __southBoundingCoordinate.name() : __southBoundingCoordinate,
        __boundingAltitudes.name() : __boundingAltitudes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 589, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element altitudeMinimum uses Python identifier altitudeMinimum
    __altitudeMinimum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeMinimum'), 'altitudeMinimum', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_3_altitudeMinimum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 591, 20), )

    
    altitudeMinimum = property(__altitudeMinimum.value, __altitudeMinimum.set, None, '')

    
    # Element altitudeMaximum uses Python identifier altitudeMaximum
    __altitudeMaximum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeMaximum'), 'altitudeMaximum', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_3_altitudeMaximum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 605, 20), )

    
    altitudeMaximum = property(__altitudeMaximum.value, __altitudeMaximum.set, None, '')

    
    # Element altitudeUnits uses Python identifier altitudeUnits
    __altitudeUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeUnits'), 'altitudeUnits', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_3_altitudeUnits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 619, 20), )

    
    altitudeUnits = property(__altitudeUnits.value, __altitudeUnits.set, None, '')

    _ElementMap.update({
        __altitudeMinimum.name() : __altitudeMinimum,
        __altitudeMaximum.name() : __altitudeMaximum,
        __altitudeUnits.name() : __altitudeUnits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 649, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element datasetGPolygonOuterGRing uses Python identifier datasetGPolygonOuterGRing
    __datasetGPolygonOuterGRing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'datasetGPolygonOuterGRing'), 'datasetGPolygonOuterGRing', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_4_datasetGPolygonOuterGRing', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 651, 14), )

    
    datasetGPolygonOuterGRing = property(__datasetGPolygonOuterGRing.value, __datasetGPolygonOuterGRing.set, None, '')

    
    # Element datasetGPolygonExclusionGRing uses Python identifier datasetGPolygonExclusionGRing
    __datasetGPolygonExclusionGRing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'datasetGPolygonExclusionGRing'), 'datasetGPolygonExclusionGRing', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_4_datasetGPolygonExclusionGRing', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 710, 14), )

    
    datasetGPolygonExclusionGRing = property(__datasetGPolygonExclusionGRing.value, __datasetGPolygonExclusionGRing.set, None, '')

    _ElementMap.update({
        __datasetGPolygonOuterGRing.name() : __datasetGPolygonOuterGRing,
        __datasetGPolygonExclusionGRing.name() : __datasetGPolygonExclusionGRing
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 676, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element gRingPoint uses Python identifier gRingPoint
    __gRingPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gRingPoint'), 'gRingPoint', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_5_gRingPoint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 679, 22), )

    
    gRingPoint = property(__gRingPoint.value, __gRingPoint.set, None, '')

    
    # Element gRing uses Python identifier gRing
    __gRing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gRing'), 'gRing', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_5_gRing', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 694, 20), )

    
    gRing = property(__gRing.value, __gRing.set, None, '')

    _ElementMap.update({
        __gRingPoint.name() : __gRingPoint,
        __gRing.name() : __gRing
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 735, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element gRingPoint uses Python identifier gRingPoint
    __gRingPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gRingPoint'), 'gRingPoint', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_6_gRingPoint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 737, 20), )

    
    gRingPoint = property(__gRingPoint.value, __gRingPoint.set, None, '')

    
    # Element gRing uses Python identifier gRing
    __gRing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gRing'), 'gRing', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_6_gRing', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 750, 20), )

    
    gRing = property(__gRing.value, __gRing.set, None, '')

    _ElementMap.update({
        __gRingPoint.name() : __gRingPoint,
        __gRing.name() : __gRing
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}GRingPointType with content type ELEMENT_ONLY
class GRingPointType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'GRingPointType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 772, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element gRingLatitude uses Python identifier gRingLatitude
    __gRingLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gRingLatitude'), 'gRingLatitude', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GRingPointType_gRingLatitude', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 783, 6), )

    
    gRingLatitude = property(__gRingLatitude.value, __gRingLatitude.set, None, '')

    
    # Element gRingLongitude uses Python identifier gRingLongitude
    __gRingLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gRingLongitude'), 'gRingLongitude', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GRingPointType_gRingLongitude', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 807, 6), )

    
    gRingLongitude = property(__gRingLongitude.value, __gRingLongitude.set, None, '')

    _ElementMap.update({
        __gRingLatitude.name() : __gRingLatitude,
        __gRingLongitude.name() : __gRingLongitude
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GRingPointType = GRingPointType
_Namespace_cov.addCategoryObject('typeBinding', 'GRingPointType', GRingPointType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 889, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element classificationSystem uses Python identifier classificationSystem
    __classificationSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'classificationSystem'), 'classificationSystem', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_7_classificationSystem', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 891, 14), )

    
    classificationSystem = property(__classificationSystem.value, __classificationSystem.set, None, '')

    
    # Element identificationReference uses Python identifier identificationReference
    __identificationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identificationReference'), 'identificationReference', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_7_identificationReference', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 928, 14), )

    
    identificationReference = property(__identificationReference.value, __identificationReference.set, None, '')

    
    # Element identifierName uses Python identifier identifierName
    __identifierName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identifierName'), 'identifierName', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_7_identifierName', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 940, 14), )

    
    identifierName = property(__identifierName.value, __identifierName.set, None, '')

    
    # Element taxonomicProcedures uses Python identifier taxonomicProcedures
    __taxonomicProcedures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonomicProcedures'), 'taxonomicProcedures', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_7_taxonomicProcedures', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 950, 14), )

    
    taxonomicProcedures = property(__taxonomicProcedures.value, __taxonomicProcedures.set, None, '')

    
    # Element taxonomicCompleteness uses Python identifier taxonomicCompleteness
    __taxonomicCompleteness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonomicCompleteness'), 'taxonomicCompleteness', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_7_taxonomicCompleteness', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 962, 14), )

    
    taxonomicCompleteness = property(__taxonomicCompleteness.value, __taxonomicCompleteness.set, None, '')

    
    # Element vouchers uses Python identifier vouchers
    __vouchers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vouchers'), 'vouchers', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_7_vouchers', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 976, 14), )

    
    vouchers = property(__vouchers.value, __vouchers.set, None, '')

    _ElementMap.update({
        __classificationSystem.name() : __classificationSystem,
        __identificationReference.name() : __identificationReference,
        __identifierName.name() : __identifierName,
        __taxonomicProcedures.name() : __taxonomicProcedures,
        __taxonomicCompleteness.name() : __taxonomicCompleteness,
        __vouchers.name() : __vouchers
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 902, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element classificationSystemCitation uses Python identifier classificationSystemCitation
    __classificationSystemCitation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'classificationSystemCitation'), 'classificationSystemCitation', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_8_classificationSystemCitation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 904, 20), )

    
    classificationSystemCitation = property(__classificationSystemCitation.value, __classificationSystemCitation.set, None, '')

    
    # Element classificationSystemModifications uses Python identifier classificationSystemModifications
    __classificationSystemModifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'classificationSystemModifications'), 'classificationSystemModifications', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_8_classificationSystemModifications', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 914, 20), )

    
    classificationSystemModifications = property(__classificationSystemModifications.value, __classificationSystemModifications.set, None, '')

    _ElementMap.update({
        __classificationSystemCitation.name() : __classificationSystemCitation,
        __classificationSystemModifications.name() : __classificationSystemModifications
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 985, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_9_specimen', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 987, 20), )

    
    specimen = property(__specimen.value, __specimen.set, None, '')

    
    # Element repository uses Python identifier repository
    __repository = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'repository'), 'repository', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_9_repository', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 999, 20), )

    
    repository = property(__repository.value, __repository.set, None, '')

    _ElementMap.update({
        __specimen.name() : __specimen,
        __repository.name() : __repository
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1008, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element originator uses Python identifier originator
    __originator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originator'), 'originator', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_10_originator', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1010, 26), )

    
    originator = property(__originator.value, __originator.set, None, '')

    _ElementMap.update({
        __originator.name() : __originator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1145, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute provider uses Python identifier provider
    __provider = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'provider'), 'provider', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_11_provider', pyxb.binding.datatypes.anyURI, required=True)
    __provider._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1148, 14)
    __provider._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1148, 14)
    
    provider = property(__provider.value, __provider.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __provider.name() : __provider
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type {https://eml.ecoinformatics.org/dataset-2.2.0}MaintenanceType with content type ELEMENT_ONLY
class MaintenanceType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_ds, 'MaintenanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 396, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpseml_ecoinformatics_orgdataset_2_2_0_MaintenanceType_description', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 408, 6), )

    
    description = property(__description.value, __description.set, None, '')

    
    # Element maintenanceUpdateFrequency uses Python identifier maintenanceUpdateFrequency
    __maintenanceUpdateFrequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maintenanceUpdateFrequency'), 'maintenanceUpdateFrequency', '__httpseml_ecoinformatics_orgdataset_2_2_0_MaintenanceType_maintenanceUpdateFrequency', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 420, 6), )

    
    maintenanceUpdateFrequency = property(__maintenanceUpdateFrequency.value, __maintenanceUpdateFrequency.set, None, '')

    
    # Element changeHistory uses Python identifier changeHistory
    __changeHistory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'changeHistory'), 'changeHistory', '__httpseml_ecoinformatics_orgdataset_2_2_0_MaintenanceType_changeHistory', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 434, 6), )

    
    changeHistory = property(__changeHistory.value, __changeHistory.set, None, '')

    _ElementMap.update({
        __description.name() : __description,
        __maintenanceUpdateFrequency.name() : __maintenanceUpdateFrequency,
        __changeHistory.name() : __changeHistory
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MaintenanceType = MaintenanceType
_Namespace_ds.addCategoryObject('typeBinding', 'MaintenanceType', MaintenanceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 444, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element changeScope uses Python identifier changeScope
    __changeScope = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'changeScope'), 'changeScope', '__httpseml_ecoinformatics_orgdataset_2_2_0_CTD_ANON_changeScope', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 446, 12), )

    
    changeScope = property(__changeScope.value, __changeScope.set, None, '')

    
    # Element oldValue uses Python identifier oldValue
    __oldValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'oldValue'), 'oldValue', '__httpseml_ecoinformatics_orgdataset_2_2_0_CTD_ANON_oldValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 459, 12), )

    
    oldValue = property(__oldValue.value, __oldValue.set, None, '')

    
    # Element changeDate uses Python identifier changeDate
    __changeDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'changeDate'), 'changeDate', '__httpseml_ecoinformatics_orgdataset_2_2_0_CTD_ANON_changeDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 471, 12), )

    
    changeDate = property(__changeDate.value, __changeDate.set, None, '')

    
    # Element comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comment'), 'comment', '__httpseml_ecoinformatics_orgdataset_2_2_0_CTD_ANON_comment', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 481, 12), )

    
    comment = property(__comment.value, __comment.set, None, '')

    _ElementMap.update({
        __changeScope.name() : __changeScope,
        __oldValue.name() : __oldValue,
        __changeDate.name() : __changeDate,
        __comment.name() : __comment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Article with content type ELEMENT_ONLY
class Article (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Article')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 271, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element journal uses Python identifier journal
    __journal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'journal'), 'journal', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_journal', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 283, 6), )

    
    journal = property(__journal.value, __journal.set, None, '')

    
    # Element volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'volume'), 'volume', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_volume', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 297, 6), )

    
    volume = property(__volume.value, __volume.set, None, '')

    
    # Element issue uses Python identifier issue
    __issue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'issue'), 'issue', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_issue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 309, 6), )

    
    issue = property(__issue.value, __issue.set, None, '')

    
    # Element pageRange uses Python identifier pageRange
    __pageRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pageRange'), 'pageRange', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_pageRange', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 321, 6), )

    
    pageRange = property(__pageRange.value, __pageRange.set, None, '')

    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 334, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element publicationPlace uses Python identifier publicationPlace
    __publicationPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicationPlace'), 'publicationPlace', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_publicationPlace', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 347, 6), )

    
    publicationPlace = property(__publicationPlace.value, __publicationPlace.set, None, '')

    
    # Element ISSN uses Python identifier ISSN
    __ISSN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISSN'), 'ISSN', '__httpseml_ecoinformatics_orgliterature_2_2_0_Article_ISSN', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 361, 6), )

    
    ISSN = property(__ISSN.value, __ISSN.set, None, '')

    _ElementMap.update({
        __journal.name() : __journal,
        __volume.name() : __volume,
        __issue.name() : __issue,
        __pageRange.name() : __pageRange,
        __publisher.name() : __publisher,
        __publicationPlace.name() : __publicationPlace,
        __ISSN.name() : __ISSN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Article = Article
_Namespace_cit.addCategoryObject('typeBinding', 'Article', Article)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Book with content type ELEMENT_ONLY
class Book (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Book')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 376, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 386, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element publicationPlace uses Python identifier publicationPlace
    __publicationPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicationPlace'), 'publicationPlace', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_publicationPlace', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6), )

    
    publicationPlace = property(__publicationPlace.value, __publicationPlace.set, None, '')

    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_edition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6), )

    
    edition = property(__edition.value, __edition.set, None, '')

    
    # Element volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'volume'), 'volume', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_volume', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6), )

    
    volume = property(__volume.value, __volume.set, None, '')

    
    # Element numberOfVolumes uses Python identifier numberOfVolumes
    __numberOfVolumes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numberOfVolumes'), 'numberOfVolumes', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_numberOfVolumes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6), )

    
    numberOfVolumes = property(__numberOfVolumes.value, __numberOfVolumes.set, None, '')

    
    # Element totalPages uses Python identifier totalPages
    __totalPages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalPages'), 'totalPages', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_totalPages', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6), )

    
    totalPages = property(__totalPages.value, __totalPages.set, None, '')

    
    # Element totalFigures uses Python identifier totalFigures
    __totalFigures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalFigures'), 'totalFigures', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_totalFigures', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6), )

    
    totalFigures = property(__totalFigures.value, __totalFigures.set, None, '')

    
    # Element totalTables uses Python identifier totalTables
    __totalTables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalTables'), 'totalTables', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_totalTables', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6), )

    
    totalTables = property(__totalTables.value, __totalTables.set, None, '')

    
    # Element ISBN uses Python identifier ISBN
    __ISBN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISBN'), 'ISBN', '__httpseml_ecoinformatics_orgliterature_2_2_0_Book_ISBN', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6), )

    
    ISBN = property(__ISBN.value, __ISBN.set, None, '')

    _ElementMap.update({
        __publisher.name() : __publisher,
        __publicationPlace.name() : __publicationPlace,
        __edition.name() : __edition,
        __volume.name() : __volume,
        __numberOfVolumes.name() : __numberOfVolumes,
        __totalPages.name() : __totalPages,
        __totalFigures.name() : __totalFigures,
        __totalTables.name() : __totalTables,
        __ISBN.name() : __ISBN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Book = Book
_Namespace_cit.addCategoryObject('typeBinding', 'Book', Book)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Manuscript with content type ELEMENT_ONLY
class Manuscript (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Manuscript')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 621, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element institution uses Python identifier institution
    __institution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'institution'), 'institution', '__httpseml_ecoinformatics_orgliterature_2_2_0_Manuscript_institution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 631, 6), )

    
    institution = property(__institution.value, __institution.set, None, '')

    
    # Element totalPages uses Python identifier totalPages
    __totalPages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalPages'), 'totalPages', '__httpseml_ecoinformatics_orgliterature_2_2_0_Manuscript_totalPages', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 645, 6), )

    
    totalPages = property(__totalPages.value, __totalPages.set, None, '')

    _ElementMap.update({
        __institution.name() : __institution,
        __totalPages.name() : __totalPages
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Manuscript = Manuscript
_Namespace_cit.addCategoryObject('typeBinding', 'Manuscript', Manuscript)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Report with content type ELEMENT_ONLY
class Report (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Report')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 660, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element reportNumber uses Python identifier reportNumber
    __reportNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reportNumber'), 'reportNumber', '__httpseml_ecoinformatics_orgliterature_2_2_0_Report_reportNumber', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 672, 6), )

    
    reportNumber = property(__reportNumber.value, __reportNumber.set, None, '')

    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_Report_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 685, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element publicationPlace uses Python identifier publicationPlace
    __publicationPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicationPlace'), 'publicationPlace', '__httpseml_ecoinformatics_orgliterature_2_2_0_Report_publicationPlace', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 698, 6), )

    
    publicationPlace = property(__publicationPlace.value, __publicationPlace.set, None, '')

    
    # Element totalPages uses Python identifier totalPages
    __totalPages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalPages'), 'totalPages', '__httpseml_ecoinformatics_orgliterature_2_2_0_Report_totalPages', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 712, 6), )

    
    totalPages = property(__totalPages.value, __totalPages.set, None, '')

    _ElementMap.update({
        __reportNumber.name() : __reportNumber,
        __publisher.name() : __publisher,
        __publicationPlace.name() : __publicationPlace,
        __totalPages.name() : __totalPages
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Report = Report
_Namespace_cit.addCategoryObject('typeBinding', 'Report', Report)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}PersonalCommunication with content type ELEMENT_ONLY
class PersonalCommunication (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'PersonalCommunication')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 726, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_PersonalCommunication_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 737, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element publicationPlace uses Python identifier publicationPlace
    __publicationPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicationPlace'), 'publicationPlace', '__httpseml_ecoinformatics_orgliterature_2_2_0_PersonalCommunication_publicationPlace', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 750, 6), )

    
    publicationPlace = property(__publicationPlace.value, __publicationPlace.set, None, '')

    
    # Element communicationType uses Python identifier communicationType
    __communicationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'communicationType'), 'communicationType', '__httpseml_ecoinformatics_orgliterature_2_2_0_PersonalCommunication_communicationType', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 764, 6), )

    
    communicationType = property(__communicationType.value, __communicationType.set, None, '')

    
    # Element recipient uses Python identifier recipient
    __recipient = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recipient'), 'recipient', '__httpseml_ecoinformatics_orgliterature_2_2_0_PersonalCommunication_recipient', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 778, 6), )

    
    recipient = property(__recipient.value, __recipient.set, None, '')

    _ElementMap.update({
        __publisher.name() : __publisher,
        __publicationPlace.name() : __publicationPlace,
        __communicationType.name() : __communicationType,
        __recipient.name() : __recipient
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PersonalCommunication = PersonalCommunication
_Namespace_cit.addCategoryObject('typeBinding', 'PersonalCommunication', PersonalCommunication)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Map with content type ELEMENT_ONLY
class Map (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Map')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 792, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_Map_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 804, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpseml_ecoinformatics_orgliterature_2_2_0_Map_edition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 816, 6), )

    
    edition = property(__edition.value, __edition.set, None, '')

    
    # Element geographicCoverage uses Python identifier geographicCoverage
    __geographicCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geographicCoverage'), 'geographicCoverage', '__httpseml_ecoinformatics_orgliterature_2_2_0_Map_geographicCoverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 827, 6), )

    
    geographicCoverage = property(__geographicCoverage.value, __geographicCoverage.set, None, '')

    
    # Element scale uses Python identifier scale
    __scale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'scale'), 'scale', '__httpseml_ecoinformatics_orgliterature_2_2_0_Map_scale', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 839, 6), )

    
    scale = property(__scale.value, __scale.set, None, '')

    _ElementMap.update({
        __publisher.name() : __publisher,
        __edition.name() : __edition,
        __geographicCoverage.name() : __geographicCoverage,
        __scale.name() : __scale
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Map = Map
_Namespace_cit.addCategoryObject('typeBinding', 'Map', Map)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}AudioVisual with content type ELEMENT_ONLY
class AudioVisual (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'AudioVisual')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 851, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_AudioVisual_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 863, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element publicationPlace uses Python identifier publicationPlace
    __publicationPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicationPlace'), 'publicationPlace', '__httpseml_ecoinformatics_orgliterature_2_2_0_AudioVisual_publicationPlace', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 877, 6), )

    
    publicationPlace = property(__publicationPlace.value, __publicationPlace.set, None, '')

    
    # Element performer uses Python identifier performer
    __performer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'performer'), 'performer', '__httpseml_ecoinformatics_orgliterature_2_2_0_AudioVisual_performer', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 891, 6), )

    
    performer = property(__performer.value, __performer.set, None, '')

    
    # Element ISBN uses Python identifier ISBN
    __ISBN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISBN'), 'ISBN', '__httpseml_ecoinformatics_orgliterature_2_2_0_AudioVisual_ISBN', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 904, 6), )

    
    ISBN = property(__ISBN.value, __ISBN.set, None, '')

    _ElementMap.update({
        __publisher.name() : __publisher,
        __publicationPlace.name() : __publicationPlace,
        __performer.name() : __performer,
        __ISBN.name() : __ISBN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AudioVisual = AudioVisual
_Namespace_cit.addCategoryObject('typeBinding', 'AudioVisual', AudioVisual)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Generic with content type ELEMENT_ONLY
class Generic (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Generic with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Generic')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 919, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 921, 6), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element publicationPlace uses Python identifier publicationPlace
    __publicationPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicationPlace'), 'publicationPlace', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_publicationPlace', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 934, 6), )

    
    publicationPlace = property(__publicationPlace.value, __publicationPlace.set, None, '')

    
    # Element referenceType uses Python identifier referenceType
    __referenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'referenceType'), 'referenceType', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_referenceType', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 948, 6), )

    
    referenceType = property(__referenceType.value, __referenceType.set, None, '')

    
    # Element volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'volume'), 'volume', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_volume', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 961, 6), )

    
    volume = property(__volume.value, __volume.set, None, '')

    
    # Element numberOfVolumes uses Python identifier numberOfVolumes
    __numberOfVolumes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numberOfVolumes'), 'numberOfVolumes', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_numberOfVolumes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 974, 6), )

    
    numberOfVolumes = property(__numberOfVolumes.value, __numberOfVolumes.set, None, '')

    
    # Element totalPages uses Python identifier totalPages
    __totalPages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalPages'), 'totalPages', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_totalPages', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 985, 6), )

    
    totalPages = property(__totalPages.value, __totalPages.set, None, '')

    
    # Element totalFigures uses Python identifier totalFigures
    __totalFigures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalFigures'), 'totalFigures', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_totalFigures', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 998, 6), )

    
    totalFigures = property(__totalFigures.value, __totalFigures.set, None, '')

    
    # Element totalTables uses Python identifier totalTables
    __totalTables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalTables'), 'totalTables', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_totalTables', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1011, 6), )

    
    totalTables = property(__totalTables.value, __totalTables.set, None, '')

    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_edition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1024, 6), )

    
    edition = property(__edition.value, __edition.set, None, '')

    
    # Element originalPublication uses Python identifier originalPublication
    __originalPublication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'originalPublication'), 'originalPublication', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_originalPublication', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1037, 6), )

    
    originalPublication = property(__originalPublication.value, __originalPublication.set, None, '')

    
    # Element reprintEdition uses Python identifier reprintEdition
    __reprintEdition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reprintEdition'), 'reprintEdition', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_reprintEdition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1050, 6), )

    
    reprintEdition = property(__reprintEdition.value, __reprintEdition.set, None, '')

    
    # Element reviewedItem uses Python identifier reviewedItem
    __reviewedItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reviewedItem'), 'reviewedItem', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_reviewedItem', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1063, 6), )

    
    reviewedItem = property(__reviewedItem.value, __reviewedItem.set, None, '')

    
    # Element ISBN uses Python identifier ISBN
    __ISBN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISBN'), 'ISBN', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_ISBN', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1079, 8), )

    
    ISBN = property(__ISBN.value, __ISBN.set, None, '')

    
    # Element ISSN uses Python identifier ISSN
    __ISSN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISSN'), 'ISSN', '__httpseml_ecoinformatics_orgliterature_2_2_0_Generic_ISSN', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1092, 8), )

    
    ISSN = property(__ISSN.value, __ISSN.set, None, '')

    _ElementMap.update({
        __publisher.name() : __publisher,
        __publicationPlace.name() : __publicationPlace,
        __referenceType.name() : __referenceType,
        __volume.name() : __volume,
        __numberOfVolumes.name() : __numberOfVolumes,
        __totalPages.name() : __totalPages,
        __totalFigures.name() : __totalFigures,
        __totalTables.name() : __totalTables,
        __edition.name() : __edition,
        __originalPublication.name() : __originalPublication,
        __reprintEdition.name() : __reprintEdition,
        __reviewedItem.name() : __reviewedItem,
        __ISBN.name() : __ISBN,
        __ISSN.name() : __ISSN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Generic = Generic
_Namespace_cit.addCategoryObject('typeBinding', 'Generic', Generic)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Thesis with content type ELEMENT_ONLY
class Thesis (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Thesis')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1108, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element degree uses Python identifier degree
    __degree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'degree'), 'degree', '__httpseml_ecoinformatics_orgliterature_2_2_0_Thesis_degree', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1121, 6), )

    
    degree = property(__degree.value, __degree.set, None, '')

    
    # Element institution uses Python identifier institution
    __institution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'institution'), 'institution', '__httpseml_ecoinformatics_orgliterature_2_2_0_Thesis_institution', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1135, 6), )

    
    institution = property(__institution.value, __institution.set, None, '')

    
    # Element totalPages uses Python identifier totalPages
    __totalPages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalPages'), 'totalPages', '__httpseml_ecoinformatics_orgliterature_2_2_0_Thesis_totalPages', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1148, 6), )

    
    totalPages = property(__totalPages.value, __totalPages.set, None, '')

    _ElementMap.update({
        __degree.name() : __degree,
        __institution.name() : __institution,
        __totalPages.name() : __totalPages
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Thesis = Thesis
_Namespace_cit.addCategoryObject('typeBinding', 'Thesis', Thesis)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Presentation with content type ELEMENT_ONLY
class Presentation (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Presentation')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1162, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element conferenceName uses Python identifier conferenceName
    __conferenceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceName'), 'conferenceName', '__httpseml_ecoinformatics_orgliterature_2_2_0_Presentation_conferenceName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1176, 6), )

    
    conferenceName = property(__conferenceName.value, __conferenceName.set, None, '')

    
    # Element conferenceDate uses Python identifier conferenceDate
    __conferenceDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceDate'), 'conferenceDate', '__httpseml_ecoinformatics_orgliterature_2_2_0_Presentation_conferenceDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1188, 6), )

    
    conferenceDate = property(__conferenceDate.value, __conferenceDate.set, None, '')

    
    # Element conferenceLocation uses Python identifier conferenceLocation
    __conferenceLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceLocation'), 'conferenceLocation', '__httpseml_ecoinformatics_orgliterature_2_2_0_Presentation_conferenceLocation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1199, 6), )

    
    conferenceLocation = property(__conferenceLocation.value, __conferenceLocation.set, None, '')

    _ElementMap.update({
        __conferenceName.name() : __conferenceName,
        __conferenceDate.name() : __conferenceDate,
        __conferenceLocation.name() : __conferenceLocation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Presentation = Presentation
_Namespace_cit.addCategoryObject('typeBinding', 'Presentation', Presentation)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}CitationListType with content type ELEMENT_ONLY
class CitationListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/literature-2.2.0}CitationListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'CitationListType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1212, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationListType_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1214, 12), )

    
    citation = property(__citation.value, __citation.set, None, '')

    
    # Element bibtex uses Python identifier bibtex
    __bibtex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bibtex'), 'bibtex', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationListType_bibtex', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1225, 12), )

    
    bibtex = property(__bibtex.value, __bibtex.set, None, '')

    _ElementMap.update({
        __citation.name() : __citation,
        __bibtex.name() : __bibtex
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CitationListType = CitationListType
_Namespace_cit.addCategoryObject('typeBinding', 'CitationListType', CitationListType)


# Complex type {https://eml.ecoinformatics.org/methods-2.2.0}MethodsType with content type ELEMENT_ONLY
class MethodsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/methods-2.2.0}MethodsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_md, 'MethodsType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 87, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element methodStep uses Python identifier methodStep
    __methodStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methodStep'), 'methodStep', '__httpseml_ecoinformatics_orgmethods_2_2_0_MethodsType_methodStep', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 89, 6), )

    
    methodStep = property(__methodStep.value, __methodStep.set, None, '')

    
    # Element sampling uses Python identifier sampling
    __sampling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sampling'), 'sampling', '__httpseml_ecoinformatics_orgmethods_2_2_0_MethodsType_sampling', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 123, 6), )

    
    sampling = property(__sampling.value, __sampling.set, None, '')

    
    # Element qualityControl uses Python identifier qualityControl
    __qualityControl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'qualityControl'), 'qualityControl', '__httpseml_ecoinformatics_orgmethods_2_2_0_MethodsType_qualityControl', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 295, 6), )

    
    qualityControl = property(__qualityControl.value, __qualityControl.set, None, '')

    _ElementMap.update({
        __methodStep.name() : __methodStep,
        __sampling.name() : __sampling,
        __qualityControl.name() : __qualityControl
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MethodsType = MethodsType
_Namespace_md.addCategoryObject('typeBinding', 'MethodsType', MethodsType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 136, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element studyExtent uses Python identifier studyExtent
    __studyExtent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'studyExtent'), 'studyExtent', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_studyExtent', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 138, 12), )

    
    studyExtent = property(__studyExtent.value, __studyExtent.set, None, '')

    
    # Element samplingDescription uses Python identifier samplingDescription
    __samplingDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'samplingDescription'), 'samplingDescription', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_samplingDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 203, 12), )

    
    samplingDescription = property(__samplingDescription.value, __samplingDescription.set, None, '')

    
    # Element spatialSamplingUnits uses Python identifier spatialSamplingUnits
    __spatialSamplingUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'spatialSamplingUnits'), 'spatialSamplingUnits', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_spatialSamplingUnits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 218, 12), )

    
    spatialSamplingUnits = property(__spatialSamplingUnits.value, __spatialSamplingUnits.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 280, 12), )

    
    citation = property(__citation.value, __citation.set, None, '')

    _ElementMap.update({
        __studyExtent.name() : __studyExtent,
        __samplingDescription.name() : __samplingDescription,
        __spatialSamplingUnits.name() : __spatialSamplingUnits,
        __citation.name() : __citation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 157, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON__coverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 159, 18), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON__description', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 179, 18), )

    
    description = property(__description.value, __description.set, None, '')

    _ElementMap.update({
        __coverage.name() : __coverage,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 244, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element referencedEntityId uses Python identifier referencedEntityId
    __referencedEntityId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'referencedEntityId'), 'referencedEntityId', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_2_referencedEntityId', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 246, 18), )

    
    referencedEntityId = property(__referencedEntityId.value, __referencedEntityId.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_2_coverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 266, 18), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    _ElementMap.update({
        __referencedEntityId.name() : __referencedEntityId,
        __coverage.name() : __coverage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType with content type ELEMENT_ONLY
class ProcedureStepType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_md, 'ProcedureStepType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 315, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpseml_ecoinformatics_orgmethods_2_2_0_ProcedureStepType_description', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 318, 8), )

    
    description = property(__description.value, __description.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgmethods_2_2_0_ProcedureStepType_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 348, 10), )

    
    citation = property(__citation.value, __citation.set, None, '')

    
    # Element protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'protocol'), 'protocol', '__httpseml_ecoinformatics_orgmethods_2_2_0_ProcedureStepType_protocol', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 360, 10), )

    
    protocol = property(__protocol.value, __protocol.set, None, '')

    
    # Element instrumentation uses Python identifier instrumentation
    __instrumentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'instrumentation'), 'instrumentation', '__httpseml_ecoinformatics_orgmethods_2_2_0_ProcedureStepType_instrumentation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 376, 6), )

    
    instrumentation = property(__instrumentation.value, __instrumentation.set, None, '')

    
    # Element software uses Python identifier software
    __software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'software'), 'software', '__httpseml_ecoinformatics_orgmethods_2_2_0_ProcedureStepType_software', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 390, 6), )

    
    software = property(__software.value, __software.set, None, '')

    
    # Element subStep uses Python identifier subStep
    __subStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subStep'), 'subStep', '__httpseml_ecoinformatics_orgmethods_2_2_0_ProcedureStepType_subStep', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 400, 6), )

    
    subStep = property(__subStep.value, __subStep.set, None, '')

    _ElementMap.update({
        __description.name() : __description,
        __citation.name() : __citation,
        __protocol.name() : __protocol,
        __instrumentation.name() : __instrumentation,
        __software.name() : __software,
        __subStep.name() : __subStep
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProcedureStepType = ProcedureStepType
_Namespace_md.addCategoryObject('typeBinding', 'ProcedureStepType', ProcedureStepType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 221, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute phonetype uses Python identifier phonetype
    __phonetype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'phonetype'), 'phonetype', '__httpseml_ecoinformatics_orgparty_2_2_0_CTD_ANON_phonetype', pyxb.binding.datatypes.string, unicode_default='voice')
    __phonetype._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 224, 16)
    __phonetype._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 224, 16)
    
    phonetype = property(__phonetype.value, __phonetype.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __phonetype.name() : __phonetype
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 290, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute directory uses Python identifier directory
    __directory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'directory'), 'directory', '__httpseml_ecoinformatics_orgparty_2_2_0_CTD_ANON__directory', pyxb.binding.datatypes.string, required=True)
    __directory._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 293, 16)
    __directory._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 293, 16)
    
    directory = property(__directory.value, __directory.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __directory.name() : __directory
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type {https://eml.ecoinformatics.org/party-2.2.0}Person with content type ELEMENT_ONLY
class Person (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_rp, 'Person')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 323, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element salutation uses Python identifier salutation
    __salutation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'salutation'), 'salutation', '__httpseml_ecoinformatics_orgparty_2_2_0_Person_salutation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 367, 6), )

    
    salutation = property(__salutation.value, __salutation.set, None, '')

    
    # Element givenName uses Python identifier givenName
    __givenName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'givenName'), 'givenName', '__httpseml_ecoinformatics_orgparty_2_2_0_Person_givenName', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 380, 6), )

    
    givenName = property(__givenName.value, __givenName.set, None, '')

    
    # Element surName uses Python identifier surName
    __surName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'surName'), 'surName', '__httpseml_ecoinformatics_orgparty_2_2_0_Person_surName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 398, 6), )

    
    surName = property(__surName.value, __surName.set, None, '')

    _ElementMap.update({
        __salutation.name() : __salutation,
        __givenName.name() : __givenName,
        __surName.name() : __surName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Person = Person
_Namespace_rp.addCategoryObject('typeBinding', 'Person', Person)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 130, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute unit uses Python identifier unit
    __unit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_unit', pyxb.binding.datatypes.anySimpleType, unicode_default='byte')
    __unit._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 133, 16)
    __unit._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 133, 16)
    
    unit = property(__unit.value, __unit.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __unit.name() : __unit
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 165, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute method uses Python identifier method
    __method = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'method'), 'method', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON__method', pyxb.binding.datatypes.string)
    __method._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 168, 16)
    __method._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 168, 16)
    
    method = property(__method.value, __method.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __method.name() : __method
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 256, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element textFormat uses Python identifier textFormat
    __textFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'textFormat'), 'textFormat', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_2_textFormat', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 258, 14), )

    
    textFormat = property(__textFormat.value, __textFormat.set, None, '')

    
    # Element externallyDefinedFormat uses Python identifier externallyDefinedFormat
    __externallyDefinedFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'externallyDefinedFormat'), 'externallyDefinedFormat', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_2_externallyDefinedFormat', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 894, 14), )

    
    externallyDefinedFormat = property(__externallyDefinedFormat.value, __externallyDefinedFormat.set, None, '')

    
    # Element binaryRasterFormat uses Python identifier binaryRasterFormat
    __binaryRasterFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'binaryRasterFormat'), 'binaryRasterFormat', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_2_binaryRasterFormat', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 959, 14), )

    
    binaryRasterFormat = property(__binaryRasterFormat.value, __binaryRasterFormat.set, None, '')

    _ElementMap.update({
        __textFormat.name() : __textFormat,
        __externallyDefinedFormat.name() : __externallyDefinedFormat,
        __binaryRasterFormat.name() : __binaryRasterFormat
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 273, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element numHeaderLines uses Python identifier numHeaderLines
    __numHeaderLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numHeaderLines'), 'numHeaderLines', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_numHeaderLines', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 275, 20), )

    
    numHeaderLines = property(__numHeaderLines.value, __numHeaderLines.set, None, '')

    
    # Element numFooterLines uses Python identifier numFooterLines
    __numFooterLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numFooterLines'), 'numFooterLines', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_numFooterLines', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 292, 20), )

    
    numFooterLines = property(__numFooterLines.value, __numFooterLines.set, None, '')

    
    # Element recordDelimiter uses Python identifier recordDelimiter
    __recordDelimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recordDelimiter'), 'recordDelimiter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_recordDelimiter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 310, 20), )

    
    recordDelimiter = property(__recordDelimiter.value, __recordDelimiter.set, None, '')

    
    # Element physicalLineDelimiter uses Python identifier physicalLineDelimiter
    __physicalLineDelimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physicalLineDelimiter'), 'physicalLineDelimiter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_physicalLineDelimiter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 333, 20), )

    
    physicalLineDelimiter = property(__physicalLineDelimiter.value, __physicalLineDelimiter.set, None, '')

    
    # Element numPhysicalLinesPerRecord uses Python identifier numPhysicalLinesPerRecord
    __numPhysicalLinesPerRecord = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numPhysicalLinesPerRecord'), 'numPhysicalLinesPerRecord', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_numPhysicalLinesPerRecord', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 360, 20), )

    
    numPhysicalLinesPerRecord = property(__numPhysicalLinesPerRecord.value, __numPhysicalLinesPerRecord.set, None, '')

    
    # Element maxRecordLength uses Python identifier maxRecordLength
    __maxRecordLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maxRecordLength'), 'maxRecordLength', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_maxRecordLength', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 381, 20), )

    
    maxRecordLength = property(__maxRecordLength.value, __maxRecordLength.set, None, '')

    
    # Element attributeOrientation uses Python identifier attributeOrientation
    __attributeOrientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeOrientation'), 'attributeOrientation', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_attributeOrientation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 399, 20), )

    
    attributeOrientation = property(__attributeOrientation.value, __attributeOrientation.set, None, '')

    
    # Element simpleDelimited uses Python identifier simpleDelimited
    __simpleDelimited = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'simpleDelimited'), 'simpleDelimited', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_simpleDelimited', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 434, 22), )

    
    simpleDelimited = property(__simpleDelimited.value, __simpleDelimited.set, None, '')

    
    # Element complex uses Python identifier complex
    __complex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'complex'), 'complex', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_3_complex', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 574, 22), )

    
    complex = property(__complex.value, __complex.set, None, '')

    _ElementMap.update({
        __numHeaderLines.name() : __numHeaderLines,
        __numFooterLines.name() : __numFooterLines,
        __recordDelimiter.name() : __recordDelimiter,
        __physicalLineDelimiter.name() : __physicalLineDelimiter,
        __numPhysicalLinesPerRecord.name() : __numPhysicalLinesPerRecord,
        __maxRecordLength.name() : __maxRecordLength,
        __attributeOrientation.name() : __attributeOrientation,
        __simpleDelimited.name() : __simpleDelimited,
        __complex.name() : __complex
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 450, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element fieldDelimiter uses Python identifier fieldDelimiter
    __fieldDelimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fieldDelimiter'), 'fieldDelimiter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_4_fieldDelimiter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 452, 28), )

    
    fieldDelimiter = property(__fieldDelimiter.value, __fieldDelimiter.set, None, '')

    
    # Element collapseDelimiters uses Python identifier collapseDelimiters
    __collapseDelimiters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'collapseDelimiters'), 'collapseDelimiters', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_4_collapseDelimiters', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 489, 28), )

    
    collapseDelimiters = property(__collapseDelimiters.value, __collapseDelimiters.set, None, '')

    
    # Element quoteCharacter uses Python identifier quoteCharacter
    __quoteCharacter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quoteCharacter'), 'quoteCharacter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_4_quoteCharacter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 525, 28), )

    
    quoteCharacter = property(__quoteCharacter.value, __quoteCharacter.set, None, '')

    
    # Element literalCharacter uses Python identifier literalCharacter
    __literalCharacter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'literalCharacter'), 'literalCharacter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_4_literalCharacter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 551, 28), )

    
    literalCharacter = property(__literalCharacter.value, __literalCharacter.set, None, '')

    _ElementMap.update({
        __fieldDelimiter.name() : __fieldDelimiter,
        __collapseDelimiters.name() : __collapseDelimiters,
        __quoteCharacter.name() : __quoteCharacter,
        __literalCharacter.name() : __literalCharacter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 598, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element textFixed uses Python identifier textFixed
    __textFixed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'textFixed'), 'textFixed', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_5_textFixed', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 600, 28), )

    
    textFixed = property(__textFixed.value, __textFixed.set, None, '')

    
    # Element textDelimited uses Python identifier textDelimited
    __textDelimited = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'textDelimited'), 'textDelimited', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_5_textDelimited', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 695, 28), )

    
    textDelimited = property(__textDelimited.value, __textDelimited.set, None, '')

    _ElementMap.update({
        __textFixed.name() : __textFixed,
        __textDelimited.name() : __textDelimited
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 623, 30)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element fieldWidth uses Python identifier fieldWidth
    __fieldWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fieldWidth'), 'fieldWidth', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_6_fieldWidth', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 625, 34), )

    
    fieldWidth = property(__fieldWidth.value, __fieldWidth.set, None, '')

    
    # Element lineNumber uses Python identifier lineNumber
    __lineNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lineNumber'), 'lineNumber', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_6_lineNumber', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 641, 34), )

    
    lineNumber = property(__lineNumber.value, __lineNumber.set, None, '')

    
    # Element fieldStartColumn uses Python identifier fieldStartColumn
    __fieldStartColumn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fieldStartColumn'), 'fieldStartColumn', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_6_fieldStartColumn', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 667, 34), )

    
    fieldStartColumn = property(__fieldStartColumn.value, __fieldStartColumn.set, None, '')

    _ElementMap.update({
        __fieldWidth.name() : __fieldWidth,
        __lineNumber.name() : __lineNumber,
        __fieldStartColumn.name() : __fieldStartColumn
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 715, 30)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element fieldDelimiter uses Python identifier fieldDelimiter
    __fieldDelimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fieldDelimiter'), 'fieldDelimiter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_7_fieldDelimiter', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 717, 34), )

    
    fieldDelimiter = property(__fieldDelimiter.value, __fieldDelimiter.set, None, '')

    
    # Element collapseDelimiters uses Python identifier collapseDelimiters
    __collapseDelimiters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'collapseDelimiters'), 'collapseDelimiters', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_7_collapseDelimiters', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 759, 34), )

    
    collapseDelimiters = property(__collapseDelimiters.value, __collapseDelimiters.set, None, '')

    
    # Element lineNumber uses Python identifier lineNumber
    __lineNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lineNumber'), 'lineNumber', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_7_lineNumber', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 797, 34), )

    
    lineNumber = property(__lineNumber.value, __lineNumber.set, None, '')

    
    # Element quoteCharacter uses Python identifier quoteCharacter
    __quoteCharacter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quoteCharacter'), 'quoteCharacter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_7_quoteCharacter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 829, 34), )

    
    quoteCharacter = property(__quoteCharacter.value, __quoteCharacter.set, None, '')

    
    # Element literalCharacter uses Python identifier literalCharacter
    __literalCharacter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'literalCharacter'), 'literalCharacter', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_7_literalCharacter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 860, 34), )

    
    literalCharacter = property(__literalCharacter.value, __literalCharacter.set, None, '')

    _ElementMap.update({
        __fieldDelimiter.name() : __fieldDelimiter,
        __collapseDelimiters.name() : __collapseDelimiters,
        __lineNumber.name() : __lineNumber,
        __quoteCharacter.name() : __quoteCharacter,
        __literalCharacter.name() : __literalCharacter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 916, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element formatName uses Python identifier formatName
    __formatName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'formatName'), 'formatName', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_8_formatName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 918, 20), )

    
    formatName = property(__formatName.value, __formatName.set, None, '')

    
    # Element formatVersion uses Python identifier formatVersion
    __formatVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'formatVersion'), 'formatVersion', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_8_formatVersion', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 930, 20), )

    
    formatVersion = property(__formatVersion.value, __formatVersion.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_8_citation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 942, 20), )

    
    citation = property(__citation.value, __citation.set, None, '')

    _ElementMap.update({
        __formatName.name() : __formatName,
        __formatVersion.name() : __formatVersion,
        __citation.name() : __citation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 974, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element rowColumnOrientation uses Python identifier rowColumnOrientation
    __rowColumnOrientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rowColumnOrientation'), 'rowColumnOrientation', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_rowColumnOrientation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 976, 20), )

    
    rowColumnOrientation = property(__rowColumnOrientation.value, __rowColumnOrientation.set, None, '')

    
    # Element multiBand uses Python identifier multiBand
    __multiBand = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'multiBand'), 'multiBand', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_multiBand', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 999, 20), )

    
    multiBand = property(__multiBand.value, __multiBand.set, None, '')

    
    # Element nbits uses Python identifier nbits
    __nbits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbits'), 'nbits', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_nbits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1046, 20), )

    
    nbits = property(__nbits.value, __nbits.set, None, '')

    
    # Element byteorder uses Python identifier byteorder
    __byteorder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'byteorder'), 'byteorder', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_byteorder', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1064, 20), )

    
    byteorder = property(__byteorder.value, __byteorder.set, None, '')

    
    # Element skipbytes uses Python identifier skipbytes
    __skipbytes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'skipbytes'), 'skipbytes', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_skipbytes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1082, 20), )

    
    skipbytes = property(__skipbytes.value, __skipbytes.set, None, '')

    
    # Element bandrowbytes uses Python identifier bandrowbytes
    __bandrowbytes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bandrowbytes'), 'bandrowbytes', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_bandrowbytes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1098, 20), )

    
    bandrowbytes = property(__bandrowbytes.value, __bandrowbytes.set, None, '')

    
    # Element totalrowbytes uses Python identifier totalrowbytes
    __totalrowbytes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalrowbytes'), 'totalrowbytes', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_totalrowbytes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1113, 20), )

    
    totalrowbytes = property(__totalrowbytes.value, __totalrowbytes.set, None, '')

    
    # Element bandgapbytes uses Python identifier bandgapbytes
    __bandgapbytes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bandgapbytes'), 'bandgapbytes', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_9_bandgapbytes', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1127, 20), )

    
    bandgapbytes = property(__bandgapbytes.value, __bandgapbytes.set, None, '')

    _ElementMap.update({
        __rowColumnOrientation.name() : __rowColumnOrientation,
        __multiBand.name() : __multiBand,
        __nbits.name() : __nbits,
        __byteorder.name() : __byteorder,
        __skipbytes.name() : __skipbytes,
        __bandrowbytes.name() : __bandrowbytes,
        __totalrowbytes.name() : __totalrowbytes,
        __bandgapbytes.name() : __bandgapbytes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1010, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element nbands uses Python identifier nbands
    __nbands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbands'), 'nbands', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_10_nbands', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1012, 26), )

    
    nbands = property(__nbands.value, __nbands.set, None, '')

    
    # Element layout uses Python identifier layout
    __layout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'layout'), 'layout', '__httpseml_ecoinformatics_orgphysical_2_2_0_CTD_ANON_10_layout', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1025, 26), )

    
    layout = property(__layout.value, __layout.set, None, '')

    _ElementMap.update({
        __nbands.name() : __nbands,
        __layout.name() : __layout
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type {https://eml.ecoinformatics.org/physical-2.2.0}PhysicalOnlineType with content type ELEMENT_ONLY
class PhysicalOnlineType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_phys, 'PhysicalOnlineType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1264, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element onlineDescription uses Python identifier onlineDescription
    __onlineDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'onlineDescription'), 'onlineDescription', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalOnlineType_onlineDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1290, 6), )

    
    onlineDescription = property(__onlineDescription.value, __onlineDescription.set, None, '')

    
    # Element url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'url'), 'url', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalOnlineType_url', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1301, 8), )

    
    url = property(__url.value, __url.set, None, '')

    
    # Element connection uses Python identifier connection
    __connection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'connection'), 'connection', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalOnlineType_connection', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1311, 8), )

    
    connection = property(__connection.value, __connection.set, None, '')

    _ElementMap.update({
        __onlineDescription.name() : __onlineDescription,
        __url.name() : __url,
        __connection.name() : __connection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PhysicalOnlineType = PhysicalOnlineType
_Namespace_phys.addCategoryObject('typeBinding', 'PhysicalOnlineType', PhysicalOnlineType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 215, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element descriptor uses Python identifier descriptor
    __descriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'descriptor'), 'descriptor', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_descriptor', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 217, 14), )

    
    descriptor = property(__descriptor.value, __descriptor.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 336, 14), )

    
    citation = property(__citation.value, __citation.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_coverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 347, 14), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    _ElementMap.update({
        __descriptor.name() : __descriptor,
        __citation.name() : __citation,
        __coverage.name() : __coverage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 258, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute name_or_id uses Python identifier name_or_id
    __name_or_id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name_or_id'), 'name_or_id', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON__name_or_id', pyxb.binding.datatypes.string)
    __name_or_id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 261, 28)
    __name_or_id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 261, 28)
    
    name_or_id = property(__name_or_id.value, __name_or_id.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name_or_id.name() : __name_or_id
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 374, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_2_description', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 376, 14), )

    
    description = property(__description.value, __description.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_2_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 391, 14), )

    
    citation = property(__citation.value, __citation.set, None, '')

    _ElementMap.update({
        __description.name() : __description,
        __citation.name() : __citation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type {https://eml.ecoinformatics.org/project-2.2.0}AwardType with content type ELEMENT_ONLY
class AwardType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_proj, 'AwardType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 428, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element funderName uses Python identifier funderName
    __funderName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'funderName'), 'funderName', '__httpseml_ecoinformatics_orgproject_2_2_0_AwardType_funderName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 454, 6), )

    
    funderName = property(__funderName.value, __funderName.set, None, '')

    
    # Element funderIdentifier uses Python identifier funderIdentifier
    __funderIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'funderIdentifier'), 'funderIdentifier', '__httpseml_ecoinformatics_orgproject_2_2_0_AwardType_funderIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 469, 6), )

    
    funderIdentifier = property(__funderIdentifier.value, __funderIdentifier.set, None, '')

    
    # Element awardNumber uses Python identifier awardNumber
    __awardNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'awardNumber'), 'awardNumber', '__httpseml_ecoinformatics_orgproject_2_2_0_AwardType_awardNumber', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 489, 6), )

    
    awardNumber = property(__awardNumber.value, __awardNumber.set, None, '')

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgproject_2_2_0_AwardType_title', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 505, 6), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element awardUrl uses Python identifier awardUrl
    __awardUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'awardUrl'), 'awardUrl', '__httpseml_ecoinformatics_orgproject_2_2_0_AwardType_awardUrl', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 517, 6), )

    
    awardUrl = property(__awardUrl.value, __awardUrl.set, None, '')

    _ElementMap.update({
        __funderName.name() : __funderName,
        __funderIdentifier.name() : __funderIdentifier,
        __awardNumber.name() : __awardNumber,
        __title.name() : __title,
        __awardUrl.name() : __awardUrl
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AwardType = AwardType
_Namespace_proj.addCategoryObject('typeBinding', 'AwardType', AwardType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 277, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element keyword uses Python identifier keyword
    __keyword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'keyword'), 'keyword', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_keyword', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 279, 12), )

    
    keyword = property(__keyword.value, __keyword.set, None, '')

    
    # Element keywordThesaurus uses Python identifier keywordThesaurus
    __keywordThesaurus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'keywordThesaurus'), 'keywordThesaurus', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_keywordThesaurus', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 315, 12), )

    
    keywordThesaurus = property(__keywordThesaurus.value, __keywordThesaurus.set, None, '')

    _ElementMap.update({
        __keyword.name() : __keyword,
        __keywordThesaurus.name() : __keywordThesaurus
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 809, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON__name', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 811, 14), )

    
    name = property(__name.value, __name.set, None, '')

    
    # Element definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'definition'), 'definition', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON__definition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 823, 14), )

    
    definition = property(__definition.value, __definition.set, None, '')

    
    # Element defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'defaultValue'), 'defaultValue', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON__defaultValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 839, 14), )

    
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, '')

    _ElementMap.update({
        __name.name() : __name,
        __definition.name() : __definition,
        __defaultValue.name() : __defaultValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}InlineType with content type MIXED
class InlineType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'InlineType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 871, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InlineType = InlineType
_Namespace_res.addCategoryObject('typeBinding', 'InlineType', InlineType)


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}OfflineType with content type ELEMENT_ONLY
class OfflineType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'OfflineType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 898, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element mediumName uses Python identifier mediumName
    __mediumName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mediumName'), 'mediumName', '__httpseml_ecoinformatics_orgresource_2_2_0_OfflineType_mediumName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 911, 6), )

    
    mediumName = property(__mediumName.value, __mediumName.set, None, '')

    
    # Element mediumDensity uses Python identifier mediumDensity
    __mediumDensity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mediumDensity'), 'mediumDensity', '__httpseml_ecoinformatics_orgresource_2_2_0_OfflineType_mediumDensity', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 926, 6), )

    
    mediumDensity = property(__mediumDensity.value, __mediumDensity.set, None, '')

    
    # Element mediumDensityUnits uses Python identifier mediumDensityUnits
    __mediumDensityUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mediumDensityUnits'), 'mediumDensityUnits', '__httpseml_ecoinformatics_orgresource_2_2_0_OfflineType_mediumDensityUnits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 940, 6), )

    
    mediumDensityUnits = property(__mediumDensityUnits.value, __mediumDensityUnits.set, None, '')

    
    # Element mediumVolume uses Python identifier mediumVolume
    __mediumVolume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mediumVolume'), 'mediumVolume', '__httpseml_ecoinformatics_orgresource_2_2_0_OfflineType_mediumVolume', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 951, 6), )

    
    mediumVolume = property(__mediumVolume.value, __mediumVolume.set, None, '')

    
    # Element mediumFormat uses Python identifier mediumFormat
    __mediumFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mediumFormat'), 'mediumFormat', '__httpseml_ecoinformatics_orgresource_2_2_0_OfflineType_mediumFormat', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 963, 6), )

    
    mediumFormat = property(__mediumFormat.value, __mediumFormat.set, None, '')

    
    # Element mediumNote uses Python identifier mediumNote
    __mediumNote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mediumNote'), 'mediumNote', '__httpseml_ecoinformatics_orgresource_2_2_0_OfflineType_mediumNote', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 975, 6), )

    
    mediumNote = property(__mediumNote.value, __mediumNote.set, None, '')

    _ElementMap.update({
        __mediumName.name() : __mediumName,
        __mediumDensity.name() : __mediumDensity,
        __mediumDensityUnits.name() : __mediumDensityUnits,
        __mediumVolume.name() : __mediumVolume,
        __mediumFormat.name() : __mediumFormat,
        __mediumNote.name() : __mediumNote
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.OfflineType = OfflineType
_Namespace_res.addCategoryObject('typeBinding', 'OfflineType', OfflineType)


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}OnlineType with content type ELEMENT_ONLY
class OnlineType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'OnlineType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 987, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element onlineDescription uses Python identifier onlineDescription
    __onlineDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'onlineDescription'), 'onlineDescription', '__httpseml_ecoinformatics_orgresource_2_2_0_OnlineType_onlineDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1017, 6), )

    
    onlineDescription = property(__onlineDescription.value, __onlineDescription.set, None, '')

    
    # Element url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'url'), 'url', '__httpseml_ecoinformatics_orgresource_2_2_0_OnlineType_url', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1030, 8), )

    
    url = property(__url.value, __url.set, None, '')

    
    # Element connection uses Python identifier connection
    __connection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'connection'), 'connection', '__httpseml_ecoinformatics_orgresource_2_2_0_OnlineType_connection', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1044, 8), )

    
    connection = property(__connection.value, __connection.set, None, '')

    
    # Element connectionDefinition uses Python identifier connectionDefinition
    __connectionDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'connectionDefinition'), 'connectionDefinition', '__httpseml_ecoinformatics_orgresource_2_2_0_OnlineType_connectionDefinition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1056, 8), )

    
    connectionDefinition = property(__connectionDefinition.value, __connectionDefinition.set, None, '')

    _ElementMap.update({
        __onlineDescription.name() : __onlineDescription,
        __url.name() : __url,
        __connection.name() : __connection,
        __connectionDefinition.name() : __connectionDefinition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.OnlineType = OnlineType
_Namespace_res.addCategoryObject('typeBinding', 'OnlineType', OnlineType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1175, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_2_name', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1177, 14), )

    
    name = property(__name.value, __name.set, None, '')

    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_2_value', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1190, 14), )

    
    value_ = property(__value.value, __value.set, None, '')

    _ElementMap.update({
        __name.name() : __name,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}i18nNonEmptyStringType with content type MIXED
class i18nNonEmptyStringType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'i18nNonEmptyStringType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1236, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgresource_2_2_0_i18nNonEmptyStringType_value', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1249, 3), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgresource_2_2_0_i18nNonEmptyStringType_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1270, 2)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        __value.name() : __value
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.i18nNonEmptyStringType = i18nNonEmptyStringType
_Namespace_res.addCategoryObject('typeBinding', 'i18nNonEmptyStringType', i18nNonEmptyStringType)


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}LicenseType with content type ELEMENT_ONLY
class LicenseType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'LicenseType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1273, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element licenseName uses Python identifier licenseName
    __licenseName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'licenseName'), 'licenseName', '__httpseml_ecoinformatics_orgresource_2_2_0_LicenseType_licenseName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1312, 8), )

    
    licenseName = property(__licenseName.value, __licenseName.set, None, '')

    
    # Element url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'url'), 'url', '__httpseml_ecoinformatics_orgresource_2_2_0_LicenseType_url', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1326, 8), )

    
    url = property(__url.value, __url.set, None, '')

    
    # Element identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identifier'), 'identifier', '__httpseml_ecoinformatics_orgresource_2_2_0_LicenseType_identifier', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1340, 8), )

    
    identifier = property(__identifier.value, __identifier.set, None, '')

    _ElementMap.update({
        __licenseName.name() : __licenseName,
        __url.name() : __url,
        __identifier.name() : __identifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LicenseType = LicenseType
_Namespace_res.addCategoryObject('typeBinding', 'LicenseType', LicenseType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 105, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI
    
    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'label'), 'label', '__httpseml_ecoinformatics_orgsemantics_2_2_0_CTD_ANON_label', pyxb.binding.datatypes.string, required=True)
    __label._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 108, 24)
    __label._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 108, 24)
    
    label = property(__label.value, __label.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __label.name() : __label
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 174, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI
    
    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'label'), 'label', '__httpseml_ecoinformatics_orgsemantics_2_2_0_CTD_ANON__label', pyxb.binding.datatypes.string, required=True)
    __label._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 177, 22)
    __label._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 177, 22)
    
    label = property(__label.value, __label.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __label.name() : __label
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 99, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_distribution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 101, 14), )

    
    distribution = property(__distribution.value, __distribution.set, None, '')

    
    # Element size uses Python identifier size
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'size'), 'size', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_size', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 114, 14), )

    
    size = property(__size.value, __size.set, None, '')

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'language'), 'language', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_language', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 126, 14), )

    
    language = property(__language.value, __language.set, None, '')

    
    # Element operatingSystem uses Python identifier operatingSystem
    __operatingSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'operatingSystem'), 'operatingSystem', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_operatingSystem', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 167, 14), )

    
    operatingSystem = property(__operatingSystem.value, __operatingSystem.set, None, '')

    
    # Element machineProcessor uses Python identifier machineProcessor
    __machineProcessor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'machineProcessor'), 'machineProcessor', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_machineProcessor', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 184, 14), )

    
    machineProcessor = property(__machineProcessor.value, __machineProcessor.set, None, '')

    
    # Element virtualMachine uses Python identifier virtualMachine
    __virtualMachine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'virtualMachine'), 'virtualMachine', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_virtualMachine', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 199, 14), )

    
    virtualMachine = property(__virtualMachine.value, __virtualMachine.set, None, '')

    
    # Element diskUsage uses Python identifier diskUsage
    __diskUsage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'diskUsage'), 'diskUsage', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_diskUsage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 211, 14), )

    
    diskUsage = property(__diskUsage.value, __diskUsage.set, None, '')

    
    # Element runtimeMemoryUsage uses Python identifier runtimeMemoryUsage
    __runtimeMemoryUsage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'runtimeMemoryUsage'), 'runtimeMemoryUsage', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_runtimeMemoryUsage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 225, 14), )

    
    runtimeMemoryUsage = property(__runtimeMemoryUsage.value, __runtimeMemoryUsage.set, None, '')

    
    # Element programmingLanguage uses Python identifier programmingLanguage
    __programmingLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'programmingLanguage'), 'programmingLanguage', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_programmingLanguage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 238, 14), )

    
    programmingLanguage = property(__programmingLanguage.value, __programmingLanguage.set, None, '')

    
    # Element checksum uses Python identifier checksum
    __checksum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'checksum'), 'checksum', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_checksum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 260, 14), )

    
    checksum = property(__checksum.value, __checksum.set, None, '')

    
    # Element dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dependency'), 'dependency', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON_dependency', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 272, 14), )

    
    dependency = property(__dependency.value, __dependency.set, None, '')

    _ElementMap.update({
        __distribution.name() : __distribution,
        __size.name() : __size,
        __language.name() : __language,
        __operatingSystem.name() : __operatingSystem,
        __machineProcessor.name() : __machineProcessor,
        __virtualMachine.name() : __virtualMachine,
        __diskUsage.name() : __diskUsage,
        __runtimeMemoryUsage.name() : __runtimeMemoryUsage,
        __programmingLanguage.name() : __programmingLanguage,
        __checksum.name() : __checksum,
        __dependency.name() : __dependency
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 136, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LanguageValue uses Python identifier LanguageValue
    __LanguageValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageValue'), 'LanguageValue', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON__LanguageValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 138, 20), )

    
    LanguageValue = property(__LanguageValue.value, __LanguageValue.set, None, '')

    
    # Element LanguageCodeStandard uses Python identifier LanguageCodeStandard
    __LanguageCodeStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageCodeStandard'), 'LanguageCodeStandard', '__httpseml_ecoinformatics_orgsoftware_2_2_0_CTD_ANON__LanguageCodeStandard', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 151, 20), )

    
    LanguageCodeStandard = property(__LanguageCodeStandard.value, __LanguageCodeStandard.set, None, '')

    _ElementMap.update({
        __LanguageValue.name() : __LanguageValue,
        __LanguageCodeStandard.name() : __LanguageCodeStandard
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type {https://eml.ecoinformatics.org/software-2.2.0}DependencyType with content type ELEMENT_ONLY
class DependencyType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sw, 'DependencyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 367, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element action uses Python identifier action
    __action = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'action'), 'action', '__httpseml_ecoinformatics_orgsoftware_2_2_0_DependencyType_action', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 383, 8), )

    
    action = property(__action.value, __action.set, None, '')

    
    # Element software uses Python identifier software
    __software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'software'), 'software', '__httpseml_ecoinformatics_orgsoftware_2_2_0_DependencyType_software', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 401, 8), )

    
    software = property(__software.value, __software.set, None, None)

    _ElementMap.update({
        __action.name() : __action,
        __software.name() : __software
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DependencyType = DependencyType
_Namespace_sw.addCategoryObject('typeBinding', 'DependencyType', DependencyType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 143, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element cornerPoint uses Python identifier cornerPoint
    __cornerPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cornerPoint'), 'cornerPoint', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_cornerPoint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 145, 14), )

    
    cornerPoint = property(__cornerPoint.value, __cornerPoint.set, None, '')

    
    # Element controlPoint uses Python identifier controlPoint
    __controlPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'controlPoint'), 'controlPoint', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_controlPoint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 220, 14), )

    
    controlPoint = property(__controlPoint.value, __controlPoint.set, None, '')

    
    # Element bilinearFit uses Python identifier bilinearFit
    __bilinearFit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bilinearFit'), 'bilinearFit', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_bilinearFit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 304, 14), )

    
    bilinearFit = property(__bilinearFit.value, __bilinearFit.set, None, '')

    _ElementMap.update({
        __cornerPoint.name() : __cornerPoint,
        __controlPoint.name() : __controlPoint,
        __bilinearFit.name() : __bilinearFit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 158, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element xCoordinate uses Python identifier xCoordinate
    __xCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'xCoordinate'), 'xCoordinate', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON__xCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 160, 20), )

    
    xCoordinate = property(__xCoordinate.value, __xCoordinate.set, None, '')

    
    # Element yCoordinate uses Python identifier yCoordinate
    __yCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'yCoordinate'), 'yCoordinate', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON__yCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 173, 20), )

    
    yCoordinate = property(__yCoordinate.value, __yCoordinate.set, None, '')

    
    # Element pointInPixel uses Python identifier pointInPixel
    __pointInPixel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pointInPixel'), 'pointInPixel', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON__pointInPixel', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 185, 20), )

    
    pointInPixel = property(__pointInPixel.value, __pointInPixel.set, None, '')

    
    # Element corner uses Python identifier corner
    __corner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'corner'), 'corner', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON__corner', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 204, 20), )

    
    corner = property(__corner.value, __corner.set, None, '')

    _ElementMap.update({
        __xCoordinate.name() : __xCoordinate,
        __yCoordinate.name() : __yCoordinate,
        __pointInPixel.name() : __pointInPixel,
        __corner.name() : __corner
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 233, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element column uses Python identifier column
    __column = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'column'), 'column', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_2_column', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 235, 20), )

    
    column = property(__column.value, __column.set, None, '')

    
    # Element row uses Python identifier row
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'row'), 'row', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_2_row', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 246, 20), )

    
    row = property(__row.value, __row.set, None, '')

    
    # Element xCoordinate uses Python identifier xCoordinate
    __xCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'xCoordinate'), 'xCoordinate', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_2_xCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 257, 20), )

    
    xCoordinate = property(__xCoordinate.value, __xCoordinate.set, None, '')

    
    # Element yCoordinate uses Python identifier yCoordinate
    __yCoordinate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'yCoordinate'), 'yCoordinate', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_2_yCoordinate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 269, 20), )

    
    yCoordinate = property(__yCoordinate.value, __yCoordinate.set, None, '')

    
    # Element pointInPixel uses Python identifier pointInPixel
    __pointInPixel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pointInPixel'), 'pointInPixel', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_2_pointInPixel', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 282, 20), )

    
    pointInPixel = property(__pointInPixel.value, __pointInPixel.set, None, '')

    _ElementMap.update({
        __column.name() : __column,
        __row.name() : __row,
        __xCoordinate.name() : __xCoordinate,
        __yCoordinate.name() : __yCoordinate,
        __pointInPixel.name() : __pointInPixel
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 315, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element xIntercept uses Python identifier xIntercept
    __xIntercept = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'xIntercept'), 'xIntercept', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_3_xIntercept', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 317, 20), )

    
    xIntercept = property(__xIntercept.value, __xIntercept.set, None, '')

    
    # Element xSlope uses Python identifier xSlope
    __xSlope = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'xSlope'), 'xSlope', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_3_xSlope', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 329, 20), )

    
    xSlope = property(__xSlope.value, __xSlope.set, None, '')

    
    # Element yIntercept uses Python identifier yIntercept
    __yIntercept = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'yIntercept'), 'yIntercept', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_3_yIntercept', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 341, 20), )

    
    yIntercept = property(__yIntercept.value, __yIntercept.set, None, '')

    
    # Element ySlope uses Python identifier ySlope
    __ySlope = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ySlope'), 'ySlope', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_3_ySlope', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 353, 20), )

    
    ySlope = property(__ySlope.value, __ySlope.set, None, '')

    _ElementMap.update({
        __xIntercept.name() : __xIntercept,
        __xSlope.name() : __xSlope,
        __yIntercept.name() : __yIntercept,
        __ySlope.name() : __ySlope
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 540, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element illuminationElevationAngle uses Python identifier illuminationElevationAngle
    __illuminationElevationAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'illuminationElevationAngle'), 'illuminationElevationAngle', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_illuminationElevationAngle', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 542, 14), )

    
    illuminationElevationAngle = property(__illuminationElevationAngle.value, __illuminationElevationAngle.set, None, '')

    
    # Element illuminationAzimuthAngle uses Python identifier illuminationAzimuthAngle
    __illuminationAzimuthAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'illuminationAzimuthAngle'), 'illuminationAzimuthAngle', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_illuminationAzimuthAngle', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 558, 14), )

    
    illuminationAzimuthAngle = property(__illuminationAzimuthAngle.value, __illuminationAzimuthAngle.set, None, '')

    
    # Element imageOrientationAngle uses Python identifier imageOrientationAngle
    __imageOrientationAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'imageOrientationAngle'), 'imageOrientationAngle', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_imageOrientationAngle', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 572, 14), )

    
    imageOrientationAngle = property(__imageOrientationAngle.value, __imageOrientationAngle.set, None, '')

    
    # Element imagingCondition uses Python identifier imagingCondition
    __imagingCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'imagingCondition'), 'imagingCondition', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_imagingCondition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 584, 14), )

    
    imagingCondition = property(__imagingCondition.value, __imagingCondition.set, None, '')

    
    # Element imageQualityCode uses Python identifier imageQualityCode
    __imageQualityCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'imageQualityCode'), 'imageQualityCode', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_imageQualityCode', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 596, 14), )

    
    imageQualityCode = property(__imageQualityCode.value, __imageQualityCode.set, None, '')

    
    # Element cloudCoverPercentage uses Python identifier cloudCoverPercentage
    __cloudCoverPercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cloudCoverPercentage'), 'cloudCoverPercentage', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_cloudCoverPercentage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 607, 14), )

    
    cloudCoverPercentage = property(__cloudCoverPercentage.value, __cloudCoverPercentage.set, None, '')

    
    # Element preProcessingTypeCode uses Python identifier preProcessingTypeCode
    __preProcessingTypeCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'preProcessingTypeCode'), 'preProcessingTypeCode', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_preProcessingTypeCode', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 621, 14), )

    
    preProcessingTypeCode = property(__preProcessingTypeCode.value, __preProcessingTypeCode.set, None, '')

    
    # Element compressionGenerationQuality uses Python identifier compressionGenerationQuality
    __compressionGenerationQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compressionGenerationQuality'), 'compressionGenerationQuality', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_compressionGenerationQuality', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 635, 14), )

    
    compressionGenerationQuality = property(__compressionGenerationQuality.value, __compressionGenerationQuality.set, None, '')

    
    # Element triangulationIndicator uses Python identifier triangulationIndicator
    __triangulationIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'triangulationIndicator'), 'triangulationIndicator', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_triangulationIndicator', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 647, 14), )

    
    triangulationIndicator = property(__triangulationIndicator.value, __triangulationIndicator.set, None, '')

    
    # Element radiometricDataAvailability uses Python identifier radiometricDataAvailability
    __radiometricDataAvailability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'radiometricDataAvailability'), 'radiometricDataAvailability', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_radiometricDataAvailability', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 661, 14), )

    
    radiometricDataAvailability = property(__radiometricDataAvailability.value, __radiometricDataAvailability.set, None, '')

    
    # Element cameraCalibrationInformationAvailability uses Python identifier cameraCalibrationInformationAvailability
    __cameraCalibrationInformationAvailability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cameraCalibrationInformationAvailability'), 'cameraCalibrationInformationAvailability', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_cameraCalibrationInformationAvailability', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 674, 14), )

    
    cameraCalibrationInformationAvailability = property(__cameraCalibrationInformationAvailability.value, __cameraCalibrationInformationAvailability.set, None, '')

    
    # Element filmDistortionInformationAvailability uses Python identifier filmDistortionInformationAvailability
    __filmDistortionInformationAvailability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'filmDistortionInformationAvailability'), 'filmDistortionInformationAvailability', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_filmDistortionInformationAvailability', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 689, 14), )

    
    filmDistortionInformationAvailability = property(__filmDistortionInformationAvailability.value, __filmDistortionInformationAvailability.set, None, '')

    
    # Element lensDistortionInformationAvailability uses Python identifier lensDistortionInformationAvailability
    __lensDistortionInformationAvailability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lensDistortionInformationAvailability'), 'lensDistortionInformationAvailability', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_lensDistortionInformationAvailability', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 703, 14), )

    
    lensDistortionInformationAvailability = property(__lensDistortionInformationAvailability.value, __lensDistortionInformationAvailability.set, None, '')

    
    # Element bandDescription uses Python identifier bandDescription
    __bandDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bandDescription'), 'bandDescription', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_4_bandDescription', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 718, 14), )

    
    bandDescription = property(__bandDescription.value, __bandDescription.set, None, '')

    _ElementMap.update({
        __illuminationElevationAngle.name() : __illuminationElevationAngle,
        __illuminationAzimuthAngle.name() : __illuminationAzimuthAngle,
        __imageOrientationAngle.name() : __imageOrientationAngle,
        __imagingCondition.name() : __imagingCondition,
        __imageQualityCode.name() : __imageQualityCode,
        __cloudCoverPercentage.name() : __cloudCoverPercentage,
        __preProcessingTypeCode.name() : __preProcessingTypeCode,
        __compressionGenerationQuality.name() : __compressionGenerationQuality,
        __triangulationIndicator.name() : __triangulationIndicator,
        __radiometricDataAvailability.name() : __radiometricDataAvailability,
        __cameraCalibrationInformationAvailability.name() : __cameraCalibrationInformationAvailability,
        __filmDistortionInformationAvailability.name() : __filmDistortionInformationAvailability,
        __lensDistortionInformationAvailability.name() : __lensDistortionInformationAvailability,
        __bandDescription.name() : __bandDescription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type {https://eml.ecoinformatics.org/spatialRaster-2.2.0}BandType with content type ELEMENT_ONLY
class BandType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'BandType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 739, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element sequenceIdentifier uses Python identifier sequenceIdentifier
    __sequenceIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sequenceIdentifier'), 'sequenceIdentifier', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_BandType_sequenceIdentifier', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 748, 6), )

    
    sequenceIdentifier = property(__sequenceIdentifier.value, __sequenceIdentifier.set, None, '')

    
    # Element highWavelength uses Python identifier highWavelength
    __highWavelength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'highWavelength'), 'highWavelength', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_BandType_highWavelength', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 760, 6), )

    
    highWavelength = property(__highWavelength.value, __highWavelength.set, None, '')

    
    # Element lowWaveLength uses Python identifier lowWaveLength
    __lowWaveLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lowWaveLength'), 'lowWaveLength', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_BandType_lowWaveLength', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 772, 6), )

    
    lowWaveLength = property(__lowWaveLength.value, __lowWaveLength.set, None, '')

    
    # Element waveLengthUnits uses Python identifier waveLengthUnits
    __waveLengthUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'waveLengthUnits'), 'waveLengthUnits', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_BandType_waveLengthUnits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 784, 6), )

    
    waveLengthUnits = property(__waveLengthUnits.value, __waveLengthUnits.set, None, '')

    
    # Element peakResponse uses Python identifier peakResponse
    __peakResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'peakResponse'), 'peakResponse', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_BandType_peakResponse', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 796, 6), )

    
    peakResponse = property(__peakResponse.value, __peakResponse.set, None, '')

    _ElementMap.update({
        __sequenceIdentifier.name() : __sequenceIdentifier,
        __highWavelength.name() : __highWavelength,
        __lowWaveLength.name() : __lowWaveLength,
        __waveLengthUnits.name() : __waveLengthUnits,
        __peakResponse.name() : __peakResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BandType = BandType
_Namespace_sr.addCategoryObject('typeBinding', 'BandType', BandType)


# Complex type {https://eml.ecoinformatics.org/spatialRaster-2.2.0}DataQuality with content type ELEMENT_ONLY
class DataQuality (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'DataQuality')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 875, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accuracyReport uses Python identifier accuracyReport
    __accuracyReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accuracyReport'), 'accuracyReport', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_DataQuality_accuracyReport', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 884, 6), )

    
    accuracyReport = property(__accuracyReport.value, __accuracyReport.set, None, '')

    
    # Element quantitativeAccuracyReport uses Python identifier quantitativeAccuracyReport
    __quantitativeAccuracyReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyReport'), 'quantitativeAccuracyReport', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_DataQuality_quantitativeAccuracyReport', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 894, 6), )

    
    quantitativeAccuracyReport = property(__quantitativeAccuracyReport.value, __quantitativeAccuracyReport.set, None, '')

    _ElementMap.update({
        __accuracyReport.name() : __accuracyReport,
        __quantitativeAccuracyReport.name() : __quantitativeAccuracyReport
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataQuality = DataQuality
_Namespace_sr.addCategoryObject('typeBinding', 'DataQuality', DataQuality)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 903, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element quantitativeAccuracyValue uses Python identifier quantitativeAccuracyValue
    __quantitativeAccuracyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyValue'), 'quantitativeAccuracyValue', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_5_quantitativeAccuracyValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 905, 12), )

    
    quantitativeAccuracyValue = property(__quantitativeAccuracyValue.value, __quantitativeAccuracyValue.set, None, '')

    
    # Element quantitativeAccuracyMethod uses Python identifier quantitativeAccuracyMethod
    __quantitativeAccuracyMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyMethod'), 'quantitativeAccuracyMethod', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_CTD_ANON_5_quantitativeAccuracyMethod', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 916, 12), )

    
    quantitativeAccuracyMethod = property(__quantitativeAccuracyMethod.value, __quantitativeAccuracyMethod.set, None, '')

    _ElementMap.update({
        __quantitativeAccuracyValue.name() : __quantitativeAccuracyValue,
        __quantitativeAccuracyMethod.name() : __quantitativeAccuracyMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2165, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element altitudeSysDef uses Python identifier altitudeSysDef
    __altitudeSysDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeSysDef'), 'altitudeSysDef', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_altitudeSysDef', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2167, 14), )

    
    altitudeSysDef = property(__altitudeSysDef.value, __altitudeSysDef.set, None, '')

    
    # Element depthSysDef uses Python identifier depthSysDef
    __depthSysDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'depthSysDef'), 'depthSysDef', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_depthSysDef', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2229, 14), )

    
    depthSysDef = property(__depthSysDef.value, __depthSysDef.set, None, '')

    _ElementMap.update({
        __altitudeSysDef.name() : __altitudeSysDef,
        __depthSysDef.name() : __depthSysDef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2179, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element altitudeDatumName uses Python identifier altitudeDatumName
    __altitudeDatumName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeDatumName'), 'altitudeDatumName', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON__altitudeDatumName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2181, 20), )

    
    altitudeDatumName = property(__altitudeDatumName.value, __altitudeDatumName.set, None, '')

    
    # Element altitudeResolution uses Python identifier altitudeResolution
    __altitudeResolution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeResolution'), 'altitudeResolution', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON__altitudeResolution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2193, 20), )

    
    altitudeResolution = property(__altitudeResolution.value, __altitudeResolution.set, None, '')

    
    # Element altitudeDistanceUnits uses Python identifier altitudeDistanceUnits
    __altitudeDistanceUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeDistanceUnits'), 'altitudeDistanceUnits', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON__altitudeDistanceUnits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2205, 20), )

    
    altitudeDistanceUnits = property(__altitudeDistanceUnits.value, __altitudeDistanceUnits.set, None, '')

    
    # Element altitudeEncodingMethod uses Python identifier altitudeEncodingMethod
    __altitudeEncodingMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altitudeEncodingMethod'), 'altitudeEncodingMethod', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON__altitudeEncodingMethod', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2216, 20), )

    
    altitudeEncodingMethod = property(__altitudeEncodingMethod.value, __altitudeEncodingMethod.set, None, '')

    _ElementMap.update({
        __altitudeDatumName.name() : __altitudeDatumName,
        __altitudeResolution.name() : __altitudeResolution,
        __altitudeDistanceUnits.name() : __altitudeDistanceUnits,
        __altitudeEncodingMethod.name() : __altitudeEncodingMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2238, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element depthDatumName uses Python identifier depthDatumName
    __depthDatumName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'depthDatumName'), 'depthDatumName', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_2_depthDatumName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2240, 20), )

    
    depthDatumName = property(__depthDatumName.value, __depthDatumName.set, None, '')

    
    # Element depthResolution uses Python identifier depthResolution
    __depthResolution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'depthResolution'), 'depthResolution', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_2_depthResolution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2251, 20), )

    
    depthResolution = property(__depthResolution.value, __depthResolution.set, None, '')

    
    # Element depthDistanceUnits uses Python identifier depthDistanceUnits
    __depthDistanceUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'depthDistanceUnits'), 'depthDistanceUnits', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_2_depthDistanceUnits', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2263, 20), )

    
    depthDistanceUnits = property(__depthDistanceUnits.value, __depthDistanceUnits.set, None, '')

    
    # Element depthEncodingMethod uses Python identifier depthEncodingMethod
    __depthEncodingMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'depthEncodingMethod'), 'depthEncodingMethod', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_2_depthEncodingMethod', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2274, 20), )

    
    depthEncodingMethod = property(__depthEncodingMethod.value, __depthEncodingMethod.set, None, '')

    _ElementMap.update({
        __depthDatumName.name() : __depthDatumName,
        __depthResolution.name() : __depthResolution,
        __depthDistanceUnits.name() : __depthDistanceUnits,
        __depthEncodingMethod.name() : __depthEncodingMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type {https://eml.ecoinformatics.org/spatialReference-2.2.0}geogCoordSysType with content type ELEMENT_ONLY
class geogCoordSysType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/spatialReference-2.2.0}geogCoordSysType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_spref, 'geogCoordSysType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2298, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element datum uses Python identifier datum
    __datum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'datum'), 'datum', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_geogCoordSysType_datum', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2300, 6), )

    
    datum = property(__datum.value, __datum.set, None, '')

    
    # Element spheroid uses Python identifier spheroid
    __spheroid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'spheroid'), 'spheroid', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_geogCoordSysType_spheroid', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2314, 6), )

    
    spheroid = property(__spheroid.value, __spheroid.set, None, '')

    
    # Element primeMeridian uses Python identifier primeMeridian
    __primeMeridian = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'primeMeridian'), 'primeMeridian', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_geogCoordSysType_primeMeridian', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2346, 6), )

    
    primeMeridian = property(__primeMeridian.value, __primeMeridian.set, None, None)

    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_geogCoordSysType_unit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2376, 6), )

    
    unit = property(__unit.value, __unit.set, None, '')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_geogCoordSysType_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2399, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2399, 4)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __datum.name() : __datum,
        __spheroid.name() : __spheroid,
        __primeMeridian.name() : __primeMeridian,
        __unit.name() : __unit
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.geogCoordSysType = geogCoordSysType
_Namespace_spref.addCategoryObject('typeBinding', 'geogCoordSysType', geogCoordSysType)


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2310, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_3_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2311, 10)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2311, 10)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2322, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_4_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2323, 10)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2323, 10)
    
    name = property(__name.value, __name.set, None, '')

    
    # Attribute semiAxisMajor uses Python identifier semiAxisMajor
    __semiAxisMajor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'semiAxisMajor'), 'semiAxisMajor', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_4_semiAxisMajor', pyxb.binding.datatypes.float)
    __semiAxisMajor._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2333, 10)
    __semiAxisMajor._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2333, 10)
    
    semiAxisMajor = property(__semiAxisMajor.value, __semiAxisMajor.set, None, '')

    
    # Attribute denomFlatRatio uses Python identifier denomFlatRatio
    __denomFlatRatio = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'denomFlatRatio'), 'denomFlatRatio', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_4_denomFlatRatio', pyxb.binding.datatypes.float)
    __denomFlatRatio._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2343, 10)
    __denomFlatRatio._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2343, 10)
    
    denomFlatRatio = property(__denomFlatRatio.value, __denomFlatRatio.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __semiAxisMajor.name() : __semiAxisMajor,
        __denomFlatRatio.name() : __denomFlatRatio
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type {https://eml.ecoinformatics.org/spatialReference-2.2.0}horizCoordSysType with content type ELEMENT_ONLY
class horizCoordSysType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/spatialReference-2.2.0}horizCoordSysType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_spref, 'horizCoordSysType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2401, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element geogCoordSys uses Python identifier geogCoordSys
    __geogCoordSys = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geogCoordSys'), 'geogCoordSys', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_horizCoordSysType_geogCoordSys', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2403, 6), )

    
    geogCoordSys = property(__geogCoordSys.value, __geogCoordSys.set, None, '')

    
    # Element projCoordSys uses Python identifier projCoordSys
    __projCoordSys = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'projCoordSys'), 'projCoordSys', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_horizCoordSysType_projCoordSys', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2413, 6), )

    
    projCoordSys = property(__projCoordSys.value, __projCoordSys.set, None, '')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_horizCoordSysType_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2530, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2530, 4)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __geogCoordSys.name() : __geogCoordSys,
        __projCoordSys.name() : __projCoordSys
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.horizCoordSysType = horizCoordSysType
_Namespace_spref.addCategoryObject('typeBinding', 'horizCoordSysType', horizCoordSysType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2421, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element geogCoordSys uses Python identifier geogCoordSys
    __geogCoordSys = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geogCoordSys'), 'geogCoordSys', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_5_geogCoordSys', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2423, 12), )

    
    geogCoordSys = property(__geogCoordSys.value, __geogCoordSys.set, None, '')

    
    # Element projection uses Python identifier projection
    __projection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'projection'), 'projection', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_5_projection', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2433, 12), )

    
    projection = property(__projection.value, __projection.set, None, '')

    _ElementMap.update({
        __geogCoordSys.name() : __geogCoordSys,
        __projection.name() : __projection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2442, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parameter'), 'parameter', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_6_parameter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2444, 18), )

    
    parameter = property(__parameter.value, __parameter.set, None, '')

    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_6_unit', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2489, 18), )

    
    unit = property(__unit.value, __unit.set, None, '')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_6_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2511, 16)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2511, 16)
    
    name = property(__name.value, __name.set, None, '')

    _ElementMap.update({
        __parameter.name() : __parameter,
        __unit.name() : __unit
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2453, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_7_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2454, 22)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2454, 22)
    
    name = property(__name.value, __name.set, None, '')

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_7_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2466, 22)
    __description._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2466, 22)
    
    description = property(__description.value, __description.set, None, '')

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_7_value', pyxb.binding.datatypes.anySimpleType, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2477, 22)
    __value._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2477, 22)
    
    value_ = property(__value.value, __value.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __description.name() : __description,
        __value.name() : __value
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2533, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element horizCoordSysDef uses Python identifier horizCoordSysDef
    __horizCoordSysDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'horizCoordSysDef'), 'horizCoordSysDef', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_8_horizCoordSysDef', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2535, 8), )

    
    horizCoordSysDef = property(__horizCoordSysDef.value, __horizCoordSysDef.set, None, '')

    _ElementMap.update({
        __horizCoordSysDef.name() : __horizCoordSysDef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type {https://eml.ecoinformatics.org/spatialVector-2.2.0}DataQuality with content type ELEMENT_ONLY
class DataQuality_ (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sv, 'DataQuality')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 233, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accuracyReport uses Python identifier accuracyReport
    __accuracyReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accuracyReport'), 'accuracyReport', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_DataQuality_accuracyReport', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 242, 6), )

    
    accuracyReport = property(__accuracyReport.value, __accuracyReport.set, None, '')

    
    # Element quantitativeAccuracyReport uses Python identifier quantitativeAccuracyReport
    __quantitativeAccuracyReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyReport'), 'quantitativeAccuracyReport', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_DataQuality_quantitativeAccuracyReport', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 252, 6), )

    
    quantitativeAccuracyReport = property(__quantitativeAccuracyReport.value, __quantitativeAccuracyReport.set, None, '')

    _ElementMap.update({
        __accuracyReport.name() : __accuracyReport,
        __quantitativeAccuracyReport.name() : __quantitativeAccuracyReport
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataQuality_ = DataQuality_
_Namespace_sv.addCategoryObject('typeBinding', 'DataQuality', DataQuality_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 261, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element quantitativeAccuracyValue uses Python identifier quantitativeAccuracyValue
    __quantitativeAccuracyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyValue'), 'quantitativeAccuracyValue', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_CTD_ANON_quantitativeAccuracyValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 263, 12), )

    
    quantitativeAccuracyValue = property(__quantitativeAccuracyValue.value, __quantitativeAccuracyValue.set, None, '')

    
    # Element quantitativeAccuracyMethod uses Python identifier quantitativeAccuracyMethod
    __quantitativeAccuracyMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyMethod'), 'quantitativeAccuracyMethod', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_CTD_ANON_quantitativeAccuracyMethod', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 274, 12), )

    
    quantitativeAccuracyMethod = property(__quantitativeAccuracyMethod.value, __quantitativeAccuracyMethod.set, None, '')

    _ElementMap.update({
        __quantitativeAccuracyValue.name() : __quantitativeAccuracyValue,
        __quantitativeAccuracyMethod.name() : __quantitativeAccuracyMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type {https://eml.ecoinformatics.org/storedProcedure-2.2.0}ParameterType with content type ELEMENT_ONLY
class ParameterType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sp, 'ParameterType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 156, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_ParameterType_name', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 169, 6), )

    
    name = property(__name.value, __name.set, None, '')

    
    # Element domainDescription uses Python identifier domainDescription
    __domainDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'domainDescription'), 'domainDescription', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_ParameterType_domainDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 181, 6), )

    
    domainDescription = property(__domainDescription.value, __domainDescription.set, None, '')

    
    # Element required uses Python identifier required
    __required = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'required'), 'required', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_ParameterType_required', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 197, 6), )

    
    required = property(__required.value, __required.set, None, '')

    
    # Element repeats uses Python identifier repeats
    __repeats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'repeats'), 'repeats', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_ParameterType_repeats', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 211, 6), )

    
    repeats = property(__repeats.value, __repeats.set, None, '')

    _ElementMap.update({
        __name.name() : __name,
        __domainDescription.name() : __domainDescription,
        __required.name() : __required,
        __repeats.name() : __repeats
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ParameterType = ParameterType
_Namespace_sp.addCategoryObject('typeBinding', 'ParameterType', ParameterType)


# Complex type {https://eml.ecoinformatics.org/text-2.2.0}TextType with content type MIXED
class TextType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_txt, 'TextType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 69, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element section uses Python identifier section
    __section = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'section'), 'section', '__httpseml_ecoinformatics_orgtext_2_2_0_TextType_section', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 79, 12), )

    
    section = property(__section.value, __section.set, None, '')

    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'para'), 'para', '__httpseml_ecoinformatics_orgtext_2_2_0_TextType_para', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 89, 12), )

    
    para = property(__para.value, __para.set, None, '')

    
    # Element markdown uses Python identifier markdown
    __markdown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'markdown'), 'markdown', '__httpseml_ecoinformatics_orgtext_2_2_0_TextType_markdown', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 99, 12), )

    
    markdown = property(__markdown.value, __markdown.set, None, '')

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgtext_2_2_0_TextType_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 194, 8)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        __section.name() : __section,
        __para.name() : __para,
        __markdown.name() : __markdown
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.TextType = TextType
_Namespace_txt.addCategoryObject('typeBinding', 'TextType', TextType)


# Complex type {https://eml.ecoinformatics.org/text-2.2.0}ParagraphType with content type MIXED
class ParagraphType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_txt, 'ParagraphType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 197, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_value', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 208, 12), )

    
    value_ = property(__value.value, __value.set, None, '')

    
    # Element itemizedlist uses Python identifier itemizedlist
    __itemizedlist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'itemizedlist'), 'itemizedlist', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_itemizedlist', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 217, 12), )

    
    itemizedlist = property(__itemizedlist.value, __itemizedlist.set, None, '')

    
    # Element orderedlist uses Python identifier orderedlist
    __orderedlist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orderedlist'), 'orderedlist', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_orderedlist', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 228, 12), )

    
    orderedlist = property(__orderedlist.value, __orderedlist.set, None, '')

    
    # Element emphasis uses Python identifier emphasis
    __emphasis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'emphasis'), 'emphasis', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_emphasis', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 239, 12), )

    
    emphasis = property(__emphasis.value, __emphasis.set, None, '')

    
    # Element subscript uses Python identifier subscript
    __subscript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscript'), 'subscript', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_subscript', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 254, 12), )

    
    subscript = property(__subscript.value, __subscript.set, None, '')

    
    # Element superscript uses Python identifier superscript
    __superscript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'superscript'), 'superscript', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_superscript', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 263, 12), )

    
    superscript = property(__superscript.value, __superscript.set, None, '')

    
    # Element literalLayout uses Python identifier literalLayout
    __literalLayout = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'literalLayout'), 'literalLayout', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_literalLayout', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 272, 12), )

    
    literalLayout = property(__literalLayout.value, __literalLayout.set, None, '')

    
    # Element ulink uses Python identifier ulink
    __ulink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ulink'), 'ulink', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_ulink', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 286, 12), )

    
    ulink = property(__ulink.value, __ulink.set, None, '')

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgtext_2_2_0_ParagraphType_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 320, 8)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        __value.name() : __value,
        __itemizedlist.name() : __itemizedlist,
        __orderedlist.name() : __orderedlist,
        __emphasis.name() : __emphasis,
        __subscript.name() : __subscript,
        __superscript.name() : __superscript,
        __literalLayout.name() : __literalLayout,
        __ulink.name() : __ulink
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.ParagraphType = ParagraphType
_Namespace_txt.addCategoryObject('typeBinding', 'ParagraphType', ParagraphType)


# Complex type [anonymous] with content type MIXED
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 247, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_value', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 249, 24), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 251, 20)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        __value.name() : __value
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type MIXED
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 280, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON__value', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 282, 24), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type MIXED
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 294, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element citetitle uses Python identifier citetitle
    __citetitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citetitle'), 'citetitle', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_2_citetitle', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 296, 24), )

    
    citetitle = property(__citetitle.value, __citetitle.set, None, '')

    
    # Attribute url uses Python identifier url
    __url = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'url'), 'url', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_2_url', pyxb.binding.datatypes.anySimpleType)
    __url._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 307, 20)
    __url._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 307, 20)
    
    url = property(__url.value, __url.set, None, '')

    _ElementMap.update({
        __citetitle.name() : __citetitle
    })
    _AttributeMap.update({
        __url.name() : __url
    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type {https://eml.ecoinformatics.org/text-2.2.0}SectionType with content type ELEMENT_ONLY
class SectionType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_txt, 'SectionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 323, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgtext_2_2_0_SectionType_title', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 333, 12), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'para'), 'para', '__httpseml_ecoinformatics_orgtext_2_2_0_SectionType_para', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 344, 16), )

    
    para = property(__para.value, __para.set, None, '')

    
    # Element section uses Python identifier section
    __section = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'section'), 'section', '__httpseml_ecoinformatics_orgtext_2_2_0_SectionType_section', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 355, 16), )

    
    section = property(__section.value, __section.set, None, '')

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgtext_2_2_0_SectionType_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 367, 8)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __para.name() : __para,
        __section.name() : __section
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.SectionType = SectionType
_Namespace_txt.addCategoryObject('typeBinding', 'SectionType', SectionType)


# Complex type {https://eml.ecoinformatics.org/text-2.2.0}ListType with content type ELEMENT_ONLY
class ListType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_txt, 'ListType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 370, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element listitem uses Python identifier listitem
    __listitem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'listitem'), 'listitem', '__httpseml_ecoinformatics_orgtext_2_2_0_ListType_listitem', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 380, 12), )

    
    listitem = property(__listitem.value, __listitem.set, None, '')

    _ElementMap.update({
        __listitem.name() : __listitem
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ListType = ListType
_Namespace_txt.addCategoryObject('typeBinding', 'ListType', ListType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 390, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element para uses Python identifier para
    __para = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'para'), 'para', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_3_para', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 392, 24), )

    
    para = property(__para.value, __para.set, None, '')

    
    # Element itemizedlist uses Python identifier itemizedlist
    __itemizedlist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'itemizedlist'), 'itemizedlist', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_3_itemizedlist', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 403, 24), )

    
    itemizedlist = property(__itemizedlist.value, __itemizedlist.set, None, '')

    
    # Element orderedlist uses Python identifier orderedlist
    __orderedlist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orderedlist'), 'orderedlist', '__httpseml_ecoinformatics_orgtext_2_2_0_CTD_ANON_3_orderedlist', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 414, 24), )

    
    orderedlist = property(__orderedlist.value, __orderedlist.set, None, '')

    _ElementMap.update({
        __para.name() : __para,
        __itemizedlist.name() : __itemizedlist,
        __orderedlist.name() : __orderedlist
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type {https://eml.ecoinformatics.org/text-2.2.0}SubSuperScriptType with content type MIXED
class SubSuperScriptType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_txt, 'SubSuperScriptType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 431, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpseml_ecoinformatics_orgtext_2_2_0_SubSuperScriptType_value', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 442, 12), )

    
    value_ = property(__value.value, __value.set, None, '')

    
    # Element subscript uses Python identifier subscript
    __subscript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscript'), 'subscript', '__httpseml_ecoinformatics_orgtext_2_2_0_SubSuperScriptType_subscript', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 451, 12), )

    
    subscript = property(__subscript.value, __subscript.set, None, '')

    
    # Element superscript uses Python identifier superscript
    __superscript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'superscript'), 'superscript', '__httpseml_ecoinformatics_orgtext_2_2_0_SubSuperScriptType_superscript', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 460, 12), )

    
    superscript = property(__superscript.value, __superscript.set, None, '')

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgtext_2_2_0_SubSuperScriptType_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 470, 8)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        __value.name() : __value,
        __subscript.name() : __subscript,
        __superscript.name() : __superscript
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.SubSuperScriptType = SubSuperScriptType
_Namespace_txt.addCategoryObject('typeBinding', 'SubSuperScriptType', SubSuperScriptType)


# Complex type {https://eml.ecoinformatics.org/text-2.2.0}i18nString with content type SIMPLE
class i18nString (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_txt, 'i18nString')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 473, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgtext_2_2_0_i18nString_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 483, 16)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.i18nString = i18nString
_Namespace_txt.addCategoryObject('typeBinding', 'i18nString', i18nString)


# Complex type {https://eml.ecoinformatics.org/access-2.2.0}AccessType with content type ELEMENT_ONLY
class AccessType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_acc, 'AccessType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 76, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element allow uses Python identifier allow
    __allow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'allow'), 'allow', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_allow', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 96, 8), )

    
    allow = property(__allow.value, __allow.set, None, '')

    
    # Element deny uses Python identifier deny
    __deny = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deny'), 'deny', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_deny', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 108, 8), )

    
    deny = property(__deny.value, __deny.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 124, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 124, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 125, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 125, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 126, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 126, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Attribute order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'order'), 'order', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_order', _module_typeBindings.STD_ANON, unicode_default='allowFirst')
    __order._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 127, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 127, 4)
    
    order = property(__order.value, __order.set, None, '')

    
    # Attribute authSystem uses Python identifier authSystem
    __authSystem = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authSystem'), 'authSystem', '__httpseml_ecoinformatics_orgaccess_2_2_0_AccessType_authSystem', pyxb.binding.datatypes.string, required=True)
    __authSystem._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 150, 4)
    __authSystem._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 150, 4)
    
    authSystem = property(__authSystem.value, __authSystem.set, None, '')

    _ElementMap.update({
        __allow.name() : __allow,
        __deny.name() : __deny,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope,
        __order.name() : __order,
        __authSystem.name() : __authSystem
    })
_module_typeBindings.AccessType = AccessType
_Namespace_acc.addCategoryObject('typeBinding', 'AccessType', AccessType)


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}AttributeListType with content type ELEMENT_ONLY
class AttributeListType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'AttributeListType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 88, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attribute uses Python identifier attribute
    __attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attribute'), 'attribute', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeListType_attribute', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 100, 6), )

    
    attribute = property(__attribute.value, __attribute.set, None, None)

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeListType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeListType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 103, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 103, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __attribute.name() : __attribute,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.AttributeListType = AttributeListType
_Namespace_att.addCategoryObject('typeBinding', 'AttributeListType', AttributeListType)


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}AttributeType with content type ELEMENT_ONLY
class AttributeType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'AttributeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 105, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeName uses Python identifier attributeName
    __attributeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeName'), 'attributeName', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_attributeName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 120, 8), )

    
    attributeName = property(__attributeName.value, __attributeName.set, None, '')

    
    # Element attributeLabel uses Python identifier attributeLabel
    __attributeLabel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeLabel'), 'attributeLabel', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_attributeLabel', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 143, 8), )

    
    attributeLabel = property(__attributeLabel.value, __attributeLabel.set, None, '')

    
    # Element attributeDefinition uses Python identifier attributeDefinition
    __attributeDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeDefinition'), 'attributeDefinition', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_attributeDefinition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 163, 8), )

    
    attributeDefinition = property(__attributeDefinition.value, __attributeDefinition.set, None, '')

    
    # Element storageType uses Python identifier storageType
    __storageType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'storageType'), 'storageType', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_storageType', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 182, 8), )

    
    storageType = property(__storageType.value, __storageType.set, None, '')

    
    # Element measurementScale uses Python identifier measurementScale
    __measurementScale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementScale'), 'measurementScale', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_measurementScale', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 237, 8), )

    
    measurementScale = property(__measurementScale.value, __measurementScale.set, None, '')

    
    # Element missingValueCode uses Python identifier missingValueCode
    __missingValueCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'missingValueCode'), 'missingValueCode', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_missingValueCode', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 566, 8), )

    
    missingValueCode = property(__missingValueCode.value, __missingValueCode.set, None, '')

    
    # Element accuracy uses Python identifier accuracy
    __accuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accuracy'), 'accuracy', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_accuracy', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 623, 8), )

    
    accuracy = property(__accuracy.value, __accuracy.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 641, 8), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 657, 8), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 672, 8), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 701, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 701, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 702, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 702, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgattribute_2_2_0_AttributeType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 703, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 703, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __attributeName.name() : __attributeName,
        __attributeLabel.name() : __attributeLabel,
        __attributeDefinition.name() : __attributeDefinition,
        __storageType.name() : __storageType,
        __measurementScale.name() : __measurementScale,
        __missingValueCode.name() : __missingValueCode,
        __accuracy.name() : __accuracy,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __annotation.name() : __annotation,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.AttributeType = AttributeType
_Namespace_att.addCategoryObject('typeBinding', 'AttributeType', AttributeType)


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}NonNumericDomainType with content type ELEMENT_ONLY
class NonNumericDomainType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'NonNumericDomainType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 858, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element enumeratedDomain uses Python identifier enumeratedDomain
    __enumeratedDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'enumeratedDomain'), 'enumeratedDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_NonNumericDomainType_enumeratedDomain', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 883, 8), )

    
    enumeratedDomain = property(__enumeratedDomain.value, __enumeratedDomain.set, None, '')

    
    # Element textDomain uses Python identifier textDomain
    __textDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'textDomain'), 'textDomain', '__httpseml_ecoinformatics_orgattribute_2_2_0_NonNumericDomainType_textDomain', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1168, 8), )

    
    textDomain = property(__textDomain.value, __textDomain.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgattribute_2_2_0_NonNumericDomainType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgattribute_2_2_0_NonNumericDomainType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1263, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1263, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __enumeratedDomain.name() : __enumeratedDomain,
        __textDomain.name() : __textDomain,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.NonNumericDomainType = NonNumericDomainType
_Namespace_att.addCategoryObject('typeBinding', 'NonNumericDomainType', NonNumericDomainType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 902, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element codeDefinition uses Python identifier codeDefinition
    __codeDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'codeDefinition'), 'codeDefinition', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_19_codeDefinition', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 904, 14), )

    
    codeDefinition = property(__codeDefinition.value, __codeDefinition.set, None, '')

    
    # Element externalCodeSet uses Python identifier externalCodeSet
    __externalCodeSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'externalCodeSet'), 'externalCodeSet', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_19_externalCodeSet', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 987, 14), )

    
    externalCodeSet = property(__externalCodeSet.value, __externalCodeSet.set, None, '')

    
    # Element entityCodeList uses Python identifier entityCodeList
    __entityCodeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityCodeList'), 'entityCodeList', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_19_entityCodeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1052, 14), )

    
    entityCodeList = property(__entityCodeList.value, __entityCodeList.set, None, '')

    
    # Attribute enforced uses Python identifier enforced
    __enforced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'enforced'), 'enforced', '__httpseml_ecoinformatics_orgattribute_2_2_0_CTD_ANON_19_enforced', _module_typeBindings.STD_ANON_3, unicode_default='yes')
    __enforced._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1141, 12)
    __enforced._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1141, 12)
    
    enforced = property(__enforced.value, __enforced.set, None, '')

    _ElementMap.update({
        __codeDefinition.name() : __codeDefinition,
        __externalCodeSet.name() : __externalCodeSet,
        __entityCodeList.name() : __entityCodeList
    })
    _AttributeMap.update({
        __enforced.name() : __enforced
    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}NumericDomainType with content type ELEMENT_ONLY
class NumericDomainType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'NumericDomainType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1265, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element numberType uses Python identifier numberType
    __numberType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numberType'), 'numberType', '__httpseml_ecoinformatics_orgattribute_2_2_0_NumericDomainType_numberType', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1288, 8), )

    
    numberType = property(__numberType.value, __numberType.set, None, '')

    
    # Element bounds uses Python identifier bounds
    __bounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bounds'), 'bounds', '__httpseml_ecoinformatics_orgattribute_2_2_0_NumericDomainType_bounds', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1348, 6), )

    
    bounds = property(__bounds.value, __bounds.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgattribute_2_2_0_NumericDomainType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgattribute_2_2_0_NumericDomainType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1302, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1302, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __numberType.name() : __numberType,
        __bounds.name() : __bounds,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.NumericDomainType = NumericDomainType
_Namespace_att.addCategoryObject('typeBinding', 'NumericDomainType', NumericDomainType)


# Complex type {https://eml.ecoinformatics.org/attribute-2.2.0}DateTimeDomainType with content type ELEMENT_ONLY
class DateTimeDomainType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_att, 'DateTimeDomainType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1304, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element bounds uses Python identifier bounds
    __bounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bounds'), 'bounds', '__httpseml_ecoinformatics_orgattribute_2_2_0_DateTimeDomainType_bounds', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1473, 6), )

    
    bounds = property(__bounds.value, __bounds.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgattribute_2_2_0_DateTimeDomainType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgattribute_2_2_0_DateTimeDomainType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1331, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1331, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __bounds.name() : __bounds,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.DateTimeDomainType = DateTimeDomainType
_Namespace_att.addCategoryObject('typeBinding', 'DateTimeDomainType', DateTimeDomainType)


# Complex type {https://eml.ecoinformatics.org/constraint-2.2.0}ConstraintType with content type ELEMENT_ONLY
class ConstraintType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_con, 'ConstraintType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 61, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element primaryKey uses Python identifier primaryKey
    __primaryKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'primaryKey'), 'primaryKey', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_primaryKey', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 77, 6), )

    
    primaryKey = property(__primaryKey.value, __primaryKey.set, None, '')

    
    # Element uniqueKey uses Python identifier uniqueKey
    __uniqueKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uniqueKey'), 'uniqueKey', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_uniqueKey', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 134, 6), )

    
    uniqueKey = property(__uniqueKey.value, __uniqueKey.set, None, '')

    
    # Element checkConstraint uses Python identifier checkConstraint
    __checkConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'checkConstraint'), 'checkConstraint', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_checkConstraint', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 191, 6), )

    
    checkConstraint = property(__checkConstraint.value, __checkConstraint.set, None, '')

    
    # Element foreignKey uses Python identifier foreignKey
    __foreignKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'foreignKey'), 'foreignKey', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_foreignKey', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 246, 6), )

    
    foreignKey = property(__foreignKey.value, __foreignKey.set, None, '')

    
    # Element joinCondition uses Python identifier joinCondition
    __joinCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'joinCondition'), 'joinCondition', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_joinCondition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 262, 6), )

    
    joinCondition = property(__joinCondition.value, __joinCondition.set, None, '')

    
    # Element notNullConstraint uses Python identifier notNullConstraint
    __notNullConstraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'notNullConstraint'), 'notNullConstraint', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_notNullConstraint', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 316, 6), )

    
    notNullConstraint = property(__notNullConstraint.value, __notNullConstraint.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 371, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 371, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 372, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 372, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgconstraint_2_2_0_ConstraintType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 373, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 373, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __primaryKey.name() : __primaryKey,
        __uniqueKey.name() : __uniqueKey,
        __checkConstraint.name() : __checkConstraint,
        __foreignKey.name() : __foreignKey,
        __joinCondition.name() : __joinCondition,
        __notNullConstraint.name() : __notNullConstraint
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ConstraintType = ConstraintType
_Namespace_con.addCategoryObject('typeBinding', 'ConstraintType', ConstraintType)


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}Coverage with content type ELEMENT_ONLY
class Coverage (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'Coverage')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 45, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element geographicCoverage uses Python identifier geographicCoverage
    __geographicCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geographicCoverage'), 'geographicCoverage', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_geographicCoverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 58, 8), )

    
    geographicCoverage = property(__geographicCoverage.value, __geographicCoverage.set, None, '')

    
    # Element temporalCoverage uses Python identifier temporalCoverage
    __temporalCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'temporalCoverage'), 'temporalCoverage', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_temporalCoverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 71, 8), )

    
    temporalCoverage = property(__temporalCoverage.value, __temporalCoverage.set, None, '')

    
    # Element taxonomicCoverage uses Python identifier taxonomicCoverage
    __taxonomicCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonomicCoverage'), 'taxonomicCoverage', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_taxonomicCoverage', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 92, 8), )

    
    taxonomicCoverage = property(__taxonomicCoverage.value, __taxonomicCoverage.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 116, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 116, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 117, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 117, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgcoverage_2_2_0_Coverage_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 118, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 118, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __geographicCoverage.name() : __geographicCoverage,
        __temporalCoverage.name() : __temporalCoverage,
        __taxonomicCoverage.name() : __taxonomicCoverage,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.Coverage = Coverage
_Namespace_cov.addCategoryObject('typeBinding', 'Coverage', Coverage)


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}TemporalCoverage with content type ELEMENT_ONLY
class TemporalCoverage (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'TemporalCoverage')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 120, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element singleDateTime uses Python identifier singleDateTime
    __singleDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'singleDateTime'), 'singleDateTime', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TemporalCoverage_singleDateTime', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 133, 8), )

    
    singleDateTime = property(__singleDateTime.value, __singleDateTime.set, None, '')

    
    # Element rangeOfDates uses Python identifier rangeOfDates
    __rangeOfDates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rangeOfDates'), 'rangeOfDates', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TemporalCoverage_rangeOfDates', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 145, 8), )

    
    rangeOfDates = property(__rangeOfDates.value, __rangeOfDates.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TemporalCoverage_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TemporalCoverage_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 193, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 193, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __singleDateTime.name() : __singleDateTime,
        __rangeOfDates.name() : __rangeOfDates,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.TemporalCoverage = TemporalCoverage
_Namespace_cov.addCategoryObject('typeBinding', 'TemporalCoverage', TemporalCoverage)


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}GeographicCoverage with content type ELEMENT_ONLY
class GeographicCoverage (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'GeographicCoverage')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 356, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element geographicDescription uses Python identifier geographicDescription
    __geographicDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geographicDescription'), 'geographicDescription', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_geographicDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 370, 8), )

    
    geographicDescription = property(__geographicDescription.value, __geographicDescription.set, None, '')

    
    # Element boundingCoordinates uses Python identifier boundingCoordinates
    __boundingCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'boundingCoordinates'), 'boundingCoordinates', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_boundingCoordinates', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 410, 8), )

    
    boundingCoordinates = property(__boundingCoordinates.value, __boundingCoordinates.set, None, '')

    
    # Element datasetGPolygon uses Python identifier datasetGPolygon
    __datasetGPolygon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'datasetGPolygon'), 'datasetGPolygon', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_datasetGPolygon', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 635, 8), )

    
    datasetGPolygon = property(__datasetGPolygon.value, __datasetGPolygon.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 768, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 768, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 769, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 769, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgcoverage_2_2_0_GeographicCoverage_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 770, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 770, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __geographicDescription.name() : __geographicDescription,
        __boundingCoordinates.name() : __boundingCoordinates,
        __datasetGPolygon.name() : __datasetGPolygon,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.GeographicCoverage = GeographicCoverage
_Namespace_cov.addCategoryObject('typeBinding', 'GeographicCoverage', GeographicCoverage)


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicCoverage with content type ELEMENT_ONLY
class TaxonomicCoverage (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'TaxonomicCoverage')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 867, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element taxonomicSystem uses Python identifier taxonomicSystem
    __taxonomicSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonomicSystem'), 'taxonomicSystem', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicCoverage_taxonomicSystem', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 879, 8), )

    
    taxonomicSystem = property(__taxonomicSystem.value, __taxonomicSystem.set, None, '')

    
    # Element generalTaxonomicCoverage uses Python identifier generalTaxonomicCoverage
    __generalTaxonomicCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'generalTaxonomicCoverage'), 'generalTaxonomicCoverage', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicCoverage_generalTaxonomicCoverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1037, 8), )

    
    generalTaxonomicCoverage = property(__generalTaxonomicCoverage.value, __generalTaxonomicCoverage.set, None, '')

    
    # Element taxonomicClassification uses Python identifier taxonomicClassification
    __taxonomicClassification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonomicClassification'), 'taxonomicClassification', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicCoverage_taxonomicClassification', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1050, 8), )

    
    taxonomicClassification = property(__taxonomicClassification.value, __taxonomicClassification.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicCoverage_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicCoverage_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1065, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1065, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __taxonomicSystem.name() : __taxonomicSystem,
        __generalTaxonomicCoverage.name() : __generalTaxonomicCoverage,
        __taxonomicClassification.name() : __taxonomicClassification,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.TaxonomicCoverage = TaxonomicCoverage
_Namespace_cov.addCategoryObject('typeBinding', 'TaxonomicCoverage', TaxonomicCoverage)


# Complex type {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicClassificationType with content type ELEMENT_ONLY
class TaxonomicClassificationType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cov, 'TaxonomicClassificationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1067, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element taxonRankName uses Python identifier taxonRankName
    __taxonRankName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonRankName'), 'taxonRankName', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicClassificationType_taxonRankName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1086, 6), )

    
    taxonRankName = property(__taxonRankName.value, __taxonRankName.set, None, '')

    
    # Element taxonRankValue uses Python identifier taxonRankValue
    __taxonRankValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonRankValue'), 'taxonRankValue', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicClassificationType_taxonRankValue', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1100, 6), )

    
    taxonRankValue = property(__taxonRankValue.value, __taxonRankValue.set, None, '')

    
    # Element commonName uses Python identifier commonName
    __commonName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'commonName'), 'commonName', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicClassificationType_commonName', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1119, 6), )

    
    commonName = property(__commonName.value, __commonName.set, None, '')

    
    # Element taxonId uses Python identifier taxonId
    __taxonId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonId'), 'taxonId', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicClassificationType_taxonId', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1132, 6), )

    
    taxonId = property(__taxonId.value, __taxonId.set, None, '')

    
    # Element taxonomicClassification uses Python identifier taxonomicClassification
    __taxonomicClassification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'taxonomicClassification'), 'taxonomicClassification', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicClassificationType_taxonomicClassification', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1171, 6), )

    
    taxonomicClassification = property(__taxonomicClassification.value, __taxonomicClassification.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgcoverage_2_2_0_TaxonomicClassificationType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1184, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1184, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __taxonRankName.name() : __taxonRankName,
        __taxonRankValue.name() : __taxonRankValue,
        __commonName.name() : __commonName,
        __taxonId.name() : __taxonId,
        __taxonomicClassification.name() : __taxonomicClassification
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.TaxonomicClassificationType = TaxonomicClassificationType
_Namespace_cov.addCategoryObject('typeBinding', 'TaxonomicClassificationType', TaxonomicClassificationType)


# Complex type {https://eml.ecoinformatics.org/dataTable-2.2.0}DataTableType with content type ELEMENT_ONLY
class DataTableType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/dataTable-2.2.0}DataTableType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_dat, 'DataTableType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 87, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeList uses Python identifier attributeList
    __attributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeList'), 'attributeList', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_attributeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 91, 8), )

    
    attributeList = property(__attributeList.value, __attributeList.set, None, '')

    
    # Element constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_constraint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 103, 8), )

    
    constraint = property(__constraint.value, __constraint.set, None, '')

    
    # Element caseSensitive uses Python identifier caseSensitive
    __caseSensitive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'caseSensitive'), 'caseSensitive', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_caseSensitive', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 114, 8), )

    
    caseSensitive = property(__caseSensitive.value, __caseSensitive.set, None, '')

    
    # Element numberOfRecords uses Python identifier numberOfRecords
    __numberOfRecords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numberOfRecords'), 'numberOfRecords', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_numberOfRecords', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 139, 8), )

    
    numberOfRecords = property(__numberOfRecords.value, __numberOfRecords.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element entityName uses Python identifier entityName
    __entityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityName'), 'entityName', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_entityName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6), )

    
    entityName = property(__entityName.value, __entityName.set, None, '')

    
    # Element entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityDescription'), 'entityDescription', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_entityDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, '')

    
    # Element physical uses Python identifier physical
    __physical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physical'), 'physical', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_physical', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6), )

    
    physical = property(__physical.value, __physical.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 159, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 159, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 160, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 160, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgdataTable_2_2_0_DataTableType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 161, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 161, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __attributeList.name() : __attributeList,
        __constraint.name() : __constraint,
        __caseSensitive.name() : __caseSensitive,
        __numberOfRecords.name() : __numberOfRecords,
        __references.name() : __references,
        __alternateIdentifier.name() : __alternateIdentifier,
        __entityName.name() : __entityName,
        __entityDescription.name() : __entityDescription,
        __physical.name() : __physical,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __additionalInfo.name() : __additionalInfo,
        __annotation.name() : __annotation
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.DataTableType = DataTableType
_Namespace_dat.addCategoryObject('typeBinding', 'DataTableType', DataTableType)


# Complex type {https://eml.ecoinformatics.org/dataset-2.2.0}DatasetType with content type ELEMENT_ONLY
class DatasetType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_ds, 'DatasetType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 83, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element purpose uses Python identifier purpose
    __purpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purpose'), 'purpose', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_purpose', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 102, 8), )

    
    purpose = property(__purpose.value, __purpose.set, None, '')

    
    # Element introduction uses Python identifier introduction
    __introduction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'introduction'), 'introduction', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_introduction', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 117, 8), )

    
    introduction = property(__introduction.value, __introduction.set, None, '')

    
    # Element gettingStarted uses Python identifier gettingStarted
    __gettingStarted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gettingStarted'), 'gettingStarted', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_gettingStarted', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 139, 8), )

    
    gettingStarted = property(__gettingStarted.value, __gettingStarted.set, None, '')

    
    # Element acknowledgements uses Python identifier acknowledgements
    __acknowledgements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'acknowledgements'), 'acknowledgements', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_acknowledgements', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 165, 8), )

    
    acknowledgements = property(__acknowledgements.value, __acknowledgements.set, None, '')

    
    # Element maintenance uses Python identifier maintenance
    __maintenance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'maintenance'), 'maintenance', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_maintenance', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 186, 8), )

    
    maintenance = property(__maintenance.value, __maintenance.set, None, '')

    
    # Element contact uses Python identifier contact
    __contact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contact'), 'contact', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_contact', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 199, 8), )

    
    contact = property(__contact.value, __contact.set, None, '')

    
    # Element publisher uses Python identifier publisher
    __publisher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publisher'), 'publisher', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_publisher', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 211, 8), )

    
    publisher = property(__publisher.value, __publisher.set, None, '')

    
    # Element pubPlace uses Python identifier pubPlace
    __pubPlace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pubPlace'), 'pubPlace', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_pubPlace', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 223, 8), )

    
    pubPlace = property(__pubPlace.value, __pubPlace.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 237, 8), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element project uses Python identifier project
    __project = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'project'), 'project', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_project', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 250, 8), )

    
    project = property(__project.value, __project.set, None, '')

    
    # Element dataTable uses Python identifier dataTable
    __dataTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dataTable'), 'dataTable', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_dataTable', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 265, 10), )

    
    dataTable = property(__dataTable.value, __dataTable.set, None, '')

    
    # Element spatialRaster uses Python identifier spatialRaster
    __spatialRaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'spatialRaster'), 'spatialRaster', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_spatialRaster', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 278, 10), )

    
    spatialRaster = property(__spatialRaster.value, __spatialRaster.set, None, '')

    
    # Element spatialVector uses Python identifier spatialVector
    __spatialVector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'spatialVector'), 'spatialVector', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_spatialVector', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 289, 10), )

    
    spatialVector = property(__spatialVector.value, __spatialVector.set, None, '')

    
    # Element storedProcedure uses Python identifier storedProcedure
    __storedProcedure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'storedProcedure'), 'storedProcedure', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_storedProcedure', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 300, 10), )

    
    storedProcedure = property(__storedProcedure.value, __storedProcedure.set, None, '')

    
    # Element view uses Python identifier view
    __view = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'view'), 'view', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_view', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 315, 10), )

    
    view = property(__view.value, __view.set, None, '')

    
    # Element otherEntity uses Python identifier otherEntity
    __otherEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'otherEntity'), 'otherEntity', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_otherEntity', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 330, 10), )

    
    otherEntity = property(__otherEntity.value, __otherEntity.set, None, '')

    
    # Element referencePublication uses Python identifier referencePublication
    __referencePublication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'referencePublication'), 'referencePublication', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_referencePublication', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 348, 8), )

    
    referencePublication = property(__referencePublication.value, __referencePublication.set, None, '')

    
    # Element usageCitation uses Python identifier usageCitation
    __usageCitation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'usageCitation'), 'usageCitation', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_usageCitation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 358, 8), )

    
    usageCitation = property(__usageCitation.value, __usageCitation.set, None, '')

    
    # Element literatureCited uses Python identifier literatureCited
    __literatureCited = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'literatureCited'), 'literatureCited', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_literatureCited', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 375, 8), )

    
    literatureCited = property(__literatureCited.value, __literatureCited.set, None, '')

    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shortName'), 'shortName', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_shortName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6), )

    
    shortName = property(__shortName.value, __shortName.set, None, '')

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_title', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creator'), 'creator', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_creator', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6), )

    
    creator = property(__creator.value, __creator.set, None, '')

    
    # Element metadataProvider uses Python identifier metadataProvider
    __metadataProvider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'metadataProvider'), 'metadataProvider', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_metadataProvider', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6), )

    
    metadataProvider = property(__metadataProvider.value, __metadataProvider.set, None, '')

    
    # Element associatedParty uses Python identifier associatedParty
    __associatedParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'associatedParty'), 'associatedParty', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_associatedParty', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6), )

    
    associatedParty = property(__associatedParty.value, __associatedParty.set, None, '')

    
    # Element pubDate uses Python identifier pubDate
    __pubDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pubDate'), 'pubDate', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_pubDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6), )

    
    pubDate = property(__pubDate.value, __pubDate.set, None, '')

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'language'), 'language', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_language', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6), )

    
    language = property(__language.value, __language.set, None, '')

    
    # Element series uses Python identifier series
    __series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series'), 'series', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_series', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6), )

    
    series = property(__series.value, __series.set, None, '')

    
    # Element abstract uses Python identifier abstract
    __abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abstract'), 'abstract', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_abstract', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6), )

    
    abstract = property(__abstract.value, __abstract.set, None, '')

    
    # Element keywordSet uses Python identifier keywordSet
    __keywordSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'keywordSet'), 'keywordSet', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_keywordSet', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6), )

    
    keywordSet = property(__keywordSet.value, __keywordSet.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element intellectualRights uses Python identifier intellectualRights
    __intellectualRights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'intellectualRights'), 'intellectualRights', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_intellectualRights', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6), )

    
    intellectualRights = property(__intellectualRights.value, __intellectualRights.set, None, '')

    
    # Element licensed uses Python identifier licensed
    __licensed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'licensed'), 'licensed', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_licensed', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6), )

    
    licensed = property(__licensed.value, __licensed.set, None, '')

    
    # Element distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_distribution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6), )

    
    distribution = property(__distribution.value, __distribution.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 392, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 392, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 393, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 393, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgdataset_2_2_0_DatasetType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 394, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 394, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __purpose.name() : __purpose,
        __introduction.name() : __introduction,
        __gettingStarted.name() : __gettingStarted,
        __acknowledgements.name() : __acknowledgements,
        __maintenance.name() : __maintenance,
        __contact.name() : __contact,
        __publisher.name() : __publisher,
        __pubPlace.name() : __pubPlace,
        __methods.name() : __methods,
        __project.name() : __project,
        __dataTable.name() : __dataTable,
        __spatialRaster.name() : __spatialRaster,
        __spatialVector.name() : __spatialVector,
        __storedProcedure.name() : __storedProcedure,
        __view.name() : __view,
        __otherEntity.name() : __otherEntity,
        __referencePublication.name() : __referencePublication,
        __usageCitation.name() : __usageCitation,
        __literatureCited.name() : __literatureCited,
        __alternateIdentifier.name() : __alternateIdentifier,
        __shortName.name() : __shortName,
        __title.name() : __title,
        __creator.name() : __creator,
        __metadataProvider.name() : __metadataProvider,
        __associatedParty.name() : __associatedParty,
        __pubDate.name() : __pubDate,
        __language.name() : __language,
        __series.name() : __series,
        __abstract.name() : __abstract,
        __keywordSet.name() : __keywordSet,
        __additionalInfo.name() : __additionalInfo,
        __intellectualRights.name() : __intellectualRights,
        __licensed.name() : __licensed,
        __distribution.name() : __distribution,
        __coverage.name() : __coverage,
        __annotation.name() : __annotation,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.DatasetType = DatasetType
_Namespace_ds.addCategoryObject('typeBinding', 'DatasetType', DatasetType)


# Complex type {https://eml.ecoinformatics.org/entity-2.2.0}OtherEntityType with content type ELEMENT_ONLY
class OtherEntityType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/entity-2.2.0}OtherEntityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_ent, 'OtherEntityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 78, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attributeList uses Python identifier attributeList
    __attributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeList'), 'attributeList', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_attributeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 83, 10), )

    
    attributeList = property(__attributeList.value, __attributeList.set, None, '')

    
    # Element constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_constraint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 95, 10), )

    
    constraint = property(__constraint.value, __constraint.set, None, '')

    
    # Element entityType uses Python identifier entityType
    __entityType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityType'), 'entityType', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_entityType', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 106, 10), )

    
    entityType = property(__entityType.value, __entityType.set, None, '')

    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element entityName uses Python identifier entityName
    __entityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityName'), 'entityName', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_entityName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6), )

    
    entityName = property(__entityName.value, __entityName.set, None, '')

    
    # Element entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityDescription'), 'entityDescription', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_entityDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, '')

    
    # Element physical uses Python identifier physical
    __physical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physical'), 'physical', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_physical', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6), )

    
    physical = property(__physical.value, __physical.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 126, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 126, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 127, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 127, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgentity_2_2_0_OtherEntityType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 128, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 128, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __attributeList.name() : __attributeList,
        __constraint.name() : __constraint,
        __entityType.name() : __entityType,
        __alternateIdentifier.name() : __alternateIdentifier,
        __entityName.name() : __entityName,
        __entityDescription.name() : __entityDescription,
        __physical.name() : __physical,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __additionalInfo.name() : __additionalInfo,
        __annotation.name() : __annotation,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.OtherEntityType = OtherEntityType
_Namespace_ent.addCategoryObject('typeBinding', 'OtherEntityType', OtherEntityType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 159, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgentity_2_2_0_CTD_ANON_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 162, 14)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 162, 14)
    
    system = property(__system.value, __system.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __system.name() : __system
    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}CitationType with content type ELEMENT_ONLY
class CitationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/literature-2.2.0}CitationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'CitationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 76, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element contact uses Python identifier contact
    __contact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contact'), 'contact', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_contact', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 80, 8), )

    
    contact = property(__contact.value, __contact.set, None, '')

    
    # Element article uses Python identifier article
    __article = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'article'), 'article', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_article', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 91, 10), )

    
    article = property(__article.value, __article.set, None, '')

    
    # Element book uses Python identifier book
    __book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'book'), 'book', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_book', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 103, 10), )

    
    book = property(__book.value, __book.set, None, '')

    
    # Element chapter uses Python identifier chapter
    __chapter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'chapter'), 'chapter', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_chapter', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 114, 10), )

    
    chapter = property(__chapter.value, __chapter.set, None, '')

    
    # Element editedBook uses Python identifier editedBook
    __editedBook = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'editedBook'), 'editedBook', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_editedBook', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 128, 10), )

    
    editedBook = property(__editedBook.value, __editedBook.set, None, '')

    
    # Element manuscript uses Python identifier manuscript
    __manuscript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'manuscript'), 'manuscript', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_manuscript', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 141, 10), )

    
    manuscript = property(__manuscript.value, __manuscript.set, None, '')

    
    # Element report uses Python identifier report
    __report = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'report'), 'report', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_report', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 152, 10), )

    
    report = property(__report.value, __report.set, None, '')

    
    # Element thesis uses Python identifier thesis
    __thesis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'thesis'), 'thesis', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_thesis', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 165, 10), )

    
    thesis = property(__thesis.value, __thesis.set, None, '')

    
    # Element conferenceProceedings uses Python identifier conferenceProceedings
    __conferenceProceedings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceProceedings'), 'conferenceProceedings', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_conferenceProceedings', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 179, 10), )

    
    conferenceProceedings = property(__conferenceProceedings.value, __conferenceProceedings.set, None, '')

    
    # Element personalCommunication uses Python identifier personalCommunication
    __personalCommunication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'personalCommunication'), 'personalCommunication', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_personalCommunication', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 190, 10), )

    
    personalCommunication = property(__personalCommunication.value, __personalCommunication.set, None, '')

    
    # Element map uses Python identifier map
    __map = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'map'), 'map', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_map', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 202, 10), )

    
    map = property(__map.value, __map.set, None, '')

    
    # Element generic uses Python identifier generic
    __generic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'generic'), 'generic', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_generic', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 214, 10), )

    
    generic = property(__generic.value, __generic.set, None, '')

    
    # Element audioVisual uses Python identifier audioVisual
    __audioVisual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'audioVisual'), 'audioVisual', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_audioVisual', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 227, 10), )

    
    audioVisual = property(__audioVisual.value, __audioVisual.set, None, '')

    
    # Element presentation uses Python identifier presentation
    __presentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'presentation'), 'presentation', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_presentation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 239, 10), )

    
    presentation = property(__presentation.value, __presentation.set, None, '')

    
    # Element bibtex uses Python identifier bibtex
    __bibtex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bibtex'), 'bibtex', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_bibtex', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 255, 6), )

    
    bibtex = property(__bibtex.value, __bibtex.set, None, '')

    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shortName'), 'shortName', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_shortName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6), )

    
    shortName = property(__shortName.value, __shortName.set, None, '')

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_title', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creator'), 'creator', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_creator', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6), )

    
    creator = property(__creator.value, __creator.set, None, '')

    
    # Element metadataProvider uses Python identifier metadataProvider
    __metadataProvider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'metadataProvider'), 'metadataProvider', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_metadataProvider', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6), )

    
    metadataProvider = property(__metadataProvider.value, __metadataProvider.set, None, '')

    
    # Element associatedParty uses Python identifier associatedParty
    __associatedParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'associatedParty'), 'associatedParty', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_associatedParty', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6), )

    
    associatedParty = property(__associatedParty.value, __associatedParty.set, None, '')

    
    # Element pubDate uses Python identifier pubDate
    __pubDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pubDate'), 'pubDate', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_pubDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6), )

    
    pubDate = property(__pubDate.value, __pubDate.set, None, '')

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'language'), 'language', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_language', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6), )

    
    language = property(__language.value, __language.set, None, '')

    
    # Element series uses Python identifier series
    __series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series'), 'series', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_series', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6), )

    
    series = property(__series.value, __series.set, None, '')

    
    # Element abstract uses Python identifier abstract
    __abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abstract'), 'abstract', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_abstract', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6), )

    
    abstract = property(__abstract.value, __abstract.set, None, '')

    
    # Element keywordSet uses Python identifier keywordSet
    __keywordSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'keywordSet'), 'keywordSet', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_keywordSet', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6), )

    
    keywordSet = property(__keywordSet.value, __keywordSet.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element intellectualRights uses Python identifier intellectualRights
    __intellectualRights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'intellectualRights'), 'intellectualRights', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_intellectualRights', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6), )

    
    intellectualRights = property(__intellectualRights.value, __intellectualRights.set, None, '')

    
    # Element licensed uses Python identifier licensed
    __licensed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'licensed'), 'licensed', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_licensed', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6), )

    
    licensed = property(__licensed.value, __licensed.set, None, '')

    
    # Element distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_distribution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6), )

    
    distribution = property(__distribution.value, __distribution.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 267, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 267, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 268, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 268, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgliterature_2_2_0_CitationType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 269, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 269, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __contact.name() : __contact,
        __article.name() : __article,
        __book.name() : __book,
        __chapter.name() : __chapter,
        __editedBook.name() : __editedBook,
        __manuscript.name() : __manuscript,
        __report.name() : __report,
        __thesis.name() : __thesis,
        __conferenceProceedings.name() : __conferenceProceedings,
        __personalCommunication.name() : __personalCommunication,
        __map.name() : __map,
        __generic.name() : __generic,
        __audioVisual.name() : __audioVisual,
        __presentation.name() : __presentation,
        __bibtex.name() : __bibtex,
        __alternateIdentifier.name() : __alternateIdentifier,
        __shortName.name() : __shortName,
        __title.name() : __title,
        __creator.name() : __creator,
        __metadataProvider.name() : __metadataProvider,
        __associatedParty.name() : __associatedParty,
        __pubDate.name() : __pubDate,
        __language.name() : __language,
        __series.name() : __series,
        __abstract.name() : __abstract,
        __keywordSet.name() : __keywordSet,
        __additionalInfo.name() : __additionalInfo,
        __intellectualRights.name() : __intellectualRights,
        __licensed.name() : __licensed,
        __distribution.name() : __distribution,
        __coverage.name() : __coverage,
        __annotation.name() : __annotation,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.CitationType = CitationType
_Namespace_cit.addCategoryObject('typeBinding', 'CitationType', CitationType)


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}Chapter with content type ELEMENT_ONLY
class Chapter (Book):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'Chapter')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 499, 2)
    _ElementMap = Book._ElementMap.copy()
    _AttributeMap = Book._AttributeMap.copy()
    # Base type is Book
    
    # Element publisher (publisher) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element publicationPlace (publicationPlace) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element edition (edition) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element volume (volume) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element numberOfVolumes (numberOfVolumes) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element totalPages (totalPages) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element totalFigures (totalFigures) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element totalTables (totalTables) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element ISBN (ISBN) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element chapterNumber uses Python identifier chapterNumber
    __chapterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'chapterNumber'), 'chapterNumber', '__httpseml_ecoinformatics_orgliterature_2_2_0_Chapter_chapterNumber', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 515, 10), )

    
    chapterNumber = property(__chapterNumber.value, __chapterNumber.set, None, '')

    
    # Element editor uses Python identifier editor
    __editor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'editor'), 'editor', '__httpseml_ecoinformatics_orgliterature_2_2_0_Chapter_editor', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 527, 10), )

    
    editor = property(__editor.value, __editor.set, None, '')

    
    # Element bookTitle uses Python identifier bookTitle
    __bookTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bookTitle'), 'bookTitle', '__httpseml_ecoinformatics_orgliterature_2_2_0_Chapter_bookTitle', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 542, 10), )

    
    bookTitle = property(__bookTitle.value, __bookTitle.set, None, '')

    
    # Element pageRange uses Python identifier pageRange
    __pageRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pageRange'), 'pageRange', '__httpseml_ecoinformatics_orgliterature_2_2_0_Chapter_pageRange', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 553, 10), )

    
    pageRange = property(__pageRange.value, __pageRange.set, None, '')

    _ElementMap.update({
        __chapterNumber.name() : __chapterNumber,
        __editor.name() : __editor,
        __bookTitle.name() : __bookTitle,
        __pageRange.name() : __pageRange
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Chapter = Chapter
_Namespace_cit.addCategoryObject('typeBinding', 'Chapter', Chapter)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (ProcedureStepType):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 103, 8)
    _ElementMap = ProcedureStepType._ElementMap.copy()
    _AttributeMap = ProcedureStepType._AttributeMap.copy()
    # Base type is ProcedureStepType
    
    # Element dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dataSource'), 'dataSource', '__httpseml_ecoinformatics_orgmethods_2_2_0_CTD_ANON_3_dataSource', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 107, 16), )

    
    dataSource = property(__dataSource.value, __dataSource.set, None, '')

    
    # Element description (description) inherited from {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType
    
    # Element citation (citation) inherited from {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType
    
    # Element protocol (protocol) inherited from {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType
    
    # Element instrumentation (instrumentation) inherited from {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType
    
    # Element software (software) inherited from {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType
    
    # Element subStep (subStep) inherited from {https://eml.ecoinformatics.org/methods-2.2.0}ProcedureStepType
    _ElementMap.update({
        __dataSource.name() : __dataSource
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty with content type ELEMENT_ONLY
class ResponsibleParty (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_rp, 'ResponsibleParty')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 54, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element individualName uses Python identifier individualName
    __individualName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'individualName'), 'individualName', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_individualName', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 92, 10), )

    
    individualName = property(__individualName.value, __individualName.set, None, '')

    
    # Element organizationName uses Python identifier organizationName
    __organizationName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'organizationName'), 'organizationName', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_organizationName', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 126, 10), )

    
    organizationName = property(__organizationName.value, __organizationName.set, None, '')

    
    # Element positionName uses Python identifier positionName
    __positionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'positionName'), 'positionName', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_positionName', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 161, 10), )

    
    positionName = property(__positionName.value, __positionName.set, None, '')

    
    # Element address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'address'), 'address', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_address', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8), )

    
    address = property(__address.value, __address.set, None, '')

    
    # Element phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'phone'), 'phone', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_phone', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8), )

    
    phone = property(__phone.value, __phone.set, None, '')

    
    # Element electronicMailAddress uses Python identifier electronicMailAddress
    __electronicMailAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'electronicMailAddress'), 'electronicMailAddress', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_electronicMailAddress', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8), )

    
    electronicMailAddress = property(__electronicMailAddress.value, __electronicMailAddress.set, None, '')

    
    # Element onlineUrl uses Python identifier onlineUrl
    __onlineUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'onlineUrl'), 'onlineUrl', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_onlineUrl', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8), )

    
    onlineUrl = property(__onlineUrl.value, __onlineUrl.set, None, '')

    
    # Element userId uses Python identifier userId
    __userId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userId'), 'userId', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_userId', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8), )

    
    userId = property(__userId.value, __userId.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 319, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 319, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 320, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 320, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgparty_2_2_0_ResponsibleParty_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 321, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 321, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __individualName.name() : __individualName,
        __organizationName.name() : __organizationName,
        __positionName.name() : __positionName,
        __address.name() : __address,
        __phone.name() : __phone,
        __electronicMailAddress.name() : __electronicMailAddress,
        __onlineUrl.name() : __onlineUrl,
        __userId.name() : __userId,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ResponsibleParty = ResponsibleParty
_Namespace_rp.addCategoryObject('typeBinding', 'ResponsibleParty', ResponsibleParty)


# Complex type {https://eml.ecoinformatics.org/party-2.2.0}Address with content type ELEMENT_ONLY
class Address (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_rp, 'Address')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 415, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element deliveryPoint uses Python identifier deliveryPoint
    __deliveryPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'deliveryPoint'), 'deliveryPoint', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_deliveryPoint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 428, 8), )

    
    deliveryPoint = property(__deliveryPoint.value, __deliveryPoint.set, None, '')

    
    # Element city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'city'), 'city', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_city', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 441, 8), )

    
    city = property(__city.value, __city.set, None, '')

    
    # Element administrativeArea uses Python identifier administrativeArea
    __administrativeArea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'administrativeArea'), 'administrativeArea', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_administrativeArea', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 452, 8), )

    
    administrativeArea = property(__administrativeArea.value, __administrativeArea.set, None, '')

    
    # Element postalCode uses Python identifier postalCode
    __postalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'postalCode'), 'postalCode', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_postalCode', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 465, 8), )

    
    postalCode = property(__postalCode.value, __postalCode.set, None, '')

    
    # Element country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'country'), 'country', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_country', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 479, 8), )

    
    country = property(__country.value, __country.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 494, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 494, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 495, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 495, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgparty_2_2_0_Address_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 496, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 496, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __deliveryPoint.name() : __deliveryPoint,
        __city.name() : __city,
        __administrativeArea.name() : __administrativeArea,
        __postalCode.name() : __postalCode,
        __country.name() : __country,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.Address = Address
_Namespace_rp.addCategoryObject('typeBinding', 'Address', Address)


# Complex type {https://eml.ecoinformatics.org/physical-2.2.0}PhysicalType with content type ELEMENT_ONLY
class PhysicalType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_phys, 'PhysicalType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 71, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element objectName uses Python identifier objectName
    __objectName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectName'), 'objectName', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_objectName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 101, 8), )

    
    objectName = property(__objectName.value, __objectName.set, None, '')

    
    # Element size uses Python identifier size
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'size'), 'size', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_size', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 117, 8), )

    
    size = property(__size.value, __size.set, None, '')

    
    # Element authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'authentication'), 'authentication', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_authentication', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 150, 8), )

    
    authentication = property(__authentication.value, __authentication.set, None, '')

    
    # Element compressionMethod uses Python identifier compressionMethod
    __compressionMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compressionMethod'), 'compressionMethod', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_compressionMethod', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 187, 10), )

    
    compressionMethod = property(__compressionMethod.value, __compressionMethod.set, None, '')

    
    # Element encodingMethod uses Python identifier encodingMethod
    __encodingMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'encodingMethod'), 'encodingMethod', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_encodingMethod', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 207, 10), )

    
    encodingMethod = property(__encodingMethod.value, __encodingMethod.set, None, '')

    
    # Element characterEncoding uses Python identifier characterEncoding
    __characterEncoding = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'characterEncoding'), 'characterEncoding', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_characterEncoding', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 228, 8), )

    
    characterEncoding = property(__characterEncoding.value, __characterEncoding.set, None, '')

    
    # Element dataFormat uses Python identifier dataFormat
    __dataFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dataFormat'), 'dataFormat', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_dataFormat', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 241, 8), )

    
    dataFormat = property(__dataFormat.value, __dataFormat.set, None, '')

    
    # Element distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_distribution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1146, 8), )

    
    distribution = property(__distribution.value, __distribution.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1162, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1162, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1163, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1163, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1164, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1164, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __objectName.name() : __objectName,
        __size.name() : __size,
        __authentication.name() : __authentication,
        __compressionMethod.name() : __compressionMethod,
        __encodingMethod.name() : __encodingMethod,
        __characterEncoding.name() : __characterEncoding,
        __dataFormat.name() : __dataFormat,
        __distribution.name() : __distribution,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.PhysicalType = PhysicalType
_Namespace_phys.addCategoryObject('typeBinding', 'PhysicalType', PhysicalType)


# Complex type {https://eml.ecoinformatics.org/physical-2.2.0}PhysicalDistributionType with content type ELEMENT_ONLY
class PhysicalDistributionType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_phys, 'PhysicalDistributionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1170, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element online uses Python identifier online
    __online = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'online'), 'online', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_online', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1209, 10), )

    
    online = property(__online.value, __online.set, None, '')

    
    # Element offline uses Python identifier offline
    __offline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'offline'), 'offline', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_offline', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1219, 10), )

    
    offline = property(__offline.value, __offline.set, None, '')

    
    # Element inline uses Python identifier inline
    __inline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inline'), 'inline', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_inline', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1229, 10), )

    
    inline = property(__inline.value, __inline.set, None, '')

    
    # Element access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'access'), 'access', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_access', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1241, 8), )

    
    access = property(__access.value, __access.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1257, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1257, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1258, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1258, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgphysical_2_2_0_PhysicalDistributionType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1259, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1259, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __online.name() : __online,
        __offline.name() : __offline,
        __inline.name() : __inline,
        __access.name() : __access,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.PhysicalDistributionType = PhysicalDistributionType
_Namespace_phys.addCategoryObject('typeBinding', 'PhysicalDistributionType', PhysicalDistributionType)


# Complex type {https://eml.ecoinformatics.org/project-2.2.0}ResearchProjectType with content type ELEMENT_ONLY
class ResearchProjectType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_proj, 'ResearchProjectType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 71, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_title', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 91, 8), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element personnel uses Python identifier personnel
    __personnel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'personnel'), 'personnel', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_personnel', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 104, 8), )

    
    personnel = property(__personnel.value, __personnel.set, None, '')

    
    # Element abstract uses Python identifier abstract
    __abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abstract'), 'abstract', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_abstract', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 156, 8), )

    
    abstract = property(__abstract.value, __abstract.set, None, '')

    
    # Element funding uses Python identifier funding
    __funding = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'funding'), 'funding', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_funding', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 166, 8), )

    
    funding = property(__funding.value, __funding.set, None, '')

    
    # Element award uses Python identifier award
    __award = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'award'), 'award', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_award', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 179, 8), )

    
    award = property(__award.value, __award.set, None, '')

    
    # Element studyAreaDescription uses Python identifier studyAreaDescription
    __studyAreaDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'studyAreaDescription'), 'studyAreaDescription', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_studyAreaDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 198, 8), )

    
    studyAreaDescription = property(__studyAreaDescription.value, __studyAreaDescription.set, None, '')

    
    # Element designDescription uses Python identifier designDescription
    __designDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'designDescription'), 'designDescription', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_designDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 360, 8), )

    
    designDescription = property(__designDescription.value, __designDescription.set, None, '')

    
    # Element relatedProject uses Python identifier relatedProject
    __relatedProject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relatedProject'), 'relatedProject', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_relatedProject', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 408, 8), )

    
    relatedProject = property(__relatedProject.value, __relatedProject.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 424, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 424, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 425, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 425, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgproject_2_2_0_ResearchProjectType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 426, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 426, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __personnel.name() : __personnel,
        __abstract.name() : __abstract,
        __funding.name() : __funding,
        __award.name() : __award,
        __studyAreaDescription.name() : __studyAreaDescription,
        __designDescription.name() : __designDescription,
        __relatedProject.name() : __relatedProject,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ResearchProjectType = ResearchProjectType
_Namespace_proj.addCategoryObject('typeBinding', 'ResearchProjectType', ResearchProjectType)


# Complex type {https://eml.ecoinformatics.org/protocol-2.2.0}ProtocolType with content type ELEMENT_ONLY
class ProtocolType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_pro, 'ProtocolType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 58, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element proceduralStep uses Python identifier proceduralStep
    __proceduralStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'proceduralStep'), 'proceduralStep', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_proceduralStep', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 75, 8), )

    
    proceduralStep = property(__proceduralStep.value, __proceduralStep.set, None, None)

    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shortName'), 'shortName', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_shortName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6), )

    
    shortName = property(__shortName.value, __shortName.set, None, '')

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_title', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creator'), 'creator', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_creator', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6), )

    
    creator = property(__creator.value, __creator.set, None, '')

    
    # Element metadataProvider uses Python identifier metadataProvider
    __metadataProvider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'metadataProvider'), 'metadataProvider', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_metadataProvider', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6), )

    
    metadataProvider = property(__metadataProvider.value, __metadataProvider.set, None, '')

    
    # Element associatedParty uses Python identifier associatedParty
    __associatedParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'associatedParty'), 'associatedParty', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_associatedParty', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6), )

    
    associatedParty = property(__associatedParty.value, __associatedParty.set, None, '')

    
    # Element pubDate uses Python identifier pubDate
    __pubDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pubDate'), 'pubDate', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_pubDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6), )

    
    pubDate = property(__pubDate.value, __pubDate.set, None, '')

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'language'), 'language', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_language', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6), )

    
    language = property(__language.value, __language.set, None, '')

    
    # Element series uses Python identifier series
    __series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series'), 'series', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_series', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6), )

    
    series = property(__series.value, __series.set, None, '')

    
    # Element abstract uses Python identifier abstract
    __abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abstract'), 'abstract', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_abstract', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6), )

    
    abstract = property(__abstract.value, __abstract.set, None, '')

    
    # Element keywordSet uses Python identifier keywordSet
    __keywordSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'keywordSet'), 'keywordSet', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_keywordSet', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6), )

    
    keywordSet = property(__keywordSet.value, __keywordSet.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element intellectualRights uses Python identifier intellectualRights
    __intellectualRights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'intellectualRights'), 'intellectualRights', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_intellectualRights', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6), )

    
    intellectualRights = property(__intellectualRights.value, __intellectualRights.set, None, '')

    
    # Element licensed uses Python identifier licensed
    __licensed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'licensed'), 'licensed', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_licensed', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6), )

    
    licensed = property(__licensed.value, __licensed.set, None, '')

    
    # Element distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_distribution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6), )

    
    distribution = property(__distribution.value, __distribution.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 79, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 79, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 80, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 80, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgprotocol_2_2_0_ProtocolType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 81, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 81, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __proceduralStep.name() : __proceduralStep,
        __alternateIdentifier.name() : __alternateIdentifier,
        __shortName.name() : __shortName,
        __title.name() : __title,
        __creator.name() : __creator,
        __metadataProvider.name() : __metadataProvider,
        __associatedParty.name() : __associatedParty,
        __pubDate.name() : __pubDate,
        __language.name() : __language,
        __series.name() : __series,
        __abstract.name() : __abstract,
        __keywordSet.name() : __keywordSet,
        __additionalInfo.name() : __additionalInfo,
        __intellectualRights.name() : __intellectualRights,
        __licensed.name() : __licensed,
        __distribution.name() : __distribution,
        __coverage.name() : __coverage,
        __annotation.name() : __annotation,
        __references.name() : __references
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ProtocolType = ProtocolType
_Namespace_pro.addCategoryObject('typeBinding', 'ProtocolType', ProtocolType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 88, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_3_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 91, 14)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 91, 14)
    
    system = property(__system.value, __system.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __system.name() : __system
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


# Complex type [anonymous] with content type MIXED
class CTD_ANON_94 (i18nNonEmptyStringType):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 293, 14)
    _ElementMap = i18nNonEmptyStringType._ElementMap.copy()
    _AttributeMap = i18nNonEmptyStringType._AttributeMap.copy()
    # Base type is i18nNonEmptyStringType
    
    # Element value_ (value) inherited from {https://eml.ecoinformatics.org/resource-2.2.0}i18nNonEmptyStringType
    
    # Attribute lang inherited from {https://eml.ecoinformatics.org/resource-2.2.0}i18nNonEmptyStringType
    
    # Attribute keywordType uses Python identifier keywordType
    __keywordType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'keywordType'), 'keywordType', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_4_keywordType', _module_typeBindings.KeyTypeCode)
    __keywordType._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 296, 20)
    __keywordType._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 296, 20)
    
    keywordType = property(__keywordType.value, __keywordType.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __keywordType.name() : __keywordType
    })
_module_typeBindings.CTD_ANON_94 = CTD_ANON_94


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 485, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_5_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 488, 14)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 488, 14)
    
    system = property(__system.value, __system.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __system.name() : __system
    })
_module_typeBindings.CTD_ANON_95 = CTD_ANON_95


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}DistributionType with content type ELEMENT_ONLY
class DistributionType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'DistributionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 637, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element online uses Python identifier online
    __online = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'online'), 'online', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_online', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 666, 8), )

    
    online = property(__online.value, __online.set, None, '')

    
    # Element offline uses Python identifier offline
    __offline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'offline'), 'offline', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_offline', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 678, 8), )

    
    offline = property(__offline.value, __offline.set, None, '')

    
    # Element inline uses Python identifier inline
    __inline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inline'), 'inline', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_inline', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 689, 8), )

    
    inline = property(__inline.value, __inline.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 702, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 702, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 703, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 703, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgresource_2_2_0_DistributionType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 704, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 704, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __references.name() : __references,
        __online.name() : __online,
        __offline.name() : __offline,
        __inline.name() : __inline
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.DistributionType = DistributionType
_Namespace_res.addCategoryObject('typeBinding', 'DistributionType', DistributionType)


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}ConnectionDefinitionType with content type ELEMENT_ONLY
class ConnectionDefinitionType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'ConnectionDefinitionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 706, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element schemeName uses Python identifier schemeName
    __schemeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'schemeName'), 'schemeName', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_schemeName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 722, 8), )

    
    schemeName = property(__schemeName.value, __schemeName.set, None, '')

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_description', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 767, 8), )

    
    description = property(__description.value, __description.set, None, '')

    
    # Element parameterDefinition uses Python identifier parameterDefinition
    __parameterDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parameterDefinition'), 'parameterDefinition', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_parameterDefinition', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 795, 8), )

    
    parameterDefinition = property(__parameterDefinition.value, __parameterDefinition.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 864, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 864, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 865, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 865, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionDefinitionType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 866, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 866, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __references.name() : __references,
        __schemeName.name() : __schemeName,
        __description.name() : __description,
        __parameterDefinition.name() : __parameterDefinition
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ConnectionDefinitionType = ConnectionDefinitionType
_Namespace_res.addCategoryObject('typeBinding', 'ConnectionDefinitionType', ConnectionDefinitionType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 743, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_6_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 746, 16)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 746, 16)
    
    system = property(__system.value, __system.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __system.name() : __system
    })
_module_typeBindings.CTD_ANON_96 = CTD_ANON_96


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}UrlType with content type SIMPLE
class UrlType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'UrlType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1089, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI
    
    # Attribute function uses Python identifier function
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'function'), 'function', '__httpseml_ecoinformatics_orgresource_2_2_0_UrlType_function', _module_typeBindings.FunctionType, unicode_default='download')
    __function._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1117, 8)
    __function._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1117, 8)
    
    function = property(__function.value, __function.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __function.name() : __function
    })
_module_typeBindings.UrlType = UrlType
_Namespace_res.addCategoryObject('typeBinding', 'UrlType', UrlType)


# Complex type {https://eml.ecoinformatics.org/resource-2.2.0}ConnectionType with content type ELEMENT_ONLY
class ConnectionType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_res, 'ConnectionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1124, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element connectionDefinition uses Python identifier connectionDefinition
    __connectionDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'connectionDefinition'), 'connectionDefinition', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionType_connectionDefinition', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1153, 8), )

    
    connectionDefinition = property(__connectionDefinition.value, __connectionDefinition.set, None, '')

    
    # Element parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parameter'), 'parameter', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionType_parameter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1162, 8), )

    
    parameter = property(__parameter.value, __parameter.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1212, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1212, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1213, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1213, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgresource_2_2_0_ConnectionType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1214, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1214, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __references.name() : __references,
        __connectionDefinition.name() : __connectionDefinition,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ConnectionType = ConnectionType
_Namespace_res.addCategoryObject('typeBinding', 'ConnectionType', ConnectionType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = NonEmptyStringType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1250, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is NonEmptyStringType
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_7_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1264, 7)
    
    lang = property(__lang.value, __lang.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __lang.name() : __lang
    })
_module_typeBindings.CTD_ANON_97 = CTD_ANON_97


# Complex type {https://eml.ecoinformatics.org/semantics-2.2.0}SemanticAnnotation with content type ELEMENT_ONLY
class SemanticAnnotation (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sem, 'SemanticAnnotation')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 39, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element propertyURI uses Python identifier propertyURI
    __propertyURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'propertyURI'), 'propertyURI', '__httpseml_ecoinformatics_orgsemantics_2_2_0_SemanticAnnotation_propertyURI', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 71, 8), )

    
    propertyURI = property(__propertyURI.value, __propertyURI.set, None, '')

    
    # Element valueURI uses Python identifier valueURI
    __valueURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'valueURI'), 'valueURI', '__httpseml_ecoinformatics_orgsemantics_2_2_0_SemanticAnnotation_valueURI', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 141, 8), )

    
    valueURI = property(__valueURI.value, __valueURI.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgsemantics_2_2_0_SemanticAnnotation_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 214, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 214, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgsemantics_2_2_0_SemanticAnnotation_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 215, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 215, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgsemantics_2_2_0_SemanticAnnotation_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 216, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 216, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __propertyURI.name() : __propertyURI,
        __valueURI.name() : __valueURI
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.SemanticAnnotation = SemanticAnnotation
_Namespace_sem.addCategoryObject('typeBinding', 'SemanticAnnotation', SemanticAnnotation)


# Complex type {https://eml.ecoinformatics.org/software-2.2.0}SoftwareType with content type ELEMENT_ONLY
class SoftwareType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {https://eml.ecoinformatics.org/software-2.2.0}SoftwareType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sw, 'SoftwareType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 78, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'shortName'), 'shortName', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_shortName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6), )

    
    shortName = property(__shortName.value, __shortName.set, None, '')

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_title', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6), )

    
    title = property(__title.value, __title.set, None, '')

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creator'), 'creator', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_creator', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6), )

    
    creator = property(__creator.value, __creator.set, None, '')

    
    # Element metadataProvider uses Python identifier metadataProvider
    __metadataProvider = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'metadataProvider'), 'metadataProvider', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_metadataProvider', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6), )

    
    metadataProvider = property(__metadataProvider.value, __metadataProvider.set, None, '')

    
    # Element associatedParty uses Python identifier associatedParty
    __associatedParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'associatedParty'), 'associatedParty', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_associatedParty', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6), )

    
    associatedParty = property(__associatedParty.value, __associatedParty.set, None, '')

    
    # Element pubDate uses Python identifier pubDate
    __pubDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pubDate'), 'pubDate', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_pubDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6), )

    
    pubDate = property(__pubDate.value, __pubDate.set, None, '')

    
    # Element language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'language'), 'language', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_language', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6), )

    
    language = property(__language.value, __language.set, None, '')

    
    # Element series uses Python identifier series
    __series = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'series'), 'series', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_series', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6), )

    
    series = property(__series.value, __series.set, None, '')

    
    # Element abstract uses Python identifier abstract
    __abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abstract'), 'abstract', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_abstract', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6), )

    
    abstract = property(__abstract.value, __abstract.set, None, '')

    
    # Element keywordSet uses Python identifier keywordSet
    __keywordSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'keywordSet'), 'keywordSet', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_keywordSet', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6), )

    
    keywordSet = property(__keywordSet.value, __keywordSet.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element intellectualRights uses Python identifier intellectualRights
    __intellectualRights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'intellectualRights'), 'intellectualRights', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_intellectualRights', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6), )

    
    intellectualRights = property(__intellectualRights.value, __intellectualRights.set, None, '')

    
    # Element licensed uses Python identifier licensed
    __licensed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'licensed'), 'licensed', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_licensed', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6), )

    
    licensed = property(__licensed.value, __licensed.set, None, '')

    
    # Element distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_distribution', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6), )

    
    distribution = property(__distribution.value, __distribution.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element implementation uses Python identifier implementation
    __implementation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'implementation'), 'implementation', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_implementation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 82, 8), )

    
    implementation = property(__implementation.value, __implementation.set, None, '')

    
    # Element dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dependency'), 'dependency', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_dependency', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 286, 8), )

    
    dependency = property(__dependency.value, __dependency.set, None, '')

    
    # Element licenseURL uses Python identifier licenseURL
    __licenseURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'licenseURL'), 'licenseURL', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_licenseURL', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 298, 10), )

    
    licenseURL = property(__licenseURL.value, __licenseURL.set, None, '')

    
    # Element license uses Python identifier license
    __license = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'license'), 'license', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_license', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 307, 10), )

    
    license = property(__license.value, __license.set, None, '')

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_version', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 317, 8), )

    
    version = property(__version.value, __version.set, None, '')

    
    # Element project uses Python identifier project
    __project = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'project'), 'project', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_project', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 328, 8), )

    
    project = property(__project.value, __project.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 342, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 342, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 343, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 343, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgsoftware_2_2_0_SoftwareType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 344, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 344, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __alternateIdentifier.name() : __alternateIdentifier,
        __shortName.name() : __shortName,
        __title.name() : __title,
        __creator.name() : __creator,
        __metadataProvider.name() : __metadataProvider,
        __associatedParty.name() : __associatedParty,
        __pubDate.name() : __pubDate,
        __language.name() : __language,
        __series.name() : __series,
        __abstract.name() : __abstract,
        __keywordSet.name() : __keywordSet,
        __additionalInfo.name() : __additionalInfo,
        __intellectualRights.name() : __intellectualRights,
        __licensed.name() : __licensed,
        __distribution.name() : __distribution,
        __coverage.name() : __coverage,
        __annotation.name() : __annotation,
        __references.name() : __references,
        __implementation.name() : __implementation,
        __dependency.name() : __dependency,
        __licenseURL.name() : __licenseURL,
        __license.name() : __license,
        __version.name() : __version,
        __project.name() : __project
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.SoftwareType = SoftwareType
_Namespace_sw.addCategoryObject('typeBinding', 'SoftwareType', SoftwareType)


# Complex type {https://eml.ecoinformatics.org/spatialRaster-2.2.0}SpatialRasterType with content type ELEMENT_ONLY
class SpatialRasterType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sr, 'SpatialRasterType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 86, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element entityName uses Python identifier entityName
    __entityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityName'), 'entityName', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_entityName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6), )

    
    entityName = property(__entityName.value, __entityName.set, None, '')

    
    # Element entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityDescription'), 'entityDescription', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_entityDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, '')

    
    # Element physical uses Python identifier physical
    __physical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physical'), 'physical', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_physical', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6), )

    
    physical = property(__physical.value, __physical.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element attributeList uses Python identifier attributeList
    __attributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeList'), 'attributeList', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_attributeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 97, 8), )

    
    attributeList = property(__attributeList.value, __attributeList.set, None, '')

    
    # Element constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_constraint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 109, 8), )

    
    constraint = property(__constraint.value, __constraint.set, None, '')

    
    # Element spatialReference uses Python identifier spatialReference
    __spatialReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'spatialReference'), 'spatialReference', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_spatialReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 121, 8), )

    
    spatialReference = property(__spatialReference.value, __spatialReference.set, None, '')

    
    # Element georeferenceInfo uses Python identifier georeferenceInfo
    __georeferenceInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'georeferenceInfo'), 'georeferenceInfo', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_georeferenceInfo', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 133, 8), )

    
    georeferenceInfo = property(__georeferenceInfo.value, __georeferenceInfo.set, None, '')

    
    # Element horizontalAccuracy uses Python identifier horizontalAccuracy
    __horizontalAccuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'horizontalAccuracy'), 'horizontalAccuracy', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_horizontalAccuracy', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 371, 8), )

    
    horizontalAccuracy = property(__horizontalAccuracy.value, __horizontalAccuracy.set, None, '')

    
    # Element verticalAccuracy uses Python identifier verticalAccuracy
    __verticalAccuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'verticalAccuracy'), 'verticalAccuracy', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_verticalAccuracy', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 384, 8), )

    
    verticalAccuracy = property(__verticalAccuracy.value, __verticalAccuracy.set, None, '')

    
    # Element cellSizeXDirection uses Python identifier cellSizeXDirection
    __cellSizeXDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cellSizeXDirection'), 'cellSizeXDirection', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_cellSizeXDirection', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 397, 8), )

    
    cellSizeXDirection = property(__cellSizeXDirection.value, __cellSizeXDirection.set, None, '')

    
    # Element cellSizeYDirection uses Python identifier cellSizeYDirection
    __cellSizeYDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cellSizeYDirection'), 'cellSizeYDirection', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_cellSizeYDirection', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 408, 8), )

    
    cellSizeYDirection = property(__cellSizeYDirection.value, __cellSizeYDirection.set, None, '')

    
    # Element numberOfBands uses Python identifier numberOfBands
    __numberOfBands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'numberOfBands'), 'numberOfBands', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_numberOfBands', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 419, 8), )

    
    numberOfBands = property(__numberOfBands.value, __numberOfBands.set, None, '')

    
    # Element rasterOrigin uses Python identifier rasterOrigin
    __rasterOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rasterOrigin'), 'rasterOrigin', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_rasterOrigin', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 430, 8), )

    
    rasterOrigin = property(__rasterOrigin.value, __rasterOrigin.set, None, '')

    
    # Element rows uses Python identifier rows
    __rows = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rows'), 'rows', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_rows', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 443, 8), )

    
    rows = property(__rows.value, __rows.set, None, '')

    
    # Element columns uses Python identifier columns
    __columns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'columns'), 'columns', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_columns', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 455, 8), )

    
    columns = property(__columns.value, __columns.set, None, '')

    
    # Element verticals uses Python identifier verticals
    __verticals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'verticals'), 'verticals', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_verticals', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 467, 8), )

    
    verticals = property(__verticals.value, __verticals.set, None, '')

    
    # Element cellGeometry uses Python identifier cellGeometry
    __cellGeometry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cellGeometry'), 'cellGeometry', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_cellGeometry', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 478, 8), )

    
    cellGeometry = property(__cellGeometry.value, __cellGeometry.set, None, '')

    
    # Element toneGradation uses Python identifier toneGradation
    __toneGradation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'toneGradation'), 'toneGradation', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_toneGradation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 489, 8), )

    
    toneGradation = property(__toneGradation.value, __toneGradation.set, None, '')

    
    # Element scaleFactor uses Python identifier scaleFactor
    __scaleFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'scaleFactor'), 'scaleFactor', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_scaleFactor', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 501, 8), )

    
    scaleFactor = property(__scaleFactor.value, __scaleFactor.set, None, '')

    
    # Element offset uses Python identifier offset
    __offset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'offset'), 'offset', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_offset', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 515, 8), )

    
    offset = property(__offset.value, __offset.set, None, '')

    
    # Element imageDescription uses Python identifier imageDescription
    __imageDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'imageDescription'), 'imageDescription', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_imageDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 529, 8), )

    
    imageDescription = property(__imageDescription.value, __imageDescription.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 735, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 735, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 736, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 736, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgspatialRaster_2_2_0_SpatialRasterType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 737, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 737, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __alternateIdentifier.name() : __alternateIdentifier,
        __entityName.name() : __entityName,
        __entityDescription.name() : __entityDescription,
        __physical.name() : __physical,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __additionalInfo.name() : __additionalInfo,
        __annotation.name() : __annotation,
        __references.name() : __references,
        __attributeList.name() : __attributeList,
        __constraint.name() : __constraint,
        __spatialReference.name() : __spatialReference,
        __georeferenceInfo.name() : __georeferenceInfo,
        __horizontalAccuracy.name() : __horizontalAccuracy,
        __verticalAccuracy.name() : __verticalAccuracy,
        __cellSizeXDirection.name() : __cellSizeXDirection,
        __cellSizeYDirection.name() : __cellSizeYDirection,
        __numberOfBands.name() : __numberOfBands,
        __rasterOrigin.name() : __rasterOrigin,
        __rows.name() : __rows,
        __columns.name() : __columns,
        __verticals.name() : __verticals,
        __cellGeometry.name() : __cellGeometry,
        __toneGradation.name() : __toneGradation,
        __scaleFactor.name() : __scaleFactor,
        __offset.name() : __offset,
        __imageDescription.name() : __imageDescription
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.SpatialRasterType = SpatialRasterType
_Namespace_sr.addCategoryObject('typeBinding', 'SpatialRasterType', SpatialRasterType)


# Complex type {https://eml.ecoinformatics.org/spatialReference-2.2.0}SpatialReferenceType with content type ELEMENT_ONLY
class SpatialReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_spref, 'SpatialReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 60, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element horizCoordSysName uses Python identifier horizCoordSysName
    __horizCoordSysName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'horizCoordSysName'), 'horizCoordSysName', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_horizCoordSysName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 77, 10), )

    
    horizCoordSysName = property(__horizCoordSysName.value, __horizCoordSysName.set, None, '')

    
    # Element horizCoordSysDef uses Python identifier horizCoordSysDef
    __horizCoordSysDef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'horizCoordSysDef'), 'horizCoordSysDef', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_horizCoordSysDef', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2145, 10), )

    
    horizCoordSysDef = property(__horizCoordSysDef.value, __horizCoordSysDef.set, None, '')

    
    # Element vertCoordSys uses Python identifier vertCoordSys
    __vertCoordSys = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vertCoordSys'), 'vertCoordSys', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_vertCoordSys', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2156, 8), )

    
    vertCoordSys = property(__vertCoordSys.value, __vertCoordSys.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2294, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2294, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2295, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2295, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_SpatialReferenceType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2296, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2296, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __references.name() : __references,
        __horizCoordSysName.name() : __horizCoordSysName,
        __horizCoordSysDef.name() : __horizCoordSysDef,
        __vertCoordSys.name() : __vertCoordSys
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.SpatialReferenceType = SpatialReferenceType
_Namespace_spref.addCategoryObject('typeBinding', 'SpatialReferenceType', SpatialReferenceType)


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2347, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_9_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2348, 10)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2348, 10)
    
    name = property(__name.value, __name.set, None, '')

    
    # Attribute longitude uses Python identifier longitude
    __longitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'longitude'), 'longitude', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_9_longitude', _module_typeBindings.STD_ANON_25, required=True)
    __longitude._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2358, 10)
    __longitude._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2358, 10)
    
    longitude = property(__longitude.value, __longitude.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __longitude.name() : __longitude
    })
_module_typeBindings.CTD_ANON_98 = CTD_ANON_98


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2385, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_10_name', _module_typeBindings.angleUnits, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2386, 10)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2386, 10)
    
    name = property(__name.value, __name.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON_99 = CTD_ANON_99


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2497, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgspatialReference_2_2_0_CTD_ANON_11_name', _module_typeBindings.lengthUnits, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2498, 22)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2498, 22)
    
    name = property(__name.value, __name.set, None, '')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON_100 = CTD_ANON_100


# Complex type {https://eml.ecoinformatics.org/spatialVector-2.2.0}SpatialVectorType with content type ELEMENT_ONLY
class SpatialVectorType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sv, 'SpatialVectorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 86, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element entityName uses Python identifier entityName
    __entityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityName'), 'entityName', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_entityName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6), )

    
    entityName = property(__entityName.value, __entityName.set, None, '')

    
    # Element entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityDescription'), 'entityDescription', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_entityDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, '')

    
    # Element physical uses Python identifier physical
    __physical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physical'), 'physical', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_physical', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6), )

    
    physical = property(__physical.value, __physical.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element attributeList uses Python identifier attributeList
    __attributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeList'), 'attributeList', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_attributeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 97, 8), )

    
    attributeList = property(__attributeList.value, __attributeList.set, None, '')

    
    # Element constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_constraint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 109, 8), )

    
    constraint = property(__constraint.value, __constraint.set, None, '')

    
    # Element geometry uses Python identifier geometry
    __geometry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geometry'), 'geometry', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_geometry', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 121, 8), )

    
    geometry = property(__geometry.value, __geometry.set, None, '')

    
    # Element geometricObjectCount uses Python identifier geometricObjectCount
    __geometricObjectCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'geometricObjectCount'), 'geometricObjectCount', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_geometricObjectCount', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 135, 8), )

    
    geometricObjectCount = property(__geometricObjectCount.value, __geometricObjectCount.set, None, '')

    
    # Element topologyLevel uses Python identifier topologyLevel
    __topologyLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'topologyLevel'), 'topologyLevel', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_topologyLevel', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 147, 8), )

    
    topologyLevel = property(__topologyLevel.value, __topologyLevel.set, None, '')

    
    # Element spatialReference uses Python identifier spatialReference
    __spatialReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'spatialReference'), 'spatialReference', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_spatialReference', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 159, 8), )

    
    spatialReference = property(__spatialReference.value, __spatialReference.set, None, '')

    
    # Element horizontalAccuracy uses Python identifier horizontalAccuracy
    __horizontalAccuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'horizontalAccuracy'), 'horizontalAccuracy', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_horizontalAccuracy', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 168, 8), )

    
    horizontalAccuracy = property(__horizontalAccuracy.value, __horizontalAccuracy.set, None, '')

    
    # Element verticalAccuracy uses Python identifier verticalAccuracy
    __verticalAccuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'verticalAccuracy'), 'verticalAccuracy', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_verticalAccuracy', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 179, 8), )

    
    verticalAccuracy = property(__verticalAccuracy.value, __verticalAccuracy.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 193, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 193, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 194, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 194, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgspatialVector_2_2_0_SpatialVectorType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 195, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 195, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __alternateIdentifier.name() : __alternateIdentifier,
        __entityName.name() : __entityName,
        __entityDescription.name() : __entityDescription,
        __physical.name() : __physical,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __additionalInfo.name() : __additionalInfo,
        __annotation.name() : __annotation,
        __references.name() : __references,
        __attributeList.name() : __attributeList,
        __constraint.name() : __constraint,
        __geometry.name() : __geometry,
        __geometricObjectCount.name() : __geometricObjectCount,
        __topologyLevel.name() : __topologyLevel,
        __spatialReference.name() : __spatialReference,
        __horizontalAccuracy.name() : __horizontalAccuracy,
        __verticalAccuracy.name() : __verticalAccuracy
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.SpatialVectorType = SpatialVectorType
_Namespace_sv.addCategoryObject('typeBinding', 'SpatialVectorType', SpatialVectorType)


# Complex type {https://eml.ecoinformatics.org/storedProcedure-2.2.0}StoredProcedureType with content type ELEMENT_ONLY
class StoredProcedureType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_sp, 'StoredProcedureType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 101, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element entityName uses Python identifier entityName
    __entityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityName'), 'entityName', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_entityName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6), )

    
    entityName = property(__entityName.value, __entityName.set, None, '')

    
    # Element entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityDescription'), 'entityDescription', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_entityDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, '')

    
    # Element physical uses Python identifier physical
    __physical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physical'), 'physical', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_physical', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6), )

    
    physical = property(__physical.value, __physical.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element attributeList uses Python identifier attributeList
    __attributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeList'), 'attributeList', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_attributeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 114, 8), )

    
    attributeList = property(__attributeList.value, __attributeList.set, None, '')

    
    # Element constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_constraint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 126, 8), )

    
    constraint = property(__constraint.value, __constraint.set, None, '')

    
    # Element parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parameter'), 'parameter', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_parameter', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 137, 8), )

    
    parameter = property(__parameter.value, __parameter.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 152, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 152, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 153, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 153, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgstoredProcedure_2_2_0_StoredProcedureType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 154, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 154, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __alternateIdentifier.name() : __alternateIdentifier,
        __entityName.name() : __entityName,
        __entityDescription.name() : __entityDescription,
        __physical.name() : __physical,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __additionalInfo.name() : __additionalInfo,
        __annotation.name() : __annotation,
        __references.name() : __references,
        __attributeList.name() : __attributeList,
        __constraint.name() : __constraint,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.StoredProcedureType = StoredProcedureType
_Namespace_sp.addCategoryObject('typeBinding', 'StoredProcedureType', StoredProcedureType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = NonEmptyStringType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 174, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is NonEmptyStringType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_101 = CTD_ANON_101


# Complex type {https://eml.ecoinformatics.org/view-2.2.0}ViewType with content type ELEMENT_ONLY
class ViewType (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_v, 'ViewType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 94, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element alternateIdentifier uses Python identifier alternateIdentifier
    __alternateIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), 'alternateIdentifier', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_alternateIdentifier', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6), )

    
    alternateIdentifier = property(__alternateIdentifier.value, __alternateIdentifier.set, None, '')

    
    # Element entityName uses Python identifier entityName
    __entityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityName'), 'entityName', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_entityName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6), )

    
    entityName = property(__entityName.value, __entityName.set, None, '')

    
    # Element entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entityDescription'), 'entityDescription', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_entityDescription', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, '')

    
    # Element physical uses Python identifier physical
    __physical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physical'), 'physical', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_physical', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6), )

    
    physical = property(__physical.value, __physical.set, None, '')

    
    # Element coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'coverage'), 'coverage', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_coverage', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6), )

    
    coverage = property(__coverage.value, __coverage.set, None, '')

    
    # Element methods uses Python identifier methods
    __methods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'methods'), 'methods', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_methods', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6), )

    
    methods = property(__methods.value, __methods.set, None, '')

    
    # Element additionalInfo uses Python identifier additionalInfo
    __additionalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalInfo'), 'additionalInfo', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_additionalInfo', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6), )

    
    additionalInfo = property(__additionalInfo.value, __additionalInfo.set, None, '')

    
    # Element annotation uses Python identifier annotation
    __annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'annotation'), 'annotation', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_annotation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6), )

    
    annotation = property(__annotation.value, __annotation.set, None, '')

    
    # Element references uses Python identifier references
    __references = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'references'), 'references', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_references', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6), )

    
    references = property(__references.value, __references.set, None, '')

    
    # Element attributeList uses Python identifier attributeList
    __attributeList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'attributeList'), 'attributeList', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_attributeList', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 109, 8), )

    
    attributeList = property(__attributeList.value, __attributeList.set, None, '')

    
    # Element constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_constraint', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 121, 8), )

    
    constraint = property(__constraint.value, __constraint.set, None, '')

    
    # Element queryStatement uses Python identifier queryStatement
    __queryStatement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'queryStatement'), 'queryStatement', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_queryStatement', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 132, 8), )

    
    queryStatement = property(__queryStatement.value, __queryStatement.set, None, '')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_id', _module_typeBindings.IDType)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 151, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 151, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 152, 4)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 152, 4)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgview_2_2_0_ViewType_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 153, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 153, 4)
    
    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({
        __alternateIdentifier.name() : __alternateIdentifier,
        __entityName.name() : __entityName,
        __entityDescription.name() : __entityDescription,
        __physical.name() : __physical,
        __coverage.name() : __coverage,
        __methods.name() : __methods,
        __additionalInfo.name() : __additionalInfo,
        __annotation.name() : __annotation,
        __references.name() : __references,
        __attributeList.name() : __attributeList,
        __constraint.name() : __constraint,
        __queryStatement.name() : __queryStatement
    })
    _AttributeMap.update({
        __id.name() : __id,
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.ViewType = ViewType
_Namespace_v.addCategoryObject('typeBinding', 'ViewType', ViewType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (TemporalCoverage):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 83, 10)
    _ElementMap = TemporalCoverage._ElementMap.copy()
    _AttributeMap = TemporalCoverage._AttributeMap.copy()
    # Base type is TemporalCoverage
    
    # Element singleDateTime (singleDateTime) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TemporalCoverage
    
    # Element rangeOfDates (rangeOfDates) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TemporalCoverage
    
    # Element references (references) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TemporalCoverage
    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_12_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 86, 16)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 86, 16)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_12_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 87, 16)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 87, 16)
    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Attribute id inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TemporalCoverage
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.CTD_ANON_102 = CTD_ANON_102


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (TaxonomicCoverage):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 104, 10)
    _ElementMap = TaxonomicCoverage._ElementMap.copy()
    _AttributeMap = TaxonomicCoverage._AttributeMap.copy()
    # Base type is TaxonomicCoverage
    
    # Element taxonomicSystem (taxonomicSystem) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicCoverage
    
    # Element generalTaxonomicCoverage (generalTaxonomicCoverage) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicCoverage
    
    # Element taxonomicClassification (taxonomicClassification) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicCoverage
    
    # Element references (references) inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicCoverage
    
    # Attribute system uses Python identifier system
    __system = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'system'), 'system', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_13_system', _module_typeBindings.SystemType)
    __system._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 107, 16)
    __system._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 107, 16)
    
    system = property(__system.value, __system.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scope'), 'scope', '__httpseml_ecoinformatics_orgcoverage_2_2_0_CTD_ANON_13_scope', _module_typeBindings.ScopeType, unicode_default='document')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 108, 16)
    __scope._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 108, 16)
    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Attribute id inherited from {https://eml.ecoinformatics.org/coverage-2.2.0}TaxonomicCoverage
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __system.name() : __system,
        __scope.name() : __scope
    })
_module_typeBindings.CTD_ANON_103 = CTD_ANON_103


# Complex type {https://eml.ecoinformatics.org/literature-2.2.0}ConferenceProceedings with content type ELEMENT_ONLY
class ConferenceProceedings (Chapter):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_cit, 'ConferenceProceedings')
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 570, 2)
    _ElementMap = Chapter._ElementMap.copy()
    _AttributeMap = Chapter._AttributeMap.copy()
    # Base type is Chapter
    
    # Element publisher (publisher) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element publicationPlace (publicationPlace) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element edition (edition) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element volume (volume) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element numberOfVolumes (numberOfVolumes) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element totalPages (totalPages) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element totalFigures (totalFigures) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element totalTables (totalTables) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element ISBN (ISBN) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Book
    
    # Element chapterNumber (chapterNumber) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Chapter
    
    # Element editor (editor) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Chapter
    
    # Element bookTitle (bookTitle) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Chapter
    
    # Element pageRange (pageRange) inherited from {https://eml.ecoinformatics.org/literature-2.2.0}Chapter
    
    # Element conferenceName uses Python identifier conferenceName
    __conferenceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceName'), 'conferenceName', '__httpseml_ecoinformatics_orgliterature_2_2_0_ConferenceProceedings_conferenceName', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 583, 10), )

    
    conferenceName = property(__conferenceName.value, __conferenceName.set, None, '')

    
    # Element conferenceDate uses Python identifier conferenceDate
    __conferenceDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceDate'), 'conferenceDate', '__httpseml_ecoinformatics_orgliterature_2_2_0_ConferenceProceedings_conferenceDate', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 595, 10), )

    
    conferenceDate = property(__conferenceDate.value, __conferenceDate.set, None, '')

    
    # Element conferenceLocation uses Python identifier conferenceLocation
    __conferenceLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'conferenceLocation'), 'conferenceLocation', '__httpseml_ecoinformatics_orgliterature_2_2_0_ConferenceProceedings_conferenceLocation', False, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 606, 10), )

    
    conferenceLocation = property(__conferenceLocation.value, __conferenceLocation.set, None, '')

    _ElementMap.update({
        __conferenceName.name() : __conferenceName,
        __conferenceDate.name() : __conferenceDate,
        __conferenceLocation.name() : __conferenceLocation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConferenceProceedings = ConferenceProceedings
_Namespace_cit.addCategoryObject('typeBinding', 'ConferenceProceedings', ConferenceProceedings)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (ResponsibleParty):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 117, 10)
    _ElementMap = ResponsibleParty._ElementMap.copy()
    _AttributeMap = ResponsibleParty._AttributeMap.copy()
    # Base type is ResponsibleParty
    
    # Element individualName (individualName) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element organizationName (organizationName) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element positionName (positionName) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element address (address) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element phone (phone) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element electronicMailAddress (electronicMailAddress) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element onlineUrl (onlineUrl) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element userId (userId) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element references (references) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_3_role', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 121, 18), )

    
    role = property(__role.value, __role.set, None, '')

    
    # Attribute id inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Attribute system inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Attribute scope inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    _ElementMap.update({
        __role.name() : __role
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_104 = CTD_ANON_104


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 233, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element descriptorValue uses Python identifier descriptorValue
    __descriptorValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'descriptorValue'), 'descriptorValue', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_4_descriptorValue', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 235, 20), )

    
    descriptorValue = property(__descriptorValue.value, __descriptorValue.set, None, '')

    
    # Element citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'citation'), 'citation', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_4_citation', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 295, 20), )

    
    citation = property(__citation.value, __citation.set, None, '')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_4_name', _module_typeBindings.DescriptorType, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 307, 18)
    __name._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 307, 18)
    
    name = property(__name.value, __name.set, None, '')

    
    # Attribute citableClassificationSystem uses Python identifier citableClassificationSystem
    __citableClassificationSystem = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'citableClassificationSystem'), 'citableClassificationSystem', '__httpseml_ecoinformatics_orgproject_2_2_0_CTD_ANON_4_citableClassificationSystem', pyxb.binding.datatypes.boolean, required=True)
    __citableClassificationSystem._DeclarationLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 320, 18)
    __citableClassificationSystem._UseLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 320, 18)
    
    citableClassificationSystem = property(__citableClassificationSystem.value, __citableClassificationSystem.set, None, '')

    _ElementMap.update({
        __descriptorValue.name() : __descriptorValue,
        __citation.name() : __citation
    })
    _AttributeMap.update({
        __name.name() : __name,
        __citableClassificationSystem.name() : __citableClassificationSystem
    })
_module_typeBindings.CTD_ANON_105 = CTD_ANON_105


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (ResponsibleParty):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 187, 8)
    _ElementMap = ResponsibleParty._ElementMap.copy()
    _AttributeMap = ResponsibleParty._AttributeMap.copy()
    # Base type is ResponsibleParty
    
    # Element individualName (individualName) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element organizationName (organizationName) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element positionName (positionName) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element address (address) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element phone (phone) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element electronicMailAddress (electronicMailAddress) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element onlineUrl (onlineUrl) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element userId (userId) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element references (references) inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__httpseml_ecoinformatics_orgresource_2_2_0_CTD_ANON_8_role', True, pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 191, 16), )

    
    role = property(__role.value, __role.set, None, '')

    
    # Attribute id inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Attribute system inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    
    # Attribute scope inherited from {https://eml.ecoinformatics.org/party-2.2.0}ResponsibleParty
    _ElementMap.update({
        __role.name() : __role
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_106 = CTD_ANON_106


methods = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_md, 'methods'), MethodsType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 73, 2))
_Namespace_md.addCategoryObject('elementBinding', methods.name().localName(), methods)

dependency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_sw, 'dependency'), DependencyType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 404, 2))
_Namespace_sw.addCategoryObject('elementBinding', dependency.name().localName(), dependency)

projectionList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_spref, 'projectionList'), CTD_ANON_84, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2532, 2))
_Namespace_spref.addCategoryObject('elementBinding', projectionList.name().localName(), projectionList)

text = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_txt, 'text'), TextType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 58, 4))
_Namespace_txt.addCategoryObject('elementBinding', text.name().localName(), text)

access = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_acc, 'access'), AccessType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 61, 2))
_Namespace_acc.addCategoryObject('elementBinding', access.name().localName(), access)

attribute = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_att, 'attribute'), AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 63, 2))
_Namespace_att.addCategoryObject('elementBinding', attribute.name().localName(), attribute)

attributeList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_att, 'attributeList'), AttributeListType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 767, 2))
_Namespace_att.addCategoryObject('elementBinding', attributeList.name().localName(), attributeList)

dataTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_dat, 'dataTable'), DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 69, 2))
_Namespace_dat.addCategoryObject('elementBinding', dataTable.name().localName(), dataTable)

dataset = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_ds, 'dataset'), DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 67, 2))
_Namespace_ds.addCategoryObject('elementBinding', dataset.name().localName(), dataset)

otherEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_ent, 'otherEntity'), OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 62, 2))
_Namespace_ent.addCategoryObject('elementBinding', otherEntity.name().localName(), otherEntity)

citation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_cit, 'citation'), CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 60, 2))
_Namespace_cit.addCategoryObject('elementBinding', citation.name().localName(), citation)

party = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_rp, 'party'), ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 498, 2))
_Namespace_rp.addCategoryObject('elementBinding', party.name().localName(), party)

physical = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_phys, 'physical'), PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 56, 2))
_Namespace_phys.addCategoryObject('elementBinding', physical.name().localName(), physical)

researchProject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_proj, 'researchProject'), ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 59, 2))
_Namespace_proj.addCategoryObject('elementBinding', researchProject.name().localName(), researchProject)

protocol = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_pro, 'protocol'), ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 83, 2))
_Namespace_pro.addCategoryObject('elementBinding', protocol.name().localName(), protocol)

annotation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_sem, 'annotation'), SemanticAnnotation, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 218, 2))
_Namespace_sem.addCategoryObject('elementBinding', annotation.name().localName(), annotation)

software = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_sw, 'software'), SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 59, 2))
_Namespace_sw.addCategoryObject('elementBinding', software.name().localName(), software)

spatialRaster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_sr, 'spatialRaster'), SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 69, 2))
_Namespace_sr.addCategoryObject('elementBinding', spatialRaster.name().localName(), spatialRaster)

spatialReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_spref, 'spatialReference'), SpatialReferenceType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2548, 2))
_Namespace_spref.addCategoryObject('elementBinding', spatialReference.name().localName(), spatialReference)

spatialVector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_sv, 'spatialVector'), SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 75, 2))
_Namespace_sv.addCategoryObject('elementBinding', spatialVector.name().localName(), spatialVector)

storedProcedure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_sp, 'storedProcedure'), StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 82, 2))
_Namespace_sp.addCategoryObject('elementBinding', storedProcedure.name().localName(), storedProcedure)

view = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_v, 'view'), ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 81, 2))
_Namespace_v.addCategoryObject('elementBinding', view.name().localName(), view)



AccessRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'principal'), NonEmptyStringType, scope=AccessRule, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 184, 6)))

AccessRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'permission'), STD_ANON_26, scope=AccessRule, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 202, 6)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AccessRule._UseForTag(pyxb.namespace.ExpandedName(None, 'principal')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 184, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AccessRule._UseForTag(pyxb.namespace.ExpandedName(None, 'permission')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 202, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AccessRule._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nominal'), CTD_ANON_2, scope=CTD_ANON_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 273, 14)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ordinal'), CTD_ANON_3, scope=CTD_ANON_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 295, 14)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interval'), CTD_ANON_4, scope=CTD_ANON_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 320, 14)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ratio'), CTD_ANON_5, scope=CTD_ANON_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 346, 14)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dateTime'), CTD_ANON_6, scope=CTD_ANON_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 373, 14)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'nominal')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 273, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'ordinal')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 295, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'interval')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 320, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'ratio')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 346, 14))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'dateTime')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 373, 14))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nonNumericDomain'), NonNumericDomainType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 291, 20)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'nonNumericDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 291, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nonNumericDomain'), NonNumericDomainType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 316, 20)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'nonNumericDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 316, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), UnitType, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 340, 20)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'precision'), PrecisionType, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 341, 20)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numericDomain'), NumericDomainType, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 342, 20)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 341, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 340, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'precision')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 341, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'numericDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 342, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), UnitType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 367, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'precision'), PrecisionType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 368, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numericDomain'), NumericDomainType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 369, 20)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 368, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 367, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'precision')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 368, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'numericDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 369, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'formatString'), NonEmptyStringType, scope=CTD_ANON_6, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 406, 20)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dateTimePrecision'), NonEmptyStringType, scope=CTD_ANON_6, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 528, 20)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dateTimeDomain'), DateTimeDomainType, scope=CTD_ANON_6, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 551, 20)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 528, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 551, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'formatString')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 406, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'dateTimePrecision')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 528, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'dateTimeDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 551, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'code'), NonEmptyStringType, scope=CTD_ANON_7, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 584, 14)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'codeExplanation'), NonEmptyStringType, scope=CTD_ANON_7, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 601, 14)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'code')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 584, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'codeExplanation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 601, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




Accuracy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeAccuracyReport'), NonEmptyStringType, scope=Accuracy, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 707, 6)))

Accuracy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAttributeAccuracyAssessment'), CTD_ANON_8, scope=Accuracy, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 722, 6)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 722, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Accuracy._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeAccuracyReport')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 707, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Accuracy._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAttributeAccuracyAssessment')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 722, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Accuracy._Automaton = _BuildAutomaton_8()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeAccuracyValue'), NonEmptyStringType, scope=CTD_ANON_8, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 737, 12)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeAccuracyExplanation'), NonEmptyStringType, scope=CTD_ANON_8, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 750, 12)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeAccuracyValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 737, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeAccuracyExplanation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 750, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_9()




UnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'standardUnit'), _ImportedBinding_emllib_eml220__unit.StandardUnitDictionary, scope=UnitType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 797, 6)))

UnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'customUnit'), NonEmptyStringType, scope=UnitType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 816, 6)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnitType._UseForTag(pyxb.namespace.ExpandedName(None, 'standardUnit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 797, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnitType._UseForTag(pyxb.namespace.ExpandedName(None, 'customUnit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 816, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnitType._Automaton = _BuildAutomaton_10()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'code'), NonEmptyStringType, scope=CTD_ANON_9, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 917, 20)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'definition'), NonEmptyStringType, scope=CTD_ANON_9, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 933, 20)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), NonEmptyStringType, scope=CTD_ANON_9, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 948, 20)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 948, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'code')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 917, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'definition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 933, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 948, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_11()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'codesetName'), NonEmptyStringType, scope=CTD_ANON_10, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1009, 20)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CTD_ANON_10, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1024, 22)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'codesetURL'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_10, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1036, 22)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'codesetName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1009, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1024, 22))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'codesetURL')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1036, 22))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_12()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityReference'), NonEmptyStringType, scope=CTD_ANON_11, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1068, 20)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'valueAttributeReference'), NonEmptyStringType, scope=CTD_ANON_11, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1084, 20)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'definitionAttributeReference'), NonEmptyStringType, scope=CTD_ANON_11, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1101, 20)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orderAttributeReference'), NonEmptyStringType, scope=CTD_ANON_11, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1119, 20)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1119, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'entityReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1068, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'valueAttributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1084, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'definitionAttributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1101, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'orderAttributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1119, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_13()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'definition'), NonEmptyStringType, scope=CTD_ANON_12, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1193, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pattern'), NonEmptyStringType, scope=CTD_ANON_12, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1213, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), NonEmptyStringType, scope=CTD_ANON_12, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1238, 14)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1213, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1238, 14))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'definition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1193, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'pattern')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1213, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1238, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_14()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'minimum'), CTD_ANON_14, scope=CTD_ANON_13, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1366, 12)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maximum'), CTD_ANON_15, scope=CTD_ANON_13, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1406, 12)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1366, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1406, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'minimum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1366, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'maximum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1406, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_15()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'minimum'), CTD_ANON_17, scope=CTD_ANON_16, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1491, 12)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maximum'), CTD_ANON_18, scope=CTD_ANON_16, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1531, 12)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1491, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1531, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'minimum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1491, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'maximum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1531, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_16()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'key'), CTD_ANON_20, scope=CTD_ANON_19, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 93, 12)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintName'), NonEmptyStringType, scope=CTD_ANON_19, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintDescription'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_19, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'key')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 93, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_17()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeReference'), NonEmptyStringType, scope=CTD_ANON_20, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 113, 18)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 113, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_18()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'key'), CTD_ANON_22, scope=CTD_ANON_21, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 151, 12)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintName'), NonEmptyStringType, scope=CTD_ANON_21, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintDescription'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_21, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'key')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 151, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_19()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeReference'), NonEmptyStringType, scope=CTD_ANON_22, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 170, 18)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 170, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_20()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'checkCondition'), NonEmptyStringType, scope=CTD_ANON_23, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 207, 12)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintName'), NonEmptyStringType, scope=CTD_ANON_23, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintDescription'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_23, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'checkCondition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 207, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_21()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintName'), NonEmptyStringType, scope=CTD_ANON_24, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintDescription'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_24, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'key'), CTD_ANON_29, scope=CTD_ANON_24, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 436, 6)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityReference'), NonEmptyStringType, scope=CTD_ANON_24, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 471, 6)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relationshipType'), STD_ANON_5, scope=CTD_ANON_24, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cardinality'), CTD_ANON_30, scope=CTD_ANON_24, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'key')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 436, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'entityReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 471, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'relationshipType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'cardinality')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_22()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'referencedKey'), CTD_ANON_26, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 277, 12)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintName'), NonEmptyStringType, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintDescription'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'key'), CTD_ANON_29, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 436, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityReference'), NonEmptyStringType, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 471, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relationshipType'), STD_ANON_5, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cardinality'), CTD_ANON_30, scope=CTD_ANON_25, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'key')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 436, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'entityReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 471, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'relationshipType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 487, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'cardinality')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 510, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'referencedKey')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 277, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_23()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeReference'), NonEmptyStringType, scope=CTD_ANON_26, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 295, 18)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 295, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_24()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'key'), CTD_ANON_28, scope=CTD_ANON_27, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 331, 12)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintName'), NonEmptyStringType, scope=CTD_ANON_27, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraintDescription'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_27, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'constraintDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'key')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 331, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_25()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeReference'), NonEmptyStringType, scope=CTD_ANON_28, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 349, 18)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 349, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_26()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeReference'), NonEmptyStringType, scope=CTD_ANON_29, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 453, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 453, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_27()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentOccurences'), STD_ANON_6, scope=CTD_ANON_30, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 533, 12)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'childOccurences'), CardinalityChildOccurancesType, scope=CTD_ANON_30, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 557, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'parentOccurences')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 533, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'childOccurences')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 557, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_28()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'beginDate'), SingleDateTimeType, scope=CTD_ANON_31, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 161, 14)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endDate'), SingleDateTimeType, scope=CTD_ANON_31, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 174, 14)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, 'beginDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 161, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, 'endDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 174, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_29()




SingleDateTimeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'calendarDate'), yearDate, scope=SingleDateTimeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 208, 8)))

SingleDateTimeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'time'), pyxb.binding.datatypes.time, scope=SingleDateTimeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 226, 8)))

SingleDateTimeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternativeTimeScale'), CTD_ANON_32, scope=SingleDateTimeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 251, 6)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 226, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SingleDateTimeType._UseForTag(pyxb.namespace.ExpandedName(None, 'calendarDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 208, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SingleDateTimeType._UseForTag(pyxb.namespace.ExpandedName(None, 'time')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 226, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SingleDateTimeType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternativeTimeScale')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 251, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SingleDateTimeType._Automaton = _BuildAutomaton_30()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeScaleName'), NonEmptyStringType, scope=CTD_ANON_32, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 277, 12)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeScaleAgeEstimate'), NonEmptyStringType, scope=CTD_ANON_32, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 291, 12)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeScaleAgeUncertainty'), NonEmptyStringType, scope=CTD_ANON_32, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 312, 12)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeScaleAgeExplanation'), NonEmptyStringType, scope=CTD_ANON_32, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 324, 12)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timeScaleCitation'), CitationType, scope=CTD_ANON_32, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 336, 12)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 312, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 324, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 336, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'timeScaleName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 277, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'timeScaleAgeEstimate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 291, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'timeScaleAgeUncertainty')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 312, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'timeScaleAgeExplanation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 324, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'timeScaleCitation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 336, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_31()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'westBoundingCoordinate'), STD_ANON_7, scope=CTD_ANON_33, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 450, 14)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eastBoundingCoordinate'), STD_ANON_8, scope=CTD_ANON_33, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 483, 14)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'northBoundingCoordinate'), STD_ANON_9, scope=CTD_ANON_33, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 516, 14)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'southBoundingCoordinate'), STD_ANON_10, scope=CTD_ANON_33, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 545, 14)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'boundingAltitudes'), CTD_ANON_34, scope=CTD_ANON_33, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 574, 14)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 574, 14))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'westBoundingCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 450, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'eastBoundingCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 483, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'northBoundingCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 516, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'southBoundingCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 545, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'boundingAltitudes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 574, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_32()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeMinimum'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_34, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 591, 20)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeMaximum'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_34, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 605, 20)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeUnits'), _ImportedBinding_emllib_eml220__unit.LengthUnitType, scope=CTD_ANON_34, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 619, 20)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeMinimum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 591, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeMaximum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 605, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeUnits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 619, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_33()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'datasetGPolygonOuterGRing'), CTD_ANON_36, scope=CTD_ANON_35, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 651, 14)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'datasetGPolygonExclusionGRing'), CTD_ANON_37, scope=CTD_ANON_35, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 710, 14)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 710, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'datasetGPolygonOuterGRing')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 651, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'datasetGPolygonExclusionGRing')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 710, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_34()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gRingPoint'), GRingPointType, scope=CTD_ANON_36, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 679, 22)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gRing'), GRingType, scope=CTD_ANON_36, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 694, 20)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=3, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 679, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, 'gRingPoint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 679, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, 'gRing')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 694, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_35()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gRingPoint'), GRingPointType, scope=CTD_ANON_37, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 737, 20)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gRing'), GRingType, scope=CTD_ANON_37, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 750, 20)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'gRingPoint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 737, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'gRing')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 750, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_36()




GRingPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gRingLatitude'), STD_ANON_11, scope=GRingPointType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 783, 6)))

GRingPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gRingLongitude'), STD_ANON_12, scope=GRingPointType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 807, 6)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GRingPointType._UseForTag(pyxb.namespace.ExpandedName(None, 'gRingLatitude')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 783, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GRingPointType._UseForTag(pyxb.namespace.ExpandedName(None, 'gRingLongitude')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 807, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GRingPointType._Automaton = _BuildAutomaton_37()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'classificationSystem'), CTD_ANON_39, scope=CTD_ANON_38, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 891, 14)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identificationReference'), CitationType, scope=CTD_ANON_38, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 928, 14)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identifierName'), ResponsibleParty, scope=CTD_ANON_38, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 940, 14)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonomicProcedures'), NonEmptyStringType, scope=CTD_ANON_38, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 950, 14)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonomicCompleteness'), NonEmptyStringType, scope=CTD_ANON_38, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 962, 14)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vouchers'), CTD_ANON_40, scope=CTD_ANON_38, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 976, 14)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 928, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 962, 14))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 976, 14))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'classificationSystem')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 891, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'identificationReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 928, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'identifierName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 940, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicProcedures')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 950, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicCompleteness')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 962, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'vouchers')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 976, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_38()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'classificationSystemCitation'), CitationType, scope=CTD_ANON_39, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 904, 20)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'classificationSystemModifications'), NonEmptyStringType, scope=CTD_ANON_39, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 914, 20)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 914, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'classificationSystemCitation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 904, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'classificationSystemModifications')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 914, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_39()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), NonEmptyStringType, scope=CTD_ANON_40, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 987, 20)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'repository'), CTD_ANON_41, scope=CTD_ANON_40, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 999, 20)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 987, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'repository')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 999, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_40()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originator'), ResponsibleParty, scope=CTD_ANON_41, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1010, 26)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'originator')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1010, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_41()




MaintenanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), TextType, scope=MaintenanceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 408, 6)))

MaintenanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maintenanceUpdateFrequency'), MaintUpFreqType, scope=MaintenanceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 420, 6)))

MaintenanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'changeHistory'), CTD_ANON_43, scope=MaintenanceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 434, 6)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 420, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 434, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MaintenanceType._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 408, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MaintenanceType._UseForTag(pyxb.namespace.ExpandedName(None, 'maintenanceUpdateFrequency')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 420, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MaintenanceType._UseForTag(pyxb.namespace.ExpandedName(None, 'changeHistory')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MaintenanceType._Automaton = _BuildAutomaton_42()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'changeScope'), NonEmptyStringType, scope=CTD_ANON_43, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 446, 12)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'oldValue'), NonEmptyStringType, scope=CTD_ANON_43, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 459, 12)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'changeDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_43, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 471, 12)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comment'), NonEmptyStringType, scope=CTD_ANON_43, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 481, 12)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 481, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'changeScope')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 446, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'oldValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 459, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'changeDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 471, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 481, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_43()




Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'journal'), NonEmptyStringType, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 283, 6)))

Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'volume'), NonEmptyStringType, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 297, 6)))

Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'issue'), NonEmptyStringType, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 309, 6)))

Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pageRange'), NonEmptyStringType, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 321, 6)))

Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 334, 6)))

Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicationPlace'), NonEmptyStringType, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 347, 6)))

Article._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISSN'), NonEmptyStringType, scope=Article, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 361, 6)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 297, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 309, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 321, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 334, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 347, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 361, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'journal')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 283, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'volume')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 297, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'issue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 309, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'pageRange')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 321, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 334, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 347, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Article._UseForTag(pyxb.namespace.ExpandedName(None, 'ISSN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 361, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Article._Automaton = _BuildAutomaton_44()




Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 386, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicationPlace'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'volume'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numberOfVolumes'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalPages'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalFigures'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalTables'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6)))

Book._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISBN'), NonEmptyStringType, scope=Book, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 386, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'volume')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfVolumes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'totalFigures')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'totalTables')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Book._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Book._Automaton = _BuildAutomaton_45()




Manuscript._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'institution'), ResponsibleParty, scope=Manuscript, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 631, 6)))

Manuscript._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalPages'), NonEmptyStringType, scope=Manuscript, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 645, 6)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 645, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Manuscript._UseForTag(pyxb.namespace.ExpandedName(None, 'institution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 631, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Manuscript._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 645, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Manuscript._Automaton = _BuildAutomaton_46()




Report._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reportNumber'), NonEmptyStringType, scope=Report, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 672, 6)))

Report._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=Report, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 685, 6)))

Report._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicationPlace'), NonEmptyStringType, scope=Report, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 698, 6)))

Report._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalPages'), NonEmptyStringType, scope=Report, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 712, 6)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 672, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 685, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 698, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 712, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Report._UseForTag(pyxb.namespace.ExpandedName(None, 'reportNumber')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 672, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Report._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 685, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Report._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 698, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Report._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 712, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Report._Automaton = _BuildAutomaton_47()




PersonalCommunication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=PersonalCommunication, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 737, 6)))

PersonalCommunication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicationPlace'), NonEmptyStringType, scope=PersonalCommunication, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 750, 6)))

PersonalCommunication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'communicationType'), NonEmptyStringType, scope=PersonalCommunication, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 764, 6)))

PersonalCommunication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recipient'), ResponsibleParty, scope=PersonalCommunication, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 778, 6)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 737, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 750, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 764, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 778, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PersonalCommunication._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 737, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PersonalCommunication._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 750, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PersonalCommunication._UseForTag(pyxb.namespace.ExpandedName(None, 'communicationType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 764, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PersonalCommunication._UseForTag(pyxb.namespace.ExpandedName(None, 'recipient')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 778, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PersonalCommunication._Automaton = _BuildAutomaton_48()




Map._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=Map, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 804, 6)))

Map._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), NonEmptyStringType, scope=Map, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 816, 6)))

Map._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geographicCoverage'), GeographicCoverage, scope=Map, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 827, 6)))

Map._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'scale'), NonEmptyStringType, scope=Map, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 839, 6)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 804, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 816, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 827, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 839, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Map._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 804, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Map._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 816, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Map._UseForTag(pyxb.namespace.ExpandedName(None, 'geographicCoverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 827, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Map._UseForTag(pyxb.namespace.ExpandedName(None, 'scale')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 839, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Map._Automaton = _BuildAutomaton_49()




AudioVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=AudioVisual, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 863, 6)))

AudioVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicationPlace'), NonEmptyStringType, scope=AudioVisual, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 877, 6)))

AudioVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'performer'), ResponsibleParty, scope=AudioVisual, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 891, 6)))

AudioVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISBN'), NonEmptyStringType, scope=AudioVisual, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 904, 6)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 877, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 891, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 904, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AudioVisual._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 863, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AudioVisual._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 877, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AudioVisual._UseForTag(pyxb.namespace.ExpandedName(None, 'performer')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 891, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AudioVisual._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 904, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AudioVisual._Automaton = _BuildAutomaton_50()




Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 921, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicationPlace'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 934, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'referenceType'), pyxb.binding.datatypes.anyType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 948, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'volume'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 961, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numberOfVolumes'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 974, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalPages'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 985, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalFigures'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 998, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalTables'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1011, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1024, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'originalPublication'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1037, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reprintEdition'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1050, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reviewedItem'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1063, 6)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISBN'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1079, 8)))

Generic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISSN'), NonEmptyStringType, scope=Generic, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1092, 8)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 934, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 948, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 961, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 974, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 985, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 998, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1011, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1024, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1037, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1050, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1063, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1078, 6))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 921, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 934, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'referenceType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 948, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'volume')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 961, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfVolumes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 974, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 985, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'totalFigures')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 998, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'totalTables')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1011, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1024, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'originalPublication')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1037, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'reprintEdition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1050, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'reviewedItem')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1063, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1079, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Generic._UseForTag(pyxb.namespace.ExpandedName(None, 'ISSN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1092, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Generic._Automaton = _BuildAutomaton_51()




Thesis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'degree'), NonEmptyStringType, scope=Thesis, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1121, 6)))

Thesis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'institution'), ResponsibleParty, scope=Thesis, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1135, 6)))

Thesis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalPages'), NonEmptyStringType, scope=Thesis, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1148, 6)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1148, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Thesis._UseForTag(pyxb.namespace.ExpandedName(None, 'degree')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1121, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Thesis._UseForTag(pyxb.namespace.ExpandedName(None, 'institution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1135, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Thesis._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1148, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Thesis._Automaton = _BuildAutomaton_52()




Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceName'), NonEmptyStringType, scope=Presentation, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1176, 6)))

Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceDate'), NonEmptyStringType, scope=Presentation, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1188, 6)))

Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceLocation'), Address, scope=Presentation, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1199, 6)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1176, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1188, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1199, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Presentation._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1176, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Presentation._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1188, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Presentation._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceLocation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1199, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Presentation._Automaton = _BuildAutomaton_53()




CitationListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CitationListType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1214, 12)))

CitationListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bibtex'), pyxb.binding.datatypes.string, scope=CitationListType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1225, 12)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationListType._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1214, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationListType._UseForTag(pyxb.namespace.ExpandedName(None, 'bibtex')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 1225, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CitationListType._Automaton = _BuildAutomaton_54()




MethodsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methodStep'), CTD_ANON_92, scope=MethodsType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 89, 6)))

MethodsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sampling'), CTD_ANON_44, scope=MethodsType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 123, 6)))

MethodsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'qualityControl'), ProcedureStepType, scope=MethodsType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 295, 6)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 123, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 295, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MethodsType._UseForTag(pyxb.namespace.ExpandedName(None, 'methodStep')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 89, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MethodsType._UseForTag(pyxb.namespace.ExpandedName(None, 'sampling')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 123, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MethodsType._UseForTag(pyxb.namespace.ExpandedName(None, 'qualityControl')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 295, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MethodsType._Automaton = _BuildAutomaton_55()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'studyExtent'), CTD_ANON_45, scope=CTD_ANON_44, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 138, 12)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'samplingDescription'), TextType, scope=CTD_ANON_44, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 203, 12)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'spatialSamplingUnits'), CTD_ANON_46, scope=CTD_ANON_44, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 218, 12)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CTD_ANON_44, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 280, 12)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 218, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 280, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, 'studyExtent')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 138, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, 'samplingDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 203, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, 'spatialSamplingUnits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 218, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 280, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_56()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=CTD_ANON_45, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 159, 18)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), TextType, scope=CTD_ANON_45, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 179, 18)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 159, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 179, 18))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_57()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'referencedEntityId'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_46, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 246, 18)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), GeographicCoverage, scope=CTD_ANON_46, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 266, 18)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, 'referencedEntityId')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 246, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 266, 18))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_58()




ProcedureStepType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), TextType, scope=ProcedureStepType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 318, 8)))

ProcedureStepType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=ProcedureStepType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 348, 10)))

ProcedureStepType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'protocol'), ProtocolType, scope=ProcedureStepType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 360, 10)))

ProcedureStepType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'instrumentation'), NonEmptyStringType, scope=ProcedureStepType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 376, 6)))

ProcedureStepType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'software'), SoftwareType, scope=ProcedureStepType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 390, 6)))

ProcedureStepType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subStep'), ProcedureStepType, scope=ProcedureStepType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 400, 6)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 347, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 376, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 390, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 400, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProcedureStepType._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 318, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProcedureStepType._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 348, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProcedureStepType._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 360, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProcedureStepType._UseForTag(pyxb.namespace.ExpandedName(None, 'instrumentation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 376, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProcedureStepType._UseForTag(pyxb.namespace.ExpandedName(None, 'software')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 390, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProcedureStepType._UseForTag(pyxb.namespace.ExpandedName(None, 'subStep')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 400, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProcedureStepType._Automaton = _BuildAutomaton_59()




Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'salutation'), i18nNonEmptyStringType, scope=Person, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 367, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'givenName'), i18nNonEmptyStringType, scope=Person, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 380, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'surName'), i18nNonEmptyStringType, scope=Person, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 398, 6)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 367, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 380, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'salutation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 367, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'givenName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 380, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'surName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 398, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Person._Automaton = _BuildAutomaton_60()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'textFormat'), CTD_ANON_52, scope=CTD_ANON_51, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 258, 14)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'externallyDefinedFormat'), CTD_ANON_57, scope=CTD_ANON_51, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 894, 14)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'binaryRasterFormat'), CTD_ANON_58, scope=CTD_ANON_51, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 959, 14)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'textFormat')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 258, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'externallyDefinedFormat')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 894, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'binaryRasterFormat')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 959, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_61()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numHeaderLines'), pyxb.binding.datatypes.int, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 275, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numFooterLines'), pyxb.binding.datatypes.int, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 292, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recordDelimiter'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 310, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physicalLineDelimiter'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 333, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numPhysicalLinesPerRecord'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 360, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maxRecordLength'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 381, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeOrientation'), STD_ANON_16, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 399, 20)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'simpleDelimited'), CTD_ANON_53, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 434, 22)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'complex'), CTD_ANON_54, scope=CTD_ANON_52, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 574, 22)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 275, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 292, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 310, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 333, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 360, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 381, 20))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'numHeaderLines')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 275, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'numFooterLines')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 292, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'recordDelimiter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 310, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'physicalLineDelimiter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 333, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'numPhysicalLinesPerRecord')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 360, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'maxRecordLength')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 381, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeOrientation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 399, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'simpleDelimited')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 434, 22))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'complex')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 574, 22))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_62()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fieldDelimiter'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 452, 28)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'collapseDelimiters'), STD_ANON_17, scope=CTD_ANON_53, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 489, 28)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quoteCharacter'), NonEmptyStringType, scope=CTD_ANON_53, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 525, 28)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'literalCharacter'), NonEmptyStringType, scope=CTD_ANON_53, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 551, 28)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 489, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 525, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 551, 28))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'fieldDelimiter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 452, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'collapseDelimiters')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 489, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'quoteCharacter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 525, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'literalCharacter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 551, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_63()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'textFixed'), CTD_ANON_55, scope=CTD_ANON_54, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 600, 28)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'textDelimited'), CTD_ANON_56, scope=CTD_ANON_54, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 695, 28)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, 'textFixed')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 600, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, 'textDelimited')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 695, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_64()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fieldWidth'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_55, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 625, 34)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lineNumber'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_55, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 641, 34)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fieldStartColumn'), pyxb.binding.datatypes.long, scope=CTD_ANON_55, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 667, 34)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 641, 34))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 667, 34))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, 'fieldWidth')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 625, 34))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, 'lineNumber')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 641, 34))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, 'fieldStartColumn')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 667, 34))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_65()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fieldDelimiter'), pyxb.binding.datatypes.string, scope=CTD_ANON_56, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 717, 34)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'collapseDelimiters'), STD_ANON_18, scope=CTD_ANON_56, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 759, 34)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lineNumber'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_56, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 797, 34)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quoteCharacter'), NonEmptyStringType, scope=CTD_ANON_56, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 829, 34)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'literalCharacter'), NonEmptyStringType, scope=CTD_ANON_56, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 860, 34)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 759, 34))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 797, 34))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 829, 34))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 860, 34))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'fieldDelimiter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 717, 34))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'collapseDelimiters')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 759, 34))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'lineNumber')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 797, 34))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'quoteCharacter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 829, 34))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'literalCharacter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 860, 34))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_66()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'formatName'), NonEmptyStringType, scope=CTD_ANON_57, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 918, 20)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'formatVersion'), NonEmptyStringType, scope=CTD_ANON_57, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 930, 20)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CTD_ANON_57, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 942, 20)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 930, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 942, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, 'formatName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 918, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, 'formatVersion')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 930, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 942, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_67()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rowColumnOrientation'), STD_ANON_19, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 976, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'multiBand'), CTD_ANON_59, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 999, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbits'), pyxb.binding.datatypes.int, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1046, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'byteorder'), NonEmptyStringType, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1064, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'skipbytes'), NonEmptyStringType, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1082, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bandrowbytes'), NonEmptyStringType, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1098, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalrowbytes'), NonEmptyStringType, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1113, 20)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bandgapbytes'), NonEmptyStringType, scope=CTD_ANON_58, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1127, 20)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 999, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1082, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1098, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1113, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1127, 20))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'rowColumnOrientation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 976, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'multiBand')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 999, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'nbits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1046, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'byteorder')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1064, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'skipbytes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1082, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'bandrowbytes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1098, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'totalrowbytes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1113, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'bandgapbytes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1127, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_68()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbands'), pyxb.binding.datatypes.int, scope=CTD_ANON_59, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1012, 26)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'layout'), NonEmptyStringType, scope=CTD_ANON_59, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1025, 26)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, 'nbands')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1012, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, 'layout')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1025, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_69()




PhysicalOnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'onlineDescription'), NonEmptyStringType, scope=PhysicalOnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1290, 6)))

PhysicalOnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'url'), UrlType, scope=PhysicalOnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1301, 8)))

PhysicalOnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'connection'), ConnectionType, scope=PhysicalOnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1311, 8)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1290, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalOnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'onlineDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1290, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalOnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'url')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1301, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalOnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'connection')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1311, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhysicalOnlineType._Automaton = _BuildAutomaton_70()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'descriptor'), CTD_ANON_105, scope=CTD_ANON_60, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 217, 14)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CTD_ANON_60, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 336, 14)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=CTD_ANON_60, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 347, 14)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 336, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 347, 14))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, 'descriptor')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 217, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 336, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 347, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_71()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), TextType, scope=CTD_ANON_62, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 376, 14)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CTD_ANON_62, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 391, 14)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 391, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 376, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 391, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_72()




AwardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'funderName'), i18nNonEmptyStringType, scope=AwardType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 454, 6)))

AwardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'funderIdentifier'), i18nNonEmptyStringType, scope=AwardType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 469, 6)))

AwardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'awardNumber'), i18nNonEmptyStringType, scope=AwardType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 489, 6)))

AwardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), i18nNonEmptyStringType, scope=AwardType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 505, 6)))

AwardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'awardUrl'), i18nNonEmptyStringType, scope=AwardType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 517, 6)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 469, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 489, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 517, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AwardType._UseForTag(pyxb.namespace.ExpandedName(None, 'funderName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 454, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AwardType._UseForTag(pyxb.namespace.ExpandedName(None, 'funderIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 469, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AwardType._UseForTag(pyxb.namespace.ExpandedName(None, 'awardNumber')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 489, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AwardType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 505, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AwardType._UseForTag(pyxb.namespace.ExpandedName(None, 'awardUrl')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 517, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AwardType._Automaton = _BuildAutomaton_73()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'keyword'), CTD_ANON_94, scope=CTD_ANON_63, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 279, 12)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'keywordThesaurus'), NonEmptyStringType, scope=CTD_ANON_63, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 315, 12)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 315, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, 'keyword')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 279, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, 'keywordThesaurus')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 315, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_74()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), NonEmptyStringType, scope=CTD_ANON_64, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 811, 14)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'definition'), NonEmptyStringType, scope=CTD_ANON_64, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 823, 14)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'defaultValue'), NonEmptyStringType, scope=CTD_ANON_64, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 839, 14)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 839, 14))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 811, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, 'definition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 823, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, 'defaultValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 839, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_75()




def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 893, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 893, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InlineType._Automaton = _BuildAutomaton_76()




OfflineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mediumName'), NonEmptyStringType, scope=OfflineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 911, 6)))

OfflineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mediumDensity'), NonEmptyStringType, scope=OfflineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 926, 6)))

OfflineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mediumDensityUnits'), NonEmptyStringType, scope=OfflineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 940, 6)))

OfflineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mediumVolume'), NonEmptyStringType, scope=OfflineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 951, 6)))

OfflineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mediumFormat'), NonEmptyStringType, scope=OfflineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 963, 6)))

OfflineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mediumNote'), NonEmptyStringType, scope=OfflineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 975, 6)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 926, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 940, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 951, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 963, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 975, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OfflineType._UseForTag(pyxb.namespace.ExpandedName(None, 'mediumName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 911, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OfflineType._UseForTag(pyxb.namespace.ExpandedName(None, 'mediumDensity')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 926, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OfflineType._UseForTag(pyxb.namespace.ExpandedName(None, 'mediumDensityUnits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 940, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OfflineType._UseForTag(pyxb.namespace.ExpandedName(None, 'mediumVolume')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 951, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OfflineType._UseForTag(pyxb.namespace.ExpandedName(None, 'mediumFormat')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 963, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OfflineType._UseForTag(pyxb.namespace.ExpandedName(None, 'mediumNote')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 975, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OfflineType._Automaton = _BuildAutomaton_77()




OnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'onlineDescription'), i18nNonEmptyStringType, scope=OnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1017, 6)))

OnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'url'), UrlType, scope=OnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1030, 8)))

OnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'connection'), ConnectionType, scope=OnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1044, 8)))

OnlineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'connectionDefinition'), ConnectionDefinitionType, scope=OnlineType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1056, 8)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1017, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'onlineDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1017, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'url')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1030, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'connection')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1044, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OnlineType._UseForTag(pyxb.namespace.ExpandedName(None, 'connectionDefinition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1056, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OnlineType._Automaton = _BuildAutomaton_78()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), NonEmptyStringType, scope=CTD_ANON_65, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1177, 14)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), NonEmptyStringType, scope=CTD_ANON_65, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1190, 14)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1177, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1190, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_79()




i18nNonEmptyStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), CTD_ANON_97, scope=i18nNonEmptyStringType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1249, 3)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1249, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(i18nNonEmptyStringType._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1249, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
i18nNonEmptyStringType._Automaton = _BuildAutomaton_80()




LicenseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'licenseName'), NonEmptyStringType, scope=LicenseType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1312, 8)))

LicenseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'url'), pyxb.binding.datatypes.anyURI, scope=LicenseType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1326, 8)))

LicenseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identifier'), NonEmptyStringType, scope=LicenseType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1340, 8)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1326, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1340, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LicenseType._UseForTag(pyxb.namespace.ExpandedName(None, 'licenseName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1312, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LicenseType._UseForTag(pyxb.namespace.ExpandedName(None, 'url')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1326, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LicenseType._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1340, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LicenseType._Automaton = _BuildAutomaton_81()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distribution'), PhysicalDistributionType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 101, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'size'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 114, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'language'), CTD_ANON_69, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 126, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'operatingSystem'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 167, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'machineProcessor'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 184, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'virtualMachine'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 199, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'diskUsage'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 211, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'runtimeMemoryUsage'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 225, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'programmingLanguage'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 238, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'checksum'), NonEmptyStringType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 260, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dependency'), DependencyType, scope=CTD_ANON_68, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 272, 14)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 114, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 126, 14))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 167, 14))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 184, 14))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 199, 14))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 211, 14))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 225, 14))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 238, 14))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 260, 14))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 272, 14))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'distribution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 101, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 114, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'language')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 126, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'operatingSystem')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 167, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'machineProcessor')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 184, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'virtualMachine')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 199, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'diskUsage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 211, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'runtimeMemoryUsage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 225, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'programmingLanguage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 238, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'checksum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 260, 14))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'dependency')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 272, 14))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_82()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageValue'), NonEmptyStringType, scope=CTD_ANON_69, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 138, 20)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageCodeStandard'), NonEmptyStringType, scope=CTD_ANON_69, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 151, 20)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 151, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 138, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageCodeStandard')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 151, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_83()




DependencyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'action'), Action, scope=DependencyType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 383, 8)))

DependencyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'software'), SoftwareType, scope=DependencyType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 401, 8)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DependencyType._UseForTag(pyxb.namespace.ExpandedName(None, 'action')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 383, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DependencyType._UseForTag(pyxb.namespace.ExpandedName(None, 'software')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 401, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DependencyType._Automaton = _BuildAutomaton_84()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cornerPoint'), CTD_ANON_71, scope=CTD_ANON_70, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 145, 14)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'controlPoint'), CTD_ANON_72, scope=CTD_ANON_70, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 220, 14)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bilinearFit'), CTD_ANON_73, scope=CTD_ANON_70, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 304, 14)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=4, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 145, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'cornerPoint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 145, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'controlPoint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 220, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'bilinearFit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 304, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_85()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'xCoordinate'), pyxb.binding.datatypes.float, scope=CTD_ANON_71, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 160, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'yCoordinate'), pyxb.binding.datatypes.float, scope=CTD_ANON_71, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 173, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pointInPixel'), STD_ANON_22, scope=CTD_ANON_71, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 185, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'corner'), rasterOriginType, scope=CTD_ANON_71, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 204, 20)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'xCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 160, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'yCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 173, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'pointInPixel')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 185, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'corner')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 204, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_86()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'column'), pyxb.binding.datatypes.int, scope=CTD_ANON_72, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 235, 20)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'row'), pyxb.binding.datatypes.int, scope=CTD_ANON_72, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 246, 20)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'xCoordinate'), pyxb.binding.datatypes.float, scope=CTD_ANON_72, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 257, 20)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'yCoordinate'), pyxb.binding.datatypes.float, scope=CTD_ANON_72, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 269, 20)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pointInPixel'), STD_ANON_23, scope=CTD_ANON_72, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 282, 20)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'column')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 235, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'row')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 246, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'xCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 257, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'yCoordinate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 269, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'pointInPixel')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 282, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_87()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'xIntercept'), pyxb.binding.datatypes.float, scope=CTD_ANON_73, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 317, 20)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'xSlope'), pyxb.binding.datatypes.float, scope=CTD_ANON_73, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 329, 20)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'yIntercept'), pyxb.binding.datatypes.float, scope=CTD_ANON_73, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 341, 20)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ySlope'), pyxb.binding.datatypes.float, scope=CTD_ANON_73, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 353, 20)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'xIntercept')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 317, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'xSlope')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 329, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'yIntercept')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 341, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'ySlope')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 353, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_88()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'illuminationElevationAngle'), pyxb.binding.datatypes.float, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 542, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'illuminationAzimuthAngle'), pyxb.binding.datatypes.float, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 558, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'imageOrientationAngle'), pyxb.binding.datatypes.float, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 572, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'imagingCondition'), ImagingConditionCode, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 584, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'imageQualityCode'), NonEmptyStringType, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 596, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cloudCoverPercentage'), pyxb.binding.datatypes.float, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 607, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'preProcessingTypeCode'), NonEmptyStringType, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 621, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compressionGenerationQuality'), pyxb.binding.datatypes.integer, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 635, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'triangulationIndicator'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 647, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'radiometricDataAvailability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 661, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cameraCalibrationInformationAvailability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 674, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'filmDistortionInformationAvailability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 689, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lensDistortionInformationAvailability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 703, 14)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bandDescription'), BandType, scope=CTD_ANON_74, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 718, 14)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 542, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 558, 14))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 572, 14))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 584, 14))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 596, 14))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 607, 14))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 621, 14))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 635, 14))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 647, 14))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 661, 14))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 674, 14))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 689, 14))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 703, 14))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 718, 14))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'illuminationElevationAngle')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 542, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'illuminationAzimuthAngle')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 558, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'imageOrientationAngle')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 572, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'imagingCondition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 584, 14))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'imageQualityCode')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 596, 14))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'cloudCoverPercentage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 607, 14))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'preProcessingTypeCode')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 621, 14))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'compressionGenerationQuality')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 635, 14))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'triangulationIndicator')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 647, 14))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'radiometricDataAvailability')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 661, 14))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'cameraCalibrationInformationAvailability')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 674, 14))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'filmDistortionInformationAvailability')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 689, 14))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'lensDistortionInformationAvailability')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 703, 14))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'bandDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 718, 14))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_89()




BandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sequenceIdentifier'), NonEmptyStringType, scope=BandType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 748, 6)))

BandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'highWavelength'), pyxb.binding.datatypes.float, scope=BandType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 760, 6)))

BandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lowWaveLength'), pyxb.binding.datatypes.float, scope=BandType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 772, 6)))

BandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'waveLengthUnits'), lengthUnits, scope=BandType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 784, 6)))

BandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'peakResponse'), pyxb.binding.datatypes.anyType, scope=BandType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 796, 6)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 748, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 760, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 772, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 784, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 796, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BandType._UseForTag(pyxb.namespace.ExpandedName(None, 'sequenceIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 748, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BandType._UseForTag(pyxb.namespace.ExpandedName(None, 'highWavelength')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 760, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BandType._UseForTag(pyxb.namespace.ExpandedName(None, 'lowWaveLength')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 772, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BandType._UseForTag(pyxb.namespace.ExpandedName(None, 'waveLengthUnits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 784, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BandType._UseForTag(pyxb.namespace.ExpandedName(None, 'peakResponse')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 796, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BandType._Automaton = _BuildAutomaton_90()




DataQuality._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accuracyReport'), NonEmptyStringType, scope=DataQuality, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 884, 6)))

DataQuality._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyReport'), CTD_ANON_75, scope=DataQuality, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 894, 6)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 894, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataQuality._UseForTag(pyxb.namespace.ExpandedName(None, 'accuracyReport')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 884, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataQuality._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyReport')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 894, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataQuality._Automaton = _BuildAutomaton_91()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyValue'), NonEmptyStringType, scope=CTD_ANON_75, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 905, 12)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyMethod'), NonEmptyStringType, scope=CTD_ANON_75, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 916, 12)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 905, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyMethod')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 916, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_92()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeSysDef'), CTD_ANON_77, scope=CTD_ANON_76, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2167, 14)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'depthSysDef'), CTD_ANON_78, scope=CTD_ANON_76, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2229, 14)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2167, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2229, 14))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeSysDef')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2167, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(None, 'depthSysDef')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2229, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_93()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeDatumName'), NonEmptyStringType, scope=CTD_ANON_77, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2181, 20)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeResolution'), NonEmptyStringType, scope=CTD_ANON_77, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2193, 20)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeDistanceUnits'), NonEmptyStringType, scope=CTD_ANON_77, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2205, 20)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altitudeEncodingMethod'), NonEmptyStringType, scope=CTD_ANON_77, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2216, 20)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeDatumName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2181, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeResolution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2193, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeDistanceUnits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2205, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'altitudeEncodingMethod')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2216, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_94()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'depthDatumName'), NonEmptyStringType, scope=CTD_ANON_78, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2240, 20)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'depthResolution'), NonEmptyStringType, scope=CTD_ANON_78, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2251, 20)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'depthDistanceUnits'), NonEmptyStringType, scope=CTD_ANON_78, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2263, 20)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'depthEncodingMethod'), NonEmptyStringType, scope=CTD_ANON_78, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2274, 20)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'depthDatumName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2240, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'depthResolution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2251, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'depthDistanceUnits')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2263, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'depthEncodingMethod')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2274, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_95()




geogCoordSysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'datum'), CTD_ANON_79, scope=geogCoordSysType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2300, 6)))

geogCoordSysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'spheroid'), CTD_ANON_80, scope=geogCoordSysType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2314, 6)))

geogCoordSysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'primeMeridian'), CTD_ANON_98, scope=geogCoordSysType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2346, 6)))

geogCoordSysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), CTD_ANON_99, scope=geogCoordSysType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2376, 6)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(geogCoordSysType._UseForTag(pyxb.namespace.ExpandedName(None, 'datum')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2300, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(geogCoordSysType._UseForTag(pyxb.namespace.ExpandedName(None, 'spheroid')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2314, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(geogCoordSysType._UseForTag(pyxb.namespace.ExpandedName(None, 'primeMeridian')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2346, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(geogCoordSysType._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2376, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
geogCoordSysType._Automaton = _BuildAutomaton_96()




horizCoordSysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geogCoordSys'), geogCoordSysType, scope=horizCoordSysType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2403, 6)))

horizCoordSysType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'projCoordSys'), CTD_ANON_81, scope=horizCoordSysType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2413, 6)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(horizCoordSysType._UseForTag(pyxb.namespace.ExpandedName(None, 'geogCoordSys')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2403, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(horizCoordSysType._UseForTag(pyxb.namespace.ExpandedName(None, 'projCoordSys')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2413, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
horizCoordSysType._Automaton = _BuildAutomaton_97()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geogCoordSys'), geogCoordSysType, scope=CTD_ANON_81, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2423, 12)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'projection'), CTD_ANON_82, scope=CTD_ANON_81, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2433, 12)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(None, 'geogCoordSys')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2423, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(None, 'projection')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2433, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_98()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parameter'), CTD_ANON_83, scope=CTD_ANON_82, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2444, 18)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), CTD_ANON_100, scope=CTD_ANON_82, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2489, 18)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(None, 'parameter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2444, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2489, 18))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_99()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'horizCoordSysDef'), horizCoordSysType, scope=CTD_ANON_84, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2535, 8)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(None, 'horizCoordSysDef')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2535, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_100()




DataQuality_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accuracyReport'), NonEmptyStringType, scope=DataQuality_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 242, 6)))

DataQuality_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyReport'), CTD_ANON_85, scope=DataQuality_, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 252, 6)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 252, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataQuality_._UseForTag(pyxb.namespace.ExpandedName(None, 'accuracyReport')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 242, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataQuality_._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyReport')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 252, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataQuality_._Automaton = _BuildAutomaton_101()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyValue'), NonEmptyStringType, scope=CTD_ANON_85, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 263, 12)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyMethod'), NonEmptyStringType, scope=CTD_ANON_85, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 274, 12)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 263, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(None, 'quantitativeAccuracyMethod')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 274, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_102()




ParameterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), NonEmptyStringType, scope=ParameterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 169, 6)))

ParameterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'domainDescription'), NonEmptyStringType, scope=ParameterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 181, 6)))

ParameterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'required'), pyxb.binding.datatypes.boolean, scope=ParameterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 197, 6)))

ParameterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'repeats'), pyxb.binding.datatypes.boolean, scope=ParameterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 211, 6)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterType._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 169, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterType._UseForTag(pyxb.namespace.ExpandedName(None, 'domainDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 181, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ParameterType._UseForTag(pyxb.namespace.ExpandedName(None, 'required')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 197, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ParameterType._UseForTag(pyxb.namespace.ExpandedName(None, 'repeats')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 211, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ParameterType._Automaton = _BuildAutomaton_103()




TextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'section'), SectionType, scope=TextType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 79, 12)))

TextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'para'), ParagraphType, scope=TextType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 89, 12)))

TextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'markdown'), CTD_ANON_101, scope=TextType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 99, 12)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 79, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 89, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 99, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TextType._UseForTag(pyxb.namespace.ExpandedName(None, 'section')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 79, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TextType._UseForTag(pyxb.namespace.ExpandedName(None, 'para')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 89, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TextType._UseForTag(pyxb.namespace.ExpandedName(None, 'markdown')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 99, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TextType._Automaton = _BuildAutomaton_104()




ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), i18nString, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 208, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'itemizedlist'), ListType, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 217, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orderedlist'), ListType, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 228, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'emphasis'), CTD_ANON_86, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 239, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscript'), SubSuperScriptType, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 254, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'superscript'), SubSuperScriptType, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 263, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'literalLayout'), CTD_ANON_87, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 272, 12)))

ParagraphType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ulink'), CTD_ANON_88, scope=ParagraphType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 286, 12)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 207, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 208, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 286, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 208, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'itemizedlist')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 217, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'orderedlist')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 228, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'emphasis')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 239, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'subscript')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 254, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'superscript')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 263, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'literalLayout')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 272, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ParagraphType._UseForTag(pyxb.namespace.ExpandedName(None, 'ulink')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 286, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ParagraphType._Automaton = _BuildAutomaton_105()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), i18nString, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 249, 24)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 249, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 249, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_106()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), i18nString, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 282, 24)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 282, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 282, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_107()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citetitle'), i18nString, scope=CTD_ANON_88, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 296, 24)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 295, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(None, 'citetitle')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 296, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_108()




SectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), i18nString, scope=SectionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 333, 12)))

SectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'para'), ParagraphType, scope=SectionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 344, 16)))

SectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'section'), SectionType, scope=SectionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 355, 16)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 333, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SectionType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 333, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SectionType._UseForTag(pyxb.namespace.ExpandedName(None, 'para')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 344, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SectionType._UseForTag(pyxb.namespace.ExpandedName(None, 'section')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 355, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SectionType._Automaton = _BuildAutomaton_109()




ListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'listitem'), CTD_ANON_89, scope=ListType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 380, 12)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ListType._UseForTag(pyxb.namespace.ExpandedName(None, 'listitem')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 380, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ListType._Automaton = _BuildAutomaton_110()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'para'), ParagraphType, scope=CTD_ANON_89, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 392, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'itemizedlist'), ListType, scope=CTD_ANON_89, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 403, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orderedlist'), ListType, scope=CTD_ANON_89, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 414, 24)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(None, 'para')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 392, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(None, 'itemizedlist')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 403, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(None, 'orderedlist')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 414, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_111()




SubSuperScriptType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), i18nString, scope=SubSuperScriptType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 442, 12)))

SubSuperScriptType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscript'), SubSuperScriptType, scope=SubSuperScriptType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 451, 12)))

SubSuperScriptType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'superscript'), SubSuperScriptType, scope=SubSuperScriptType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 460, 12)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 441, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 442, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SubSuperScriptType._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 442, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubSuperScriptType._UseForTag(pyxb.namespace.ExpandedName(None, 'subscript')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 451, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubSuperScriptType._UseForTag(pyxb.namespace.ExpandedName(None, 'superscript')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-text.xsd', 460, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SubSuperScriptType._Automaton = _BuildAutomaton_112()




AccessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'allow'), AccessRule, scope=AccessType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 96, 8)))

AccessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deny'), AccessRule, scope=AccessType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 108, 8)))

AccessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=AccessType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AccessType._UseForTag(pyxb.namespace.ExpandedName(None, 'allow')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 96, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AccessType._UseForTag(pyxb.namespace.ExpandedName(None, 'deny')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-access.xsd', 108, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AccessType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AccessType._Automaton = _BuildAutomaton_113()




AttributeListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attribute'), AttributeType, scope=AttributeListType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 100, 6)))

AttributeListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=AttributeListType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AttributeListType._UseForTag(pyxb.namespace.ExpandedName(None, 'attribute')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 100, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AttributeListType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AttributeListType._Automaton = _BuildAutomaton_114()




AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeName'), NonEmptyStringType, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 120, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeLabel'), NonEmptyStringType, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 143, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeDefinition'), NonEmptyStringType, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 163, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'storageType'), CTD_ANON, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 182, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementScale'), CTD_ANON_, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 237, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'missingValueCode'), CTD_ANON_7, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 566, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accuracy'), Accuracy, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 623, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 641, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 657, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 672, 8)))

AttributeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=AttributeType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 143, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 182, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 566, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 623, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 641, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 657, 8))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 672, 8))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 120, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeLabel')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 143, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeDefinition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 163, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'storageType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 182, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementScale')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 237, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'missingValueCode')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 566, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'accuracy')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 623, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 641, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 657, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 672, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AttributeType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AttributeType._Automaton = _BuildAutomaton_115()




NonNumericDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'enumeratedDomain'), CTD_ANON_90, scope=NonNumericDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 883, 8)))

NonNumericDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'textDomain'), CTD_ANON_12, scope=NonNumericDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1168, 8)))

NonNumericDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=NonNumericDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NonNumericDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'enumeratedDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 883, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NonNumericDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'textDomain')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1168, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NonNumericDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NonNumericDomainType._Automaton = _BuildAutomaton_116()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'codeDefinition'), CTD_ANON_9, scope=CTD_ANON_90, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 904, 14)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'externalCodeSet'), CTD_ANON_10, scope=CTD_ANON_90, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 987, 14)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityCodeList'), CTD_ANON_11, scope=CTD_ANON_90, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1052, 14)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(None, 'codeDefinition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 904, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(None, 'externalCodeSet')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 987, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(None, 'entityCodeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1052, 14))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_117()




NumericDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numberType'), NumberType, scope=NumericDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1288, 8)))

NumericDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bounds'), CTD_ANON_13, scope=NumericDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1348, 6)))

NumericDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=NumericDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1348, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NumericDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'numberType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1288, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NumericDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'bounds')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1348, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NumericDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NumericDomainType._Automaton = _BuildAutomaton_118()




DateTimeDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bounds'), CTD_ANON_16, scope=DateTimeDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1473, 6)))

DateTimeDomainType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=DateTimeDomainType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1473, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DateTimeDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'bounds')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-attribute.xsd', 1473, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DateTimeDomainType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DateTimeDomainType._Automaton = _BuildAutomaton_119()




ConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'primaryKey'), CTD_ANON_19, scope=ConstraintType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 77, 6)))

ConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uniqueKey'), CTD_ANON_21, scope=ConstraintType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 134, 6)))

ConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'checkConstraint'), CTD_ANON_23, scope=ConstraintType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 191, 6)))

ConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'foreignKey'), CTD_ANON_24, scope=ConstraintType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 246, 6)))

ConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'joinCondition'), CTD_ANON_25, scope=ConstraintType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 262, 6)))

ConstraintType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'notNullConstraint'), CTD_ANON_27, scope=ConstraintType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 316, 6)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintType._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryKey')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 77, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintType._UseForTag(pyxb.namespace.ExpandedName(None, 'uniqueKey')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 134, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintType._UseForTag(pyxb.namespace.ExpandedName(None, 'checkConstraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 191, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintType._UseForTag(pyxb.namespace.ExpandedName(None, 'foreignKey')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 246, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintType._UseForTag(pyxb.namespace.ExpandedName(None, 'joinCondition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 262, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstraintType._UseForTag(pyxb.namespace.ExpandedName(None, 'notNullConstraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-constraint.xsd', 316, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConstraintType._Automaton = _BuildAutomaton_120()




Coverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geographicCoverage'), GeographicCoverage, scope=Coverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 58, 8)))

Coverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'temporalCoverage'), CTD_ANON_102, scope=Coverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 71, 8)))

Coverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonomicCoverage'), CTD_ANON_103, scope=Coverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 92, 8)))

Coverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=Coverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Coverage._UseForTag(pyxb.namespace.ExpandedName(None, 'geographicCoverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 58, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Coverage._UseForTag(pyxb.namespace.ExpandedName(None, 'temporalCoverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 71, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Coverage._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicCoverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 92, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Coverage._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Coverage._Automaton = _BuildAutomaton_121()




TemporalCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'singleDateTime'), SingleDateTimeType, scope=TemporalCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 133, 8)))

TemporalCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rangeOfDates'), CTD_ANON_31, scope=TemporalCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 145, 8)))

TemporalCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=TemporalCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TemporalCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'singleDateTime')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 133, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TemporalCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'rangeOfDates')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 145, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TemporalCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TemporalCoverage._Automaton = _BuildAutomaton_122()




GeographicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geographicDescription'), NonEmptyStringType, scope=GeographicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 370, 8)))

GeographicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'boundingCoordinates'), CTD_ANON_33, scope=GeographicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 410, 8)))

GeographicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'datasetGPolygon'), CTD_ANON_35, scope=GeographicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 635, 8)))

GeographicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=GeographicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 635, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeographicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'geographicDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 370, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeographicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'boundingCoordinates')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 410, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GeographicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'datasetGPolygon')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 635, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeographicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeographicCoverage._Automaton = _BuildAutomaton_123()




TaxonomicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonomicSystem'), CTD_ANON_38, scope=TaxonomicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 879, 8)))

TaxonomicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'generalTaxonomicCoverage'), NonEmptyStringType, scope=TaxonomicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1037, 8)))

TaxonomicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonomicClassification'), TaxonomicClassificationType, scope=TaxonomicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1050, 8)))

TaxonomicCoverage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=TaxonomicCoverage, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 879, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1037, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TaxonomicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicSystem')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 879, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TaxonomicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'generalTaxonomicCoverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1037, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TaxonomicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicClassification')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1050, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TaxonomicCoverage._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TaxonomicCoverage._Automaton = _BuildAutomaton_124()




TaxonomicClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonRankName'), NonEmptyStringType, scope=TaxonomicClassificationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1086, 6)))

TaxonomicClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonRankValue'), NonEmptyStringType, scope=TaxonomicClassificationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1100, 6)))

TaxonomicClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'commonName'), NonEmptyStringType, scope=TaxonomicClassificationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1119, 6)))

TaxonomicClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonId'), CTD_ANON_42, scope=TaxonomicClassificationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1132, 6)))

TaxonomicClassificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'taxonomicClassification'), TaxonomicClassificationType, scope=TaxonomicClassificationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1171, 6)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1086, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1100, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1119, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1132, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1171, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TaxonomicClassificationType._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonRankName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1086, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TaxonomicClassificationType._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonRankValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1100, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TaxonomicClassificationType._UseForTag(pyxb.namespace.ExpandedName(None, 'commonName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1119, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TaxonomicClassificationType._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonId')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1132, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TaxonomicClassificationType._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicClassification')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1171, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TaxonomicClassificationType._Automaton = _BuildAutomaton_125()




DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeList'), AttributeListType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 91, 8)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraint'), ConstraintType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 103, 8)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'caseSensitive'), STD_ANON_13, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 114, 8)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numberOfRecords'), NonEmptyStringType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 139, 8)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_91, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityName'), NonEmptyStringType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityDescription'), NonEmptyStringType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physical'), PhysicalType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6)))

DataTableType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=DataTableType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 103, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 114, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 139, 8))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'physical')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 91, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'constraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 103, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'caseSensitive')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 114, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfRecords')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataTable.xsd', 139, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataTableType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataTableType._Automaton = _BuildAutomaton_126()




DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purpose'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 102, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'introduction'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 117, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gettingStarted'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 139, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'acknowledgements'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 165, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'maintenance'), MaintenanceType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 186, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contact'), ResponsibleParty, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 199, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publisher'), ResponsibleParty, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 211, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pubPlace'), NonEmptyStringType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 223, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 237, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'project'), ResearchProjectType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 250, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dataTable'), DataTableType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 265, 10)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'spatialRaster'), SpatialRasterType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 278, 10)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'spatialVector'), SpatialVectorType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 289, 10)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'storedProcedure'), StoredProcedureType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 300, 10)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'view'), ViewType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 315, 10)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'otherEntity'), OtherEntityType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 330, 10)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'referencePublication'), CitationType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 348, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'usageCitation'), CitationType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 358, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'literatureCited'), CitationListType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 375, 8)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_93, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shortName'), NonEmptyStringType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), i18nNonEmptyStringType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creator'), ResponsibleParty, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'metadataProvider'), ResponsibleParty, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'associatedParty'), CTD_ANON_106, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pubDate'), yearDate, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'language'), i18nNonEmptyStringType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series'), NonEmptyStringType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abstract'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'keywordSet'), CTD_ANON_63, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'intellectualRights'), TextType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'licensed'), LicenseType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distribution'), DistributionType, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6)))

DatasetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=DatasetType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 102, 8))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 117, 8))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 139, 8))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 165, 8))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 186, 8))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 211, 8))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 223, 8))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 237, 8))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 250, 8))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 264, 8))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 348, 8))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 358, 8))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 375, 8))
    counters.add(cc_27)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'shortName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'creator')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'metadataProvider')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'associatedParty')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'pubDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'language')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'series')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'abstract')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'keywordSet')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'intellectualRights')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'licensed')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'distribution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'purpose')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 102, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'introduction')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 117, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'gettingStarted')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 139, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'acknowledgements')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 165, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'maintenance')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 186, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'contact')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 199, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 211, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'pubPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 223, 8))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 237, 8))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'project')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 250, 8))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'dataTable')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 265, 10))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'spatialRaster')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 278, 10))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'spatialVector')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 289, 10))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'storedProcedure')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 300, 10))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'view')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 315, 10))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'otherEntity')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 330, 10))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 348, 8))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'usageCitation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 358, 8))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'literatureCited')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-dataset.xsd', 375, 8))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DatasetType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_27, True) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    st_36._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DatasetType._Automaton = _BuildAutomaton_127()




OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeList'), AttributeListType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 83, 10)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraint'), ConstraintType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 95, 10)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityType'), NonEmptyStringType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 106, 10)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_91, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityName'), NonEmptyStringType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityDescription'), NonEmptyStringType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physical'), PhysicalType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6)))

OtherEntityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=OtherEntityType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 83, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 95, 10))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'physical')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 83, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'constraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 95, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityType')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 106, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OtherEntityType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OtherEntityType._Automaton = _BuildAutomaton_128()




CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contact'), ResponsibleParty, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 80, 8)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'article'), Article, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 91, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'book'), Book, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 103, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'chapter'), Chapter, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 114, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'editedBook'), Book, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 128, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'manuscript'), Manuscript, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 141, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'report'), Report, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 152, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'thesis'), Thesis, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 165, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceProceedings'), ConferenceProceedings, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 179, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'personalCommunication'), PersonalCommunication, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 190, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'map'), Map, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 202, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'generic'), Generic, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 214, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'audioVisual'), AudioVisual, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 227, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'presentation'), Presentation, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 239, 10)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bibtex'), pyxb.binding.datatypes.string, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 255, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_93, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shortName'), NonEmptyStringType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), i18nNonEmptyStringType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creator'), ResponsibleParty, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'metadataProvider'), ResponsibleParty, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'associatedParty'), CTD_ANON_106, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pubDate'), yearDate, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'language'), i18nNonEmptyStringType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series'), NonEmptyStringType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abstract'), TextType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'keywordSet'), CTD_ANON_63, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'intellectualRights'), TextType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'licensed'), LicenseType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distribution'), DistributionType, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6)))

CitationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=CitationType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 80, 8))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'shortName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'creator')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'metadataProvider')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'associatedParty')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'pubDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'language')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'series')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'abstract')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'keywordSet')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'intellectualRights')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'licensed')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'distribution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'contact')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 80, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'article')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 91, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'book')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 103, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'chapter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 114, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'editedBook')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 128, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'manuscript')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 141, 10))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'report')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 152, 10))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'thesis')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 165, 10))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceProceedings')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 179, 10))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'personalCommunication')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 190, 10))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'map')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 202, 10))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'generic')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 214, 10))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'audioVisual')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 227, 10))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'presentation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 239, 10))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'bibtex')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 255, 6))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CitationType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    transitions = []
    st_22._set_transitionSet(transitions)
    transitions = []
    st_23._set_transitionSet(transitions)
    transitions = []
    st_24._set_transitionSet(transitions)
    transitions = []
    st_25._set_transitionSet(transitions)
    transitions = []
    st_26._set_transitionSet(transitions)
    transitions = []
    st_27._set_transitionSet(transitions)
    transitions = []
    st_28._set_transitionSet(transitions)
    transitions = []
    st_29._set_transitionSet(transitions)
    transitions = []
    st_30._set_transitionSet(transitions)
    transitions = []
    st_31._set_transitionSet(transitions)
    transitions = []
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CitationType._Automaton = _BuildAutomaton_129()




Chapter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'chapterNumber'), NonEmptyStringType, scope=Chapter, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 515, 10)))

Chapter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'editor'), ResponsibleParty, scope=Chapter, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 527, 10)))

Chapter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bookTitle'), NonEmptyStringType, scope=Chapter, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 542, 10)))

Chapter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pageRange'), NonEmptyStringType, scope=Chapter, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 553, 10)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 515, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 553, 10))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 386, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'volume')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfVolumes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'totalFigures')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'totalTables')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'chapterNumber')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 515, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'editor')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 527, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'bookTitle')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 542, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Chapter._UseForTag(pyxb.namespace.ExpandedName(None, 'pageRange')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 553, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Chapter._Automaton = _BuildAutomaton_130()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dataSource'), DatasetType, scope=CTD_ANON_92, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 107, 16)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 347, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 376, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 390, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 400, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 107, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 318, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 348, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'protocol')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 360, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'instrumentation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 376, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'software')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 390, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'subStep')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 400, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(None, 'dataSource')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-methods.xsd', 107, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_131()




ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'individualName'), Person, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 92, 10)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'organizationName'), i18nNonEmptyStringType, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 126, 10)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'positionName'), i18nNonEmptyStringType, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 161, 10)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'address'), Address, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'phone'), CTD_ANON_47, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'electronicMailAddress'), i18nNonEmptyStringType, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'onlineUrl'), pyxb.binding.datatypes.anyURI, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userId'), CTD_ANON_48, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8)))

ResponsibleParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=ResponsibleParty, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'individualName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 92, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'organizationName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 126, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'positionName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 161, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'electronicMailAddress')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'onlineUrl')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'userId')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResponsibleParty._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResponsibleParty._Automaton = _BuildAutomaton_132()




Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'deliveryPoint'), i18nNonEmptyStringType, scope=Address, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 428, 8)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'city'), i18nNonEmptyStringType, scope=Address, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 441, 8)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'administrativeArea'), i18nNonEmptyStringType, scope=Address, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 452, 8)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'postalCode'), i18nNonEmptyStringType, scope=Address, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 465, 8)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'country'), i18nNonEmptyStringType, scope=Address, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 479, 8)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=Address, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 428, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 441, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 452, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 465, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 479, 8))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'deliveryPoint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 428, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'city')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 441, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'administrativeArea')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 452, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'postalCode')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 465, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'country')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 479, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Address._Automaton = _BuildAutomaton_133()




PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectName'), NonEmptyStringType, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 101, 8)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'size'), CTD_ANON_49, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 117, 8)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'authentication'), CTD_ANON_50, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 150, 8)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compressionMethod'), NonEmptyStringType, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 187, 10)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'encodingMethod'), NonEmptyStringType, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 207, 10)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'characterEncoding'), NonEmptyStringType, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 228, 8)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dataFormat'), CTD_ANON_51, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 241, 8)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distribution'), PhysicalDistributionType, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1146, 8)))

PhysicalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=PhysicalType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 117, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 150, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 186, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 228, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1146, 8))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'objectName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 101, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 117, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'authentication')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 150, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'compressionMethod')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 187, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'encodingMethod')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 207, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'characterEncoding')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 228, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'dataFormat')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 241, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'distribution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1146, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhysicalType._Automaton = _BuildAutomaton_134()




PhysicalDistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'online'), PhysicalOnlineType, scope=PhysicalDistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1209, 10)))

PhysicalDistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'offline'), OfflineType, scope=PhysicalDistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1219, 10)))

PhysicalDistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inline'), InlineType, scope=PhysicalDistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1229, 10)))

PhysicalDistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'access'), AccessType, scope=PhysicalDistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1241, 8)))

PhysicalDistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=PhysicalDistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1241, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalDistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'online')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1209, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalDistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'offline')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1219, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalDistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'inline')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1229, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalDistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'access')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-physical.xsd', 1241, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalDistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhysicalDistributionType._Automaton = _BuildAutomaton_135()




ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), NonEmptyStringType, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 91, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'personnel'), CTD_ANON_104, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 104, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abstract'), TextType, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 156, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'funding'), TextType, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 166, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'award'), AwardType, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 179, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'studyAreaDescription'), CTD_ANON_60, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 198, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'designDescription'), CTD_ANON_62, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 360, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relatedProject'), ResearchProjectType, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 408, 8)))

ResearchProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=ResearchProjectType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 156, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 166, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 179, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 198, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 360, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 408, 8))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 91, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'personnel')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 104, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'abstract')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 156, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'funding')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 166, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'award')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 179, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'studyAreaDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 198, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'designDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 360, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedProject')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 408, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResearchProjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResearchProjectType._Automaton = _BuildAutomaton_136()




ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'proceduralStep'), ProcedureStepType, scope=ProtocolType, location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 75, 8)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_93, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shortName'), NonEmptyStringType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), i18nNonEmptyStringType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creator'), ResponsibleParty, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'metadataProvider'), ResponsibleParty, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'associatedParty'), CTD_ANON_106, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pubDate'), yearDate, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'language'), i18nNonEmptyStringType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series'), NonEmptyStringType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abstract'), TextType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'keywordSet'), CTD_ANON_63, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'intellectualRights'), TextType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'licensed'), LicenseType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distribution'), DistributionType, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6)))

ProtocolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=ProtocolType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 75, 8))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'shortName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'creator')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'metadataProvider')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'associatedParty')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'pubDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'language')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'series')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'abstract')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'keywordSet')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'intellectualRights')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'licensed')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'distribution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'proceduralStep')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-protocol.xsd', 75, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProtocolType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProtocolType._Automaton = _BuildAutomaton_137()




def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1249, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1249, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_138()




DistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=DistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

DistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'online'), OnlineType, scope=DistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 666, 8)))

DistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'offline'), OfflineType, scope=DistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 678, 8)))

DistributionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inline'), InlineType, scope=DistributionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 689, 8)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'online')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 666, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'offline')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 678, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'inline')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 689, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DistributionType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DistributionType._Automaton = _BuildAutomaton_139()




ConnectionDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=ConnectionDefinitionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

ConnectionDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'schemeName'), CTD_ANON_96, scope=ConnectionDefinitionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 722, 8)))

ConnectionDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), TextType, scope=ConnectionDefinitionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 767, 8)))

ConnectionDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parameterDefinition'), CTD_ANON_64, scope=ConnectionDefinitionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 795, 8)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConnectionDefinitionType._UseForTag(pyxb.namespace.ExpandedName(None, 'schemeName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 722, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConnectionDefinitionType._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 767, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConnectionDefinitionType._UseForTag(pyxb.namespace.ExpandedName(None, 'parameterDefinition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 795, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConnectionDefinitionType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConnectionDefinitionType._Automaton = _BuildAutomaton_140()




ConnectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=ConnectionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

ConnectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'connectionDefinition'), ConnectionDefinitionType, scope=ConnectionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1153, 8)))

ConnectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parameter'), CTD_ANON_65, scope=ConnectionType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1162, 8)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1162, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConnectionType._UseForTag(pyxb.namespace.ExpandedName(None, 'connectionDefinition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1153, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConnectionType._UseForTag(pyxb.namespace.ExpandedName(None, 'parameter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 1162, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConnectionType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConnectionType._Automaton = _BuildAutomaton_141()




SemanticAnnotation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'propertyURI'), CTD_ANON_66, scope=SemanticAnnotation, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 71, 8)))

SemanticAnnotation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'valueURI'), CTD_ANON_67, scope=SemanticAnnotation, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 141, 8)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SemanticAnnotation._UseForTag(pyxb.namespace.ExpandedName(None, 'propertyURI')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 71, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SemanticAnnotation._UseForTag(pyxb.namespace.ExpandedName(None, 'valueURI')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-semantics.xsd', 141, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SemanticAnnotation._Automaton = _BuildAutomaton_142()




SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_93, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'shortName'), NonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), i18nNonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creator'), ResponsibleParty, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'metadataProvider'), ResponsibleParty, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'associatedParty'), CTD_ANON_106, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pubDate'), yearDate, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'language'), i18nNonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'series'), NonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abstract'), TextType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'keywordSet'), CTD_ANON_63, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'intellectualRights'), TextType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'licensed'), LicenseType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distribution'), DistributionType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'implementation'), CTD_ANON_68, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 82, 8)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dependency'), DependencyType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 286, 8)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'licenseURL'), NonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 298, 10)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'license'), NonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 307, 10)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), NonEmptyStringType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 317, 8)))

SoftwareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'project'), ResearchProjectType, scope=SoftwareType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 328, 8)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 286, 8))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 297, 8))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 328, 8))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 75, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'shortName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 96, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 110, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'creator')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 143, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'metadataProvider')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 159, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'associatedParty')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 173, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'pubDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 210, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'language')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 224, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'series')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 237, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'abstract')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 250, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'keywordSet')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 261, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 331, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'intellectualRights')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 344, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'licensed')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 363, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'distribution')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 397, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 410, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 424, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'implementation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 82, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'dependency')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 286, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'licenseURL')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 298, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'license')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 307, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 317, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'project')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-software.xsd', 328, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoftwareType._Automaton = _BuildAutomaton_143()




SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_91, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityName'), NonEmptyStringType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityDescription'), NonEmptyStringType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physical'), PhysicalType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeList'), AttributeListType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 97, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraint'), ConstraintType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 109, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'spatialReference'), SpatialReferenceType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 121, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'georeferenceInfo'), CTD_ANON_70, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 133, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'horizontalAccuracy'), DataQuality, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 371, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'verticalAccuracy'), DataQuality, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 384, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cellSizeXDirection'), pyxb.binding.datatypes.anyType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 397, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cellSizeYDirection'), pyxb.binding.datatypes.anyType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 408, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'numberOfBands'), pyxb.binding.datatypes.anyType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 419, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rasterOrigin'), rasterOriginType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 430, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rows'), NonEmptyStringType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 443, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'columns'), NonEmptyStringType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 455, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'verticals'), pyxb.binding.datatypes.anyType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 467, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cellGeometry'), CellGeometryType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 478, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'toneGradation'), pyxb.binding.datatypes.integer, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 489, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'scaleFactor'), NonEmptyStringType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 501, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'offset'), NonEmptyStringType, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 515, 8)))

SpatialRasterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'imageDescription'), CTD_ANON_74, scope=SpatialRasterType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 529, 8)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 109, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 133, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 489, 8))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 501, 8))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 515, 8))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 529, 8))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'physical')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 97, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'constraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 109, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'spatialReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 121, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'georeferenceInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 133, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'horizontalAccuracy')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 371, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'verticalAccuracy')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 384, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'cellSizeXDirection')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 397, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'cellSizeYDirection')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 408, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfBands')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 419, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'rasterOrigin')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 430, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'rows')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 443, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'columns')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 455, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'verticals')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 467, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'cellGeometry')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 478, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'toneGradation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 489, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'scaleFactor')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 501, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'offset')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 515, 8))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'imageDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialRaster.xsd', 529, 8))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialRasterType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SpatialRasterType._Automaton = _BuildAutomaton_144()




SpatialReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=SpatialReferenceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

SpatialReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'horizCoordSysName'), STD_ANON_24, scope=SpatialReferenceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 77, 10)))

SpatialReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'horizCoordSysDef'), horizCoordSysType, scope=SpatialReferenceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2145, 10)))

SpatialReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vertCoordSys'), CTD_ANON_76, scope=SpatialReferenceType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2156, 8)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2156, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialReferenceType._UseForTag(pyxb.namespace.ExpandedName(None, 'horizCoordSysName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 77, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialReferenceType._UseForTag(pyxb.namespace.ExpandedName(None, 'horizCoordSysDef')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2145, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SpatialReferenceType._UseForTag(pyxb.namespace.ExpandedName(None, 'vertCoordSys')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialReference.xsd', 2156, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialReferenceType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SpatialReferenceType._Automaton = _BuildAutomaton_145()




SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_91, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityName'), NonEmptyStringType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityDescription'), NonEmptyStringType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physical'), PhysicalType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeList'), AttributeListType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 97, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraint'), ConstraintType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 109, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geometry'), GeometryType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 121, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'geometricObjectCount'), NonEmptyStringType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 135, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'topologyLevel'), TopologyLevel, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 147, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'spatialReference'), SpatialReferenceType, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 159, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'horizontalAccuracy'), DataQuality_, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 168, 8)))

SpatialVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'verticalAccuracy'), DataQuality_, scope=SpatialVectorType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 179, 8)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 109, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 135, 8))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 147, 8))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 159, 8))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 168, 8))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 179, 8))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'physical')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 97, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'constraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 109, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'geometry')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 121, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'geometricObjectCount')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 135, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'topologyLevel')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 147, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'spatialReference')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 159, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'horizontalAccuracy')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 168, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'verticalAccuracy')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-spatialVector.xsd', 179, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpatialVectorType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SpatialVectorType._Automaton = _BuildAutomaton_146()




StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_91, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityName'), NonEmptyStringType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityDescription'), NonEmptyStringType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physical'), PhysicalType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeList'), AttributeListType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 114, 8)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraint'), ConstraintType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 126, 8)))

StoredProcedureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parameter'), ParameterType, scope=StoredProcedureType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 137, 8)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 126, 8))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 137, 8))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'physical')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 114, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'constraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 126, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'parameter')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-storedProcedure.xsd', 137, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StoredProcedureType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StoredProcedureType._Automaton = _BuildAutomaton_147()




ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alternateIdentifier'), CTD_ANON_91, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityName'), NonEmptyStringType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entityDescription'), NonEmptyStringType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physical'), PhysicalType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'coverage'), Coverage, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'methods'), MethodsType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalInfo'), TextType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'annotation'), SemanticAnnotation, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'references'), CTD_ANON_95, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'attributeList'), AttributeListType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 109, 8)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constraint'), ConstraintType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 121, 8)))

ViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'queryStatement'), NonEmptyStringType, scope=ViewType, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 132, 8)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 121, 8))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'alternateIdentifier')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 184, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'entityDescription')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'physical')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'coverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 227, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'methods')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 239, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalInfo')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 251, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'annotation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-entity.xsd', 264, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'attributeList')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 109, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'constraint')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 121, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'queryStatement')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-view.xsd', 132, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ViewType._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ViewType._Automaton = _BuildAutomaton_148()




def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(None, 'singleDateTime')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 133, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(None, 'rangeOfDates')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 145, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_149()




def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 879, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1037, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicSystem')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 879, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(None, 'generalTaxonomicCoverage')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1037, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(None, 'taxonomicClassification')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-coverage.xsd', 1050, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_150()




ConferenceProceedings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceName'), NonEmptyStringType, scope=ConferenceProceedings, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 583, 10)))

ConferenceProceedings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceDate'), NonEmptyStringType, scope=ConferenceProceedings, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 595, 10)))

ConferenceProceedings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'conferenceLocation'), Address, scope=ConferenceProceedings, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 606, 10)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 515, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 553, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 583, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 595, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 606, 10))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'publisher')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 386, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'publicationPlace')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 399, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 413, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'volume')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 424, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'numberOfVolumes')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 437, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'totalPages')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 448, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'totalFigures')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 460, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'totalTables')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 472, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 484, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'chapterNumber')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 515, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'editor')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 527, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'bookTitle')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 542, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'pageRange')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 553, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 583, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceDate')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 595, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ConferenceProceedings._UseForTag(pyxb.namespace.ExpandedName(None, 'conferenceLocation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-literature.xsd', 606, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConferenceProceedings._Automaton = _BuildAutomaton_151()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), RoleType, scope=CTD_ANON_104, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 121, 18)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'individualName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 92, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'organizationName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 126, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'positionName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 161, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'electronicMailAddress')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'onlineUrl')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'userId')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 121, 18))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_152()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'descriptorValue'), CTD_ANON_61, scope=CTD_ANON_105, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 235, 20)))

CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'citation'), CitationType, scope=CTD_ANON_105, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 295, 20)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 295, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(None, 'descriptorValue')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 235, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(None, 'citation')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-project.xsd', 295, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_153()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), RoleType, scope=CTD_ANON_106, documentation='', location=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 191, 16)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 187, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'individualName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 92, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'organizationName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 126, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'positionName')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 161, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 195, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 208, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'electronicMailAddress')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 241, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'onlineUrl')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 255, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'userId')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-party.xsd', 271, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'references')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 459, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/jumnhn/dev/pndb/pyeml/schemas/eml/eml-2.2.0/eml-resource.xsd', 191, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_154()

