# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _FpfhPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointFeaturePython
else:
    import _itkPointFeaturePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointFeaturePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointFeaturePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointSetPython
import itk.itkArrayPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython

def itkPointFeatureMD3MD3_Superclass_Superclass_New():
    return itkPointFeatureMD3MD3_Superclass_Superclass.New()

class itkPointFeatureMD3MD3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointFeatureMD3MD3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkPointFeaturePython.delete_itkPointFeatureMD3MD3_Superclass_Superclass
    cast = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkPointFeatureMD3MD3_Superclass_Superclass

        Create a new object of the class itkPointFeatureMD3MD3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointFeatureMD3MD3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointFeatureMD3MD3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointFeatureMD3MD3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointFeatureMD3MD3_Superclass_Superclass in _itkPointFeaturePython:
_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_swigregister(itkPointFeatureMD3MD3_Superclass_Superclass)
itkPointFeatureMD3MD3_Superclass_Superclass___New_orig__ = _itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass___New_orig__
itkPointFeatureMD3MD3_Superclass_Superclass_cast = _itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Superclass_cast


def itkPointFeatureMF3MF3_Superclass_Superclass_New():
    return itkPointFeatureMF3MF3_Superclass_Superclass.New()

class itkPointFeatureMF3MF3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointFeatureMF3MF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkPointFeaturePython.delete_itkPointFeatureMF3MF3_Superclass_Superclass
    cast = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkPointFeatureMF3MF3_Superclass_Superclass

        Create a new object of the class itkPointFeatureMF3MF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointFeatureMF3MF3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointFeatureMF3MF3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointFeatureMF3MF3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointFeatureMF3MF3_Superclass_Superclass in _itkPointFeaturePython:
_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_swigregister(itkPointFeatureMF3MF3_Superclass_Superclass)
itkPointFeatureMF3MF3_Superclass_Superclass___New_orig__ = _itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass___New_orig__
itkPointFeatureMF3MF3_Superclass_Superclass_cast = _itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Superclass_cast


def itkPointFeatureMD3MD3_Superclass_New():
    return itkPointFeatureMD3MD3_Superclass.New()

class itkPointFeatureMD3MD3_Superclass(itkPointFeatureMD3MD3_Superclass_Superclass):
    r"""Proxy of C++ itkPointFeatureMD3MD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_GetInput)
    __swig_destroy__ = _itkPointFeaturePython.delete_itkPointFeatureMD3MD3_Superclass
    cast = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkPointFeatureMD3MD3_Superclass

        Create a new object of the class itkPointFeatureMD3MD3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointFeatureMD3MD3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointFeatureMD3MD3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointFeatureMD3MD3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointFeatureMD3MD3_Superclass in _itkPointFeaturePython:
_itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_swigregister(itkPointFeatureMD3MD3_Superclass)
itkPointFeatureMD3MD3_Superclass___New_orig__ = _itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass___New_orig__
itkPointFeatureMD3MD3_Superclass_cast = _itkPointFeaturePython.itkPointFeatureMD3MD3_Superclass_cast


def itkPointFeatureMF3MF3_Superclass_New():
    return itkPointFeatureMF3MF3_Superclass.New()

class itkPointFeatureMF3MF3_Superclass(itkPointFeatureMF3MF3_Superclass_Superclass):
    r"""Proxy of C++ itkPointFeatureMF3MF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_GetInput)
    __swig_destroy__ = _itkPointFeaturePython.delete_itkPointFeatureMF3MF3_Superclass
    cast = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkPointFeatureMF3MF3_Superclass

        Create a new object of the class itkPointFeatureMF3MF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointFeatureMF3MF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointFeatureMF3MF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointFeatureMF3MF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointFeatureMF3MF3_Superclass in _itkPointFeaturePython:
_itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_swigregister(itkPointFeatureMF3MF3_Superclass)
itkPointFeatureMF3MF3_Superclass___New_orig__ = _itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass___New_orig__
itkPointFeatureMF3MF3_Superclass_cast = _itkPointFeaturePython.itkPointFeatureMF3MF3_Superclass_cast


def itkPointFeatureMD3MD3_New():
    return itkPointFeatureMD3MD3.New()

class itkPointFeatureMD3MD3(itkPointFeatureMD3MD3_Superclass):
    r"""Proxy of C++ itkPointFeatureMD3MD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMD3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_Clone)
    GetFpfhFeature = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_GetFpfhFeature)
    ComputeFPFHFeature = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_ComputeFPFHFeature)
    __swig_destroy__ = _itkPointFeaturePython.delete_itkPointFeatureMD3MD3
    cast = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMD3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkPointFeatureMD3MD3

        Create a new object of the class itkPointFeatureMD3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointFeatureMD3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointFeatureMD3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointFeatureMD3MD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointFeatureMD3MD3 in _itkPointFeaturePython:
_itkPointFeaturePython.itkPointFeatureMD3MD3_swigregister(itkPointFeatureMD3MD3)
itkPointFeatureMD3MD3___New_orig__ = _itkPointFeaturePython.itkPointFeatureMD3MD3___New_orig__
itkPointFeatureMD3MD3_cast = _itkPointFeaturePython.itkPointFeatureMD3MD3_cast


def itkPointFeatureMF3MF3_New():
    return itkPointFeatureMF3MF3.New()

class itkPointFeatureMF3MF3(itkPointFeatureMF3MF3_Superclass):
    r"""Proxy of C++ itkPointFeatureMF3MF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMF3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_Clone)
    GetFpfhFeature = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_GetFpfhFeature)
    ComputeFPFHFeature = _swig_new_instance_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_ComputeFPFHFeature)
    __swig_destroy__ = _itkPointFeaturePython.delete_itkPointFeatureMF3MF3
    cast = _swig_new_static_method(_itkPointFeaturePython.itkPointFeatureMF3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkPointFeatureMF3MF3

        Create a new object of the class itkPointFeatureMF3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointFeatureMF3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointFeatureMF3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointFeatureMF3MF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointFeatureMF3MF3 in _itkPointFeaturePython:
_itkPointFeaturePython.itkPointFeatureMF3MF3_swigregister(itkPointFeatureMF3MF3)
itkPointFeatureMF3MF3___New_orig__ = _itkPointFeaturePython.itkPointFeatureMF3MF3___New_orig__
itkPointFeatureMF3MF3_cast = _itkPointFeaturePython.itkPointFeatureMF3MF3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def mesh_source(*args,  output: itkt.PointSet=...,**kwargs):
    """Functional interface for MeshSource"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.MeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Fpfh.MeshSource
    mesh_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def point_feature(*args: itkt.Mesh,  output: itkt.PointSet=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for PointFeature"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.PointFeature.New(*args, **kwargs)
    return instance.__internal_call__()

def point_feature_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Fpfh.PointFeature
    point_feature.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    point_feature.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def mesh_to_mesh_filter(*args,  output: itkt.PointSet=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for MeshToMeshFilter"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.MeshToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Fpfh.MeshToMeshFilter
    mesh_to_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__




