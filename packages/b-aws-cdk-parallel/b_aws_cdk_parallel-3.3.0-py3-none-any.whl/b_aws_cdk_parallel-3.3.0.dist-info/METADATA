Metadata-Version: 2.1
Name: b-aws-cdk-parallel
Version: 3.3.0
Summary: Package that enables deployment of AWS CDK stacks in parallel.
Home-page: https://github.com/biomapas/B.AwsCdkParallel.git
Author: Laimonas Sutkus
Author-email: laimonas.sutkus@biomapas.com
License: Apache License 2.0
Keywords: AWS IAC CDK Parallel
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: b-continuous-subprocess (<1.0.0,>=0.3.2)

# B.AwsCdkParallel

A python based package that enables AWS CDK parallel stack deployments.

### Description

One of the biggest downsides of AWS CDK IaC tool is the sequential deployments.
If you have many stacks within your project - it can take hours and hours till
everything gets deployed. Wouldn't it be cool to parallelize them? According to 
AWS CDK tool maintainers - they are not even thinking right now to include such 
functionality. Hence, this project was built. This project allows you to run 
traditional `cdk deploy *` and `cdk destroy * -f`. But the main trick is that it 
can do it in parallel - massively increasing the speed of your deployments.

### Remarks

[Biomapas](https://biomapas.com) aims to modernise life-science 
industry by sharing its IT knowledge with other companies and 
the community. This is an open source library intended to be used 
by anyone. Improvements and pull requests are welcome.

Some techniques and inspirations were taken from this blog post:<br>
https://taimos.de/blog/deploying-your-cdk-app-to-different-stages-and-environments

General issue is being discussed on github:<br>
https://github.com/aws/aws-cdk/issues/1973

### Related technology

- Python 3
- AWS CDK
- AWS CloudFormation

### Assumptions

The project assumes the following:

- You have basic-good knowledge in python programming.
- You have basic-good knowledge in AWS.
- You have very good knowledge in AWS CDK.

### Useful sources

- Read more AWS CDK:<br>
https://github.com/aws/aws-cdk

- Read more about parallel AWS CDK deployments:<br>
https://taimos.de/blog/deploying-your-cdk-app-to-different-stages-and-environments

### Install

The project is built and uploaded to PyPi. Install it by using pip.

```
pip install b_aws_cdk_parallel
```

Or directly install it through source.

```
pip install .
```

### Usage & Examples

#### Programmatic usage

The quickest and easiest example:

```python
from b_aws_cdk_parallel.deployment_executor import DeploymentExecutor
from b_aws_cdk_parallel.deployment_type import DeploymentType

executor = DeploymentExecutor(type=DeploymentType.DEPLOY)
executor.run()

executor = DeploymentExecutor(type=DeploymentType.DESTROY)
executor.run()
```

The more advanced example to deploy/destroy:

```python
from b_aws_cdk_parallel.deployment_executor import DeploymentExecutor
from b_aws_cdk_parallel.deployment_type import DeploymentType
from b_aws_cdk_parallel.cdk_arguments import CdkArguments

executor = DeploymentExecutor(
    type=DeploymentType.DEPLOY, # Or DESTROY
    # You can specify a full path to your CDK app.
    path='/optional/path/to/cdk/app',
    # You can specify OS-level global parameters.
    env={
        'optional': 'os-level environment variables'
    },
    # You can specify AWS-CDK-specific arguments.
    cdk_arguments=CdkArguments(
        aws_cdk_app_stacks_to_deploy=['MyCoolStack'],
        aws_cdk_app_parameters=['Test1=Test1'],
        aws_cdk_app_context=['Context1=Context1']
    )
)

executor.run()
```

The library generates beautiful stack dependency outputs for easier debugging:

```
----- Stack dependency graph: -----
» Stack1: []
× Stack2: [Stack1]
× Stack3: [Stack1]
× Stack4: [Stack1, Stack2, Stack3]
× Stack5: [Stack1, Stack4]
» Stack8: []
× Stack7: [Stack1, Stack2, Stack3, Stack4, Stack5]
× Stack6: [Stack1, Stack7]
× Stack10: [Stack1, Stack6, Stack7]
× Stack9: [Stack1, Stack8]
» B-Aws-Cdk-Parallel-MainStack-3: []


[Stack2]  Doing stuff...
[Stack2]  Doing stuff...
[Stack4]  Doing stuff...
[Stack3]  Doing stuff...
```

#### CLI usage

The library also exposes CLI access. 

To get usage help, simply run:

```
acdk -h
```

To deploy infrastructure, run:

```
acdk deploy --path /project/app/
```

To destroy infrastructure, run:

```
acdk destroy --path /project/app/
```

### Testing

This project has integration tests based on pytest. To run tests, simply run:

```
pytest b_aws_cdk_parallel_test/integration/tests
```

### Contribution

Found a bug? Want to add or suggest a new feature?<br>
Contributions of any kind are gladly welcome. You may contact us 
directly, create a pull-request or an issue in github platform.
Lets modernize the world together.


# Release history

### 3.3.0
* Add `--max-parallel-deployments` CLI flag to allow control of number the of stack deployments
  that run at the same time. For larger projects this can significantly reduce the amount of 
  memory used when deploying a highly parallel stack.

### 3.2.0
* Remove `aws-cdk.core` dependency as it is probably not needed (if the project is developed
  with AWS CDK anyways it will have `core` module installed). By removing this dependency both
  `V1` and `V2` versions of AWS CDK should work.

### 3.1.0
* Fix dependencies.
* Remove unnecessary dependencies.

### 3.0.0
* cdk v2 compatibility.
* Use the stack displayName when calling the cdk deploy command.

### 2.3.0
* Improve parallel stack deployments by introducing `--exclusively` flag.
* Make dependencies graph beautiful.
* Output beautiful stack names (not aws cdk generated names).
* Fix --path CLI bug.

### 2.2.0
* Support "--parameters".
* Support "--context".
* Support specifying stacks.
* Add a lot more tests.

### 2.1.0
* Expose CLI command `acdk` to enable deployment/destruction through CLI.

### 2.0.0
* Major bug fixes for resolving stack dependencies. The algorithm for parallel stack destruction has fundamentally changed.
* Added integration tests to test against an actual AWS environment.
* More improvements will come for 2.1.0.

### 1.3.0
* Do not rebuild assets on destroy.

### 1.2.0
* Do not rebuild assets on deployment.

### 1.1.0
* Add ability to control maximum parallel deployments.

### 1.0.0
* Complete rework of the project. Build a dependency tree to determine what to deploy.

### 0.4.1
* Raise exception in case of a failed deployment.

### 0.4.0
* Cdk list command should also receive path and environment.

### 0.3.0
* Add ability to specify CDK path and environment variables for processes.

### 0.2.0
* Add ability to retry main deployment too.

### 0.1.0
* Refactor project to make it more debug-friendly.

### 0.0.2
* Upgrade dependencies.

### 0.0.1
* Initial build.


