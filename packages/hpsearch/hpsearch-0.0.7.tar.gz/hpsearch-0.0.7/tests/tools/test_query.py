# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_tests/tools/tst.query.ipynb (unless otherwise specified).

__all__ = ['test_do_query_and_show', 'test_do_query_and_show_change_metric', 'test_do_query_and_show_with_conditions',
           'test_do_query_and_show_sort_maximum', 'test_parse_arguments_and_query_change_metric',
           'test_parse_arguments_and_query_with_conditions']

# Cell
import pytest
import pandas as pd
import os
import joblib
from IPython.display import display
from dsblocks.utils.nbdev_utils import md

from hpsearch.tools.query import *
from hpsearch.examples.dummy_experiment_manager import generate_data
import hpsearch.config.hp_defaults as dflt

# Comes from query.ipynb, cell
def test_do_query_and_show ():
    path_results = 'do_query_and_show'
    em = generate_data (path_results)

    df=do_query_and_show (manager_path=em.manager_path)
    assert sorted(os.listdir (f'test_{path_results}/default/managers'))==[f'{dflt.name_logger}.log', 'fields', 'info', 'whole']
    assert sorted(os.listdir (f'test_{path_results}/default/managers/whole'))==['DummyExperimentManager-default.pk', 'last.pk']
    par = lambda parameter: (dflt.parameters_col, parameter, '')
    assert (df[par('epochs')] == [15,30,5,15,30,15,5,30,5]).all()
    assert (df[par('offset')] == [.6,.6,.6,.3,.3,.1,.3,.1,.1]).all()
    assert (df[(dflt.stats_col, 'validation_accuracy', 'mean')] == [0.97, 0.89, 0.81, 0.8 , 0.65, 0.55, 0.46, 0.44, 0.19]).all()

    em.remove_previous_experiments (parent=True)

# Comes from query.ipynb, cell
def test_do_query_and_show_change_metric ():
    em = generate_data ('do_query_and_show_change_metric')

    # if we want to use a single metric, we can simply indicate its name:
    do_query_and_show (metric='test_accuracy', manager_path=em.manager_path)

    # we can indicate more than one metric, using a list:
    do_query_and_show (metric=['test_accuracy', 'validation_accuracy'], manager_path=em.manager_path)

    em.remove_previous_experiments (parent=True)

# Comes from query.ipynb, cell
def test_do_query_and_show_with_conditions ():
    em = generate_data ('do_query_and_show_with_conditions')

    do_query_and_show (metric='validation_accuracy', op='max', pf={'epochs':15},
                       manager_path=em.manager_path)

    em.remove_previous_experiments (parent=True)

# Comes from query.ipynb, cell
def test_do_query_and_show_sort_maximum ():
    em = generate_data ('do_query_and_show_sort_maximum')

    do_query_and_show (metric='validation_accuracy', op='max', sort='max',
                       stats=['mean', 'min', 'max'], manager_path=em.manager_path);

    em.remove_previous_experiments (parent=True)

# Comes from query.ipynb, cell
def test_parse_arguments_and_query_change_metric ():
    em = generate_data ('parse_arguments_and_query_change_metric')

    # indicate more than one metric
    command = f'--metric test_accuracy validation_accuracy --manager_path {em.manager_path}'
    parse_arguments_and_query (command.split())

    # indicate a single metric
    command = f'--metric test_accuracy --manager_path {em.manager_path}'
    parse_arguments_and_query (command.split())

    em.remove_previous_experiments (parent=True)

# Comes from query.ipynb, cell
def test_parse_arguments_and_query_with_conditions ():
    em = generate_data ('parse_arguments_and_query_with_conditions')

    command = f'--metric validation_accuracy --op max -f dict(epochs=15) --manager_path {em.manager_path}'
    parse_arguments_and_query (command.split())

    em.remove_previous_experiments (parent=True)