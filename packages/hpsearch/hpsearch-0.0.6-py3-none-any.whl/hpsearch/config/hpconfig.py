# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/config/hpconfig.ipynb (unless otherwise specified).

__all__ = ['__author__', '__copyright__', '__license__', 'changeable_properties', 'get_experiment_manager',
           'get_default_parameters', 'get_path_experiments', 'get_path_alternative', 'get_path_experiment',
           'get_path_results', 'get_path_data', 'experiment_visualization', 'get_experiment_data', 'get_em_args',
           'modify_experiment_manager', 'add_em_args', 'register_manager']

# Cell
__author__ = "Jaume Amores"
__copyright__ = "Copyright 2021, Johnson Controls"
__license__ = "MIT"

# Cell
import os
import hpsearch
from .manager_factory import ManagerFactory
from . import manager_factory as mf
import hpsearch.config.hp_defaults as dflt

changeable_properties = {'folder', 'metric', 'manager_path', 'op', 'path_experiments', 'parent_path', 'backend'}

# Cell
def get_experiment_manager (manager_path=dflt.manager_path, **kwargs):
    manager_factory = ManagerFactory(manager_path=manager_path)
    experiment_manager = manager_factory.get_experiment_manager()
    if len(kwargs) > 0: modify_experiment_manager (experiment_manager, **kwargs)
    mf.experiment_manager = experiment_manager
    return mf.experiment_manager

# Cell
def get_default_parameters (parameters, manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.get_default_parameters (parameters)

# Cell
def get_path_experiments (manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.path_experiments

def get_path_alternative (path_results, manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.get_path_alternative (path_results)

def get_path_experiment (experiment_id, manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.get_path_experiment (experiment_id)

def get_path_results (experiment_id, run_number, manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.get_path_results (experiment_id, run_number)

def get_path_data (run_number, parameters={}, manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.get_path_data (run_number, parameters)

# Cell
def experiment_visualization (manager_path=dflt.manager_path, **kwargs):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.experiment_visualization (**kwargs)

# Cell
def get_experiment_data (experiments=None,
                         manager_path=dflt.manager_path):
    experiment_manager = get_experiment_manager (manager_path=manager_path)
    return experiment_manager.get_experiment_data (experiments=experiments)

# Cell
def get_em_args (pars):
    if not isinstance (pars, dict): pars = vars(pars)
    return {k:pars[k] for k in set(pars).intersection(changeable_properties) if pars[k] is not None}

# Cell
def modify_experiment_manager (experiment_manager, **kwargs):
    path_experiments_keys = {'path_experiments', 'parent_path', 'folder'}
    path_experiments_args = {k:kwargs[k] for k in path_experiments_keys.intersection(kwargs)}
    if len(path_experiments_args) > 0: experiment_manager.set_path_experiments (**path_experiments_args)
    for k in set(kwargs) - path_experiments_keys:
        if k == 'metric': setattr (experiment_manager, 'key_score', kwargs[k])
        else: setattr (experiment_manager, k, kwargs[k])

# Cell
def add_em_args (parser, but=None):
    if isinstance (but, str): but = [but]
    properties = changeable_properties if but is None else changeable_properties - set(but)
    for k in properties:
        parser.add_argument(f'--{k}', type=str, default=None)

# Cell
def register_manager (experiment_manager_to_register, manager_path=dflt.manager_path, **kwargs):
    manager_factory = ManagerFactory(manager_path=manager_path)
    manager_factory.register_manager (experiment_manager_to_register)