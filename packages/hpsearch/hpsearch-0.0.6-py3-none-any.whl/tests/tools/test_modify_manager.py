# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_tests/tools/tst.modify_manager.ipynb (unless otherwise specified).

__all__ = ['test_modify_manager', 'test_modify_manager_parse_and_run']

# Cell
import pytest
import pandas as pd
import os
import joblib
from pathlib import Path
from IPython.display import display
import cloudpickle

from dsblocks.utils.nbdev_utils import md
from dsblocks.utils.utils import remove_previous_results, check_last_part

from hpsearch.tools.modify_manager import *
from hpsearch.examples.example_experiment_manager import ExampleExperimentManager
from hpsearch.examples.dummy_experiment_manager import DummyExperimentManager
from hpsearch.config.hpconfig import get_experiment_manager

# Comes from modify_manager.ipynb, cell
def test_modify_manager ():
    # the following lists stored experiment managers, keeping the current experiment manager
    path_results = 'test_modify_manager'
    manager_path = f'{path_results}/manager'
    path_experiments = f'{path_results}/experiments'

    # **************************************************************
    # using ExampleExperimentManager as registered manager
    # **************************************************************
    em = ExampleExperimentManager(path_experiments=path_experiments)
    em.register_and_store_subclassed_manager ()
    modify_manager ()
    em = get_experiment_manager ()
    check_last_part (em.path_experiments, path_experiments)

    modify_manager (path_experiments='test_other_modify/experiments')
    em = get_experiment_manager ()
    check_last_part (em.path_experiments, 'test_other_modify/experiments')

    remove_previous_results (path_results)

# Comes from modify_manager.ipynb, cell
def test_modify_manager_parse_and_run ():
    # the following lists stored experiment managers, keeping the current experiment manager
    path_results = 'test_modify_manager_parse_and_run'
    manager_path = f'{path_results}/manager'
    path_experiments = f'{path_results}/experiments'

    # *********************************
    # write managers
    # *********************************
    em = DummyExperimentManager(path_experiments=path_experiments, manager_path=manager_path)
    em.register_and_store_subclassed_manager ()

    # *********************************
    # *********************************
    command = f'--path_experiments test_another_path_modify_manager_parse_and_run/myfolder'
    parse_arguments_and_run (command.split())
    em = get_experiment_manager ()
    check_last_part (em.path_experiments, 'test_another_path_modify_manager_parse_and_run/myfolder')

    remove_previous_results (path_results)