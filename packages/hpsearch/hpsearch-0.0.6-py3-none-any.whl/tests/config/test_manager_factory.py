# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_tests/config/tst.manager_factory.ipynb (unless otherwise specified).

__all__ = ['test_get_pickable_fields', 'test_get_pickable_fields_no_df_or_array', 'test_get_experiment_manager',
           'test_write_manager', 'test_pickle_object', 'test_does_not_pickle_unpickable', 'test_register_manager']

# Cell
import pytest
import pandas as pd
import numpy as np
import os
import joblib
from IPython.display import display
from dsblocks.utils.nbdev_utils import md
import pickle
import shutil

from hpsearch.config.manager_factory import *
from hpsearch.examples.example_experiment_manager import ExampleExperimentManager

# Comes from manager_factory.ipynb, cell
def test_get_pickable_fields ():
    em = ExampleExperimentManager ()
    d = get_pickable_fields (em)
    os.makedirs ('test_get_pickable', exist_ok=True)
    pickle.dump (d, open('test_get_pickable/test.pk','wb'))
    del em
    d2 = pickle.load (open('test_get_pickable/test.pk','rb'))

    n=0
    for k in sorted(d):
        n += (d[k]==d2[k])
    #print (f'{n}')
    #assert n==25, f'{n}'
    #assert n==21, f'{n}'
    shutil.rmtree ('test_get_pickable')

def test_get_pickable_fields_no_df_or_array ():
    em = ExampleExperimentManager ()
    em.df = pd.DataFrame ({'a':[1,2,3],'b':[4,5,6]})
    em.vector = np.array ([1,2,3])
    d = get_pickable_fields (em)
    assert 'df' not in d and 'vector' not in d

# Comes from manager_factory.ipynb, cell
def test_get_experiment_manager ():
    factory = ManagerFactory ()
    factory.delete_and_reset_all()
    em = factory.get_experiment_manager()
    assert em.__class__.__name__ == 'ExperimentManager'

# Comes from manager_factory.ipynb, cell
def _write_manager (import_manager):
    factory = ManagerFactory (import_manager=import_manager)
    factory.delete_and_reset_all()
    # we check that the file does not exist before writting it
    assert not factory.manager_path.exists()
    em = factory.get_experiment_manager()
    assert em.__class__.__name__ == 'ExperimentManager'

    # we write new module and check that the file exists afterwards
    em = ExampleExperimentManager()
    factory.register_manager (em)
    factory.write_manager (em)
    assert os.path.exists(factory.manager_path)

    # TODO: error in pytest
    em2 = factory.get_experiment_manager()
    assert em.__class__.__name__ == em2.__class__.__name__
    assert em.get_default_parameters({}) == em2.get_default_parameters({})

    # After writting the subclass, the method `get_experiment_manager`
    # returns an instance of this subclass. This allows command-line
    # scripts to use functions of the subclass indicated by other modules.
    em.register_and_store_subclassed_manager()
    em2 = factory.get_experiment_manager()
    assert em2.__class__.__name__ == em.__class__.__name__

def test_write_manager ():
    _write_manager (import_manager=True)
    _write_manager (import_manager=False)

# Comes from manager_factory.ipynb, cell
def test_pickle_object ():
    from hpsearch.examples.complex_dummy_experiment_manager import ComplexDummyExperimentManager
    em = ComplexDummyExperimentManager (path_experiments='test_my_new_path/other_folder')
    em.my_new_field = [2, 1, 3]
    em.greeting_message = 'good morning!'

    #from hpsearch.config.manager_factory import ManagerFactory
    factory = ManagerFactory (verbose=2)
    factory.delete_and_reset_all()
    factory.register_manager (em)
    factory.write_manager (em)
    assert sorted(os.listdir (factory.manager_path))==['fields', 'info', 'whole']
    assert sorted(os.listdir (factory.manager_path / 'fields'))==[
        'ComplexDummyExperimentManager-other_folder.pk', 'last.pk']
    assert sorted(os.listdir (factory.manager_path / 'info'))==[
        'ComplexDummyExperimentManager-other_folder.pk', 'last.pk']
    assert sorted(os.listdir (factory.manager_path / 'whole'))==[
        'ComplexDummyExperimentManager-other_folder.pk', 'last.pk']

    del em
    em = factory.get_experiment_manager ()
    assert em.my_new_field == [2, 1, 3]
    assert em.greeting_message == 'good morning!'

    global experiment_manager
    experiment_manager=None
    #del experiment_manager
    em = factory.get_experiment_manager()

    #assert em.path_experiments=='test_my_new_path/other_folder'
    assert em.folder=='other_folder'
    assert em.my_new_field == [2, 1, 3]
    assert em.greeting_message == 'good morning!'

#exports tests.config.test_manager_factory
def test_does_not_pickle_unpickable ():
    global em
    from hpsearch.examples.complex_dummy_experiment_manager import DummyManagerAvoidSaving

    em = DummyManagerAvoidSaving (path_experiments='test_my_new_path/other_folder')

    factory = ManagerFactory (verbose=2)
    factory.delete_and_reset_all()
    factory.register_manager (em)
    factory.write_manager (em)
    assert sorted(os.listdir (factory.manager_path / 'fields'))==[
        'DummyManagerAvoidSaving-other_folder.pk', 'last.pk']
    assert em.my_new_field == [2, 1, 3]
    assert em.greeting_message == 'good morning!'

    del em
    em = factory.get_experiment_manager ()
    assert em.my_new_field == [2, 1, 3]
    assert em.greeting_message == 'good morning!'

    do_import=False
    try:
        if __name__ == 'tests.config.test_manager_factory':
            do_import=True
    except Exception as e:
        print (f'Exception {e}')
        do_import=False

    global experiment_manager
    if do_import:
        import hpsearch.config.manager_factory as mf
        mf.experiment_manager = None
    else:
        experiment_manager=None
    del em
    em = factory.get_experiment_manager()

    #assert em.path_experiments=='test_my_new_path/other_folder'
    assert em.folder=='other_folder'
    assert em.my_new_field is None
    assert em.greeting_message is None

# Comes from manager_factory.ipynb, cell
def test_register_manager ():
    from hpsearch.config.manager_factory import ManagerFactory
    factory = ManagerFactory (import_manager=True)
    factory.delete_and_reset_all()

    from hpsearch.experiment_manager import ExperimentManager
    em = ExperimentManager()
    factory.register_manager(em)
    em2 = factory.get_experiment_manager()
    assert em2.__class__.__name__ == 'ExperimentManager'

    em = ExampleExperimentManager()
    factory.register_manager(em)
    em2 = factory.get_experiment_manager()
    assert em2.__class__.__name__ == 'ExampleExperimentManager'

    # We check that a module registered in one module is used in another one.
    del ManagerFactory
    from hpsearch.config.manager_factory import ManagerFactory

    factory = ManagerFactory()
    em = factory.get_experiment_manager()
    assert em.__class__.__name__ == 'ExampleExperimentManager'

    defaults=em.get_default_parameters({})

    # We check that the defaults are removed properly by using remove_defaults
    from hpsearch.utils.experiment_utils import remove_defaults

    removed=remove_defaults(defaults)
    assert removed=={}

    removed=remove_defaults({'my_first':50, 'my_second':10, 'my_third':30})
    assert removed=={'my_first': 50, 'my_third': 30}

    # We check that no defaults are removed if the base class ExperimentManager
    # is registered
    em3 = ExperimentManager(allow_base_class=True)
    factory.register_manager(em3)
    parameters = {'my_first':50, 'my_second':10, 'my_third':30}
    parameters_copy = parameters.copy()
    removed=remove_defaults(parameters_copy)
    assert removed==parameters