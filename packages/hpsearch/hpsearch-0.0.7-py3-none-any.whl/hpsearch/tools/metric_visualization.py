# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/tools/metric_visualization.ipynb (unless otherwise specified).

__all__ = ['__author__', '__copyright__', '__license__', 'metric_visualization', 'parse_args',
           'parse_arguments_and_visualize', 'main']

# Cell
__author__ = "Jaume Amores"
__copyright__ = "Copyright 2021, Johnson Controls"
__license__ = "MIT"

# Cell
import warnings
warnings.filterwarnings('ignore')

import argparse
import sys
sys.path.append('.')
sys.path.append('src')
import pandas as pd

import hpsearch.visualization.experiment_visualization as ev
from ..config.hpconfig import (get_experiment_manager, get_path_experiments, get_em_args,
                                      add_em_args)
import hpsearch.config.hp_defaults as dflt
from .utils import include_best_and_last_experiment, set_metric

# Cell
def metric_visualization (experiments=[-1,-2], run_number=0, parameters=None,
                          name_file='model_history.pk', visualization_options={},
                          metric=None, **kwargs):
    em_args = get_em_args (kwargs)
    em = get_experiment_manager (**em_args)
    kwargs = {k: kwargs[k] for k in kwargs if k not in em_args}

    folder, op, backend, manager_path = em.folder, em.op, em.backend, em.manager_path
    metric = set_metric (em, metric)

    # metrics
    metrics = metric
    if not isinstance (experiments, list): experiments = [experiments]
    if isinstance (run_number, range): run_number = list(run_number)
    if not isinstance (run_number, list): run_number = [run_number]

    experiments = include_best_and_last_experiment (metrics, experiments=experiments,
                                                    run_number=run_number[0], op=op,
                                                    manager_path=manager_path)

    visualization_options = visualization_options.copy()
    visualization_options.update(kwargs)
    if 'visualization' in visualization_options.keys():
        visualization = visualization_options.pop('visualization')
    else:
        visualization = 'history'

    ev.visualize_experiments(visualization=visualization,
                             experiments=experiments, run_number=run_number,
                             metrics=metrics, metric=metrics[0], parameters=parameters,
                             name_file=name_file, **visualization_options, backend=backend)

# Cell
def parse_args(args):
    parser = argparse.ArgumentParser(description='show metrics about experiments')
    # Datasets
    parser.add_argument('-e', nargs='+', default=[-1, -2], type=int,
                        help="experiments")
    parser.add_argument('-m', '--metric', nargs='+', type=str, default=None, help="metrics")
    parser.add_argument('-l','--labels',nargs='+', default=None, type=str)
    parser.add_argument('--run', default=0, type=int)
    parser.add_argument('-f', '--file', default='model_history.pk', type=str)
    parser.add_argument('-v', '--visualization', default='{}', type=str)
    add_em_args (parser, but='metric')

    pars = parser.parse_args(args)

    pars.visualization = eval(pars.visualization)

    return pars

def parse_arguments_and_visualize (args):
    pars = parse_args(args)
    metric = pars.metric
    del pars.metric
    metric_visualization (pars.e, metric=metric, run_number=pars.run, parameters=pars.labels,
                          name_file=pars.file, visualization_options=pars.visualization,
                          **get_em_args (pars))

def main():
    parse_arguments_and_visualize (sys.argv[1:])