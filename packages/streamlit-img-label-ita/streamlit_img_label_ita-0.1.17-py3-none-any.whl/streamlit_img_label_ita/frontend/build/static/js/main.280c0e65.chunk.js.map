{"version":3,"sources":["StreamlitImgLabel.tsx","index.tsx"],"names":["withStreamlitConnection","props","dataUri","_useState","useState","_useState2","Object","slicedToArray","setMode","_useState3","_useState4","labels","setLabels","_useState5","fabric","Canvas","_useState6","canvas","setCanvas","_props$args","args","canvasWidth","canvasHeight","imageData","_useState7","_useState8","newBBoxIndex","setNewBBoxIndex","invisCanvas","document","createElement","ctx","getContext","width","height","idata","createImageData","data","set","putImageData","toDataURL","useEffect","_props$args2","rects","boxColor","canvasTmp","enableRetinaScaling","backgroundImage","forEach","rect","top","left","add","Rect","fill","objectCaching","stroke","strokeWidth","strokeUniform","hasRotatingPoint","map","label","Streamlit","setFrameHeight","clearHandler","getObjects","remove","sendCoordinates","returnLabels","i","objectSpread","getBoundingRect","setComponentValue","on","renderAll","off","onSelectMode","mode","body","classList","window","matchMedia","addEventListener","e","matches","removeEventListener","react_default","a","Fragment","id","className","onClick","box","concat","toConsumableArray","selectObject","getActiveObject","selectIndex","indexOf","filter","_props$args3","ReactDOM","render","StrictMode","src_StreamlitImgLabel","getElementById"],"mappings":"yQAsPeA,cA7NW,SAACC,GAA0B,IAiB7CC,EAjB6CC,EACzBC,mBAAiB,SAAQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAApCK,GAAFH,EAAA,GAASA,EAAA,IAAAI,EACQL,mBAAmB,IAAGM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA3CE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAAAG,EACIT,mBAAS,IAAIU,SAAOC,OAAO,KAAIC,EAAAV,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAApDI,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAAAG,EACqClB,EAAMmB,KAA3DC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aAAcC,EAASJ,EAATI,UAASC,EACJpB,mBAAiB,GAAEqB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,GAApDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAKhCG,EAAcC,SAASC,cAAc,UACrCC,EAAMH,EAAYI,WAAW,MAOjC,GALAJ,EAAYK,MAAQZ,EACpBO,EAAYM,OAASZ,EAIjBS,EAAK,CACL,IAAII,EAAQJ,EAAIK,gBAAgBf,EAAaC,GAG7Ca,EAAME,KAAKC,IAAIf,GAGfQ,EAAIQ,aAAaJ,EAAO,EAAG,GAC3BjC,EAAU0B,EAAYY,iBAEtBtC,EAAU,GAIduC,oBAAU,WAAM,IAAAC,EAC4BzC,EAAMmB,KAAtCuB,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SACTC,EAAY,IAAI/B,SAAOC,OAAO,IAAK,CACrC+B,qBAAqB,EACrBC,gBAAiB7C,IAGrByC,EAAMK,QAAQ,SAACC,GAAS,IACZC,EAA6BD,EAA7BC,IAAKC,EAAwBF,EAAxBE,KAAMlB,EAAkBgB,EAAlBhB,MAAOC,EAAWe,EAAXf,OAC1BW,EAAUO,IACN,IAAItC,SAAOuC,KAAK,CACZF,OACAD,MACAI,KAAM,GACNrB,QACAC,SACAqB,eAAe,EACfC,OAAQZ,EACRa,YAAa,EACbC,eAAe,EACfC,kBAAkB,OAI9B/C,EAAU+B,EAAMiB,IAAI,SAACX,GAAI,OAAKA,EAAKY,SAEnC3C,EAAU2B,GACViB,IAAUC,kBAEX,CAACzC,EAAcD,EAAanB,IAG/B,IA0DM8D,EAAe,WACjBrC,EAAgB,GAChBV,EAAOgD,aAAajB,QAAQ,SAACC,GAAI,OAAKhC,EAAOiD,OAAOjB,KACpDkB,EAAgB,KAIdA,EAAkB,SAACC,GACrBxD,EAAUwD,GACV,IAAMzB,EAAQ1B,EAAOgD,aAAaL,IAAI,SAACX,EAAMoB,GAAC,OAAA/D,OAAAgE,EAAA,EAAAhE,CAAA,GACvC2C,EAAKsB,kBAAiB,CACzBV,MAAOO,EAAaC,OAExBP,IAAUU,kBAAkB,CAAE7B,WAIlCF,oBAAU,WACN,GAAKxB,EASL,OADAA,EAAOwD,GAAG,kBALU,WAChBxD,EAAOyD,YACPP,EAAgBxD,KAIb,WACHM,EAAO0D,IAAI,sBAKnB,IAAMC,EAAe,SAACC,GAClBrE,EAAQqE,GACK,SAATA,EAAiBhD,SAASiD,KAAKC,UAAU3B,IAAI,aAC5CvB,SAASiD,KAAKC,UAAUb,OAAO,cA0BxC,OAvBAzB,oBAAU,WAgBN,OAdAuC,OACKC,WAAW,gCACXC,iBAAiB,SAAU,SAACC,GAAC,OAC1BP,EAAaO,EAAEC,QAAU,OAAS,WAI1CR,EACII,OAAOC,WAAW,gCAAgCG,QAC5C,OACA,SAIH,WACHJ,OACKC,WAAW,gCACXI,oBAAoB,SAAU,gBAExC,IAGCC,EAAAC,EAAAzD,cAAAwD,EAAAC,EAAAC,SAAA,KACIF,EAAAC,EAAAzD,cAAA,UACI2D,GAAG,IACHxD,MAAOZ,EACPa,OAAQZ,IAEZgE,EAAAC,EAAAzD,cAAA,OAAK4D,UAAU,IACXJ,EAAAC,EAAAzD,cAAA,UACI4D,UAAU,GACVC,QA1HM,WAClB,IAAMC,EATgB,CACtBzC,KAAoB,IAAd9B,EAAoC,EAAfK,EAC3BwB,IAAoB,IAAf5B,EAAqC,EAAfI,EAC3BO,MAAqB,GAAdZ,EACPa,OAAuB,GAAfZ,GAMRK,EAAgBD,EAAe,GAC/BT,EAAOmC,IACH,IAAItC,SAAOuC,KAAK/C,OAAAgE,EAAA,EAAAhE,CAAA,GACTsF,EAAG,CACNtC,KAAM,GACNC,eAAe,EACfC,OAAQvD,EAAMmB,KAAKwB,SACnBa,YAAa,EACbC,eAAe,EACfC,kBAAkB,MAG1BQ,EAAe,GAAA0B,OAAAvF,OAAAwF,EAAA,EAAAxF,CAAKK,GAAM,CAAE,QA4GO,wBAI3B2E,EAAAC,EAAAzD,cAAA,UACI4D,UAAU,GACVC,QA9GS,WACrB,IAAMI,EAAe9E,EAAO+E,kBACtBC,EAAchF,EAAOgD,aAAaiC,QAAQH,GAChD9E,EAAOiD,OAAO6B,GACd5B,EAAgBxD,EAAOwF,OAAO,SAACtC,EAAOQ,GAAC,OAAKA,IAAM4B,OA0GZ,mCAI9BX,EAAAC,EAAAzD,cAAA,UACI4D,UAAU,GACVC,QA5GK,WACjB3B,IAAc,IAAAoC,EAC0BnG,EAAMmB,KAAtCuB,EAAKyD,EAALzD,MAAOC,EAAQwD,EAARxD,SACfD,EAAMK,QAAQ,SAACC,GAAS,IACZC,EAA6BD,EAA7BC,IAAKC,EAAwBF,EAAxBE,KAAMlB,EAAkBgB,EAAlBhB,MAAOC,EAAWe,EAAXf,OAC1BjB,EAAOmC,IACH,IAAItC,SAAOuC,KAAK,CACZF,OACAD,MACAI,KAAM,GACNrB,QACAC,SACAqB,eAAe,EACfC,OAAQZ,EACRa,YAAa,EACbC,eAAe,EACfC,kBAAkB,OAI9BQ,EAAgBxD,KAwFkB,SAI1B2E,EAAAC,EAAAzD,cAAA,UACI4D,UAAU,GACVC,QAAS3B,GAAa,sBCzO1CqC,IAASC,OACPhB,EAAAC,EAAAzD,cAACwD,EAAAC,EAAMgB,WAAU,KACfjB,EAAAC,EAAAzD,cAAC0E,EAAiB,OAEpB3E,SAAS4E,eAAe","file":"static/js/main.280c0e65.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n    ComponentProps,\n    Streamlit,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { fabric } from \"fabric\"\nimport * as styles from \"StreamlitImgLabel.module.css\"\n\ninterface RectProps {\n    top: number\n    left: number\n    width: number\n    height: number\n    label: string\n}\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    rects: RectProps[]\n    boxColor: string\n    imageData: Uint8ClampedArray\n}\n\nconst StreamlitImgLabel = (props: ComponentProps) => {\n    const [mode, setMode] = useState<string>(\"light\")\n    const [labels, setLabels] = useState<string[]>([])\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\n    const [newBBoxIndex, setNewBBoxIndex] = useState<number>(0)\n\n    /*\n     * Translate Python image data to a JavaScript Image\n     */\n    var invisCanvas = document.createElement(\"canvas\")\n    var ctx = invisCanvas.getContext(\"2d\")\n\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n\n    // create imageData object\n    let dataUri: any\n    if (ctx) {\n        var idata = ctx.createImageData(canvasWidth, canvasHeight)\n\n        // set our buffer as source\n        idata.data.set(imageData)\n\n        // update canvas with new data\n        ctx.putImageData(idata, 0, 0)\n        dataUri = invisCanvas.toDataURL()\n    } else {\n        dataUri = \"\"\n    }\n\n    // Initialize canvas on mount and add a rectangle\n    useEffect(() => {\n        const { rects, boxColor }: PythonArgs = props.args\n        const canvasTmp = new fabric.Canvas(\"c\", {\n            enableRetinaScaling: false,\n            backgroundImage: dataUri\n        })\n\n        rects.forEach((rect) => {\n            const { top, left, width, height } = rect\n            canvasTmp.add(\n                new fabric.Rect({\n                    left,\n                    top,\n                    fill: \"\",\n                    width,\n                    height,\n                    objectCaching: true,\n                    stroke: boxColor,\n                    strokeWidth: 1,\n                    strokeUniform: true,\n                    hasRotatingPoint: false,\n                })\n            )\n        })\n        setLabels(rects.map((rect) => rect.label))\n\n        setCanvas(canvasTmp)\n        Streamlit.setFrameHeight()\n        // eslint-disable-next-line\n    }, [canvasHeight, canvasWidth, dataUri])\n\n    // Create defualt bounding box\n    const defaultBox = () => ({\n        left: canvasWidth * 0.15 + newBBoxIndex * 3,\n        top: canvasHeight * 0.15 + newBBoxIndex * 3,\n        width: canvasWidth * 0.2,\n        height: canvasHeight * 0.2,\n    })\n\n    // Add new bounding box to be image\n    const addBoxHandler = () => {\n        const box = defaultBox()\n        setNewBBoxIndex(newBBoxIndex + 1)\n        canvas.add(\n            new fabric.Rect({\n                ...box,\n                fill: \"\",\n                objectCaching: true,\n                stroke: props.args.boxColor,\n                strokeWidth: 1,\n                strokeUniform: true,\n                hasRotatingPoint: false,\n            })\n        )\n        sendCoordinates([...labels, \"\"])\n    }\n\n    // Remove the selected bounding box\n    const removeBoxHandler = () => {\n        const selectObject = canvas.getActiveObject()\n        const selectIndex = canvas.getObjects().indexOf(selectObject)\n        canvas.remove(selectObject)\n        sendCoordinates(labels.filter((label, i) => i !== selectIndex))\n    }\n\n    // Reset the bounding boxes\n    const resetHandler = () => {\n        clearHandler()\n        const { rects, boxColor }: PythonArgs = props.args\n        rects.forEach((rect) => {\n            const { top, left, width, height } = rect\n            canvas.add(\n                new fabric.Rect({\n                    left,\n                    top,\n                    fill: \"\",\n                    width,\n                    height,\n                    objectCaching: true,\n                    stroke: boxColor,\n                    strokeWidth: 1,\n                    strokeUniform: true,\n                    hasRotatingPoint: false,\n                })\n            )\n        })\n        sendCoordinates(labels)\n    }\n\n    // Remove all the bounding boxes\n    const clearHandler = () => {\n        setNewBBoxIndex(0)\n        canvas.getObjects().forEach((rect) => canvas.remove(rect))\n        sendCoordinates([])\n    }\n\n    // Send the coordinates of the rectangle back to streamlit.\n    const sendCoordinates = (returnLabels: string[]) => {\n        setLabels(returnLabels)\n        const rects = canvas.getObjects().map((rect, i) => ({\n            ...rect.getBoundingRect(),\n            label: returnLabels[i],\n        }))\n        Streamlit.setComponentValue({ rects })\n    }\n\n    // Update the bounding boxes when modified\n    useEffect(() => {\n        if (!canvas) {\n            return\n        }\n        const handleEvent = () => {\n            canvas.renderAll()\n            sendCoordinates(labels)\n        }\n\n        canvas.on(\"object:modified\", handleEvent)\n        return () => {\n            canvas.off(\"object:modified\")\n        }\n    })\n\n    // Adjust the theme according to the system\n    const onSelectMode = (mode: string) => {\n        setMode(mode)\n        if (mode === \"dark\") document.body.classList.add(\"dark-mode\")\n        else document.body.classList.remove(\"dark-mode\")\n    }\n\n    useEffect(() => {\n        // Add listener to update styles\n        window\n            .matchMedia(\"(prefers-color-scheme: dark)\")\n            .addEventListener(\"change\", (e) =>\n                onSelectMode(e.matches ? \"dark\" : \"light\")\n            )\n\n        // Setup dark/light mode for the first time\n        onSelectMode(\n            window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n                ? \"dark\"\n                : \"light\"\n        )\n\n        // Remove listener\n        return () => {\n            window\n                .matchMedia(\"(prefers-color-scheme: dark)\")\n                .removeEventListener(\"change\", () => {})\n        }\n    }, [])\n\n    return (\n        <>\n            <canvas\n                id=\"c\"\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n            <div className=\"\">\n                <button\n                    className=\"\"\n                    onClick={addBoxHandler}\n                >\n                    Aggiungi Annotazione\n                </button>\n                <button\n                    className=\"\"\n                    onClick={removeBoxHandler}\n                >\n                    Rimuovi annotazione selezionata\n                </button>\n                <button\n                    className=\"\"\n                    onClick={resetHandler}\n                >\n                    Reset\n                </button>\n                <button\n                    className=\"\"\n                    onClick={clearHandler}\n                >\n                    Cancella tutto\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default withStreamlitConnection(StreamlitImgLabel)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitImgLabel from \"./StreamlitImgLabel\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitImgLabel />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}