{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","label","createTextNode","imagesDiv","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","captions","large","childNodes","length","image","i","container","box","img","src","desc","onclick","setComponentValue","setFrameHeight","setComponentReady"],"mappings":"iKAAA,kBAGMA,EAAWC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UAC5DC,EAAQL,EAASG,YAAYF,SAASK,eAAe,KACrDC,EAAYN,SAASC,KAAKC,YAAYF,SAASG,cAAc,QACnEG,EAAUC,UAAUC,IAAI,gBAiFxBC,IAAUC,OAAOC,iBAAiBF,IAAUG,cA1E5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAE5CD,EAAKE,QACPjB,EAASkB,MAAMC,KAAOJ,EAAKE,MAAME,KACjCnB,EAASkB,MAAME,MAAQL,EAAKE,MAAMI,UACV,SAApBN,EAAKE,MAAMK,KACbrB,SAASC,KAAKqB,iBAAiB,kBAAkBC,SAAQ,SAACC,GACxDA,EAAGjB,UAAUC,IAAI,WAGnBR,SAASC,KAAKqB,iBAAiB,kBAAkBC,SAAQ,SAACC,GACxDA,EAAGjB,UAAUkB,OAAO,YAO1BrB,EAAMsB,YAAcZ,EAAKa,KAAL,MACpB,IAAIC,EAASd,EAAKa,KAAL,OACTE,EAAWf,EAAKa,KAAL,SACXG,EAAQhB,EAAKa,KAAL,MAIwB,IAAhCrB,EAAUyB,WAAWC,QACvBJ,EAAOL,SAAQ,SAACU,EAAeC,GAC7B,IAAIC,EAAY7B,EAAUJ,YAAYF,SAASG,cAAc,QAEzDiC,EAAMD,EAAUjC,YAAYF,SAASG,cAAc,QACvDiC,EAAI7B,UAAUC,IAAI,OAGlB,IAAI6B,EAAMD,EAAIlC,YAAYF,SAASG,cAAc,QAIjD,GAHAkC,EAAI9B,UAAUC,IAAI,SAClB6B,EAAIC,IAAML,EAENJ,EAAU,CACZ,IAAIU,EAAOJ,EAAUjC,YAAYF,SAASG,cAAc,QACxDoC,EAAKhC,UAAUC,IAAI,WACnB+B,EAAKb,YAAcG,EAASK,GAEhB,IAAVJ,IACFxB,EAAUC,UAAUkB,OAAO,gBAC3BnB,EAAUC,UAAUC,IAAI,iBAIhB,IAAN0B,IACFE,EAAI7B,UAAUC,IAAI,YAClB6B,EAAI9B,UAAUC,IAAI,aAGpB6B,EAAIG,QAAU,WACZlC,EAAUgB,iBAAiB,aAAaC,SAAQ,SAACC,GAC/CA,EAAGjB,UAAUkB,OAAO,eAEtBhB,IAAUgC,kBAAkBP,GAC5BE,EAAI7B,UAAUC,IAAI,YAClB6B,EAAI9B,UAAUC,IAAI,gBASxBC,IAAUiC,oBAQZjC,IAAUkC,oBAIVlC,IAAUiC,mB","file":"static/js/main.3ccdfe00.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\r\n// import LazyLoad from \"react-lazy-load\"\r\n\r\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\r\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\r\nconst imagesDiv = document.body.appendChild(document.createElement(\"div\"))\r\nimagesDiv.classList.add(\"image-picker\")\r\n\r\n/**\r\n * The component's render function. This will be called immediately after\r\n * the component is initially loaded, and then again every time the\r\n * component gets new data from Python.\r\n */\r\nfunction onRender(event: Event): void {\r\n  // Get the RenderData from the event\r\n  const data = (event as CustomEvent<RenderData>).detail\r\n\r\n  if (data.theme) {\r\n    labelDiv.style.font = data.theme.font\r\n    labelDiv.style.color = data.theme.textColor\r\n    if (data.theme.base === \"dark\") {\r\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\r\n        el.classList.add(\"dark\")\r\n      })\r\n    } else {\r\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\r\n        el.classList.remove(\"dark\")\r\n      })\r\n    }\r\n\r\n    // TODO: Gray out the component if it's disabled.\r\n  }\r\n\r\n  label.textContent = data.args[\"label\"]\r\n  let images = data.args[\"images\"]\r\n  let captions = data.args[\"captions\"]\r\n  let large = data.args[\"large\"]\r\n\r\n  // console.log(captions)\r\n\r\n  if (imagesDiv.childNodes.length === 0) {\r\n    images.forEach((image: string, i: number) => {\r\n      let container = imagesDiv.appendChild(document.createElement(\"div\"))\r\n\r\n      let box = container.appendChild(document.createElement(\"div\"))\r\n      box.classList.add(\"box\")\r\n      // let lazy = box.appendChild(document.createElement(\"LazyLoad\"))\r\n\r\n      let img = box.appendChild(document.createElement(\"img\"))\r\n      img.classList.add(\"image\")\r\n      img.src = image\r\n\r\n      if (captions) {\r\n        let desc = container.appendChild(document.createElement(\"div\"))\r\n        desc.classList.add(\"caption\")\r\n        desc.textContent = captions[i]\r\n      }\r\n      if (large === 1) {\r\n        imagesDiv.classList.remove(\"image-picker\")\r\n        imagesDiv.classList.add(\"large-picker\")\r\n      }\r\n\r\n      // TODO: Change this to use `default` instead of just 0.\r\n      if (i === 0) {\r\n        box.classList.add(\"selected\")\r\n        img.classList.add(\"selected\")\r\n      }\r\n\r\n      img.onclick = function () {\r\n        imagesDiv.querySelectorAll(\".selected\").forEach((el) => {\r\n          el.classList.remove(\"selected\")\r\n        })\r\n        Streamlit.setComponentValue(i)\r\n        box.classList.add(\"selected\")\r\n        img.classList.add(\"selected\")\r\n      }\r\n    })\r\n  }\r\n\r\n  // We tell Streamlit to update our frameHeight after each render event, in\r\n  // case it has changed. (This isn't strictly necessary for the example\r\n  // because our height stays fixed, but this is a low-cost function, so\r\n  // there's no harm in doing it redundantly.)\r\n  Streamlit.setFrameHeight()\r\n}\r\n\r\n// Attach our `onRender` handler to Streamlit's render event.\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\r\n\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady()\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight()\r\n"],"sourceRoot":""}