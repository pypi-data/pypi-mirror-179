# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 56.1.9-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FoldedStackNodeV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[FoldedStackNodeV1]',
        'interval_end': 'str',
        'interval_start': 'str',
        'name': 'str',
        'properties': 'dict(str, str)',
        'value': 'int'
    }

    attribute_map = {
        'children': 'children',
        'interval_end': 'intervalEnd',
        'interval_start': 'intervalStart',
        'name': 'name',
        'properties': 'properties',
        'value': 'value'
    }

    def __init__(self, children=None, interval_end=None, interval_start=None, name=None, properties=None, value=None):
        """
        FoldedStackNodeV1 - a model defined in Swagger
        """

        self._children = None
        self._interval_end = None
        self._interval_start = None
        self._name = None
        self._properties = None
        self._value = None

        if children is not None:
          self.children = children
        if interval_end is not None:
          self.interval_end = interval_end
        if interval_start is not None:
          self.interval_start = interval_start
        if name is not None:
          self.name = name
        if properties is not None:
          self.properties = properties
        if value is not None:
          self.value = value

    @property
    def children(self):
        """
        Gets the children of this FoldedStackNodeV1.
        The child activities that were spawned by this activity

        :return: The children of this FoldedStackNodeV1.
        :rtype: list[FoldedStackNodeV1]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this FoldedStackNodeV1.
        The child activities that were spawned by this activity

        :param children: The children of this FoldedStackNodeV1.
        :type: list[FoldedStackNodeV1]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")

        self._children = children

    @property
    def interval_end(self):
        """
        Gets the interval_end of this FoldedStackNodeV1.
        The end of the interval for which to fetch data

        :return: The interval_end of this FoldedStackNodeV1.
        :rtype: str
        """
        return self._interval_end

    @interval_end.setter
    def interval_end(self, interval_end):
        """
        Sets the interval_end of this FoldedStackNodeV1.
        The end of the interval for which to fetch data

        :param interval_end: The interval_end of this FoldedStackNodeV1.
        :type: str
        """

        self._interval_end = interval_end

    @property
    def interval_start(self):
        """
        Gets the interval_start of this FoldedStackNodeV1.
        The start of the interval for which to fetch data

        :return: The interval_start of this FoldedStackNodeV1.
        :rtype: str
        """
        return self._interval_start

    @interval_start.setter
    def interval_start(self, interval_start):
        """
        Sets the interval_start of this FoldedStackNodeV1.
        The start of the interval for which to fetch data

        :param interval_start: The interval_start of this FoldedStackNodeV1.
        :type: str
        """

        self._interval_start = interval_start

    @property
    def name(self):
        """
        Gets the name of this FoldedStackNodeV1.
        The category and name of the activity

        :return: The name of this FoldedStackNodeV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FoldedStackNodeV1.
        The category and name of the activity

        :param name: The name of this FoldedStackNodeV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """
        Gets the properties of this FoldedStackNodeV1.
        Properties that give additional context for this activity

        :return: The properties of this FoldedStackNodeV1.
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this FoldedStackNodeV1.
        Properties that give additional context for this activity

        :param properties: The properties of this FoldedStackNodeV1.
        :type: dict(str, str)
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def value(self):
        """
        Gets the value of this FoldedStackNodeV1.
        The number of samples in which this activity was observed

        :return: The value of this FoldedStackNodeV1.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this FoldedStackNodeV1.
        The number of samples in which this activity was observed

        :param value: The value of this FoldedStackNodeV1.
        :type: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FoldedStackNodeV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
