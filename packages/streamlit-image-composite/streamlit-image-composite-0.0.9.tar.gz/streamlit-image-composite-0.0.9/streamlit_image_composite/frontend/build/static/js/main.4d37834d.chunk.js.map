{"version":3,"sources":["ImageComposite.tsx","index.tsx"],"names":["ImageComposite","state","x","y","rotation","scaleX","scaleY","fg","bg","render","id","returnStats","Streamlit","setComponentValue","setupImages","fg_height","props","args","fg_width","bg_height","bg_width","imgFg","Image","imgBg","src","onload","drawImage","setFrameHeight","stage","Konva","Stage","container","width","height","layer","Layer","konvaImgBg","image","add","konvaImgFg","draggable","on","document","body","style","cursor","onTransform","tr","Transformer","nodes","transObj","setState","this","Math","max","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4d37834d.chunk.js","sourcesContent":["import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, {ReactNode} from \"react\"\nimport Konva from \"konva\";\n\ninterface State {\n    x: number\n    y: number\n    rotation: number\n    scaleX: number\n    scaleY: number\n    fg: string\n    bg: string\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass ImageComposite extends StreamlitComponentBase<State> {\n    public state = {x: 0, y: 0, rotation: 0, scaleX: 0, scaleY: 0, fg: '', bg: ''}\n\n    componentDidMount() {\n        let fg_height = this.props.args['fg_height']\n        let fg_width = this.props.args['fg_width']\n        let bg_height = this.props.args['bg_height']\n        let bg_width = this.props.args['bg_width']\n        let fg = this.props.args['fg']\n        let bg = this.props.args['bg']\n        let x = Math.max(0, bg_width / 2 - fg_width / 2)\n        let y = Math.max(0, bg_height / 2 - fg_height / 2)\n        this.setupImages(x, y)\n        this.setState({x: x, y: y, fg: fg, bg: bg})\n        this.returnStats(x, y)\n    }\n\n    componentDidUpdate() {\n        if (this.props.args['fg'] !== this.state.fg || this.props.args['bg'] !== this.state.bg) {\n            this.setState({fg: this.props.args['fg'], bg: this.props.args['bg']})\n            this.setupImages(this.state.x, this.state.y)\n        }\n    }\n\n    public render = (): ReactNode => {\n        // Arguments that are passed to the plugin in Python are accessible\n        // via `this.props.args`.\n\n        return (\n            <div id='container'/>\n        )\n    }\n\n    private returnStats = (x?: number, y?: number) => {\n        Streamlit.setComponentValue({\n            x: x || this.state.x,\n            y: y || this.state.y,\n            rotation: this.state.rotation,\n            scaleX: this.state.scaleX,\n            scaleY: this.state.scaleY\n        })\n    }\n\n    private setupImages = (x: number, y: number) => {\n        let fg_height = this.props.args['fg_height']\n        let fg_width = this.props.args['fg_width']\n        let bg_height = this.props.args['bg_height']\n        let bg_width = this.props.args['bg_width']\n        let fg = this.props.args['fg']\n        let bg = this.props.args['bg']\n\n        let imgFg = new Image(fg_width, fg_height)\n        let imgBg = new Image(bg_width, bg_height)\n        imgFg.src = \"data:image/png;base64,\" + fg\n        imgBg.src = \"data:image/png;base64,\" + bg\n        imgFg.onload = () => {\n            this.drawImage(imgFg, imgBg, x, y)\n        }\n        Streamlit.setFrameHeight(bg_height)\n    }\n\n    private drawImage = (imgFg: HTMLImageElement, imgBg: HTMLImageElement, x: number, y: number) => {\n        let stage = new Konva.Stage({\n            container: 'container',\n            width: imgBg.width,\n            height: imgBg.height,\n        })\n\n        let layer = new Konva.Layer()\n\n        let konvaImgBg = new Konva.Image({\n            image: imgBg,\n            x: 0,\n            y: 0,\n            width: imgBg.width,\n            height: imgBg.height,\n        })\n        layer.add(konvaImgBg)\n\n        let konvaImgFg = new Konva.Image({\n            image: imgFg,\n            x: x,\n            y: y,\n            width: imgFg.width,\n            height: imgFg.height,\n            draggable: true,\n        })\n\n        // add cursor styling\n        konvaImgFg.on('mouseover', () => {\n            document.body.style.cursor = 'pointer'\n        })\n        konvaImgFg.on('mouseout', () => {\n            document.body.style.cursor = 'default'\n        })\n        konvaImgFg.on('dragmove', () => {\n            this.onTransform(konvaImgFg)\n        });\n        konvaImgFg.on('transform', () => {\n            this.onTransform(konvaImgFg)\n        });\n        layer.add(konvaImgFg)\n\n        let tr = new Konva.Transformer()\n        layer.add(tr)\n        tr.nodes([konvaImgFg])\n\n        stage.add(layer)\n    }\n\n    private onTransform = (transObj: any) => {\n        this.setState({\n            x: transObj.x(),\n            y: transObj.y(),\n            rotation: transObj.rotation(),\n            scaleX: transObj.scaleX(),\n            scaleY: transObj.scaleY()\n        })\n        this.returnStats()\n    }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ImageComposite)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ImageComposite from \"./ImageComposite\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ImageComposite/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}